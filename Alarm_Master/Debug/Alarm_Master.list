
Alarm_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08004054  08004054  00005054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004288  08004288  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004290  08004290  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004290  08004290  00005290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004294  08004294  00005294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004298  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000006c  08004304  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08004304  0000637c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099a9  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de7  00000000  00000000  0000fa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00011830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b9  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166e4  00000000  00000000  00012a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de65  00000000  00000000  000290e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f23  00000000  00000000  00036f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bee6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e58  00000000  00000000  000beeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c1d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800403c 	.word	0x0800403c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800403c 	.word	0x0800403c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b0a5      	sub	sp, #148	@ 0x94
 80005a4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fadf 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f851 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f91d 	bl	80007ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b2:	f000 f8b7 	bl	8000724 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005b6:	f000 f8e3 	bl	8000780 <MX_SPI2_Init>
//  flash_write_multiple_word(0x08060000, (uint32_t *)data_in, 16);

  //READOUT
  {
	char data_out[64];
	flash_read_multiple_words(0x08060000, (uint32_t *)data_out, 16);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2210      	movs	r2, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4821      	ldr	r0, [pc, #132]	@ (8000648 <main+0xa8>)
 80005c2:	f002 f821 	bl	8002608 <flash_read_multiple_words>
	//PARSING TO VARIABLES
	state_machine_init(data_out);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fadd 	bl	8002b88 <state_machine_init>
  }
  lcd_init(hi2c1);
 80005ce:	4c1f      	ldr	r4, [pc, #124]	@ (800064c <main+0xac>)
 80005d0:	4668      	mov	r0, sp
 80005d2:	f104 0310 	add.w	r3, r4, #16
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	4619      	mov	r1, r3
 80005da:	f003 f8e3 	bl	80037a4 <memcpy>
 80005de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005e2:	f002 f9af 	bl	8002944 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char x = check_keyboard();
 80005e6:	f002 f8d5 	bl	8002794 <check_keyboard>
 80005ea:	4603      	mov	r3, r0
 80005ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  if(x){
 80005f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d020      	beq.n	800063a <main+0x9a>
		  if(x < 10) x += '0';
 80005f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	d805      	bhi.n	800060c <main+0x6c>
 8000600:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000604:	3330      	adds	r3, #48	@ 0x30
 8000606:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800060a:	e016      	b.n	800063a <main+0x9a>
		  else if(x == 10) x = '*';
 800060c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000610:	2b0a      	cmp	r3, #10
 8000612:	d103      	bne.n	800061c <main+0x7c>
 8000614:	232a      	movs	r3, #42	@ 0x2a
 8000616:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800061a:	e00e      	b.n	800063a <main+0x9a>
		  else if(x == 11) x = '0';
 800061c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000620:	2b0b      	cmp	r3, #11
 8000622:	d103      	bne.n	800062c <main+0x8c>
 8000624:	2330      	movs	r3, #48	@ 0x30
 8000626:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800062a:	e006      	b.n	800063a <main+0x9a>
		  else if(x == 12) x = '#';
 800062c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000630:	2b0c      	cmp	r3, #12
 8000632:	d102      	bne.n	800063a <main+0x9a>
 8000634:	2323      	movs	r3, #35	@ 0x23
 8000636:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  }
	  state_machine_run(x);
 800063a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fafe 	bl	8002c40 <state_machine_run>
  {
 8000644:	e7cf      	b.n	80005e6 <main+0x46>
 8000646:	bf00      	nop
 8000648:	08060000 	.word	0x08060000
 800064c:	20000088 	.word	0x20000088

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f86c 	bl	800373c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80006c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fa16 	bl	8001b08 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e2:	f000 f8e1 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2103      	movs	r1, #3
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fc78 	bl	8001ff8 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f8cb 	bl	80008a8 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_I2C1_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_I2C1_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_I2C1_Init+0x50>)
 8000762:	f000 fd33 	bl	80011cc <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f89c 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000088 	.word	0x20000088
 8000778:	40005400 	.word	0x40005400
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_SPI2_Init+0x64>)
 8000786:	4a18      	ldr	r2, [pc, #96]	@ (80007e8 <MX_SPI2_Init+0x68>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <MX_SPI2_Init+0x64>)
 800078c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_SPI2_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_SPI2_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007cc:	220a      	movs	r2, #10
 80007ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_SPI2_Init+0x64>)
 80007d2:	f001 fddd 	bl	8002390 <HAL_SPI_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007dc:	f000 f864 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	200000dc 	.word	0x200000dc
 80007e8:	40003800 	.word	0x40003800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a25      	ldr	r2, [pc, #148]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a1e      	ldr	r2, [pc, #120]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_GPIO_Init+0xb4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2154      	movs	r1, #84	@ 0x54
 800085a:	4812      	ldr	r0, [pc, #72]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 800085c:	f000 fc9c 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin
                           Alarm_Signal_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin
 8000860:	f248 032b 	movw	r3, #32811	@ 0x802b
 8000864:	60fb      	str	r3, [r7, #12]
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086a:	2301      	movs	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 8000876:	f000 faf3 	bl	8000e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin;
 800087a:	2354      	movs	r3, #84	@ 0x54
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_GPIO_Init+0xb8>)
 8000892:	f000 fae5 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000900 <HAL_MspInit+0x4c>)
 80008c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_MspInit+0x4c>)
 80008e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a19      	ldr	r2, [pc, #100]	@ (8000988 <HAL_I2C_MspInit+0x84>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d12b      	bne.n	800097e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b18      	ldr	r3, [pc, #96]	@ (800098c <HAL_I2C_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a17      	ldr	r2, [pc, #92]	@ (800098c <HAL_I2C_MspInit+0x88>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b15      	ldr	r3, [pc, #84]	@ (800098c <HAL_I2C_MspInit+0x88>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000942:	23c0      	movs	r3, #192	@ 0xc0
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000946:	2312      	movs	r3, #18
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000952:	2304      	movs	r3, #4
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <HAL_I2C_MspInit+0x8c>)
 800095e:	f000 fa7f 	bl	8000e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_I2C_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <HAL_I2C_MspInit+0x88>)
 800096c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_I2C_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	@ 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40005400 	.word	0x40005400
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400

08000994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <HAL_SPI_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12c      	bne.n	8000a10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a17      	ldr	r2, [pc, #92]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_SPI_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80009ee:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a00:	2305      	movs	r3, #5
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <HAL_SPI_MspInit+0x8c>)
 8000a0c:	f000 fa28 	bl	8000e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	@ 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40003800 	.word	0x40003800
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 f8c7 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f002 fe4a 	bl	800374c <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20000134 	.word	0x20000134
 8000aec:	20000380 	.word	0x20000380

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b42:	f002 fe09 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd2b 	bl	80005a0 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b58:	08004298 	.word	0x08004298
  ldr r2, =_sbss
 8000b5c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b60:	2000037c 	.word	0x2000037c

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f931 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe8a 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f93b 	bl	8000e46 <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f911 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000004 	.word	0x20000004
 8000c04:	2000000c 	.word	0x2000000c
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	20000138 	.word	0x20000138

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000138 	.word	0x20000138

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000000c 	.word	0x2000000c

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	@ (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	@ (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	@ 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	@ 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff47 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff5c 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffb0 	bl	8000db4 <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	e159      	b.n	8001130 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	f040 8148 	bne.w	800112a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d005      	beq.n	8000eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d017      	beq.n	8000f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	08da      	lsrs	r2, r3, #3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3208      	adds	r2, #8
 8000f9e:	69b9      	ldr	r1, [r7, #24]
 8000fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0203 	and.w	r2, r3, #3
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a2 	beq.w	800112a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b57      	ldr	r3, [pc, #348]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	4a56      	ldr	r2, [pc, #344]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff6:	4b54      	ldr	r3, [pc, #336]	@ (8001148 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001002:	4a52      	ldr	r2, [pc, #328]	@ (800114c <HAL_GPIO_Init+0x2ec>)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	220f      	movs	r2, #15
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	@ (8001150 <HAL_GPIO_Init+0x2f0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x202>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a48      	ldr	r2, [pc, #288]	@ (8001154 <HAL_GPIO_Init+0x2f4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x1fe>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a47      	ldr	r2, [pc, #284]	@ (8001158 <HAL_GPIO_Init+0x2f8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x1fa>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a46      	ldr	r2, [pc, #280]	@ (800115c <HAL_GPIO_Init+0x2fc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x1f6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a45      	ldr	r2, [pc, #276]	@ (8001160 <HAL_GPIO_Init+0x300>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x1f2>
 800104e:	2304      	movs	r3, #4
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001052:	2307      	movs	r3, #7
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x204>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x204>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4935      	ldr	r1, [pc, #212]	@ (800114c <HAL_GPIO_Init+0x2ec>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001082:	4b38      	ldr	r3, [pc, #224]	@ (8001164 <HAL_GPIO_Init+0x304>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d0:	4a24      	ldr	r2, [pc, #144]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d6:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001164 <HAL_GPIO_Init+0x304>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_GPIO_Init+0x304>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001124:	4a0f      	ldr	r2, [pc, #60]	@ (8001164 <HAL_GPIO_Init+0x304>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f aea2 	bls.w	8000e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3724      	adds	r7, #36	@ 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400
 8001158:	40020800 	.word	0x40020800
 800115c:	40020c00 	.word	0x40020c00
 8001160:	40021000 	.word	0x40021000
 8001164:	40013c00 	.word	0x40013c00

08001168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e001      	b.n	800118a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e12b      	b.n	8001436 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fb86 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2224      	movs	r2, #36	@ 0x24
 80011fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800121e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800122e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001230:	f001 f89a 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8001234:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a81      	ldr	r2, [pc, #516]	@ (8001440 <HAL_I2C_Init+0x274>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d807      	bhi.n	8001250 <HAL_I2C_Init+0x84>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a80      	ldr	r2, [pc, #512]	@ (8001444 <HAL_I2C_Init+0x278>)
 8001244:	4293      	cmp	r3, r2
 8001246:	bf94      	ite	ls
 8001248:	2301      	movls	r3, #1
 800124a:	2300      	movhi	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	e006      	b.n	800125e <HAL_I2C_Init+0x92>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a7d      	ldr	r2, [pc, #500]	@ (8001448 <HAL_I2C_Init+0x27c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	bf94      	ite	ls
 8001258:	2301      	movls	r3, #1
 800125a:	2300      	movhi	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0e7      	b.n	8001436 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4a78      	ldr	r2, [pc, #480]	@ (800144c <HAL_I2C_Init+0x280>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a6a      	ldr	r2, [pc, #424]	@ (8001440 <HAL_I2C_Init+0x274>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d802      	bhi.n	80012a0 <HAL_I2C_Init+0xd4>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3301      	adds	r3, #1
 800129e:	e009      	b.n	80012b4 <HAL_I2C_Init+0xe8>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	4a69      	ldr	r2, [pc, #420]	@ (8001450 <HAL_I2C_Init+0x284>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	099b      	lsrs	r3, r3, #6
 80012b2:	3301      	adds	r3, #1
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	495c      	ldr	r1, [pc, #368]	@ (8001440 <HAL_I2C_Init+0x274>)
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d819      	bhi.n	8001308 <HAL_I2C_Init+0x13c>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1e59      	subs	r1, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e2:	1c59      	adds	r1, r3, #1
 80012e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80012e8:	400b      	ands	r3, r1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00a      	beq.n	8001304 <HAL_I2C_Init+0x138>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1e59      	subs	r1, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001302:	e051      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001304:	2304      	movs	r3, #4
 8001306:	e04f      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <HAL_I2C_Init+0x168>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	440b      	add	r3, r1
 800131e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001322:	3301      	adds	r3, #1
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e012      	b.n	800135a <HAL_I2C_Init+0x18e>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1e58      	subs	r0, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	0099      	lsls	r1, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	fbb0 f3f3 	udiv	r3, r0, r3
 800134a:	3301      	adds	r3, #1
 800134c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf0c      	ite	eq
 8001354:	2301      	moveq	r3, #1
 8001356:	2300      	movne	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Init+0x196>
 800135e:	2301      	movs	r3, #1
 8001360:	e022      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10e      	bne.n	8001388 <HAL_I2C_Init+0x1bc>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1e58      	subs	r0, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6859      	ldr	r1, [r3, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	440b      	add	r3, r1
 8001378:	fbb0 f3f3 	udiv	r3, r0, r3
 800137c:	3301      	adds	r3, #1
 800137e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001386:	e00f      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e58      	subs	r0, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	0099      	lsls	r1, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	fbb0 f3f3 	udiv	r3, r0, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	6809      	ldr	r1, [r1, #0]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6911      	ldr	r1, [r2, #16]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68d2      	ldr	r2, [r2, #12]
 80013e2:	4311      	orrs	r1, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	000186a0 	.word	0x000186a0
 8001444:	001e847f 	.word	0x001e847f
 8001448:	003d08ff 	.word	0x003d08ff
 800144c:	431bde83 	.word	0x431bde83
 8001450:	10624dd3 	.word	0x10624dd3

08001454 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	461a      	mov	r2, r3
 8001460:	460b      	mov	r3, r1
 8001462:	817b      	strh	r3, [r7, #10]
 8001464:	4613      	mov	r3, r2
 8001466:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fbe4 	bl	8000c34 <HAL_GetTick>
 800146c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b20      	cmp	r3, #32
 8001478:	f040 80e0 	bne.w	800163c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2319      	movs	r3, #25
 8001482:	2201      	movs	r2, #1
 8001484:	4970      	ldr	r1, [pc, #448]	@ (8001648 <HAL_I2C_Master_Transmit+0x1f4>)
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f964 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001492:	2302      	movs	r3, #2
 8001494:	e0d3      	b.n	800163e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_I2C_Master_Transmit+0x50>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e0cc      	b.n	800163e <HAL_I2C_Master_Transmit+0x1ea>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d007      	beq.n	80014ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0201 	orr.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2221      	movs	r2, #33	@ 0x21
 80014de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2210      	movs	r2, #16
 80014e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	893a      	ldrh	r2, [r7, #8]
 80014fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001500:	b29a      	uxth	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4a50      	ldr	r2, [pc, #320]	@ (800164c <HAL_I2C_Master_Transmit+0x1f8>)
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800150c:	8979      	ldrh	r1, [r7, #10]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	6a3a      	ldr	r2, [r7, #32]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f89c 	bl	8001650 <I2C_MasterRequestWrite>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e08d      	b.n	800163e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001538:	e066      	b.n	8001608 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fa22 	bl	8001988 <I2C_WaitOnTXEFlagUntilTimeout>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00d      	beq.n	8001566 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	2b04      	cmp	r3, #4
 8001550:	d107      	bne.n	8001562 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001560:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e06b      	b.n	800163e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001580:	b29b      	uxth	r3, r3
 8001582:	3b01      	subs	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800158e:	3b01      	subs	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d11b      	bne.n	80015dc <HAL_I2C_Master_Transmit+0x188>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d017      	beq.n	80015dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	6a39      	ldr	r1, [r7, #32]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fa19 	bl	8001a18 <I2C_WaitOnBTFFlagUntilTimeout>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00d      	beq.n	8001608 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d107      	bne.n	8001604 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001602:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e01a      	b.n	800163e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	d194      	bne.n	800153a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800161e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2220      	movs	r2, #32
 8001624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e000      	b.n	800163e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800163c:	2302      	movs	r3, #2
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	00100002 	.word	0x00100002
 800164c:	ffff0000 	.word	0xffff0000

08001650 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	603b      	str	r3, [r7, #0]
 800165c:	460b      	mov	r3, r1
 800165e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b08      	cmp	r3, #8
 800166a:	d006      	beq.n	800167a <I2C_MasterRequestWrite+0x2a>
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d003      	beq.n	800167a <I2C_MasterRequestWrite+0x2a>
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001678:	d108      	bne.n	800168c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e00b      	b.n	80016a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	2b12      	cmp	r3, #18
 8001692:	d107      	bne.n	80016a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f84f 	bl	8001754 <I2C_WaitOnFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00d      	beq.n	80016d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ca:	d103      	bne.n	80016d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e035      	b.n	8001744 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016e0:	d108      	bne.n	80016f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016e2:	897b      	ldrh	r3, [r7, #10]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	e01b      	b.n	800172c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016f4:	897b      	ldrh	r3, [r7, #10]
 80016f6:	11db      	asrs	r3, r3, #7
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0306 	and.w	r3, r3, #6
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f063 030f 	orn	r3, r3, #15
 8001704:	b2da      	uxtb	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	490e      	ldr	r1, [pc, #56]	@ (800174c <I2C_MasterRequestWrite+0xfc>)
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f898 	bl	8001848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e010      	b.n	8001744 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001722:	897b      	ldrh	r3, [r7, #10]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4907      	ldr	r1, [pc, #28]	@ (8001750 <I2C_MasterRequestWrite+0x100>)
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f888 	bl	8001848 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	00010008 	.word	0x00010008
 8001750:	00010002 	.word	0x00010002

08001754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001764:	e048      	b.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d044      	beq.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176e:	f7ff fa61 	bl	8000c34 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d302      	bcc.n	8001784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d139      	bne.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	0c1b      	lsrs	r3, r3, #16
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d10d      	bne.n	80017aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	43da      	mvns	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4013      	ands	r3, r2
 800179a:	b29b      	uxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	e00c      	b.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	43da      	mvns	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	4013      	ands	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d116      	bne.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2220      	movs	r2, #32
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e023      	b.n	8001840 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10d      	bne.n	800181e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	43da      	mvns	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	4013      	ands	r3, r2
 800180e:	b29b      	uxth	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	e00c      	b.n	8001838 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	43da      	mvns	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4013      	ands	r3, r2
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	429a      	cmp	r2, r3
 800183c:	d093      	beq.n	8001766 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001856:	e071      	b.n	800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001866:	d123      	bne.n	80018b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001876:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001880:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f043 0204 	orr.w	r2, r3, #4
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e067      	b.n	8001980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	d041      	beq.n	800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b8:	f7ff f9bc 	bl	8000c34 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d302      	bcc.n	80018ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d136      	bne.n	800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d10c      	bne.n	80018f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4013      	ands	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bf14      	ite	ne
 80018ea:	2301      	movne	r3, #1
 80018ec:	2300      	moveq	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	e00b      	b.n	800190a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	43da      	mvns	r2, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4013      	ands	r3, r2
 80018fe:	b29b      	uxth	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d016      	beq.n	800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	f043 0220 	orr.w	r2, r3, #32
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e021      	b.n	8001980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10c      	bne.n	8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	43da      	mvns	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4013      	ands	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	e00b      	b.n	8001978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4013      	ands	r3, r2
 800196c:	b29b      	uxth	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	bf14      	ite	ne
 8001972:	2301      	movne	r3, #1
 8001974:	2300      	moveq	r3, #0
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	f47f af6d 	bne.w	8001858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001994:	e034      	b.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f886 	bl	8001aa8 <I2C_IsAcknowledgeFailed>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e034      	b.n	8001a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d028      	beq.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ae:	f7ff f941 	bl	8000c34 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d302      	bcc.n	80019c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11d      	bne.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ce:	2b80      	cmp	r3, #128	@ 0x80
 80019d0:	d016      	beq.n	8001a00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f043 0220 	orr.w	r2, r3, #32
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e007      	b.n	8001a10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a0a:	2b80      	cmp	r3, #128	@ 0x80
 8001a0c:	d1c3      	bne.n	8001996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a24:	e034      	b.n	8001a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f83e 	bl	8001aa8 <I2C_IsAcknowledgeFailed>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e034      	b.n	8001aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d028      	beq.n	8001a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7ff f8f9 	bl	8000c34 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11d      	bne.n	8001a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d016      	beq.n	8001a90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e007      	b.n	8001aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d1c3      	bne.n	8001a26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001abe:	d11b      	bne.n	8001af8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ac8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f043 0204 	orr.w	r2, r3, #4
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e267      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d075      	beq.n	8001c12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b26:	4b88      	ldr	r3, [pc, #544]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d00c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b32:	4b85      	ldr	r3, [pc, #532]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d112      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b3e:	4b82      	ldr	r3, [pc, #520]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b4a:	d10b      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d05b      	beq.n	8001c10 <HAL_RCC_OscConfig+0x108>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d157      	bne.n	8001c10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e242      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b6c:	d106      	bne.n	8001b7c <HAL_RCC_OscConfig+0x74>
 8001b6e:	4b76      	ldr	r3, [pc, #472]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a75      	ldr	r2, [pc, #468]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e01d      	b.n	8001bb8 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x98>
 8001b86:	4b70      	ldr	r3, [pc, #448]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6f      	ldr	r2, [pc, #444]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b6d      	ldr	r3, [pc, #436]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a6c      	ldr	r2, [pc, #432]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0xb0>
 8001ba0:	4b69      	ldr	r3, [pc, #420]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a68      	ldr	r2, [pc, #416]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b66      	ldr	r3, [pc, #408]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a65      	ldr	r2, [pc, #404]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f838 	bl	8000c34 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f834 	bl	8000c34 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e207      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b5b      	ldr	r3, [pc, #364]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xc0>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff f824 	bl	8000c34 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff f820 	bl	8000c34 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1f3      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	4b51      	ldr	r3, [pc, #324]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xe8>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d063      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00b      	beq.n	8001c42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c2a:	4b47      	ldr	r3, [pc, #284]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d11c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c36:	4b44      	ldr	r3, [pc, #272]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d116      	bne.n	8001c70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x152>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d001      	beq.n	8001c5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e1c7      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4937      	ldr	r1, [pc, #220]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	e03a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c78:	4b34      	ldr	r3, [pc, #208]	@ (8001d4c <HAL_RCC_OscConfig+0x244>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7fe ffd9 	bl	8000c34 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7fe ffd5 	bl	8000c34 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e1a8      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4925      	ldr	r1, [pc, #148]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cba:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_RCC_OscConfig+0x244>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ffb8 	bl	8000c34 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7fe ffb4 	bl	8000c34 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e187      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d036      	beq.n	8001d60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d016      	beq.n	8001d28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_RCC_OscConfig+0x248>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7fe ff98 	bl	8000c34 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d08:	f7fe ff94 	bl	8000c34 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e167      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x200>
 8001d26:	e01b      	b.n	8001d60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_OscConfig+0x248>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7fe ff81 	bl	8000c34 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	e00e      	b.n	8001d54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d36:	f7fe ff7d 	bl	8000c34 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d907      	bls.n	8001d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e150      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	42470000 	.word	0x42470000
 8001d50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d54:	4b88      	ldr	r3, [pc, #544]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ea      	bne.n	8001d36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8097 	beq.w	8001e9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d72:	4b81      	ldr	r3, [pc, #516]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10f      	bne.n	8001d9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	4b7d      	ldr	r3, [pc, #500]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a7c      	ldr	r2, [pc, #496]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b77      	ldr	r3, [pc, #476]	@ (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b74      	ldr	r3, [pc, #464]	@ (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a73      	ldr	r2, [pc, #460]	@ (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7fe ff3d 	bl	8000c34 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7fe ff39 	bl	8000c34 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e10c      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f7c <HAL_RCC_OscConfig+0x474>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2ea>
 8001de4:	4b64      	ldr	r3, [pc, #400]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de8:	4a63      	ldr	r2, [pc, #396]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df0:	e01c      	b.n	8001e2c <HAL_RCC_OscConfig+0x324>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x30c>
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfe:	4a5e      	ldr	r2, [pc, #376]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e06:	4b5c      	ldr	r3, [pc, #368]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0a:	4a5b      	ldr	r2, [pc, #364]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0x324>
 8001e14:	4b58      	ldr	r3, [pc, #352]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e18:	4a57      	ldr	r2, [pc, #348]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e20:	4b55      	ldr	r3, [pc, #340]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	4a54      	ldr	r2, [pc, #336]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f023 0304 	bic.w	r3, r3, #4
 8001e2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d015      	beq.n	8001e60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7fe fefe 	bl	8000c34 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7fe fefa 	bl	8000c34 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e0cb      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	4b49      	ldr	r3, [pc, #292]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0ee      	beq.n	8001e3c <HAL_RCC_OscConfig+0x334>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7fe fee8 	bl	8000c34 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe fee4 	bl	8000c34 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0b5      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ee      	bne.n	8001e68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e90:	4b39      	ldr	r3, [pc, #228]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	4a38      	ldr	r2, [pc, #224]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a1 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea6:	4b34      	ldr	r3, [pc, #208]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d05c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d141      	bne.n	8001f3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_RCC_OscConfig+0x478>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7fe feb8 	bl	8000c34 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7fe feb4 	bl	8000c34 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e087      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	019b      	lsls	r3, r3, #6
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efc:	085b      	lsrs	r3, r3, #1
 8001efe:	3b01      	subs	r3, #1
 8001f00:	041b      	lsls	r3, r3, #16
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	491b      	ldr	r1, [pc, #108]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_RCC_OscConfig+0x478>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe8d 	bl	8000c34 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7fe fe89 	bl	8000c34 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e05c      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x416>
 8001f3c:	e054      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_OscConfig+0x478>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7fe fe76 	bl	8000c34 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fe72 	bl	8000c34 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e045      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_RCC_OscConfig+0x470>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x444>
 8001f6a:	e03d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e038      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <HAL_RCC_OscConfig+0x4ec>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d028      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d121      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d11a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d111      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0cc      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800200c:	4b68      	ldr	r3, [pc, #416]	@ (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d90c      	bls.n	8002034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b65      	ldr	r3, [pc, #404]	@ (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b63      	ldr	r3, [pc, #396]	@ (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b8      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800204c:	4b59      	ldr	r3, [pc, #356]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	4a58      	ldr	r2, [pc, #352]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002056:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002064:	4b53      	ldr	r3, [pc, #332]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a52      	ldr	r2, [pc, #328]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800206e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002070:	4b50      	ldr	r3, [pc, #320]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	494d      	ldr	r1, [pc, #308]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	4313      	orrs	r3, r2
 8002080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d044      	beq.n	8002118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b47      	ldr	r3, [pc, #284]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d119      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e07f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b3f      	ldr	r3, [pc, #252]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c6:	4b3b      	ldr	r3, [pc, #236]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e067      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b37      	ldr	r3, [pc, #220]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4934      	ldr	r1, [pc, #208]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e8:	f7fe fda4 	bl	8000c34 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7fe fda0 	bl	8000c34 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e04f      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002118:	4b25      	ldr	r3, [pc, #148]	@ (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d20c      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002126:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e032      	b.n	80021a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800214c:	4b19      	ldr	r3, [pc, #100]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4916      	ldr	r1, [pc, #88]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800216a:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	490e      	ldr	r1, [pc, #56]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217e:	f000 f821 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002182:	4602      	mov	r2, r0
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	490a      	ldr	r1, [pc, #40]	@ (80021b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	5ccb      	ldrb	r3, [r1, r3]
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fd04 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00
 80021b4:	40023800 	.word	0x40023800
 80021b8:	0800413c 	.word	0x0800413c
 80021bc:	20000004 	.word	0x20000004
 80021c0:	20000008 	.word	0x20000008

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c8:	b090      	sub	sp, #64	@ 0x40
 80021ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021dc:	4b59      	ldr	r3, [pc, #356]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d00d      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x40>
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	f200 80a1 	bhi.w	8002330 <HAL_RCC_GetSysClockFreq+0x16c>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x3a>
 80021f6:	e09b      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x184>)
 80021fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021fc:	e09b      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021fe:	4b53      	ldr	r3, [pc, #332]	@ (800234c <HAL_RCC_GetSysClockFreq+0x188>)
 8002200:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002202:	e098      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002204:	4b4f      	ldr	r3, [pc, #316]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220e:	4b4d      	ldr	r3, [pc, #308]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d028      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800221a:	4b4a      	ldr	r3, [pc, #296]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	2200      	movs	r2, #0
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	627a      	str	r2, [r7, #36]	@ 0x24
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800222c:	2100      	movs	r1, #0
 800222e:	4b47      	ldr	r3, [pc, #284]	@ (800234c <HAL_RCC_GetSysClockFreq+0x188>)
 8002230:	fb03 f201 	mul.w	r2, r3, r1
 8002234:	2300      	movs	r3, #0
 8002236:	fb00 f303 	mul.w	r3, r0, r3
 800223a:	4413      	add	r3, r2
 800223c:	4a43      	ldr	r2, [pc, #268]	@ (800234c <HAL_RCC_GetSysClockFreq+0x188>)
 800223e:	fba0 1202 	umull	r1, r2, r0, r2
 8002242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002244:	460a      	mov	r2, r1
 8002246:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800224a:	4413      	add	r3, r2
 800224c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800224e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002250:	2200      	movs	r2, #0
 8002252:	61bb      	str	r3, [r7, #24]
 8002254:	61fa      	str	r2, [r7, #28]
 8002256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800225a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800225e:	f7fe f827 	bl	80002b0 <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4613      	mov	r3, r2
 8002268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800226a:	e053      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226c:	4b35      	ldr	r3, [pc, #212]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	2200      	movs	r2, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	617a      	str	r2, [r7, #20]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800227e:	f04f 0b00 	mov.w	fp, #0
 8002282:	4652      	mov	r2, sl
 8002284:	465b      	mov	r3, fp
 8002286:	f04f 0000 	mov.w	r0, #0
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	0159      	lsls	r1, r3, #5
 8002290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002294:	0150      	lsls	r0, r2, #5
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	ebb2 080a 	subs.w	r8, r2, sl
 800229e:	eb63 090b 	sbc.w	r9, r3, fp
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022b6:	ebb2 0408 	subs.w	r4, r2, r8
 80022ba:	eb63 0509 	sbc.w	r5, r3, r9
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	00eb      	lsls	r3, r5, #3
 80022c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022cc:	00e2      	lsls	r2, r4, #3
 80022ce:	4614      	mov	r4, r2
 80022d0:	461d      	mov	r5, r3
 80022d2:	eb14 030a 	adds.w	r3, r4, sl
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	eb45 030b 	adc.w	r3, r5, fp
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ea:	4629      	mov	r1, r5
 80022ec:	028b      	lsls	r3, r1, #10
 80022ee:	4621      	mov	r1, r4
 80022f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f4:	4621      	mov	r1, r4
 80022f6:	028a      	lsls	r2, r1, #10
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fe:	2200      	movs	r2, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	60fa      	str	r2, [r7, #12]
 8002304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002308:	f7fd ffd2 	bl	80002b0 <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4613      	mov	r3, r2
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x180>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002324:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x184>)
 8002332:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002338:	4618      	mov	r0, r3
 800233a:	3740      	adds	r7, #64	@ 0x40
 800233c:	46bd      	mov	sp, r7
 800233e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	00f42400 	.word	0x00f42400
 800234c:	017d7840 	.word	0x017d7840

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b03      	ldr	r3, [pc, #12]	@ (8002364 <HAL_RCC_GetHCLKFreq+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff0 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	0a9b      	lsrs	r3, r3, #10
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	@ (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40023800 	.word	0x40023800
 800238c:	0800414c 	.word	0x0800414c

08002390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07b      	b.n	800249a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d108      	bne.n	80023bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023b2:	d009      	beq.n	80023c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
 80023ba:	e005      	b.n	80023c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fad6 	bl	8000994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244c:	ea42 0103 	orr.w	r1, r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0104 	and.w	r1, r3, #4
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	f003 0210 	and.w	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <flash_write_erase_sector7>:

#include "flash_interface.h"



void flash_write_erase_sector7(){
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY) ;
 80024a8:	bf00      	nop
 80024aa:	4b23      	ldr	r3, [pc, #140]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <flash_write_erase_sector7+0x6>
  __ASM volatile ("cpsid i" : : : "memory");
 80024b6:	b672      	cpsid	i
}
 80024b8:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 80024ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024bc:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <flash_write_erase_sector7+0x98>)
 80024be:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <flash_write_erase_sector7+0x9c>)
 80024c4:	605a      	str	r2, [r3, #4]

	//SECTOR 7 ERASE
	FLASH->CR |= FLASH_CR_SER;
 80024c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2;
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	4a18      	ldr	r2, [pc, #96]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024d8:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80024dc:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;
 80024de:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	4a15      	ldr	r2, [pc, #84]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e8:	6113      	str	r3, [r2, #16]

	while(FLASH->SR & FLASH_SR_BSY) ;
 80024ea:	bf00      	nop
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f9      	bne.n	80024ec <flash_write_erase_sector7+0x48>
	//RETURN TO INIT STATE
	FLASH->CR &= ~FLASH_CR_STRT;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002538 <flash_write_erase_sector7+0x94>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002502:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2);
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <flash_write_erase_sector7+0x94>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <flash_write_erase_sector7+0x94>)
 800250a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800250e:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_SER;
 8002510:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <flash_write_erase_sector7+0x94>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	4a08      	ldr	r2, [pc, #32]	@ (8002538 <flash_write_erase_sector7+0x94>)
 8002516:	f023 0302 	bic.w	r3, r3, #2
 800251a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <flash_write_erase_sector7+0x94>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <flash_write_erase_sector7+0x94>)
 8002522:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002526:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8002528:	b662      	cpsie	i
}
 800252a:	bf00      	nop

	__enable_irq();
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40023c00 	.word	0x40023c00
 800253c:	45670123 	.word	0x45670123
 8002540:	cdef89ab 	.word	0xcdef89ab

08002544 <flash_write_multiple_word>:



void flash_write_multiple_word(uint32_t addr, uint32_t* data, size_t num){
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
	//CHECK IF BUSY
	while(FLASH->SR & FLASH_SR_BSY) ;
 8002550:	bf00      	nop
 8002552:	4b2a      	ldr	r3, [pc, #168]	@ (80025fc <flash_write_multiple_word+0xb8>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f9      	bne.n	8002552 <flash_write_multiple_word+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 800255e:	b672      	cpsid	i
}
 8002560:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 8002562:	4b26      	ldr	r3, [pc, #152]	@ (80025fc <flash_write_multiple_word+0xb8>)
 8002564:	4a26      	ldr	r2, [pc, #152]	@ (8002600 <flash_write_multiple_word+0xbc>)
 8002566:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8002568:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <flash_write_multiple_word+0xb8>)
 800256a:	4a26      	ldr	r2, [pc, #152]	@ (8002604 <flash_write_multiple_word+0xc0>)
 800256c:	605a      	str	r2, [r3, #4]

	//PICK DOUBLE WORD WRITING
	FLASH->CR |= FLASH_CR_PSIZE_1;
 800256e:	4b23      	ldr	r3, [pc, #140]	@ (80025fc <flash_write_multiple_word+0xb8>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <flash_write_multiple_word+0xb8>)
 8002574:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002578:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_0;
 800257a:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <flash_write_multiple_word+0xb8>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	4a1f      	ldr	r2, [pc, #124]	@ (80025fc <flash_write_multiple_word+0xb8>)
 8002580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002584:	6113      	str	r3, [r2, #16]

	//ENABLE PROGRAMMING MODE
	FLASH->CR |= FLASH_CR_PG;
 8002586:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <flash_write_multiple_word+0xb8>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <flash_write_multiple_word+0xb8>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6113      	str	r3, [r2, #16]

	for(size_t i = 0; i < num; ++i){
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e00c      	b.n	80025b2 <flash_write_multiple_word+0x6e>
		*((uint32_t *)addr + i) = *(data + i);
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	4413      	add	r3, r2
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	0091      	lsls	r1, r2, #2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	440a      	add	r2, r1
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < num; ++i){
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3301      	adds	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3ee      	bcc.n	8002598 <flash_write_multiple_word+0x54>

	}

	//WAIT TILL COMPLETES
	while(FLASH->SR & FLASH_SR_BSY) ;
 80025ba:	bf00      	nop
 80025bc:	4b0f      	ldr	r3, [pc, #60]	@ (80025fc <flash_write_multiple_word+0xb8>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f9      	bne.n	80025bc <flash_write_multiple_word+0x78>
	//TURN OFF PROGRAMMING MODE
	FLASH->CR &= ~FLASH_CR_PG;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <flash_write_multiple_word+0xb8>)
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	4a0b      	ldr	r2, [pc, #44]	@ (80025fc <flash_write_multiple_word+0xb8>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_1;
 80025d4:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <flash_write_multiple_word+0xb8>)
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	4a08      	ldr	r2, [pc, #32]	@ (80025fc <flash_write_multiple_word+0xb8>)
 80025da:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025de:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_LOCK;
 80025e0:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <flash_write_multiple_word+0xb8>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <flash_write_multiple_word+0xb8>)
 80025e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025ea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 80025ec:	b662      	cpsie	i
}
 80025ee:	bf00      	nop
	__enable_irq();
}
 80025f0:	bf00      	nop
 80025f2:	371c      	adds	r7, #28
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	45670123 	.word	0x45670123
 8002604:	cdef89ab 	.word	0xcdef89ab

08002608 <flash_read_multiple_words>:




void flash_read_multiple_words(uint32_t addr, uint32_t* data, size_t n){
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
	for(size_t i = 0; i < n; ++i){
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e00d      	b.n	8002636 <flash_read_multiple_words+0x2e>
		*(data + i) = *((uint32_t*)addr + i);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	009a      	lsls	r2, r3, #2
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	4619      	mov	r1, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	4413      	add	r3, r2
 800262c:	680a      	ldr	r2, [r1, #0]
 800262e:	601a      	str	r2, [r3, #0]
	for(size_t i = 0; i < n; ++i){
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3301      	adds	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d3ed      	bcc.n	800261a <flash_read_multiple_words+0x12>
	}
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <set_column>:
static char x;
static uint32_t i = 0;
static uint32_t lastDebounceTime[12];
static bool keyState[12] = {};

void set_column(uint8_t col, GPIO_PinState state){
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	460a      	mov	r2, r1
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	4613      	mov	r3, r2
 800265a:	71bb      	strb	r3, [r7, #6]
	switch(col){
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d014      	beq.n	800268c <set_column+0x40>
 8002662:	2b02      	cmp	r3, #2
 8002664:	dc19      	bgt.n	800269a <set_column+0x4e>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <set_column+0x24>
 800266a:	2b01      	cmp	r3, #1
 800266c:	d007      	beq.n	800267e <set_column+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
		break;
	}
}
 800266e:	e014      	b.n	800269a <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col1_Pin, state);
 8002670:	79bb      	ldrb	r3, [r7, #6]
 8002672:	461a      	mov	r2, r3
 8002674:	2110      	movs	r1, #16
 8002676:	480b      	ldr	r0, [pc, #44]	@ (80026a4 <set_column+0x58>)
 8002678:	f7fe fd8e 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800267c:	e00d      	b.n	800269a <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col2_Pin, state);
 800267e:	79bb      	ldrb	r3, [r7, #6]
 8002680:	461a      	mov	r2, r3
 8002682:	2140      	movs	r1, #64	@ 0x40
 8002684:	4807      	ldr	r0, [pc, #28]	@ (80026a4 <set_column+0x58>)
 8002686:	f7fe fd87 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800268a:	e006      	b.n	800269a <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	461a      	mov	r2, r3
 8002690:	2104      	movs	r1, #4
 8002692:	4804      	ldr	r0, [pc, #16]	@ (80026a4 <set_column+0x58>)
 8002694:	f7fe fd80 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 8002698:	bf00      	nop
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40020000 	.word	0x40020000

080026a8 <handle_key_press>:
void handle_key_press(uint8_t col, uint8_t row){
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	460a      	mov	r2, r1
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 1;
 80026b8:	79ba      	ldrb	r2, [r7, #6]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	441a      	add	r2, r3
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <handle_key_press+0x48>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	54d1      	strb	r1, [r2, r3]
	x = (row) * 3 + col + 1;
 80026ca:	79bb      	ldrb	r3, [r7, #6]
 80026cc:	461a      	mov	r2, r3
 80026ce:	0052      	lsls	r2, r2, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	4413      	add	r3, r2
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <handle_key_press+0x4c>)
 80026e0:	701a      	strb	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000174 	.word	0x20000174
 80026f4:	2000013c 	.word	0x2000013c

080026f8 <handle_key_reset>:
void handle_key_reset(uint8_t col, uint8_t row){
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	460a      	mov	r2, r1
 8002702:	71fb      	strb	r3, [r7, #7]
 8002704:	4613      	mov	r3, r2
 8002706:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 0;
 8002708:	79ba      	ldrb	r2, [r7, #6]
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	441a      	add	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <handle_key_reset+0x30>)
 8002716:	2100      	movs	r1, #0
 8002718:	54d1      	strb	r1, [r2, r3]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000174 	.word	0x20000174

0800272c <read_row>:

GPIO_PinState read_row(uint8_t row){
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	switch(row){
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d823      	bhi.n	8002784 <read_row+0x58>
 800273c:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <read_row+0x18>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002755 	.word	0x08002755
 8002748:	08002761 	.word	0x08002761
 800274c:	0800276d 	.word	0x0800276d
 8002750:	08002779 	.word	0x08002779
		case 0:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row1_Pin);
 8002754:	2120      	movs	r1, #32
 8002756:	480e      	ldr	r0, [pc, #56]	@ (8002790 <read_row+0x64>)
 8002758:	f7fe fd06 	bl	8001168 <HAL_GPIO_ReadPin>
 800275c:	4603      	mov	r3, r0
 800275e:	e012      	b.n	8002786 <read_row+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row2_Pin);
 8002760:	2101      	movs	r1, #1
 8002762:	480b      	ldr	r0, [pc, #44]	@ (8002790 <read_row+0x64>)
 8002764:	f7fe fd00 	bl	8001168 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	e00c      	b.n	8002786 <read_row+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row3_Pin);
 800276c:	2102      	movs	r1, #2
 800276e:	4808      	ldr	r0, [pc, #32]	@ (8002790 <read_row+0x64>)
 8002770:	f7fe fcfa 	bl	8001168 <HAL_GPIO_ReadPin>
 8002774:	4603      	mov	r3, r0
 8002776:	e006      	b.n	8002786 <read_row+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row4_Pin);
 8002778:	2108      	movs	r1, #8
 800277a:	4805      	ldr	r0, [pc, #20]	@ (8002790 <read_row+0x64>)
 800277c:	f7fe fcf4 	bl	8001168 <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	e000      	b.n	8002786 <read_row+0x5a>
			break;
	}
	return 1;
 8002784:	2301      	movs	r3, #1
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020000 	.word	0x40020000

08002794 <check_keyboard>:
char check_keyboard(void){
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
	x = 0;
 800279a:	4b36      	ldr	r3, [pc, #216]	@ (8002874 <check_keyboard+0xe0>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
	i = 0;
 80027a0:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <check_keyboard+0xe4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
	for (int col = 0; col < 3; col++) {
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e059      	b.n	8002860 <check_keyboard+0xcc>
	    set_column(col, GPIO_PIN_RESET);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff4a 	bl	800264c <set_column>
	    for (int row = 0; row < 4; row++) {
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	e044      	b.n	8002848 <check_keyboard+0xb4>
	    	uint32_t t = HAL_GetTick();
 80027be:	f7fe fa39 	bl	8000c34 <HAL_GetTick>
 80027c2:	6078      	str	r0, [r7, #4]
	    	if(t - lastDebounceTime[(row) * 3 + col] > DEBOUNCE_TIME){
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	441a      	add	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a2a      	ldr	r2, [pc, #168]	@ (800287c <check_keyboard+0xe8>)
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	d931      	bls.n	8002842 <check_keyboard+0xae>
				if (read_row(row) == GPIO_PIN_RESET) {
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ffa2 	bl	800272c <read_row>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d121      	bne.n	8002832 <check_keyboard+0x9e>
					if(!keyState[(row) * 3 + col])
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	441a      	add	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	4a21      	ldr	r2, [pc, #132]	@ (8002880 <check_keyboard+0xec>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <check_keyboard+0x84>
						handle_key_press(col, row);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff48 	bl	80026a8 <handle_key_press>
					lastDebounceTime[(row) * 3 + col] = HAL_GetTick();
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	441a      	add	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	18d4      	adds	r4, r2, r3
 8002824:	f7fe fa06 	bl	8000c34 <HAL_GetTick>
 8002828:	4603      	mov	r3, r0
 800282a:	4a14      	ldr	r2, [pc, #80]	@ (800287c <check_keyboard+0xe8>)
 800282c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002830:	e007      	b.n	8002842 <check_keyboard+0xae>
				}
				else{
					handle_key_reset(col, row);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5b 	bl	80026f8 <handle_key_reset>
	    for (int row = 0; row < 4; row++) {
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b03      	cmp	r3, #3
 800284c:	ddb7      	ble.n	80027be <check_keyboard+0x2a>
				}
	    	}
	    }
	    set_column(col, GPIO_PIN_SET);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fef9 	bl	800264c <set_column>
	for (int col = 0; col < 3; col++) {
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b02      	cmp	r3, #2
 8002864:	dda2      	ble.n	80027ac <check_keyboard+0x18>
	}
	return x;
 8002866:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <check_keyboard+0xe0>)
 8002868:	781b      	ldrb	r3, [r3, #0]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	bf00      	nop
 8002874:	2000013c 	.word	0x2000013c
 8002878:	20000140 	.word	0x20000140
 800287c:	20000144 	.word	0x20000144
 8002880:	20000174 	.word	0x20000174

08002884 <lcd_send_cmd>:
 */
#include "lcd_driver.h"
static I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f023 030f 	bic.w	r3, r3, #15
 8002894:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	f043 030c 	orr.w	r3, r3, #12
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	f043 030c 	orr.w	r3, r3, #12
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80028ba:	7bbb      	ldrb	r3, [r7, #14]
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028c4:	f107 0208 	add.w	r2, r7, #8
 80028c8:	2364      	movs	r3, #100	@ 0x64
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2304      	movs	r3, #4
 80028ce:	214e      	movs	r1, #78	@ 0x4e
 80028d0:	4803      	ldr	r0, [pc, #12]	@ (80028e0 <lcd_send_cmd+0x5c>)
 80028d2:	f7fe fdbf 	bl	8001454 <HAL_I2C_Master_Transmit>
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000180 	.word	0x20000180

080028e4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f023 030f 	bic.w	r3, r3, #15
 80028f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	f043 030d 	orr.w	r3, r3, #13
 8002902:	b2db      	uxtb	r3, r3
 8002904:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	f043 0309 	orr.w	r3, r3, #9
 800290c:	b2db      	uxtb	r3, r3
 800290e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8002910:	7bbb      	ldrb	r3, [r7, #14]
 8002912:	f043 030d 	orr.w	r3, r3, #13
 8002916:	b2db      	uxtb	r3, r3
 8002918:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 800291a:	7bbb      	ldrb	r3, [r7, #14]
 800291c:	f043 0309 	orr.w	r3, r3, #9
 8002920:	b2db      	uxtb	r3, r3
 8002922:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002924:	f107 0208 	add.w	r2, r7, #8
 8002928:	2364      	movs	r3, #100	@ 0x64
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2304      	movs	r3, #4
 800292e:	214e      	movs	r1, #78	@ 0x4e
 8002930:	4803      	ldr	r0, [pc, #12]	@ (8002940 <lcd_send_data+0x5c>)
 8002932:	f7fe fd8f 	bl	8001454 <HAL_I2C_Master_Transmit>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000180 	.word	0x20000180

08002944 <lcd_init>:

void lcd_init (I2C_HandleTypeDef i2c)
{
 8002944:	b084      	sub	sp, #16
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
 800294a:	f107 0c08 	add.w	ip, r7, #8
 800294e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 8002952:	4b22      	ldr	r3, [pc, #136]	@ (80029dc <lcd_init+0x98>)
 8002954:	4618      	mov	r0, r3
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	2254      	movs	r2, #84	@ 0x54
 800295c:	4619      	mov	r1, r3
 800295e:	f000 ff21 	bl	80037a4 <memcpy>
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002962:	2032      	movs	r0, #50	@ 0x32
 8002964:	f7fe f972 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002968:	2030      	movs	r0, #48	@ 0x30
 800296a:	f7ff ff8b 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800296e:	2005      	movs	r0, #5
 8002970:	f7fe f96c 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002974:	2030      	movs	r0, #48	@ 0x30
 8002976:	f7ff ff85 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800297a:	2001      	movs	r0, #1
 800297c:	f7fe f966 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002980:	2030      	movs	r0, #48	@ 0x30
 8002982:	f7ff ff7f 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(10);
 8002986:	200a      	movs	r0, #10
 8002988:	f7fe f960 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800298c:	2020      	movs	r0, #32
 800298e:	f7ff ff79 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(10);
 8002992:	200a      	movs	r0, #10
 8002994:	f7fe f95a 	bl	8000c4c <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8002998:	2028      	movs	r0, #40	@ 0x28
 800299a:	f7ff ff73 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(1);
 800299e:	2001      	movs	r0, #1
 80029a0:	f7fe f954 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80029a4:	2008      	movs	r0, #8
 80029a6:	f7ff ff6d 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(1);
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7fe f94e 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff ff67 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(2);
 80029b6:	2002      	movs	r0, #2
 80029b8:	f7fe f948 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80029bc:	2006      	movs	r0, #6
 80029be:	f7ff ff61 	bl	8002884 <lcd_send_cmd>
	HAL_Delay(1);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7fe f942 	bl	8000c4c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80029c8:	200c      	movs	r0, #12
 80029ca:	f7ff ff5b 	bl	8002884 <lcd_send_cmd>
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029d6:	b004      	add	sp, #16
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000180 	.word	0x20000180

080029e0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80029e8:	e006      	b.n	80029f8 <lcd_send_string+0x18>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff76 	bl	80028e4 <lcd_send_data>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f4      	bne.n	80029ea <lcd_send_string+0xa>
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <lcd_clear>:

void lcd_clear(void){
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 8002a10:	2100      	movs	r1, #0
 8002a12:	2000      	movs	r0, #0
 8002a14:	f000 f80e 	bl	8002a34 <lcd_put_cur>
	  lcd_send_string ("                ");
 8002a18:	4805      	ldr	r0, [pc, #20]	@ (8002a30 <lcd_clear+0x24>)
 8002a1a:	f7ff ffe1 	bl	80029e0 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2001      	movs	r0, #1
 8002a22:	f000 f807 	bl	8002a34 <lcd_put_cur>
	  lcd_send_string ("                ");
 8002a26:	4802      	ldr	r0, [pc, #8]	@ (8002a30 <lcd_clear+0x24>)
 8002a28:	f7ff ffda 	bl	80029e0 <lcd_send_string>
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	08004054 	.word	0x08004054

08002a34 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
	switch (row)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <lcd_put_cur+0x18>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d005      	beq.n	8002a56 <lcd_put_cur+0x22>
 8002a4a:	e009      	b.n	8002a60 <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a52:	603b      	str	r3, [r7, #0]
			break;
 8002a54:	e004      	b.n	8002a60 <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a5c:	603b      	str	r3, [r7, #0]
			break;
 8002a5e:	bf00      	nop
	}
	lcd_send_cmd (col);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff0d 	bl	8002884 <lcd_send_cmd>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <save_new_state>:
static char pin[9] = "";
static char numbers[48];

static uint32_t countdown_delay;
//HELPER FUNCTIONS
void save_new_state(void){
 8002a74:	b5b0      	push	{r4, r5, r7, lr}
 8002a76:	b092      	sub	sp, #72	@ 0x48
 8002a78:	af00      	add	r7, sp, #0
	char to_save[64];
	memset(to_save, 0, 64);
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2240      	movs	r2, #64	@ 0x40
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fe5b 	bl	800373c <memset>
	memcpy(to_save, numbers, 48);
 8002a86:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <save_new_state+0x9c>)
 8002a88:	1d3c      	adds	r4, r7, #4
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(to_save + 48, pin, 8);
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	3330      	adds	r3, #48	@ 0x30
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	491c      	ldr	r1, [pc, #112]	@ (8002b14 <save_new_state+0xa0>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fe7d 	bl	80037a4 <memcpy>
	snprintf(to_save + 56, 8, "%ld", countdown_delay/1000);
 8002aaa:	1d38      	adds	r0, r7, #4
 8002aac:	3038      	adds	r0, #56	@ 0x38
 8002aae:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <save_new_state+0xa4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b1c <save_new_state+0xa8>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	4a19      	ldr	r2, [pc, #100]	@ (8002b20 <save_new_state+0xac>)
 8002abc:	2108      	movs	r1, #8
 8002abe:	f000 fe09 	bl	80036d4 <sniprintf>
	for(size_t i = 0; i < 64; ++i)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac6:	e013      	b.n	8002af0 <save_new_state+0x7c>
		if(to_save[i] == '\0' || to_save[i] == '#') to_save[i] = '*';
 8002ac8:	1d3a      	adds	r2, r7, #4
 8002aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <save_new_state+0x6c>
 8002ad4:	1d3a      	adds	r2, r7, #4
 8002ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b23      	cmp	r3, #35	@ 0x23
 8002ade:	d104      	bne.n	8002aea <save_new_state+0x76>
 8002ae0:	1d3a      	adds	r2, r7, #4
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae4:	4413      	add	r3, r2
 8002ae6:	222a      	movs	r2, #42	@ 0x2a
 8002ae8:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8002aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aec:	3301      	adds	r3, #1
 8002aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002af4:	d9e8      	bls.n	8002ac8 <save_new_state+0x54>
	flash_write_erase_sector7();
 8002af6:	f7ff fcd5 	bl	80024a4 <flash_write_erase_sector7>
	flash_write_multiple_word(0x08060000, (uint32_t *)to_save, 16);
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	2210      	movs	r2, #16
 8002afe:	4619      	mov	r1, r3
 8002b00:	4808      	ldr	r0, [pc, #32]	@ (8002b24 <save_new_state+0xb0>)
 8002b02:	f7ff fd1f 	bl	8002544 <flash_write_multiple_word>

}
 8002b06:	bf00      	nop
 8002b08:	3748      	adds	r7, #72	@ 0x48
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200001fc 	.word	0x200001fc
 8002b14:	200001f0 	.word	0x200001f0
 8002b18:	2000022c 	.word	0x2000022c
 8002b1c:	10624dd3 	.word	0x10624dd3
 8002b20:	08004080 	.word	0x08004080
 8002b24:	08060000 	.word	0x08060000

08002b28 <change_state>:

static inline void change_state(alarm_state new_state){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
	state = new_state;
 8002b32:	4a09      	ldr	r2, [pc, #36]	@ (8002b58 <change_state+0x30>)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	7013      	strb	r3, [r2, #0]
	memset(str,0,14);
 8002b38:	220e      	movs	r2, #14
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4807      	ldr	r0, [pc, #28]	@ (8002b5c <change_state+0x34>)
 8002b3e:	f000 fdfd 	bl	800373c <memset>
	len = 0;
 8002b42:	4b07      	ldr	r3, [pc, #28]	@ (8002b60 <change_state+0x38>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	701a      	strb	r2, [r3, #0]
	changed = true;
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <change_state+0x3c>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	200001d4 	.word	0x200001d4
 8002b60:	200001e2 	.word	0x200001e2
 8002b64:	2000000d 	.word	0x2000000d

08002b68 <s_to_ms>:

uint32_t s_to_ms(uint32_t s){return s*1000UL;}
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <state_machine_init>:

//IMPLEMENTATIONS
void state_machine_init(char data_blob[64]){
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	char temp[8];
	for(size_t i = 0; i < 64; ++i)
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e00d      	b.n	8002bb2 <state_machine_init+0x2a>
		if(data_blob[i] == '*') data_blob[i] = '\0';
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ba0:	d104      	bne.n	8002bac <state_machine_init+0x24>
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bb6:	d9ee      	bls.n	8002b96 <state_machine_init+0xe>
	memcpy(numbers, data_blob, 48);
 8002bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c34 <state_machine_init+0xac>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	461c      	mov	r4, r3
 8002bbe:	4616      	mov	r6, r2
 8002bc0:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8002bc4:	4635      	mov	r5, r6
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bd2:	3410      	adds	r4, #16
 8002bd4:	3610      	adds	r6, #16
 8002bd6:	4564      	cmp	r4, ip
 8002bd8:	d1f4      	bne.n	8002bc4 <state_machine_init+0x3c>
	memcpy(pin, data_blob + 48, 8);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3330      	adds	r3, #48	@ 0x30
 8002bde:	2208      	movs	r2, #8
 8002be0:	4619      	mov	r1, r3
 8002be2:	4815      	ldr	r0, [pc, #84]	@ (8002c38 <state_machine_init+0xb0>)
 8002be4:	f000 fdde 	bl	80037a4 <memcpy>
	memcpy(temp, data_blob + 56, 8);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	6810      	ldr	r0, [r2, #0]
 8002bf4:	6851      	ldr	r1, [r2, #4]
 8002bf6:	c303      	stmia	r3!, {r0, r1}


	countdown_delay = strtol(temp, NULL, 10);
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	220a      	movs	r2, #10
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fd5d 	bl	80036c0 <strtol>
 8002c06:	4603      	mov	r3, r0
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c3c <state_machine_init+0xb4>)
 8002c0c:	601a      	str	r2, [r3, #0]
	pin[strlen(pin)] = '#';
 8002c0e:	480a      	ldr	r0, [pc, #40]	@ (8002c38 <state_machine_init+0xb0>)
 8002c10:	f7fd faf0 	bl	80001f4 <strlen>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <state_machine_init+0xb0>)
 8002c18:	2123      	movs	r1, #35	@ 0x23
 8002c1a:	54d1      	strb	r1, [r2, r3]
	countdown_delay = s_to_ms(countdown_delay);
 8002c1c:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <state_machine_init+0xb4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ffa1 	bl	8002b68 <s_to_ms>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a04      	ldr	r2, [pc, #16]	@ (8002c3c <state_machine_init+0xb4>)
 8002c2a:	6013      	str	r3, [r2, #0]

}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	200001fc 	.word	0x200001fc
 8002c38:	200001f0 	.word	0x200001f0
 8002c3c:	2000022c 	.word	0x2000022c

08002c40 <state_machine_run>:

void state_machine_run(char input){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	if(input){
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00c      	beq.n	8002c6a <state_machine_run+0x2a>
		changed = true;
 8002c50:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd0 <state_machine_run+0x90>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
		str[len++] = input;
 8002c56:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <state_machine_run+0x94>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	b2d1      	uxtb	r1, r2
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <state_machine_run+0x94>)
 8002c60:	7011      	strb	r1, [r2, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd8 <state_machine_run+0x98>)
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	5453      	strb	r3, [r2, r1]
	}
	switch(state){
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <state_machine_run+0x9c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b07      	cmp	r3, #7
 8002c70:	d82a      	bhi.n	8002cc8 <state_machine_run+0x88>
 8002c72:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <state_machine_run+0x38>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002c9f 	.word	0x08002c9f
 8002c7c:	08002ca5 	.word	0x08002ca5
 8002c80:	08002cab 	.word	0x08002cab
 8002c84:	08002c99 	.word	0x08002c99
 8002c88:	08002cc3 	.word	0x08002cc3
 8002c8c:	08002cb1 	.word	0x08002cb1
 8002c90:	08002cb7 	.word	0x08002cb7
 8002c94:	08002cbd 	.word	0x08002cbd
	case DISARMED:
		state_machine_disarmed();
 8002c98:	f000 f8d8 	bl	8002e4c <state_machine_disarmed>
	  break;
 8002c9c:	e014      	b.n	8002cc8 <state_machine_run+0x88>
	case ARMED:
		state_machine_armed();
 8002c9e:	f000 f81f 	bl	8002ce0 <state_machine_armed>
	  break;
 8002ca2:	e011      	b.n	8002cc8 <state_machine_run+0x88>
	case ARMED_COUNTDOWN:
		state_machine_countdown();
 8002ca4:	f000 f998 	bl	8002fd8 <state_machine_countdown>
	  break;
 8002ca8:	e00e      	b.n	8002cc8 <state_machine_run+0x88>
	case ALERT_SMS:
		state_machine_alert();
 8002caa:	f000 fa81 	bl	80031b0 <state_machine_alert>
	  break;
 8002cae:	e00b      	b.n	8002cc8 <state_machine_run+0x88>
	case MENAGE_NUMBER:
		state_machine_menage_number();
 8002cb0:	f000 fb36 	bl	8003320 <state_machine_menage_number>
	  break;
 8002cb4:	e008      	b.n	8002cc8 <state_machine_run+0x88>
	case REPLACE_NUMBER:
		state_machine_replace_number();
 8002cb6:	f000 fc2b 	bl	8003510 <state_machine_replace_number>
	  break;
 8002cba:	e005      	b.n	8002cc8 <state_machine_run+0x88>
	case SET_ALERT_TIME:
		state_machine_set_alert_time();
 8002cbc:	f000 fa80 	bl	80031c0 <state_machine_set_alert_time>
	  break;
 8002cc0:	e002      	b.n	8002cc8 <state_machine_run+0x88>
	case SET_NEW_PIN:
		state_machine_set_new_pin();
 8002cc2:	f000 fad5 	bl	8003270 <state_machine_set_new_pin>
	  break;
 8002cc6:	bf00      	nop
	}
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	2000000d 	.word	0x2000000d
 8002cd4:	200001e2 	.word	0x200001e2
 8002cd8:	200001d4 	.word	0x200001d4
 8002cdc:	20000000 	.word	0x20000000

08002ce0 <state_machine_armed>:

void state_machine_armed(void){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
	GPIO_PinState singal_state = HAL_GPIO_ReadPin(Alarm_Signal_GPIO_Port, Alarm_Signal_Pin);
 8002ce6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cea:	484d      	ldr	r0, [pc, #308]	@ (8002e20 <state_machine_armed+0x140>)
 8002cec:	f7fe fa3c 	bl	8001168 <HAL_GPIO_ReadPin>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	71fb      	strb	r3, [r7, #7]
	if(changed == true || !singal_state || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e24 <state_machine_armed+0x144>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10c      	bne.n	8002d16 <state_machine_armed+0x36>
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d009      	beq.n	8002d16 <state_machine_armed+0x36>
 8002d02:	f7fd ff97 	bl	8000c34 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <state_machine_armed+0x148>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002d12:	f240 8081 	bls.w	8002e18 <state_machine_armed+0x138>
		if(len == 0 && changed){
 8002d16:	4b45      	ldr	r3, [pc, #276]	@ (8002e2c <state_machine_armed+0x14c>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d117      	bne.n	8002d4e <state_machine_armed+0x6e>
 8002d1e:	4b41      	ldr	r3, [pc, #260]	@ (8002e24 <state_machine_armed+0x144>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d013      	beq.n	8002d4e <state_machine_armed+0x6e>
			changed = false;
 8002d26:	4b3f      	ldr	r3, [pc, #252]	@ (8002e24 <state_machine_armed+0x144>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002d2c:	f7ff fe6e 	bl	8002a0c <lcd_clear>
			lcd_put_cur(0, 0);
 8002d30:	2100      	movs	r1, #0
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7ff fe7e 	bl	8002a34 <lcd_put_cur>
			lcd_send_string ("ARMED");
 8002d38:	483d      	ldr	r0, [pc, #244]	@ (8002e30 <state_machine_armed+0x150>)
 8002d3a:	f7ff fe51 	bl	80029e0 <lcd_send_string>
			lcd_put_cur(1, 0);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7ff fe77 	bl	8002a34 <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8002d46:	483b      	ldr	r0, [pc, #236]	@ (8002e34 <state_machine_armed+0x154>)
 8002d48:	f7ff fe4a 	bl	80029e0 <lcd_send_string>
 8002d4c:	e064      	b.n	8002e18 <state_machine_armed+0x138>
		}
		else if(!singal_state){
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <state_machine_armed+0x86>
			change_state(ARMED_COUNTDOWN);
 8002d54:	2001      	movs	r0, #1
 8002d56:	f7ff fee7 	bl	8002b28 <change_state>
			countdown_start = HAL_GetTick();
 8002d5a:	f7fd ff6b 	bl	8000c34 <HAL_GetTick>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4a35      	ldr	r2, [pc, #212]	@ (8002e38 <state_machine_armed+0x158>)
 8002d62:	6013      	str	r3, [r2, #0]
			}

		}

	}
}
 8002d64:	e058      	b.n	8002e18 <state_machine_armed+0x138>
		else if(len != 0){
 8002d66:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <state_machine_armed+0x14c>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d054      	beq.n	8002e18 <state_machine_armed+0x138>
			lcd_clear();
 8002d6e:	f7ff fe4d 	bl	8002a0c <lcd_clear>
			lcd_put_cur(0, 0);
 8002d72:	2100      	movs	r1, #0
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff fe5d 	bl	8002a34 <lcd_put_cur>
			lcd_send_string("DISARM");
 8002d7a:	4830      	ldr	r0, [pc, #192]	@ (8002e3c <state_machine_armed+0x15c>)
 8002d7c:	f7ff fe30 	bl	80029e0 <lcd_send_string>
			lcd_put_cur(1, 0);
 8002d80:	2100      	movs	r1, #0
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7ff fe56 	bl	8002a34 <lcd_put_cur>
			str[len] = '\0';
 8002d88:	4b28      	ldr	r3, [pc, #160]	@ (8002e2c <state_machine_armed+0x14c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <state_machine_armed+0x160>)
 8002d90:	2100      	movs	r1, #0
 8002d92:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 8002d94:	482a      	ldr	r0, [pc, #168]	@ (8002e40 <state_machine_armed+0x160>)
 8002d96:	f7ff fe23 	bl	80029e0 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8002d9a:	492a      	ldr	r1, [pc, #168]	@ (8002e44 <state_machine_armed+0x164>)
 8002d9c:	4828      	ldr	r0, [pc, #160]	@ (8002e40 <state_machine_armed+0x160>)
 8002d9e:	f7fd fa1f 	bl	80001e0 <strcmp>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <state_machine_armed+0xd0>
				change_state(DISARMED);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f7ff febd 	bl	8002b28 <change_state>
}
 8002dae:	e033      	b.n	8002e18 <state_machine_armed+0x138>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <state_machine_armed+0x14c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <state_machine_armed+0x160>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	2b23      	cmp	r3, #35	@ 0x23
 8002dbc:	d00a      	beq.n	8002dd4 <state_machine_armed+0xf4>
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <state_machine_armed+0x14c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b0e      	cmp	r3, #14
 8002dc4:	d006      	beq.n	8002dd4 <state_machine_armed+0xf4>
 8002dc6:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <state_machine_armed+0x144>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d018      	beq.n	8002e06 <state_machine_armed+0x126>
				lcd_clear();
 8002dd4:	f7ff fe1a 	bl	8002a0c <lcd_clear>
				lcd_put_cur(0, 0);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7ff fe2a 	bl	8002a34 <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8002de0:	4819      	ldr	r0, [pc, #100]	@ (8002e48 <state_machine_armed+0x168>)
 8002de2:	f7ff fdfd 	bl	80029e0 <lcd_send_string>
				memset(str,0,14);
 8002de6:	220e      	movs	r2, #14
 8002de8:	2100      	movs	r1, #0
 8002dea:	4815      	ldr	r0, [pc, #84]	@ (8002e40 <state_machine_armed+0x160>)
 8002dec:	f000 fca6 	bl	800373c <memset>
				len = 0;
 8002df0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e2c <state_machine_armed+0x14c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
				changed = true;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <state_machine_armed+0x144>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8002dfc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e00:	f7fd ff24 	bl	8000c4c <HAL_Delay>
 8002e04:	e008      	b.n	8002e18 <state_machine_armed+0x138>
				timestamp = HAL_GetTick();
 8002e06:	f7fd ff15 	bl	8000c34 <HAL_GetTick>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4a06      	ldr	r2, [pc, #24]	@ (8002e28 <state_machine_armed+0x148>)
 8002e0e:	6013      	str	r3, [r2, #0]
				changed = false;
 8002e10:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <state_machine_armed+0x144>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
}
 8002e16:	e7ff      	b.n	8002e18 <state_machine_armed+0x138>
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40020000 	.word	0x40020000
 8002e24:	2000000d 	.word	0x2000000d
 8002e28:	200001e4 	.word	0x200001e4
 8002e2c:	200001e2 	.word	0x200001e2
 8002e30:	08004084 	.word	0x08004084
 8002e34:	0800408c 	.word	0x0800408c
 8002e38:	200001ec 	.word	0x200001ec
 8002e3c:	0800409c 	.word	0x0800409c
 8002e40:	200001d4 	.word	0x200001d4
 8002e44:	200001f0 	.word	0x200001f0
 8002e48:	080040a4 	.word	0x080040a4

08002e4c <state_machine_disarmed>:

void state_machine_disarmed(void){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8002e50:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <state_machine_disarmed+0x15c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <state_machine_disarmed+0x20>
 8002e58:	f7fd feec 	bl	8000c34 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b53      	ldr	r3, [pc, #332]	@ (8002fac <state_machine_disarmed+0x160>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002e68:	f240 809c 	bls.w	8002fa4 <state_machine_disarmed+0x158>
	  if(len == 0 && changed){
 8002e6c:	4b50      	ldr	r3, [pc, #320]	@ (8002fb0 <state_machine_disarmed+0x164>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d117      	bne.n	8002ea4 <state_machine_disarmed+0x58>
 8002e74:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa8 <state_machine_disarmed+0x15c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <state_machine_disarmed+0x58>
		  changed = false;
 8002e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa8 <state_machine_disarmed+0x15c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
		  lcd_clear();
 8002e82:	f7ff fdc3 	bl	8002a0c <lcd_clear>
		  lcd_put_cur(0, 0);
 8002e86:	2100      	movs	r1, #0
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff fdd3 	bl	8002a34 <lcd_put_cur>
		  lcd_send_string ("DISARMED");
 8002e8e:	4849      	ldr	r0, [pc, #292]	@ (8002fb4 <state_machine_disarmed+0x168>)
 8002e90:	f7ff fda6 	bl	80029e0 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8002e94:	2100      	movs	r1, #0
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7ff fdcc 	bl	8002a34 <lcd_put_cur>
		  lcd_send_string("PIN TO ARM");
 8002e9c:	4846      	ldr	r0, [pc, #280]	@ (8002fb8 <state_machine_disarmed+0x16c>)
 8002e9e:	f7ff fd9f 	bl	80029e0 <lcd_send_string>
 8002ea2:	e07f      	b.n	8002fa4 <state_machine_disarmed+0x158>
	  }
	  else if(len != 0){
 8002ea4:	4b42      	ldr	r3, [pc, #264]	@ (8002fb0 <state_machine_disarmed+0x164>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d07b      	beq.n	8002fa4 <state_machine_disarmed+0x158>
		  lcd_clear();
 8002eac:	f7ff fdae 	bl	8002a0c <lcd_clear>
		  lcd_put_cur(0, 0);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7ff fdbe 	bl	8002a34 <lcd_put_cur>
		  lcd_send_string("DISARMED PIN");
 8002eb8:	4840      	ldr	r0, [pc, #256]	@ (8002fbc <state_machine_disarmed+0x170>)
 8002eba:	f7ff fd91 	bl	80029e0 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	f7ff fdb7 	bl	8002a34 <lcd_put_cur>
		  str[len] = '\0';
 8002ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <state_machine_disarmed+0x164>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]
		  lcd_send_string(str);
 8002ed2:	483b      	ldr	r0, [pc, #236]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002ed4:	f7ff fd84 	bl	80029e0 <lcd_send_string>
		  if(strcmp(str,pin) == 0){
 8002ed8:	493a      	ldr	r1, [pc, #232]	@ (8002fc4 <state_machine_disarmed+0x178>)
 8002eda:	4839      	ldr	r0, [pc, #228]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002edc:	f7fd f980 	bl	80001e0 <strcmp>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <state_machine_disarmed+0xa2>
			  change_state(ARMED);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7ff fe1e 	bl	8002b28 <change_state>
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}
 8002eec:	e05a      	b.n	8002fa4 <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_new_pin) == 0){
 8002eee:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <state_machine_disarmed+0x17c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4832      	ldr	r0, [pc, #200]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002ef6:	f7fd f973 	bl	80001e0 <strcmp>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <state_machine_disarmed+0xbc>
			  change_state(SET_NEW_PIN);
 8002f00:	2004      	movs	r0, #4
 8002f02:	f7ff fe11 	bl	8002b28 <change_state>
}
 8002f06:	e04d      	b.n	8002fa4 <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_alert_time) == 0){
 8002f08:	4b30      	ldr	r3, [pc, #192]	@ (8002fcc <state_machine_disarmed+0x180>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	482c      	ldr	r0, [pc, #176]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002f10:	f7fd f966 	bl	80001e0 <strcmp>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <state_machine_disarmed+0xd6>
			  change_state(SET_ALERT_TIME);
 8002f1a:	2007      	movs	r0, #7
 8002f1c:	f7ff fe04 	bl	8002b28 <change_state>
}
 8002f20:	e040      	b.n	8002fa4 <state_machine_disarmed+0x158>
		  else if(strcmp(str,menage_number) == 0){
 8002f22:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd0 <state_machine_disarmed+0x184>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4619      	mov	r1, r3
 8002f28:	4825      	ldr	r0, [pc, #148]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002f2a:	f7fd f959 	bl	80001e0 <strcmp>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <state_machine_disarmed+0xf0>
			  change_state(MENAGE_NUMBER);
 8002f34:	2005      	movs	r0, #5
 8002f36:	f7ff fdf7 	bl	8002b28 <change_state>
}
 8002f3a:	e033      	b.n	8002fa4 <state_machine_disarmed+0x158>
		  else if(str[len - 1] == '#' || len == 14 || !changed){
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fb0 <state_machine_disarmed+0x164>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	2b23      	cmp	r3, #35	@ 0x23
 8002f48:	d00a      	beq.n	8002f60 <state_machine_disarmed+0x114>
 8002f4a:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <state_machine_disarmed+0x164>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b0e      	cmp	r3, #14
 8002f50:	d006      	beq.n	8002f60 <state_machine_disarmed+0x114>
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <state_machine_disarmed+0x15c>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d018      	beq.n	8002f92 <state_machine_disarmed+0x146>
			  lcd_clear();
 8002f60:	f7ff fd54 	bl	8002a0c <lcd_clear>
			  lcd_put_cur(0, 0);
 8002f64:	2100      	movs	r1, #0
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7ff fd64 	bl	8002a34 <lcd_put_cur>
			  lcd_send_string ("WRONG PIN");
 8002f6c:	4819      	ldr	r0, [pc, #100]	@ (8002fd4 <state_machine_disarmed+0x188>)
 8002f6e:	f7ff fd37 	bl	80029e0 <lcd_send_string>
			  memset(str,0,14);
 8002f72:	220e      	movs	r2, #14
 8002f74:	2100      	movs	r1, #0
 8002f76:	4812      	ldr	r0, [pc, #72]	@ (8002fc0 <state_machine_disarmed+0x174>)
 8002f78:	f000 fbe0 	bl	800373c <memset>
			  len = 0;
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <state_machine_disarmed+0x164>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002f82:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <state_machine_disarmed+0x15c>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(3000);
 8002f88:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002f8c:	f7fd fe5e 	bl	8000c4c <HAL_Delay>
 8002f90:	e008      	b.n	8002fa4 <state_machine_disarmed+0x158>
			  timestamp = HAL_GetTick();
 8002f92:	f7fd fe4f 	bl	8000c34 <HAL_GetTick>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <state_machine_disarmed+0x160>)
 8002f9a:	6013      	str	r3, [r2, #0]
			  changed = false;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	@ (8002fa8 <state_machine_disarmed+0x15c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
}
 8002fa2:	e7ff      	b.n	8002fa4 <state_machine_disarmed+0x158>
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	2000000d 	.word	0x2000000d
 8002fac:	200001e4 	.word	0x200001e4
 8002fb0:	200001e2 	.word	0x200001e2
 8002fb4:	080040b0 	.word	0x080040b0
 8002fb8:	080040bc 	.word	0x080040bc
 8002fbc:	080040c8 	.word	0x080040c8
 8002fc0:	200001d4 	.word	0x200001d4
 8002fc4:	200001f0 	.word	0x200001f0
 8002fc8:	20000014 	.word	0x20000014
 8002fcc:	20000010 	.word	0x20000010
 8002fd0:	20000018 	.word	0x20000018
 8002fd4:	080040a4 	.word	0x080040a4

08002fd8 <state_machine_countdown>:

void state_machine_countdown(void){
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - countdown_start > countdown_delay){
 8002fde:	f7fd fe29 	bl	8000c34 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	4b65      	ldr	r3, [pc, #404]	@ (800317c <state_machine_countdown+0x1a4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	1ad2      	subs	r2, r2, r3
 8002fea:	4b65      	ldr	r3, [pc, #404]	@ (8003180 <state_machine_countdown+0x1a8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d902      	bls.n	8002ff8 <state_machine_countdown+0x20>
		change_state(ALERT_SMS);
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	f7ff fd98 	bl	8002b28 <change_state>
	}
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL || HAL_GetTick() - timestamp_display_s > 1000){
 8002ff8:	4b62      	ldr	r3, [pc, #392]	@ (8003184 <state_machine_countdown+0x1ac>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d112      	bne.n	8003026 <state_machine_countdown+0x4e>
 8003000:	f7fd fe18 	bl	8000c34 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	4b60      	ldr	r3, [pc, #384]	@ (8003188 <state_machine_countdown+0x1b0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003010:	d809      	bhi.n	8003026 <state_machine_countdown+0x4e>
 8003012:	f7fd fe0f 	bl	8000c34 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	4b5c      	ldr	r3, [pc, #368]	@ (800318c <state_machine_countdown+0x1b4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003022:	f240 80a7 	bls.w	8003174 <state_machine_countdown+0x19c>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 8003026:	4b5a      	ldr	r3, [pc, #360]	@ (8003190 <state_machine_countdown+0x1b8>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d13c      	bne.n	80030a8 <state_machine_countdown+0xd0>
 800302e:	4b55      	ldr	r3, [pc, #340]	@ (8003184 <state_machine_countdown+0x1ac>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <state_machine_countdown+0x70>
 8003036:	f7fd fdfd 	bl	8000c34 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	4b53      	ldr	r3, [pc, #332]	@ (800318c <state_machine_countdown+0x1b4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003046:	d92f      	bls.n	80030a8 <state_machine_countdown+0xd0>
			timestamp_display_s = HAL_GetTick();
 8003048:	f7fd fdf4 	bl	8000c34 <HAL_GetTick>
 800304c:	4603      	mov	r3, r0
 800304e:	4a4f      	ldr	r2, [pc, #316]	@ (800318c <state_machine_countdown+0x1b4>)
 8003050:	6013      	str	r3, [r2, #0]
			changed = false;
 8003052:	4b4c      	ldr	r3, [pc, #304]	@ (8003184 <state_machine_countdown+0x1ac>)
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003058:	f7ff fcd8 	bl	8002a0c <lcd_clear>
			lcd_put_cur(0, 0);
 800305c:	2100      	movs	r1, #0
 800305e:	2000      	movs	r0, #0
 8003060:	f7ff fce8 	bl	8002a34 <lcd_put_cur>
			char buf[14];
			snprintf(buf, 14 ,"COUNTDOWN %lu s",(uint32_t)(countdown_delay/1000 - (HAL_GetTick() - countdown_start)/1000));
 8003064:	4b46      	ldr	r3, [pc, #280]	@ (8003180 <state_machine_countdown+0x1a8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a4a      	ldr	r2, [pc, #296]	@ (8003194 <state_machine_countdown+0x1bc>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	099c      	lsrs	r4, r3, #6
 8003070:	f7fd fde0 	bl	8000c34 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	4b41      	ldr	r3, [pc, #260]	@ (800317c <state_machine_countdown+0x1a4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	4a45      	ldr	r2, [pc, #276]	@ (8003194 <state_machine_countdown+0x1bc>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	1ae3      	subs	r3, r4, r3
 8003086:	4638      	mov	r0, r7
 8003088:	4a43      	ldr	r2, [pc, #268]	@ (8003198 <state_machine_countdown+0x1c0>)
 800308a:	210e      	movs	r1, #14
 800308c:	f000 fb22 	bl	80036d4 <sniprintf>
			lcd_send_string (buf);
 8003090:	463b      	mov	r3, r7
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fca4 	bl	80029e0 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003098:	2100      	movs	r1, #0
 800309a:	2001      	movs	r0, #1
 800309c:	f7ff fcca 	bl	8002a34 <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 80030a0:	483e      	ldr	r0, [pc, #248]	@ (800319c <state_machine_countdown+0x1c4>)
 80030a2:	f7ff fc9d 	bl	80029e0 <lcd_send_string>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 80030a6:	e065      	b.n	8003174 <state_machine_countdown+0x19c>
		}
		else if(len != 0 && (HAL_GetTick() - timestamp > TIME_PER_SYMBOL || changed)){
 80030a8:	4b39      	ldr	r3, [pc, #228]	@ (8003190 <state_machine_countdown+0x1b8>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d061      	beq.n	8003174 <state_machine_countdown+0x19c>
 80030b0:	f7fd fdc0 	bl	8000c34 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b34      	ldr	r3, [pc, #208]	@ (8003188 <state_machine_countdown+0x1b0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80030c0:	d803      	bhi.n	80030ca <state_machine_countdown+0xf2>
 80030c2:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <state_machine_countdown+0x1ac>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d054      	beq.n	8003174 <state_machine_countdown+0x19c>
			lcd_clear();
 80030ca:	f7ff fc9f 	bl	8002a0c <lcd_clear>
			lcd_put_cur(0, 0);
 80030ce:	2100      	movs	r1, #0
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7ff fcaf 	bl	8002a34 <lcd_put_cur>
			lcd_send_string("DISARM");
 80030d6:	4832      	ldr	r0, [pc, #200]	@ (80031a0 <state_machine_countdown+0x1c8>)
 80030d8:	f7ff fc82 	bl	80029e0 <lcd_send_string>
			lcd_put_cur(1, 0);
 80030dc:	2100      	movs	r1, #0
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff fca8 	bl	8002a34 <lcd_put_cur>
			str[len] = '\0';
 80030e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003190 <state_machine_countdown+0x1b8>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b2e      	ldr	r3, [pc, #184]	@ (80031a4 <state_machine_countdown+0x1cc>)
 80030ec:	2100      	movs	r1, #0
 80030ee:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 80030f0:	482c      	ldr	r0, [pc, #176]	@ (80031a4 <state_machine_countdown+0x1cc>)
 80030f2:	f7ff fc75 	bl	80029e0 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 80030f6:	492c      	ldr	r1, [pc, #176]	@ (80031a8 <state_machine_countdown+0x1d0>)
 80030f8:	482a      	ldr	r0, [pc, #168]	@ (80031a4 <state_machine_countdown+0x1cc>)
 80030fa:	f7fd f871 	bl	80001e0 <strcmp>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d103      	bne.n	800310c <state_machine_countdown+0x134>
				change_state(DISARMED);
 8003104:	2003      	movs	r0, #3
 8003106:	f7ff fd0f 	bl	8002b28 <change_state>
				changed = false;
			}
		}
	}

}
 800310a:	e033      	b.n	8003174 <state_machine_countdown+0x19c>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 800310c:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <state_machine_countdown+0x1b8>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	3b01      	subs	r3, #1
 8003112:	4a24      	ldr	r2, [pc, #144]	@ (80031a4 <state_machine_countdown+0x1cc>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	2b23      	cmp	r3, #35	@ 0x23
 8003118:	d00a      	beq.n	8003130 <state_machine_countdown+0x158>
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <state_machine_countdown+0x1b8>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b0e      	cmp	r3, #14
 8003120:	d006      	beq.n	8003130 <state_machine_countdown+0x158>
 8003122:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <state_machine_countdown+0x1ac>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d018      	beq.n	8003162 <state_machine_countdown+0x18a>
				lcd_clear();
 8003130:	f7ff fc6c 	bl	8002a0c <lcd_clear>
				lcd_put_cur(0, 0);
 8003134:	2100      	movs	r1, #0
 8003136:	2000      	movs	r0, #0
 8003138:	f7ff fc7c 	bl	8002a34 <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 800313c:	481b      	ldr	r0, [pc, #108]	@ (80031ac <state_machine_countdown+0x1d4>)
 800313e:	f7ff fc4f 	bl	80029e0 <lcd_send_string>
				memset(str,0,14);
 8003142:	220e      	movs	r2, #14
 8003144:	2100      	movs	r1, #0
 8003146:	4817      	ldr	r0, [pc, #92]	@ (80031a4 <state_machine_countdown+0x1cc>)
 8003148:	f000 faf8 	bl	800373c <memset>
				len = 0;
 800314c:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <state_machine_countdown+0x1b8>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
				changed = true;
 8003152:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <state_machine_countdown+0x1ac>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8003158:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800315c:	f7fd fd76 	bl	8000c4c <HAL_Delay>
 8003160:	e008      	b.n	8003174 <state_machine_countdown+0x19c>
				timestamp = HAL_GetTick();
 8003162:	f7fd fd67 	bl	8000c34 <HAL_GetTick>
 8003166:	4603      	mov	r3, r0
 8003168:	4a07      	ldr	r2, [pc, #28]	@ (8003188 <state_machine_countdown+0x1b0>)
 800316a:	6013      	str	r3, [r2, #0]
				changed = false;
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <state_machine_countdown+0x1ac>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
}
 8003172:	e7ff      	b.n	8003174 <state_machine_countdown+0x19c>
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}
 800317c:	200001ec 	.word	0x200001ec
 8003180:	2000022c 	.word	0x2000022c
 8003184:	2000000d 	.word	0x2000000d
 8003188:	200001e4 	.word	0x200001e4
 800318c:	200001e8 	.word	0x200001e8
 8003190:	200001e2 	.word	0x200001e2
 8003194:	10624dd3 	.word	0x10624dd3
 8003198:	080040d8 	.word	0x080040d8
 800319c:	0800408c 	.word	0x0800408c
 80031a0:	0800409c 	.word	0x0800409c
 80031a4:	200001d4 	.word	0x200001d4
 80031a8:	200001f0 	.word	0x200001f0
 80031ac:	080040a4 	.word	0x080040a4

080031b0 <state_machine_alert>:

void state_machine_alert(void){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0

	//TODO GSM SEND
	change_state(ARMED);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7ff fcb7 	bl	8002b28 <change_state>
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <state_machine_set_alert_time>:

void state_machine_set_alert_time(void){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	if(changed == true){
 80031c4:	4b25      	ldr	r3, [pc, #148]	@ (800325c <state_machine_set_alert_time+0x9c>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d045      	beq.n	8003258 <state_machine_set_alert_time+0x98>
		if(len == 0 && changed){
 80031cc:	4b24      	ldr	r3, [pc, #144]	@ (8003260 <state_machine_set_alert_time+0xa0>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d110      	bne.n	80031f6 <state_machine_set_alert_time+0x36>
 80031d4:	4b21      	ldr	r3, [pc, #132]	@ (800325c <state_machine_set_alert_time+0x9c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <state_machine_set_alert_time+0x36>
			changed = false;
 80031dc:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <state_machine_set_alert_time+0x9c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80031e2:	f7ff fc13 	bl	8002a0c <lcd_clear>
			lcd_put_cur(0, 0);
 80031e6:	2100      	movs	r1, #0
 80031e8:	2000      	movs	r0, #0
 80031ea:	f7ff fc23 	bl	8002a34 <lcd_put_cur>
			lcd_send_string ("TIME(S),#=SAVE");
 80031ee:	481d      	ldr	r0, [pc, #116]	@ (8003264 <state_machine_set_alert_time+0xa4>)
 80031f0:	f7ff fbf6 	bl	80029e0 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 80031f4:	e030      	b.n	8003258 <state_machine_set_alert_time+0x98>
		else if(len != 0){
 80031f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003260 <state_machine_set_alert_time+0xa0>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d02c      	beq.n	8003258 <state_machine_set_alert_time+0x98>
			lcd_put_cur(1, 0);
 80031fe:	2100      	movs	r1, #0
 8003200:	2001      	movs	r0, #1
 8003202:	f7ff fc17 	bl	8002a34 <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 8003206:	4b16      	ldr	r3, [pc, #88]	@ (8003260 <state_machine_set_alert_time+0xa0>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	3b01      	subs	r3, #1
 800320c:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <state_machine_set_alert_time+0xa8>)
 800320e:	5cd3      	ldrb	r3, [r2, r3]
 8003210:	2b2a      	cmp	r3, #42	@ 0x2a
 8003212:	d003      	beq.n	800321c <state_machine_set_alert_time+0x5c>
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <state_machine_set_alert_time+0xa0>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b09      	cmp	r3, #9
 800321a:	d902      	bls.n	8003222 <state_machine_set_alert_time+0x62>
				change_state(DISARMED);
 800321c:	2003      	movs	r0, #3
 800321e:	f7ff fc83 	bl	8002b28 <change_state>
			lcd_send_string(str);
 8003222:	4811      	ldr	r0, [pc, #68]	@ (8003268 <state_machine_set_alert_time+0xa8>)
 8003224:	f7ff fbdc 	bl	80029e0 <lcd_send_string>
			if(str[len - 1] == '#'){
 8003228:	4b0d      	ldr	r3, [pc, #52]	@ (8003260 <state_machine_set_alert_time+0xa0>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	3b01      	subs	r3, #1
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <state_machine_set_alert_time+0xa8>)
 8003230:	5cd3      	ldrb	r3, [r2, r3]
 8003232:	2b23      	cmp	r3, #35	@ 0x23
 8003234:	d110      	bne.n	8003258 <state_machine_set_alert_time+0x98>
				countdown_delay = s_to_ms(strtol(str, NULL, 10));
 8003236:	220a      	movs	r2, #10
 8003238:	2100      	movs	r1, #0
 800323a:	480b      	ldr	r0, [pc, #44]	@ (8003268 <state_machine_set_alert_time+0xa8>)
 800323c:	f000 fa40 	bl	80036c0 <strtol>
 8003240:	4603      	mov	r3, r0
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fc90 	bl	8002b68 <s_to_ms>
 8003248:	4603      	mov	r3, r0
 800324a:	4a08      	ldr	r2, [pc, #32]	@ (800326c <state_machine_set_alert_time+0xac>)
 800324c:	6013      	str	r3, [r2, #0]
				save_new_state();
 800324e:	f7ff fc11 	bl	8002a74 <save_new_state>
				change_state(DISARMED);
 8003252:	2003      	movs	r0, #3
 8003254:	f7ff fc68 	bl	8002b28 <change_state>
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2000000d 	.word	0x2000000d
 8003260:	200001e2 	.word	0x200001e2
 8003264:	080040e8 	.word	0x080040e8
 8003268:	200001d4 	.word	0x200001d4
 800326c:	2000022c 	.word	0x2000022c

08003270 <state_machine_set_new_pin>:

void state_machine_set_new_pin(void){
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
	if(changed == true){
 8003274:	4b25      	ldr	r3, [pc, #148]	@ (800330c <state_machine_set_new_pin+0x9c>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d045      	beq.n	8003308 <state_machine_set_new_pin+0x98>
		if(len == 0 && changed){
 800327c:	4b24      	ldr	r3, [pc, #144]	@ (8003310 <state_machine_set_new_pin+0xa0>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d110      	bne.n	80032a6 <state_machine_set_new_pin+0x36>
 8003284:	4b21      	ldr	r3, [pc, #132]	@ (800330c <state_machine_set_new_pin+0x9c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <state_machine_set_new_pin+0x36>
			changed = false;
 800328c:	4b1f      	ldr	r3, [pc, #124]	@ (800330c <state_machine_set_new_pin+0x9c>)
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003292:	f7ff fbbb 	bl	8002a0c <lcd_clear>
			lcd_put_cur(0, 0);
 8003296:	2100      	movs	r1, #0
 8003298:	2000      	movs	r0, #0
 800329a:	f7ff fbcb 	bl	8002a34 <lcd_put_cur>
			lcd_send_string ("SET PIN,#=SAVE");
 800329e:	481d      	ldr	r0, [pc, #116]	@ (8003314 <state_machine_set_new_pin+0xa4>)
 80032a0:	f7ff fb9e 	bl	80029e0 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 80032a4:	e030      	b.n	8003308 <state_machine_set_new_pin+0x98>
		else if(len != 0){
 80032a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <state_machine_set_new_pin+0xa0>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d02c      	beq.n	8003308 <state_machine_set_new_pin+0x98>
			lcd_put_cur(1, 0);
 80032ae:	2100      	movs	r1, #0
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7ff fbbf 	bl	8002a34 <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 80032b6:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <state_machine_set_new_pin+0xa0>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <state_machine_set_new_pin+0xa8>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032c2:	d003      	beq.n	80032cc <state_machine_set_new_pin+0x5c>
 80032c4:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <state_machine_set_new_pin+0xa0>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d902      	bls.n	80032d2 <state_machine_set_new_pin+0x62>
				change_state(DISARMED);
 80032cc:	2003      	movs	r0, #3
 80032ce:	f7ff fc2b 	bl	8002b28 <change_state>
			lcd_send_string(str);
 80032d2:	4811      	ldr	r0, [pc, #68]	@ (8003318 <state_machine_set_new_pin+0xa8>)
 80032d4:	f7ff fb84 	bl	80029e0 <lcd_send_string>
			if(str[len - 1] == '#'){
 80032d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <state_machine_set_new_pin+0xa0>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	3b01      	subs	r3, #1
 80032de:	4a0e      	ldr	r2, [pc, #56]	@ (8003318 <state_machine_set_new_pin+0xa8>)
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
 80032e2:	2b23      	cmp	r3, #35	@ 0x23
 80032e4:	d110      	bne.n	8003308 <state_machine_set_new_pin+0x98>
				memset(pin, 0, 9);
 80032e6:	2209      	movs	r2, #9
 80032e8:	2100      	movs	r1, #0
 80032ea:	480c      	ldr	r0, [pc, #48]	@ (800331c <state_machine_set_new_pin+0xac>)
 80032ec:	f000 fa26 	bl	800373c <memset>
				memcpy(pin,str,len);
 80032f0:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <state_machine_set_new_pin+0xa0>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4908      	ldr	r1, [pc, #32]	@ (8003318 <state_machine_set_new_pin+0xa8>)
 80032f8:	4808      	ldr	r0, [pc, #32]	@ (800331c <state_machine_set_new_pin+0xac>)
 80032fa:	f000 fa53 	bl	80037a4 <memcpy>
				save_new_state();
 80032fe:	f7ff fbb9 	bl	8002a74 <save_new_state>
				change_state(DISARMED);
 8003302:	2003      	movs	r0, #3
 8003304:	f7ff fc10 	bl	8002b28 <change_state>
}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2000000d 	.word	0x2000000d
 8003310:	200001e2 	.word	0x200001e2
 8003314:	080040f8 	.word	0x080040f8
 8003318:	200001d4 	.word	0x200001d4
 800331c:	200001f0 	.word	0x200001f0

08003320 <state_machine_menage_number>:

void state_machine_menage_number(void){
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
	static char code[4] = "";
	bool code_add = false;
 8003326:	2300      	movs	r3, #0
 8003328:	75fb      	strb	r3, [r7, #23]
	if(changed == true){
 800332a:	4b6e      	ldr	r3, [pc, #440]	@ (80034e4 <state_machine_menage_number+0x1c4>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80d3 	beq.w	80034da <state_machine_menage_number+0x1ba>
		changed = false;
 8003334:	4b6b      	ldr	r3, [pc, #428]	@ (80034e4 <state_machine_menage_number+0x1c4>)
 8003336:	2200      	movs	r2, #0
 8003338:	701a      	strb	r2, [r3, #0]
		if(!*str) id = 0;
 800333a:	4b6b      	ldr	r3, [pc, #428]	@ (80034e8 <state_machine_menage_number+0x1c8>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <state_machine_menage_number+0x2a>
 8003342:	4b6a      	ldr	r3, [pc, #424]	@ (80034ec <state_machine_menage_number+0x1cc>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e061      	b.n	800340e <state_machine_menage_number+0xee>
		else if(*str == '8') id = (id + 1) % 3;
 800334a:	4b67      	ldr	r3, [pc, #412]	@ (80034e8 <state_machine_menage_number+0x1c8>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b38      	cmp	r3, #56	@ 0x38
 8003350:	d10f      	bne.n	8003372 <state_machine_menage_number+0x52>
 8003352:	4b66      	ldr	r3, [pc, #408]	@ (80034ec <state_machine_menage_number+0x1cc>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	4b65      	ldr	r3, [pc, #404]	@ (80034f0 <state_machine_menage_number+0x1d0>)
 800335a:	fb83 3102 	smull	r3, r1, r3, r2
 800335e:	17d3      	asrs	r3, r2, #31
 8003360:	1ac9      	subs	r1, r1, r3
 8003362:	460b      	mov	r3, r1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	440b      	add	r3, r1
 8003368:	1ad1      	subs	r1, r2, r3
 800336a:	b2ca      	uxtb	r2, r1
 800336c:	4b5f      	ldr	r3, [pc, #380]	@ (80034ec <state_machine_menage_number+0x1cc>)
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e04d      	b.n	800340e <state_machine_menage_number+0xee>
		else if(*str == '2' && id > 0) id = id - 1;
 8003372:	4b5d      	ldr	r3, [pc, #372]	@ (80034e8 <state_machine_menage_number+0x1c8>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b32      	cmp	r3, #50	@ 0x32
 8003378:	d10a      	bne.n	8003390 <state_machine_menage_number+0x70>
 800337a:	4b5c      	ldr	r3, [pc, #368]	@ (80034ec <state_machine_menage_number+0x1cc>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <state_machine_menage_number+0x70>
 8003382:	4b5a      	ldr	r3, [pc, #360]	@ (80034ec <state_machine_menage_number+0x1cc>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	3b01      	subs	r3, #1
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4b58      	ldr	r3, [pc, #352]	@ (80034ec <state_machine_menage_number+0x1cc>)
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e03e      	b.n	800340e <state_machine_menage_number+0xee>
		else if(*str == '2') id = 2;
 8003390:	4b55      	ldr	r3, [pc, #340]	@ (80034e8 <state_machine_menage_number+0x1c8>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b32      	cmp	r3, #50	@ 0x32
 8003396:	d103      	bne.n	80033a0 <state_machine_menage_number+0x80>
 8003398:	4b54      	ldr	r3, [pc, #336]	@ (80034ec <state_machine_menage_number+0x1cc>)
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e036      	b.n	800340e <state_machine_menage_number+0xee>
		else if(*str == '*') change_state(DISARMED);
 80033a0:	4b51      	ldr	r3, [pc, #324]	@ (80034e8 <state_machine_menage_number+0x1c8>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80033a6:	d103      	bne.n	80033b0 <state_machine_menage_number+0x90>
 80033a8:	2003      	movs	r0, #3
 80033aa:	f7ff fbbd 	bl	8002b28 <change_state>
 80033ae:	e02e      	b.n	800340e <state_machine_menage_number+0xee>
		else{
			code[strlen(code)] = *str;
 80033b0:	4850      	ldr	r0, [pc, #320]	@ (80034f4 <state_machine_menage_number+0x1d4>)
 80033b2:	f7fc ff1f 	bl	80001f4 <strlen>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4a4b      	ldr	r2, [pc, #300]	@ (80034e8 <state_machine_menage_number+0x1c8>)
 80033ba:	7811      	ldrb	r1, [r2, #0]
 80033bc:	4a4d      	ldr	r2, [pc, #308]	@ (80034f4 <state_machine_menage_number+0x1d4>)
 80033be:	54d1      	strb	r1, [r2, r3]
			code_add = true;
 80033c0:	2301      	movs	r3, #1
 80033c2:	75fb      	strb	r3, [r7, #23]
			if(strcmp(code, "7777") == 0)//REPLACE
 80033c4:	494c      	ldr	r1, [pc, #304]	@ (80034f8 <state_machine_menage_number+0x1d8>)
 80033c6:	484b      	ldr	r0, [pc, #300]	@ (80034f4 <state_machine_menage_number+0x1d4>)
 80033c8:	f7fc ff0a 	bl	80001e0 <strcmp>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <state_machine_menage_number+0xba>
				change_state(REPLACE_NUMBER);
 80033d2:	2006      	movs	r0, #6
 80033d4:	f7ff fba8 	bl	8002b28 <change_state>
 80033d8:	e019      	b.n	800340e <state_machine_menage_number+0xee>
			else if(strcmp(code,"3333") == 0)//DELETE
 80033da:	4948      	ldr	r1, [pc, #288]	@ (80034fc <state_machine_menage_number+0x1dc>)
 80033dc:	4845      	ldr	r0, [pc, #276]	@ (80034f4 <state_machine_menage_number+0x1d4>)
 80033de:	f7fc feff 	bl	80001e0 <strcmp>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d112      	bne.n	800340e <state_machine_menage_number+0xee>
			{
				for(int i = 0; i < 16; ++i){
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e00a      	b.n	8003404 <state_machine_menage_number+0xe4>
					numbers[id*16 + i] = '\0';
 80033ee:	4b3f      	ldr	r3, [pc, #252]	@ (80034ec <state_machine_menage_number+0x1cc>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	011a      	lsls	r2, r3, #4
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	4a41      	ldr	r2, [pc, #260]	@ (8003500 <state_machine_menage_number+0x1e0>)
 80033fa:	2100      	movs	r1, #0
 80033fc:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < 16; ++i){
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3301      	adds	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b0f      	cmp	r3, #15
 8003408:	ddf1      	ble.n	80033ee <state_machine_menage_number+0xce>
				}
				save_new_state();
 800340a:	f7ff fb33 	bl	8002a74 <save_new_state>
			}
		}
		*str = '\0';
 800340e:	4b36      	ldr	r3, [pc, #216]	@ (80034e8 <state_machine_menage_number+0x1c8>)
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
		len = 0;
 8003414:	4b3b      	ldr	r3, [pc, #236]	@ (8003504 <state_machine_menage_number+0x1e4>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
		if(!code_add) memset(code,0,4);
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	f083 0301 	eor.w	r3, r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <state_machine_menage_number+0x110>
 8003426:	2204      	movs	r2, #4
 8003428:	2100      	movs	r1, #0
 800342a:	4832      	ldr	r0, [pc, #200]	@ (80034f4 <state_machine_menage_number+0x1d4>)
 800342c:	f000 f986 	bl	800373c <memset>

		char line[14] = "";
 8003430:	2300      	movs	r3, #0
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	811a      	strh	r2, [r3, #8]
		snprintf(line, 14, "->%d.", id + 1);
 800343e:	4b2b      	ldr	r3, [pc, #172]	@ (80034ec <state_machine_menage_number+0x1cc>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4638      	mov	r0, r7
 8003446:	4a30      	ldr	r2, [pc, #192]	@ (8003508 <state_machine_menage_number+0x1e8>)
 8003448:	210e      	movs	r1, #14
 800344a:	f000 f943 	bl	80036d4 <sniprintf>
		memcpy(line+4, numbers + 16*id, 9);
 800344e:	463b      	mov	r3, r7
 8003450:	3304      	adds	r3, #4
 8003452:	4a26      	ldr	r2, [pc, #152]	@ (80034ec <state_machine_menage_number+0x1cc>)
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	4611      	mov	r1, r2
 800345a:	4a29      	ldr	r2, [pc, #164]	@ (8003500 <state_machine_menage_number+0x1e0>)
 800345c:	4411      	add	r1, r2
 800345e:	2209      	movs	r2, #9
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f99f 	bl	80037a4 <memcpy>
		lcd_clear();
 8003466:	f7ff fad1 	bl	8002a0c <lcd_clear>
		lcd_put_cur(0, 0);
 800346a:	2100      	movs	r1, #0
 800346c:	2000      	movs	r0, #0
 800346e:	f7ff fae1 	bl	8002a34 <lcd_put_cur>
		lcd_send_string(line);
 8003472:	463b      	mov	r3, r7
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fab3 	bl	80029e0 <lcd_send_string>
		lcd_put_cur(1, 0);
 800347a:	2100      	movs	r1, #0
 800347c:	2001      	movs	r0, #1
 800347e:	f7ff fad9 	bl	8002a34 <lcd_put_cur>
		snprintf(line, 14, "  %d.", (id + 1)%3 + 1);
 8003482:	4b1a      	ldr	r3, [pc, #104]	@ (80034ec <state_machine_menage_number+0x1cc>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	1c59      	adds	r1, r3, #1
 8003488:	4b19      	ldr	r3, [pc, #100]	@ (80034f0 <state_machine_menage_number+0x1d0>)
 800348a:	fb83 3201 	smull	r3, r2, r3, r1
 800348e:	17cb      	asrs	r3, r1, #31
 8003490:	1ad2      	subs	r2, r2, r3
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	1aca      	subs	r2, r1, r3
 800349a:	1c53      	adds	r3, r2, #1
 800349c:	4638      	mov	r0, r7
 800349e:	4a1b      	ldr	r2, [pc, #108]	@ (800350c <state_machine_menage_number+0x1ec>)
 80034a0:	210e      	movs	r1, #14
 80034a2:	f000 f917 	bl	80036d4 <sniprintf>
		memcpy(line + 4, numbers + 16*((id+1)%3), 9);
 80034a6:	4638      	mov	r0, r7
 80034a8:	3004      	adds	r0, #4
 80034aa:	4b10      	ldr	r3, [pc, #64]	@ (80034ec <state_machine_menage_number+0x1cc>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <state_machine_menage_number+0x1d0>)
 80034b2:	fb83 3201 	smull	r3, r2, r3, r1
 80034b6:	17cb      	asrs	r3, r1, #31
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	1aca      	subs	r2, r1, r3
 80034c2:	0113      	lsls	r3, r2, #4
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <state_machine_menage_number+0x1e0>)
 80034c8:	4413      	add	r3, r2
 80034ca:	2209      	movs	r2, #9
 80034cc:	4619      	mov	r1, r3
 80034ce:	f000 f969 	bl	80037a4 <memcpy>
		lcd_send_string(line);
 80034d2:	463b      	mov	r3, r7
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fa83 	bl	80029e0 <lcd_send_string>
	}
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	2000000d 	.word	0x2000000d
 80034e8:	200001d4 	.word	0x200001d4
 80034ec:	200001e3 	.word	0x200001e3
 80034f0:	55555556 	.word	0x55555556
 80034f4:	20000230 	.word	0x20000230
 80034f8:	08004108 	.word	0x08004108
 80034fc:	08004110 	.word	0x08004110
 8003500:	200001fc 	.word	0x200001fc
 8003504:	200001e2 	.word	0x200001e2
 8003508:	08004118 	.word	0x08004118
 800350c:	08004120 	.word	0x08004120

08003510 <state_machine_replace_number>:

void state_machine_replace_number(void){
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
	if(changed == true){
 8003514:	4b27      	ldr	r3, [pc, #156]	@ (80035b4 <state_machine_replace_number+0xa4>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d049      	beq.n	80035b0 <state_machine_replace_number+0xa0>
		changed = false;
 800351c:	4b25      	ldr	r3, [pc, #148]	@ (80035b4 <state_machine_replace_number+0xa4>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8003522:	f7ff fa73 	bl	8002a0c <lcd_clear>
		lcd_put_cur(0, 0);
 8003526:	2100      	movs	r1, #0
 8003528:	2000      	movs	r0, #0
 800352a:	f7ff fa83 	bl	8002a34 <lcd_put_cur>
		lcd_send_string("ADD NUMBER #-save");
 800352e:	4822      	ldr	r0, [pc, #136]	@ (80035b8 <state_machine_replace_number+0xa8>)
 8003530:	f7ff fa56 	bl	80029e0 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003534:	2100      	movs	r1, #0
 8003536:	2001      	movs	r0, #1
 8003538:	f7ff fa7c 	bl	8002a34 <lcd_put_cur>
		str[len] = '\0';
 800353c:	4b1f      	ldr	r3, [pc, #124]	@ (80035bc <state_machine_replace_number+0xac>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	4b1f      	ldr	r3, [pc, #124]	@ (80035c0 <state_machine_replace_number+0xb0>)
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]
		lcd_send_string(str);
 8003548:	481d      	ldr	r0, [pc, #116]	@ (80035c0 <state_machine_replace_number+0xb0>)
 800354a:	f7ff fa49 	bl	80029e0 <lcd_send_string>

		if(str[len - 1] == '*' || len > 10 || (len != 10 && str[len - 1] == '#')) change_state(MENAGE_NUMBER);
 800354e:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <state_machine_replace_number+0xac>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	3b01      	subs	r3, #1
 8003554:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <state_machine_replace_number+0xb0>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	2b2a      	cmp	r3, #42	@ 0x2a
 800355a:	d00e      	beq.n	800357a <state_machine_replace_number+0x6a>
 800355c:	4b17      	ldr	r3, [pc, #92]	@ (80035bc <state_machine_replace_number+0xac>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b0a      	cmp	r3, #10
 8003562:	d80a      	bhi.n	800357a <state_machine_replace_number+0x6a>
 8003564:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <state_machine_replace_number+0xac>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b0a      	cmp	r3, #10
 800356a:	d00a      	beq.n	8003582 <state_machine_replace_number+0x72>
 800356c:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <state_machine_replace_number+0xac>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	4a13      	ldr	r2, [pc, #76]	@ (80035c0 <state_machine_replace_number+0xb0>)
 8003574:	5cd3      	ldrb	r3, [r2, r3]
 8003576:	2b23      	cmp	r3, #35	@ 0x23
 8003578:	d103      	bne.n	8003582 <state_machine_replace_number+0x72>
 800357a:	2005      	movs	r0, #5
 800357c:	f7ff fad4 	bl	8002b28 <change_state>
			memcpy(numbers + id * 16, str, 9);
			save_new_state();
			change_state(MENAGE_NUMBER);
		}
	}
}
 8003580:	e016      	b.n	80035b0 <state_machine_replace_number+0xa0>
		else if(str[len - 1] == '#'){
 8003582:	4b0e      	ldr	r3, [pc, #56]	@ (80035bc <state_machine_replace_number+0xac>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	3b01      	subs	r3, #1
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <state_machine_replace_number+0xb0>)
 800358a:	5cd3      	ldrb	r3, [r2, r3]
 800358c:	2b23      	cmp	r3, #35	@ 0x23
 800358e:	d10f      	bne.n	80035b0 <state_machine_replace_number+0xa0>
			memcpy(numbers + id * 16, str, 9);
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <state_machine_replace_number+0xb4>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	461a      	mov	r2, r3
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <state_machine_replace_number+0xb8>)
 800359a:	4413      	add	r3, r2
 800359c:	2209      	movs	r2, #9
 800359e:	4908      	ldr	r1, [pc, #32]	@ (80035c0 <state_machine_replace_number+0xb0>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f8ff 	bl	80037a4 <memcpy>
			save_new_state();
 80035a6:	f7ff fa65 	bl	8002a74 <save_new_state>
			change_state(MENAGE_NUMBER);
 80035aa:	2005      	movs	r0, #5
 80035ac:	f7ff fabc 	bl	8002b28 <change_state>
}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	2000000d 	.word	0x2000000d
 80035b8:	08004128 	.word	0x08004128
 80035bc:	200001e2 	.word	0x200001e2
 80035c0:	200001d4 	.word	0x200001d4
 80035c4:	200001e3 	.word	0x200001e3
 80035c8:	200001fc 	.word	0x200001fc

080035cc <_strtol_l.constprop.0>:
 80035cc:	2b24      	cmp	r3, #36	@ 0x24
 80035ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d2:	4686      	mov	lr, r0
 80035d4:	4690      	mov	r8, r2
 80035d6:	d801      	bhi.n	80035dc <_strtol_l.constprop.0+0x10>
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d106      	bne.n	80035ea <_strtol_l.constprop.0+0x1e>
 80035dc:	f000 f8b6 	bl	800374c <__errno>
 80035e0:	2316      	movs	r3, #22
 80035e2:	6003      	str	r3, [r0, #0]
 80035e4:	2000      	movs	r0, #0
 80035e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ea:	4834      	ldr	r0, [pc, #208]	@ (80036bc <_strtol_l.constprop.0+0xf0>)
 80035ec:	460d      	mov	r5, r1
 80035ee:	462a      	mov	r2, r5
 80035f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035f4:	5d06      	ldrb	r6, [r0, r4]
 80035f6:	f016 0608 	ands.w	r6, r6, #8
 80035fa:	d1f8      	bne.n	80035ee <_strtol_l.constprop.0+0x22>
 80035fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80035fe:	d12d      	bne.n	800365c <_strtol_l.constprop.0+0x90>
 8003600:	782c      	ldrb	r4, [r5, #0]
 8003602:	2601      	movs	r6, #1
 8003604:	1c95      	adds	r5, r2, #2
 8003606:	f033 0210 	bics.w	r2, r3, #16
 800360a:	d109      	bne.n	8003620 <_strtol_l.constprop.0+0x54>
 800360c:	2c30      	cmp	r4, #48	@ 0x30
 800360e:	d12a      	bne.n	8003666 <_strtol_l.constprop.0+0x9a>
 8003610:	782a      	ldrb	r2, [r5, #0]
 8003612:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003616:	2a58      	cmp	r2, #88	@ 0x58
 8003618:	d125      	bne.n	8003666 <_strtol_l.constprop.0+0x9a>
 800361a:	786c      	ldrb	r4, [r5, #1]
 800361c:	2310      	movs	r3, #16
 800361e:	3502      	adds	r5, #2
 8003620:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003624:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003628:	2200      	movs	r2, #0
 800362a:	fbbc f9f3 	udiv	r9, ip, r3
 800362e:	4610      	mov	r0, r2
 8003630:	fb03 ca19 	mls	sl, r3, r9, ip
 8003634:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003638:	2f09      	cmp	r7, #9
 800363a:	d81b      	bhi.n	8003674 <_strtol_l.constprop.0+0xa8>
 800363c:	463c      	mov	r4, r7
 800363e:	42a3      	cmp	r3, r4
 8003640:	dd27      	ble.n	8003692 <_strtol_l.constprop.0+0xc6>
 8003642:	1c57      	adds	r7, r2, #1
 8003644:	d007      	beq.n	8003656 <_strtol_l.constprop.0+0x8a>
 8003646:	4581      	cmp	r9, r0
 8003648:	d320      	bcc.n	800368c <_strtol_l.constprop.0+0xc0>
 800364a:	d101      	bne.n	8003650 <_strtol_l.constprop.0+0x84>
 800364c:	45a2      	cmp	sl, r4
 800364e:	db1d      	blt.n	800368c <_strtol_l.constprop.0+0xc0>
 8003650:	fb00 4003 	mla	r0, r0, r3, r4
 8003654:	2201      	movs	r2, #1
 8003656:	f815 4b01 	ldrb.w	r4, [r5], #1
 800365a:	e7eb      	b.n	8003634 <_strtol_l.constprop.0+0x68>
 800365c:	2c2b      	cmp	r4, #43	@ 0x2b
 800365e:	bf04      	itt	eq
 8003660:	782c      	ldrbeq	r4, [r5, #0]
 8003662:	1c95      	addeq	r5, r2, #2
 8003664:	e7cf      	b.n	8003606 <_strtol_l.constprop.0+0x3a>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1da      	bne.n	8003620 <_strtol_l.constprop.0+0x54>
 800366a:	2c30      	cmp	r4, #48	@ 0x30
 800366c:	bf0c      	ite	eq
 800366e:	2308      	moveq	r3, #8
 8003670:	230a      	movne	r3, #10
 8003672:	e7d5      	b.n	8003620 <_strtol_l.constprop.0+0x54>
 8003674:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003678:	2f19      	cmp	r7, #25
 800367a:	d801      	bhi.n	8003680 <_strtol_l.constprop.0+0xb4>
 800367c:	3c37      	subs	r4, #55	@ 0x37
 800367e:	e7de      	b.n	800363e <_strtol_l.constprop.0+0x72>
 8003680:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003684:	2f19      	cmp	r7, #25
 8003686:	d804      	bhi.n	8003692 <_strtol_l.constprop.0+0xc6>
 8003688:	3c57      	subs	r4, #87	@ 0x57
 800368a:	e7d8      	b.n	800363e <_strtol_l.constprop.0+0x72>
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	e7e1      	b.n	8003656 <_strtol_l.constprop.0+0x8a>
 8003692:	1c53      	adds	r3, r2, #1
 8003694:	d108      	bne.n	80036a8 <_strtol_l.constprop.0+0xdc>
 8003696:	2322      	movs	r3, #34	@ 0x22
 8003698:	f8ce 3000 	str.w	r3, [lr]
 800369c:	4660      	mov	r0, ip
 800369e:	f1b8 0f00 	cmp.w	r8, #0
 80036a2:	d0a0      	beq.n	80035e6 <_strtol_l.constprop.0+0x1a>
 80036a4:	1e69      	subs	r1, r5, #1
 80036a6:	e006      	b.n	80036b6 <_strtol_l.constprop.0+0xea>
 80036a8:	b106      	cbz	r6, 80036ac <_strtol_l.constprop.0+0xe0>
 80036aa:	4240      	negs	r0, r0
 80036ac:	f1b8 0f00 	cmp.w	r8, #0
 80036b0:	d099      	beq.n	80035e6 <_strtol_l.constprop.0+0x1a>
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	d1f6      	bne.n	80036a4 <_strtol_l.constprop.0+0xd8>
 80036b6:	f8c8 1000 	str.w	r1, [r8]
 80036ba:	e794      	b.n	80035e6 <_strtol_l.constprop.0+0x1a>
 80036bc:	08004155 	.word	0x08004155

080036c0 <strtol>:
 80036c0:	4613      	mov	r3, r2
 80036c2:	460a      	mov	r2, r1
 80036c4:	4601      	mov	r1, r0
 80036c6:	4802      	ldr	r0, [pc, #8]	@ (80036d0 <strtol+0x10>)
 80036c8:	6800      	ldr	r0, [r0, #0]
 80036ca:	f7ff bf7f 	b.w	80035cc <_strtol_l.constprop.0>
 80036ce:	bf00      	nop
 80036d0:	2000001c 	.word	0x2000001c

080036d4 <sniprintf>:
 80036d4:	b40c      	push	{r2, r3}
 80036d6:	b530      	push	{r4, r5, lr}
 80036d8:	4b17      	ldr	r3, [pc, #92]	@ (8003738 <sniprintf+0x64>)
 80036da:	1e0c      	subs	r4, r1, #0
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	b09d      	sub	sp, #116	@ 0x74
 80036e0:	da08      	bge.n	80036f4 <sniprintf+0x20>
 80036e2:	238b      	movs	r3, #139	@ 0x8b
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ea:	b01d      	add	sp, #116	@ 0x74
 80036ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80036f0:	b002      	add	sp, #8
 80036f2:	4770      	bx	lr
 80036f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80036f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80036fc:	bf14      	ite	ne
 80036fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003702:	4623      	moveq	r3, r4
 8003704:	9304      	str	r3, [sp, #16]
 8003706:	9307      	str	r3, [sp, #28]
 8003708:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800370c:	9002      	str	r0, [sp, #8]
 800370e:	9006      	str	r0, [sp, #24]
 8003710:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003714:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003716:	ab21      	add	r3, sp, #132	@ 0x84
 8003718:	a902      	add	r1, sp, #8
 800371a:	4628      	mov	r0, r5
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	f000 f9a3 	bl	8003a68 <_svfiprintf_r>
 8003722:	1c43      	adds	r3, r0, #1
 8003724:	bfbc      	itt	lt
 8003726:	238b      	movlt	r3, #139	@ 0x8b
 8003728:	602b      	strlt	r3, [r5, #0]
 800372a:	2c00      	cmp	r4, #0
 800372c:	d0dd      	beq.n	80036ea <sniprintf+0x16>
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e7d9      	b.n	80036ea <sniprintf+0x16>
 8003736:	bf00      	nop
 8003738:	2000001c 	.word	0x2000001c

0800373c <memset>:
 800373c:	4402      	add	r2, r0
 800373e:	4603      	mov	r3, r0
 8003740:	4293      	cmp	r3, r2
 8003742:	d100      	bne.n	8003746 <memset+0xa>
 8003744:	4770      	bx	lr
 8003746:	f803 1b01 	strb.w	r1, [r3], #1
 800374a:	e7f9      	b.n	8003740 <memset+0x4>

0800374c <__errno>:
 800374c:	4b01      	ldr	r3, [pc, #4]	@ (8003754 <__errno+0x8>)
 800374e:	6818      	ldr	r0, [r3, #0]
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	2000001c 	.word	0x2000001c

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	@ (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	@ (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	@ (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	@ (800379c <__libc_init_array+0x44>)
 800376c:	f000 fc66 	bl	800403c <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	08004290 	.word	0x08004290
 8003794:	08004290 	.word	0x08004290
 8003798:	08004290 	.word	0x08004290
 800379c:	08004294 	.word	0x08004294

080037a0 <__retarget_lock_acquire_recursive>:
 80037a0:	4770      	bx	lr

080037a2 <__retarget_lock_release_recursive>:
 80037a2:	4770      	bx	lr

080037a4 <memcpy>:
 80037a4:	440a      	add	r2, r1
 80037a6:	4291      	cmp	r1, r2
 80037a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80037ac:	d100      	bne.n	80037b0 <memcpy+0xc>
 80037ae:	4770      	bx	lr
 80037b0:	b510      	push	{r4, lr}
 80037b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ba:	4291      	cmp	r1, r2
 80037bc:	d1f9      	bne.n	80037b2 <memcpy+0xe>
 80037be:	bd10      	pop	{r4, pc}

080037c0 <_free_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4605      	mov	r5, r0
 80037c4:	2900      	cmp	r1, #0
 80037c6:	d041      	beq.n	800384c <_free_r+0x8c>
 80037c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037cc:	1f0c      	subs	r4, r1, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	bfb8      	it	lt
 80037d2:	18e4      	addlt	r4, r4, r3
 80037d4:	f000 f8e0 	bl	8003998 <__malloc_lock>
 80037d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003850 <_free_r+0x90>)
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	b933      	cbnz	r3, 80037ec <_free_r+0x2c>
 80037de:	6063      	str	r3, [r4, #4]
 80037e0:	6014      	str	r4, [r2, #0]
 80037e2:	4628      	mov	r0, r5
 80037e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037e8:	f000 b8dc 	b.w	80039a4 <__malloc_unlock>
 80037ec:	42a3      	cmp	r3, r4
 80037ee:	d908      	bls.n	8003802 <_free_r+0x42>
 80037f0:	6820      	ldr	r0, [r4, #0]
 80037f2:	1821      	adds	r1, r4, r0
 80037f4:	428b      	cmp	r3, r1
 80037f6:	bf01      	itttt	eq
 80037f8:	6819      	ldreq	r1, [r3, #0]
 80037fa:	685b      	ldreq	r3, [r3, #4]
 80037fc:	1809      	addeq	r1, r1, r0
 80037fe:	6021      	streq	r1, [r4, #0]
 8003800:	e7ed      	b.n	80037de <_free_r+0x1e>
 8003802:	461a      	mov	r2, r3
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	b10b      	cbz	r3, 800380c <_free_r+0x4c>
 8003808:	42a3      	cmp	r3, r4
 800380a:	d9fa      	bls.n	8003802 <_free_r+0x42>
 800380c:	6811      	ldr	r1, [r2, #0]
 800380e:	1850      	adds	r0, r2, r1
 8003810:	42a0      	cmp	r0, r4
 8003812:	d10b      	bne.n	800382c <_free_r+0x6c>
 8003814:	6820      	ldr	r0, [r4, #0]
 8003816:	4401      	add	r1, r0
 8003818:	1850      	adds	r0, r2, r1
 800381a:	4283      	cmp	r3, r0
 800381c:	6011      	str	r1, [r2, #0]
 800381e:	d1e0      	bne.n	80037e2 <_free_r+0x22>
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	6053      	str	r3, [r2, #4]
 8003826:	4408      	add	r0, r1
 8003828:	6010      	str	r0, [r2, #0]
 800382a:	e7da      	b.n	80037e2 <_free_r+0x22>
 800382c:	d902      	bls.n	8003834 <_free_r+0x74>
 800382e:	230c      	movs	r3, #12
 8003830:	602b      	str	r3, [r5, #0]
 8003832:	e7d6      	b.n	80037e2 <_free_r+0x22>
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	1821      	adds	r1, r4, r0
 8003838:	428b      	cmp	r3, r1
 800383a:	bf04      	itt	eq
 800383c:	6819      	ldreq	r1, [r3, #0]
 800383e:	685b      	ldreq	r3, [r3, #4]
 8003840:	6063      	str	r3, [r4, #4]
 8003842:	bf04      	itt	eq
 8003844:	1809      	addeq	r1, r1, r0
 8003846:	6021      	streq	r1, [r4, #0]
 8003848:	6054      	str	r4, [r2, #4]
 800384a:	e7ca      	b.n	80037e2 <_free_r+0x22>
 800384c:	bd38      	pop	{r3, r4, r5, pc}
 800384e:	bf00      	nop
 8003850:	20000378 	.word	0x20000378

08003854 <sbrk_aligned>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4e0f      	ldr	r6, [pc, #60]	@ (8003894 <sbrk_aligned+0x40>)
 8003858:	460c      	mov	r4, r1
 800385a:	6831      	ldr	r1, [r6, #0]
 800385c:	4605      	mov	r5, r0
 800385e:	b911      	cbnz	r1, 8003866 <sbrk_aligned+0x12>
 8003860:	f000 fba6 	bl	8003fb0 <_sbrk_r>
 8003864:	6030      	str	r0, [r6, #0]
 8003866:	4621      	mov	r1, r4
 8003868:	4628      	mov	r0, r5
 800386a:	f000 fba1 	bl	8003fb0 <_sbrk_r>
 800386e:	1c43      	adds	r3, r0, #1
 8003870:	d103      	bne.n	800387a <sbrk_aligned+0x26>
 8003872:	f04f 34ff 	mov.w	r4, #4294967295
 8003876:	4620      	mov	r0, r4
 8003878:	bd70      	pop	{r4, r5, r6, pc}
 800387a:	1cc4      	adds	r4, r0, #3
 800387c:	f024 0403 	bic.w	r4, r4, #3
 8003880:	42a0      	cmp	r0, r4
 8003882:	d0f8      	beq.n	8003876 <sbrk_aligned+0x22>
 8003884:	1a21      	subs	r1, r4, r0
 8003886:	4628      	mov	r0, r5
 8003888:	f000 fb92 	bl	8003fb0 <_sbrk_r>
 800388c:	3001      	adds	r0, #1
 800388e:	d1f2      	bne.n	8003876 <sbrk_aligned+0x22>
 8003890:	e7ef      	b.n	8003872 <sbrk_aligned+0x1e>
 8003892:	bf00      	nop
 8003894:	20000374 	.word	0x20000374

08003898 <_malloc_r>:
 8003898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800389c:	1ccd      	adds	r5, r1, #3
 800389e:	f025 0503 	bic.w	r5, r5, #3
 80038a2:	3508      	adds	r5, #8
 80038a4:	2d0c      	cmp	r5, #12
 80038a6:	bf38      	it	cc
 80038a8:	250c      	movcc	r5, #12
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	4606      	mov	r6, r0
 80038ae:	db01      	blt.n	80038b4 <_malloc_r+0x1c>
 80038b0:	42a9      	cmp	r1, r5
 80038b2:	d904      	bls.n	80038be <_malloc_r+0x26>
 80038b4:	230c      	movs	r3, #12
 80038b6:	6033      	str	r3, [r6, #0]
 80038b8:	2000      	movs	r0, #0
 80038ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003994 <_malloc_r+0xfc>
 80038c2:	f000 f869 	bl	8003998 <__malloc_lock>
 80038c6:	f8d8 3000 	ldr.w	r3, [r8]
 80038ca:	461c      	mov	r4, r3
 80038cc:	bb44      	cbnz	r4, 8003920 <_malloc_r+0x88>
 80038ce:	4629      	mov	r1, r5
 80038d0:	4630      	mov	r0, r6
 80038d2:	f7ff ffbf 	bl	8003854 <sbrk_aligned>
 80038d6:	1c43      	adds	r3, r0, #1
 80038d8:	4604      	mov	r4, r0
 80038da:	d158      	bne.n	800398e <_malloc_r+0xf6>
 80038dc:	f8d8 4000 	ldr.w	r4, [r8]
 80038e0:	4627      	mov	r7, r4
 80038e2:	2f00      	cmp	r7, #0
 80038e4:	d143      	bne.n	800396e <_malloc_r+0xd6>
 80038e6:	2c00      	cmp	r4, #0
 80038e8:	d04b      	beq.n	8003982 <_malloc_r+0xea>
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	4639      	mov	r1, r7
 80038ee:	4630      	mov	r0, r6
 80038f0:	eb04 0903 	add.w	r9, r4, r3
 80038f4:	f000 fb5c 	bl	8003fb0 <_sbrk_r>
 80038f8:	4581      	cmp	r9, r0
 80038fa:	d142      	bne.n	8003982 <_malloc_r+0xea>
 80038fc:	6821      	ldr	r1, [r4, #0]
 80038fe:	1a6d      	subs	r5, r5, r1
 8003900:	4629      	mov	r1, r5
 8003902:	4630      	mov	r0, r6
 8003904:	f7ff ffa6 	bl	8003854 <sbrk_aligned>
 8003908:	3001      	adds	r0, #1
 800390a:	d03a      	beq.n	8003982 <_malloc_r+0xea>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	442b      	add	r3, r5
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	f8d8 3000 	ldr.w	r3, [r8]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	bb62      	cbnz	r2, 8003974 <_malloc_r+0xdc>
 800391a:	f8c8 7000 	str.w	r7, [r8]
 800391e:	e00f      	b.n	8003940 <_malloc_r+0xa8>
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	1b52      	subs	r2, r2, r5
 8003924:	d420      	bmi.n	8003968 <_malloc_r+0xd0>
 8003926:	2a0b      	cmp	r2, #11
 8003928:	d917      	bls.n	800395a <_malloc_r+0xc2>
 800392a:	1961      	adds	r1, r4, r5
 800392c:	42a3      	cmp	r3, r4
 800392e:	6025      	str	r5, [r4, #0]
 8003930:	bf18      	it	ne
 8003932:	6059      	strne	r1, [r3, #4]
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	bf08      	it	eq
 8003938:	f8c8 1000 	streq.w	r1, [r8]
 800393c:	5162      	str	r2, [r4, r5]
 800393e:	604b      	str	r3, [r1, #4]
 8003940:	4630      	mov	r0, r6
 8003942:	f000 f82f 	bl	80039a4 <__malloc_unlock>
 8003946:	f104 000b 	add.w	r0, r4, #11
 800394a:	1d23      	adds	r3, r4, #4
 800394c:	f020 0007 	bic.w	r0, r0, #7
 8003950:	1ac2      	subs	r2, r0, r3
 8003952:	bf1c      	itt	ne
 8003954:	1a1b      	subne	r3, r3, r0
 8003956:	50a3      	strne	r3, [r4, r2]
 8003958:	e7af      	b.n	80038ba <_malloc_r+0x22>
 800395a:	6862      	ldr	r2, [r4, #4]
 800395c:	42a3      	cmp	r3, r4
 800395e:	bf0c      	ite	eq
 8003960:	f8c8 2000 	streq.w	r2, [r8]
 8003964:	605a      	strne	r2, [r3, #4]
 8003966:	e7eb      	b.n	8003940 <_malloc_r+0xa8>
 8003968:	4623      	mov	r3, r4
 800396a:	6864      	ldr	r4, [r4, #4]
 800396c:	e7ae      	b.n	80038cc <_malloc_r+0x34>
 800396e:	463c      	mov	r4, r7
 8003970:	687f      	ldr	r7, [r7, #4]
 8003972:	e7b6      	b.n	80038e2 <_malloc_r+0x4a>
 8003974:	461a      	mov	r2, r3
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	42a3      	cmp	r3, r4
 800397a:	d1fb      	bne.n	8003974 <_malloc_r+0xdc>
 800397c:	2300      	movs	r3, #0
 800397e:	6053      	str	r3, [r2, #4]
 8003980:	e7de      	b.n	8003940 <_malloc_r+0xa8>
 8003982:	230c      	movs	r3, #12
 8003984:	6033      	str	r3, [r6, #0]
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f80c 	bl	80039a4 <__malloc_unlock>
 800398c:	e794      	b.n	80038b8 <_malloc_r+0x20>
 800398e:	6005      	str	r5, [r0, #0]
 8003990:	e7d6      	b.n	8003940 <_malloc_r+0xa8>
 8003992:	bf00      	nop
 8003994:	20000378 	.word	0x20000378

08003998 <__malloc_lock>:
 8003998:	4801      	ldr	r0, [pc, #4]	@ (80039a0 <__malloc_lock+0x8>)
 800399a:	f7ff bf01 	b.w	80037a0 <__retarget_lock_acquire_recursive>
 800399e:	bf00      	nop
 80039a0:	20000370 	.word	0x20000370

080039a4 <__malloc_unlock>:
 80039a4:	4801      	ldr	r0, [pc, #4]	@ (80039ac <__malloc_unlock+0x8>)
 80039a6:	f7ff befc 	b.w	80037a2 <__retarget_lock_release_recursive>
 80039aa:	bf00      	nop
 80039ac:	20000370 	.word	0x20000370

080039b0 <__ssputs_r>:
 80039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	688e      	ldr	r6, [r1, #8]
 80039b6:	461f      	mov	r7, r3
 80039b8:	42be      	cmp	r6, r7
 80039ba:	680b      	ldr	r3, [r1, #0]
 80039bc:	4682      	mov	sl, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	4690      	mov	r8, r2
 80039c2:	d82d      	bhi.n	8003a20 <__ssputs_r+0x70>
 80039c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039cc:	d026      	beq.n	8003a1c <__ssputs_r+0x6c>
 80039ce:	6965      	ldr	r5, [r4, #20]
 80039d0:	6909      	ldr	r1, [r1, #16]
 80039d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039d6:	eba3 0901 	sub.w	r9, r3, r1
 80039da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039de:	1c7b      	adds	r3, r7, #1
 80039e0:	444b      	add	r3, r9
 80039e2:	106d      	asrs	r5, r5, #1
 80039e4:	429d      	cmp	r5, r3
 80039e6:	bf38      	it	cc
 80039e8:	461d      	movcc	r5, r3
 80039ea:	0553      	lsls	r3, r2, #21
 80039ec:	d527      	bpl.n	8003a3e <__ssputs_r+0x8e>
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7ff ff52 	bl	8003898 <_malloc_r>
 80039f4:	4606      	mov	r6, r0
 80039f6:	b360      	cbz	r0, 8003a52 <__ssputs_r+0xa2>
 80039f8:	6921      	ldr	r1, [r4, #16]
 80039fa:	464a      	mov	r2, r9
 80039fc:	f7ff fed2 	bl	80037a4 <memcpy>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	6126      	str	r6, [r4, #16]
 8003a0e:	6165      	str	r5, [r4, #20]
 8003a10:	444e      	add	r6, r9
 8003a12:	eba5 0509 	sub.w	r5, r5, r9
 8003a16:	6026      	str	r6, [r4, #0]
 8003a18:	60a5      	str	r5, [r4, #8]
 8003a1a:	463e      	mov	r6, r7
 8003a1c:	42be      	cmp	r6, r7
 8003a1e:	d900      	bls.n	8003a22 <__ssputs_r+0x72>
 8003a20:	463e      	mov	r6, r7
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	4632      	mov	r2, r6
 8003a26:	4641      	mov	r1, r8
 8003a28:	f000 faa8 	bl	8003f7c <memmove>
 8003a2c:	68a3      	ldr	r3, [r4, #8]
 8003a2e:	1b9b      	subs	r3, r3, r6
 8003a30:	60a3      	str	r3, [r4, #8]
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	4433      	add	r3, r6
 8003a36:	6023      	str	r3, [r4, #0]
 8003a38:	2000      	movs	r0, #0
 8003a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a3e:	462a      	mov	r2, r5
 8003a40:	f000 fac6 	bl	8003fd0 <_realloc_r>
 8003a44:	4606      	mov	r6, r0
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d1e0      	bne.n	8003a0c <__ssputs_r+0x5c>
 8003a4a:	6921      	ldr	r1, [r4, #16]
 8003a4c:	4650      	mov	r0, sl
 8003a4e:	f7ff feb7 	bl	80037c0 <_free_r>
 8003a52:	230c      	movs	r3, #12
 8003a54:	f8ca 3000 	str.w	r3, [sl]
 8003a58:	89a3      	ldrh	r3, [r4, #12]
 8003a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a5e:	81a3      	strh	r3, [r4, #12]
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	e7e9      	b.n	8003a3a <__ssputs_r+0x8a>
	...

08003a68 <_svfiprintf_r>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	4698      	mov	r8, r3
 8003a6e:	898b      	ldrh	r3, [r1, #12]
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	b09d      	sub	sp, #116	@ 0x74
 8003a74:	4607      	mov	r7, r0
 8003a76:	460d      	mov	r5, r1
 8003a78:	4614      	mov	r4, r2
 8003a7a:	d510      	bpl.n	8003a9e <_svfiprintf_r+0x36>
 8003a7c:	690b      	ldr	r3, [r1, #16]
 8003a7e:	b973      	cbnz	r3, 8003a9e <_svfiprintf_r+0x36>
 8003a80:	2140      	movs	r1, #64	@ 0x40
 8003a82:	f7ff ff09 	bl	8003898 <_malloc_r>
 8003a86:	6028      	str	r0, [r5, #0]
 8003a88:	6128      	str	r0, [r5, #16]
 8003a8a:	b930      	cbnz	r0, 8003a9a <_svfiprintf_r+0x32>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	b01d      	add	sp, #116	@ 0x74
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9a:	2340      	movs	r3, #64	@ 0x40
 8003a9c:	616b      	str	r3, [r5, #20]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aa2:	2320      	movs	r3, #32
 8003aa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003aa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aac:	2330      	movs	r3, #48	@ 0x30
 8003aae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c4c <_svfiprintf_r+0x1e4>
 8003ab2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ab6:	f04f 0901 	mov.w	r9, #1
 8003aba:	4623      	mov	r3, r4
 8003abc:	469a      	mov	sl, r3
 8003abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ac2:	b10a      	cbz	r2, 8003ac8 <_svfiprintf_r+0x60>
 8003ac4:	2a25      	cmp	r2, #37	@ 0x25
 8003ac6:	d1f9      	bne.n	8003abc <_svfiprintf_r+0x54>
 8003ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8003acc:	d00b      	beq.n	8003ae6 <_svfiprintf_r+0x7e>
 8003ace:	465b      	mov	r3, fp
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f7ff ff6b 	bl	80039b0 <__ssputs_r>
 8003ada:	3001      	adds	r0, #1
 8003adc:	f000 80a7 	beq.w	8003c2e <_svfiprintf_r+0x1c6>
 8003ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ae2:	445a      	add	r2, fp
 8003ae4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 809f 	beq.w	8003c2e <_svfiprintf_r+0x1c6>
 8003af0:	2300      	movs	r3, #0
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003afa:	f10a 0a01 	add.w	sl, sl, #1
 8003afe:	9304      	str	r3, [sp, #16]
 8003b00:	9307      	str	r3, [sp, #28]
 8003b02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b06:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b08:	4654      	mov	r4, sl
 8003b0a:	2205      	movs	r2, #5
 8003b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b10:	484e      	ldr	r0, [pc, #312]	@ (8003c4c <_svfiprintf_r+0x1e4>)
 8003b12:	f7fc fb7d 	bl	8000210 <memchr>
 8003b16:	9a04      	ldr	r2, [sp, #16]
 8003b18:	b9d8      	cbnz	r0, 8003b52 <_svfiprintf_r+0xea>
 8003b1a:	06d0      	lsls	r0, r2, #27
 8003b1c:	bf44      	itt	mi
 8003b1e:	2320      	movmi	r3, #32
 8003b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b24:	0711      	lsls	r1, r2, #28
 8003b26:	bf44      	itt	mi
 8003b28:	232b      	movmi	r3, #43	@ 0x2b
 8003b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b34:	d015      	beq.n	8003b62 <_svfiprintf_r+0xfa>
 8003b36:	9a07      	ldr	r2, [sp, #28]
 8003b38:	4654      	mov	r4, sl
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f04f 0c0a 	mov.w	ip, #10
 8003b40:	4621      	mov	r1, r4
 8003b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b46:	3b30      	subs	r3, #48	@ 0x30
 8003b48:	2b09      	cmp	r3, #9
 8003b4a:	d94b      	bls.n	8003be4 <_svfiprintf_r+0x17c>
 8003b4c:	b1b0      	cbz	r0, 8003b7c <_svfiprintf_r+0x114>
 8003b4e:	9207      	str	r2, [sp, #28]
 8003b50:	e014      	b.n	8003b7c <_svfiprintf_r+0x114>
 8003b52:	eba0 0308 	sub.w	r3, r0, r8
 8003b56:	fa09 f303 	lsl.w	r3, r9, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	9304      	str	r3, [sp, #16]
 8003b5e:	46a2      	mov	sl, r4
 8003b60:	e7d2      	b.n	8003b08 <_svfiprintf_r+0xa0>
 8003b62:	9b03      	ldr	r3, [sp, #12]
 8003b64:	1d19      	adds	r1, r3, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	9103      	str	r1, [sp, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bfbb      	ittet	lt
 8003b6e:	425b      	neglt	r3, r3
 8003b70:	f042 0202 	orrlt.w	r2, r2, #2
 8003b74:	9307      	strge	r3, [sp, #28]
 8003b76:	9307      	strlt	r3, [sp, #28]
 8003b78:	bfb8      	it	lt
 8003b7a:	9204      	strlt	r2, [sp, #16]
 8003b7c:	7823      	ldrb	r3, [r4, #0]
 8003b7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b80:	d10a      	bne.n	8003b98 <_svfiprintf_r+0x130>
 8003b82:	7863      	ldrb	r3, [r4, #1]
 8003b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b86:	d132      	bne.n	8003bee <_svfiprintf_r+0x186>
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	9203      	str	r2, [sp, #12]
 8003b90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b94:	3402      	adds	r4, #2
 8003b96:	9305      	str	r3, [sp, #20]
 8003b98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c5c <_svfiprintf_r+0x1f4>
 8003b9c:	7821      	ldrb	r1, [r4, #0]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	4650      	mov	r0, sl
 8003ba2:	f7fc fb35 	bl	8000210 <memchr>
 8003ba6:	b138      	cbz	r0, 8003bb8 <_svfiprintf_r+0x150>
 8003ba8:	9b04      	ldr	r3, [sp, #16]
 8003baa:	eba0 000a 	sub.w	r0, r0, sl
 8003bae:	2240      	movs	r2, #64	@ 0x40
 8003bb0:	4082      	lsls	r2, r0
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	3401      	adds	r4, #1
 8003bb6:	9304      	str	r3, [sp, #16]
 8003bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bbc:	4824      	ldr	r0, [pc, #144]	@ (8003c50 <_svfiprintf_r+0x1e8>)
 8003bbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bc2:	2206      	movs	r2, #6
 8003bc4:	f7fc fb24 	bl	8000210 <memchr>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d036      	beq.n	8003c3a <_svfiprintf_r+0x1d2>
 8003bcc:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <_svfiprintf_r+0x1ec>)
 8003bce:	bb1b      	cbnz	r3, 8003c18 <_svfiprintf_r+0x1b0>
 8003bd0:	9b03      	ldr	r3, [sp, #12]
 8003bd2:	3307      	adds	r3, #7
 8003bd4:	f023 0307 	bic.w	r3, r3, #7
 8003bd8:	3308      	adds	r3, #8
 8003bda:	9303      	str	r3, [sp, #12]
 8003bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bde:	4433      	add	r3, r6
 8003be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003be2:	e76a      	b.n	8003aba <_svfiprintf_r+0x52>
 8003be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003be8:	460c      	mov	r4, r1
 8003bea:	2001      	movs	r0, #1
 8003bec:	e7a8      	b.n	8003b40 <_svfiprintf_r+0xd8>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	3401      	adds	r4, #1
 8003bf2:	9305      	str	r3, [sp, #20]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f04f 0c0a 	mov.w	ip, #10
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c00:	3a30      	subs	r2, #48	@ 0x30
 8003c02:	2a09      	cmp	r2, #9
 8003c04:	d903      	bls.n	8003c0e <_svfiprintf_r+0x1a6>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0c6      	beq.n	8003b98 <_svfiprintf_r+0x130>
 8003c0a:	9105      	str	r1, [sp, #20]
 8003c0c:	e7c4      	b.n	8003b98 <_svfiprintf_r+0x130>
 8003c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c12:	4604      	mov	r4, r0
 8003c14:	2301      	movs	r3, #1
 8003c16:	e7f0      	b.n	8003bfa <_svfiprintf_r+0x192>
 8003c18:	ab03      	add	r3, sp, #12
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c58 <_svfiprintf_r+0x1f0>)
 8003c20:	a904      	add	r1, sp, #16
 8003c22:	4638      	mov	r0, r7
 8003c24:	f3af 8000 	nop.w
 8003c28:	1c42      	adds	r2, r0, #1
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	d1d6      	bne.n	8003bdc <_svfiprintf_r+0x174>
 8003c2e:	89ab      	ldrh	r3, [r5, #12]
 8003c30:	065b      	lsls	r3, r3, #25
 8003c32:	f53f af2d 	bmi.w	8003a90 <_svfiprintf_r+0x28>
 8003c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c38:	e72c      	b.n	8003a94 <_svfiprintf_r+0x2c>
 8003c3a:	ab03      	add	r3, sp, #12
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	462a      	mov	r2, r5
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <_svfiprintf_r+0x1f0>)
 8003c42:	a904      	add	r1, sp, #16
 8003c44:	4638      	mov	r0, r7
 8003c46:	f000 f879 	bl	8003d3c <_printf_i>
 8003c4a:	e7ed      	b.n	8003c28 <_svfiprintf_r+0x1c0>
 8003c4c:	08004255 	.word	0x08004255
 8003c50:	0800425f 	.word	0x0800425f
 8003c54:	00000000 	.word	0x00000000
 8003c58:	080039b1 	.word	0x080039b1
 8003c5c:	0800425b 	.word	0x0800425b

08003c60 <_printf_common>:
 8003c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c64:	4616      	mov	r6, r2
 8003c66:	4698      	mov	r8, r3
 8003c68:	688a      	ldr	r2, [r1, #8]
 8003c6a:	690b      	ldr	r3, [r1, #16]
 8003c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bfb8      	it	lt
 8003c74:	4613      	movlt	r3, r2
 8003c76:	6033      	str	r3, [r6, #0]
 8003c78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c7c:	4607      	mov	r7, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	b10a      	cbz	r2, 8003c86 <_printf_common+0x26>
 8003c82:	3301      	adds	r3, #1
 8003c84:	6033      	str	r3, [r6, #0]
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	0699      	lsls	r1, r3, #26
 8003c8a:	bf42      	ittt	mi
 8003c8c:	6833      	ldrmi	r3, [r6, #0]
 8003c8e:	3302      	addmi	r3, #2
 8003c90:	6033      	strmi	r3, [r6, #0]
 8003c92:	6825      	ldr	r5, [r4, #0]
 8003c94:	f015 0506 	ands.w	r5, r5, #6
 8003c98:	d106      	bne.n	8003ca8 <_printf_common+0x48>
 8003c9a:	f104 0a19 	add.w	sl, r4, #25
 8003c9e:	68e3      	ldr	r3, [r4, #12]
 8003ca0:	6832      	ldr	r2, [r6, #0]
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	42ab      	cmp	r3, r5
 8003ca6:	dc26      	bgt.n	8003cf6 <_printf_common+0x96>
 8003ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cac:	6822      	ldr	r2, [r4, #0]
 8003cae:	3b00      	subs	r3, #0
 8003cb0:	bf18      	it	ne
 8003cb2:	2301      	movne	r3, #1
 8003cb4:	0692      	lsls	r2, r2, #26
 8003cb6:	d42b      	bmi.n	8003d10 <_printf_common+0xb0>
 8003cb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	47c8      	blx	r9
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d01e      	beq.n	8003d04 <_printf_common+0xa4>
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	6922      	ldr	r2, [r4, #16]
 8003cca:	f003 0306 	and.w	r3, r3, #6
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	bf02      	ittt	eq
 8003cd2:	68e5      	ldreq	r5, [r4, #12]
 8003cd4:	6833      	ldreq	r3, [r6, #0]
 8003cd6:	1aed      	subeq	r5, r5, r3
 8003cd8:	68a3      	ldr	r3, [r4, #8]
 8003cda:	bf0c      	ite	eq
 8003cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ce0:	2500      	movne	r5, #0
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	bfc4      	itt	gt
 8003ce6:	1a9b      	subgt	r3, r3, r2
 8003ce8:	18ed      	addgt	r5, r5, r3
 8003cea:	2600      	movs	r6, #0
 8003cec:	341a      	adds	r4, #26
 8003cee:	42b5      	cmp	r5, r6
 8003cf0:	d11a      	bne.n	8003d28 <_printf_common+0xc8>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e008      	b.n	8003d08 <_printf_common+0xa8>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4652      	mov	r2, sl
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	47c8      	blx	r9
 8003d00:	3001      	adds	r0, #1
 8003d02:	d103      	bne.n	8003d0c <_printf_common+0xac>
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0c:	3501      	adds	r5, #1
 8003d0e:	e7c6      	b.n	8003c9e <_printf_common+0x3e>
 8003d10:	18e1      	adds	r1, r4, r3
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	2030      	movs	r0, #48	@ 0x30
 8003d16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d1a:	4422      	add	r2, r4
 8003d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d24:	3302      	adds	r3, #2
 8003d26:	e7c7      	b.n	8003cb8 <_printf_common+0x58>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c8      	blx	r9
 8003d32:	3001      	adds	r0, #1
 8003d34:	d0e6      	beq.n	8003d04 <_printf_common+0xa4>
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7d9      	b.n	8003cee <_printf_common+0x8e>
	...

08003d3c <_printf_i>:
 8003d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	7e0f      	ldrb	r7, [r1, #24]
 8003d42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d44:	2f78      	cmp	r7, #120	@ 0x78
 8003d46:	4691      	mov	r9, r2
 8003d48:	4680      	mov	r8, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	469a      	mov	sl, r3
 8003d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d52:	d807      	bhi.n	8003d64 <_printf_i+0x28>
 8003d54:	2f62      	cmp	r7, #98	@ 0x62
 8003d56:	d80a      	bhi.n	8003d6e <_printf_i+0x32>
 8003d58:	2f00      	cmp	r7, #0
 8003d5a:	f000 80d2 	beq.w	8003f02 <_printf_i+0x1c6>
 8003d5e:	2f58      	cmp	r7, #88	@ 0x58
 8003d60:	f000 80b9 	beq.w	8003ed6 <_printf_i+0x19a>
 8003d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d6c:	e03a      	b.n	8003de4 <_printf_i+0xa8>
 8003d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d72:	2b15      	cmp	r3, #21
 8003d74:	d8f6      	bhi.n	8003d64 <_printf_i+0x28>
 8003d76:	a101      	add	r1, pc, #4	@ (adr r1, 8003d7c <_printf_i+0x40>)
 8003d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d7c:	08003dd5 	.word	0x08003dd5
 8003d80:	08003de9 	.word	0x08003de9
 8003d84:	08003d65 	.word	0x08003d65
 8003d88:	08003d65 	.word	0x08003d65
 8003d8c:	08003d65 	.word	0x08003d65
 8003d90:	08003d65 	.word	0x08003d65
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003d65 	.word	0x08003d65
 8003d9c:	08003d65 	.word	0x08003d65
 8003da0:	08003d65 	.word	0x08003d65
 8003da4:	08003d65 	.word	0x08003d65
 8003da8:	08003ee9 	.word	0x08003ee9
 8003dac:	08003e13 	.word	0x08003e13
 8003db0:	08003ea3 	.word	0x08003ea3
 8003db4:	08003d65 	.word	0x08003d65
 8003db8:	08003d65 	.word	0x08003d65
 8003dbc:	08003f0b 	.word	0x08003f0b
 8003dc0:	08003d65 	.word	0x08003d65
 8003dc4:	08003e13 	.word	0x08003e13
 8003dc8:	08003d65 	.word	0x08003d65
 8003dcc:	08003d65 	.word	0x08003d65
 8003dd0:	08003eab 	.word	0x08003eab
 8003dd4:	6833      	ldr	r3, [r6, #0]
 8003dd6:	1d1a      	adds	r2, r3, #4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6032      	str	r2, [r6, #0]
 8003ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003de4:	2301      	movs	r3, #1
 8003de6:	e09d      	b.n	8003f24 <_printf_i+0x1e8>
 8003de8:	6833      	ldr	r3, [r6, #0]
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	1d19      	adds	r1, r3, #4
 8003dee:	6031      	str	r1, [r6, #0]
 8003df0:	0606      	lsls	r6, r0, #24
 8003df2:	d501      	bpl.n	8003df8 <_printf_i+0xbc>
 8003df4:	681d      	ldr	r5, [r3, #0]
 8003df6:	e003      	b.n	8003e00 <_printf_i+0xc4>
 8003df8:	0645      	lsls	r5, r0, #25
 8003dfa:	d5fb      	bpl.n	8003df4 <_printf_i+0xb8>
 8003dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	da03      	bge.n	8003e0c <_printf_i+0xd0>
 8003e04:	232d      	movs	r3, #45	@ 0x2d
 8003e06:	426d      	negs	r5, r5
 8003e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e0c:	4859      	ldr	r0, [pc, #356]	@ (8003f74 <_printf_i+0x238>)
 8003e0e:	230a      	movs	r3, #10
 8003e10:	e011      	b.n	8003e36 <_printf_i+0xfa>
 8003e12:	6821      	ldr	r1, [r4, #0]
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	0608      	lsls	r0, r1, #24
 8003e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e1c:	d402      	bmi.n	8003e24 <_printf_i+0xe8>
 8003e1e:	0649      	lsls	r1, r1, #25
 8003e20:	bf48      	it	mi
 8003e22:	b2ad      	uxthmi	r5, r5
 8003e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e26:	4853      	ldr	r0, [pc, #332]	@ (8003f74 <_printf_i+0x238>)
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	bf14      	ite	ne
 8003e2c:	230a      	movne	r3, #10
 8003e2e:	2308      	moveq	r3, #8
 8003e30:	2100      	movs	r1, #0
 8003e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e36:	6866      	ldr	r6, [r4, #4]
 8003e38:	60a6      	str	r6, [r4, #8]
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	bfa2      	ittt	ge
 8003e3e:	6821      	ldrge	r1, [r4, #0]
 8003e40:	f021 0104 	bicge.w	r1, r1, #4
 8003e44:	6021      	strge	r1, [r4, #0]
 8003e46:	b90d      	cbnz	r5, 8003e4c <_printf_i+0x110>
 8003e48:	2e00      	cmp	r6, #0
 8003e4a:	d04b      	beq.n	8003ee4 <_printf_i+0x1a8>
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e52:	fb03 5711 	mls	r7, r3, r1, r5
 8003e56:	5dc7      	ldrb	r7, [r0, r7]
 8003e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e5c:	462f      	mov	r7, r5
 8003e5e:	42bb      	cmp	r3, r7
 8003e60:	460d      	mov	r5, r1
 8003e62:	d9f4      	bls.n	8003e4e <_printf_i+0x112>
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d10b      	bne.n	8003e80 <_printf_i+0x144>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	07df      	lsls	r7, r3, #31
 8003e6c:	d508      	bpl.n	8003e80 <_printf_i+0x144>
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	6861      	ldr	r1, [r4, #4]
 8003e72:	4299      	cmp	r1, r3
 8003e74:	bfde      	ittt	le
 8003e76:	2330      	movle	r3, #48	@ 0x30
 8003e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e80:	1b92      	subs	r2, r2, r6
 8003e82:	6122      	str	r2, [r4, #16]
 8003e84:	f8cd a000 	str.w	sl, [sp]
 8003e88:	464b      	mov	r3, r9
 8003e8a:	aa03      	add	r2, sp, #12
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4640      	mov	r0, r8
 8003e90:	f7ff fee6 	bl	8003c60 <_printf_common>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d14a      	bne.n	8003f2e <_printf_i+0x1f2>
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	b004      	add	sp, #16
 8003e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	f043 0320 	orr.w	r3, r3, #32
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	4833      	ldr	r0, [pc, #204]	@ (8003f78 <_printf_i+0x23c>)
 8003eac:	2778      	movs	r7, #120	@ 0x78
 8003eae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	6831      	ldr	r1, [r6, #0]
 8003eb6:	061f      	lsls	r7, r3, #24
 8003eb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ebc:	d402      	bmi.n	8003ec4 <_printf_i+0x188>
 8003ebe:	065f      	lsls	r7, r3, #25
 8003ec0:	bf48      	it	mi
 8003ec2:	b2ad      	uxthmi	r5, r5
 8003ec4:	6031      	str	r1, [r6, #0]
 8003ec6:	07d9      	lsls	r1, r3, #31
 8003ec8:	bf44      	itt	mi
 8003eca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ece:	6023      	strmi	r3, [r4, #0]
 8003ed0:	b11d      	cbz	r5, 8003eda <_printf_i+0x19e>
 8003ed2:	2310      	movs	r3, #16
 8003ed4:	e7ac      	b.n	8003e30 <_printf_i+0xf4>
 8003ed6:	4827      	ldr	r0, [pc, #156]	@ (8003f74 <_printf_i+0x238>)
 8003ed8:	e7e9      	b.n	8003eae <_printf_i+0x172>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f023 0320 	bic.w	r3, r3, #32
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	e7f6      	b.n	8003ed2 <_printf_i+0x196>
 8003ee4:	4616      	mov	r6, r2
 8003ee6:	e7bd      	b.n	8003e64 <_printf_i+0x128>
 8003ee8:	6833      	ldr	r3, [r6, #0]
 8003eea:	6825      	ldr	r5, [r4, #0]
 8003eec:	6961      	ldr	r1, [r4, #20]
 8003eee:	1d18      	adds	r0, r3, #4
 8003ef0:	6030      	str	r0, [r6, #0]
 8003ef2:	062e      	lsls	r6, r5, #24
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0x1c0>
 8003ef8:	6019      	str	r1, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <_printf_i+0x1c6>
 8003efc:	0668      	lsls	r0, r5, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0x1bc>
 8003f00:	8019      	strh	r1, [r3, #0]
 8003f02:	2300      	movs	r3, #0
 8003f04:	6123      	str	r3, [r4, #16]
 8003f06:	4616      	mov	r6, r2
 8003f08:	e7bc      	b.n	8003e84 <_printf_i+0x148>
 8003f0a:	6833      	ldr	r3, [r6, #0]
 8003f0c:	1d1a      	adds	r2, r3, #4
 8003f0e:	6032      	str	r2, [r6, #0]
 8003f10:	681e      	ldr	r6, [r3, #0]
 8003f12:	6862      	ldr	r2, [r4, #4]
 8003f14:	2100      	movs	r1, #0
 8003f16:	4630      	mov	r0, r6
 8003f18:	f7fc f97a 	bl	8000210 <memchr>
 8003f1c:	b108      	cbz	r0, 8003f22 <_printf_i+0x1e6>
 8003f1e:	1b80      	subs	r0, r0, r6
 8003f20:	6060      	str	r0, [r4, #4]
 8003f22:	6863      	ldr	r3, [r4, #4]
 8003f24:	6123      	str	r3, [r4, #16]
 8003f26:	2300      	movs	r3, #0
 8003f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f2c:	e7aa      	b.n	8003e84 <_printf_i+0x148>
 8003f2e:	6923      	ldr	r3, [r4, #16]
 8003f30:	4632      	mov	r2, r6
 8003f32:	4649      	mov	r1, r9
 8003f34:	4640      	mov	r0, r8
 8003f36:	47d0      	blx	sl
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0ad      	beq.n	8003e98 <_printf_i+0x15c>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	079b      	lsls	r3, r3, #30
 8003f40:	d413      	bmi.n	8003f6a <_printf_i+0x22e>
 8003f42:	68e0      	ldr	r0, [r4, #12]
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	4298      	cmp	r0, r3
 8003f48:	bfb8      	it	lt
 8003f4a:	4618      	movlt	r0, r3
 8003f4c:	e7a6      	b.n	8003e9c <_printf_i+0x160>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4632      	mov	r2, r6
 8003f52:	4649      	mov	r1, r9
 8003f54:	4640      	mov	r0, r8
 8003f56:	47d0      	blx	sl
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d09d      	beq.n	8003e98 <_printf_i+0x15c>
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	68e3      	ldr	r3, [r4, #12]
 8003f60:	9903      	ldr	r1, [sp, #12]
 8003f62:	1a5b      	subs	r3, r3, r1
 8003f64:	42ab      	cmp	r3, r5
 8003f66:	dcf2      	bgt.n	8003f4e <_printf_i+0x212>
 8003f68:	e7eb      	b.n	8003f42 <_printf_i+0x206>
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	f104 0619 	add.w	r6, r4, #25
 8003f70:	e7f5      	b.n	8003f5e <_printf_i+0x222>
 8003f72:	bf00      	nop
 8003f74:	08004266 	.word	0x08004266
 8003f78:	08004277 	.word	0x08004277

08003f7c <memmove>:
 8003f7c:	4288      	cmp	r0, r1
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	eb01 0402 	add.w	r4, r1, r2
 8003f84:	d902      	bls.n	8003f8c <memmove+0x10>
 8003f86:	4284      	cmp	r4, r0
 8003f88:	4623      	mov	r3, r4
 8003f8a:	d807      	bhi.n	8003f9c <memmove+0x20>
 8003f8c:	1e43      	subs	r3, r0, #1
 8003f8e:	42a1      	cmp	r1, r4
 8003f90:	d008      	beq.n	8003fa4 <memmove+0x28>
 8003f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f9a:	e7f8      	b.n	8003f8e <memmove+0x12>
 8003f9c:	4402      	add	r2, r0
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	428a      	cmp	r2, r1
 8003fa2:	d100      	bne.n	8003fa6 <memmove+0x2a>
 8003fa4:	bd10      	pop	{r4, pc}
 8003fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fae:	e7f7      	b.n	8003fa0 <memmove+0x24>

08003fb0 <_sbrk_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	4d06      	ldr	r5, [pc, #24]	@ (8003fcc <_sbrk_r+0x1c>)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4608      	mov	r0, r1
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	f7fc fd62 	bl	8000a84 <_sbrk>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_sbrk_r+0x1a>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_sbrk_r+0x1a>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	2000036c 	.word	0x2000036c

08003fd0 <_realloc_r>:
 8003fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	4615      	mov	r5, r2
 8003fd8:	460c      	mov	r4, r1
 8003fda:	b921      	cbnz	r1, 8003fe6 <_realloc_r+0x16>
 8003fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	f7ff bc59 	b.w	8003898 <_malloc_r>
 8003fe6:	b92a      	cbnz	r2, 8003ff4 <_realloc_r+0x24>
 8003fe8:	f7ff fbea 	bl	80037c0 <_free_r>
 8003fec:	2400      	movs	r4, #0
 8003fee:	4620      	mov	r0, r4
 8003ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff4:	f000 f81a 	bl	800402c <_malloc_usable_size_r>
 8003ff8:	4285      	cmp	r5, r0
 8003ffa:	4606      	mov	r6, r0
 8003ffc:	d802      	bhi.n	8004004 <_realloc_r+0x34>
 8003ffe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004002:	d8f4      	bhi.n	8003fee <_realloc_r+0x1e>
 8004004:	4629      	mov	r1, r5
 8004006:	4640      	mov	r0, r8
 8004008:	f7ff fc46 	bl	8003898 <_malloc_r>
 800400c:	4607      	mov	r7, r0
 800400e:	2800      	cmp	r0, #0
 8004010:	d0ec      	beq.n	8003fec <_realloc_r+0x1c>
 8004012:	42b5      	cmp	r5, r6
 8004014:	462a      	mov	r2, r5
 8004016:	4621      	mov	r1, r4
 8004018:	bf28      	it	cs
 800401a:	4632      	movcs	r2, r6
 800401c:	f7ff fbc2 	bl	80037a4 <memcpy>
 8004020:	4621      	mov	r1, r4
 8004022:	4640      	mov	r0, r8
 8004024:	f7ff fbcc 	bl	80037c0 <_free_r>
 8004028:	463c      	mov	r4, r7
 800402a:	e7e0      	b.n	8003fee <_realloc_r+0x1e>

0800402c <_malloc_usable_size_r>:
 800402c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004030:	1f18      	subs	r0, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfbc      	itt	lt
 8004036:	580b      	ldrlt	r3, [r1, r0]
 8004038:	18c0      	addlt	r0, r0, r3
 800403a:	4770      	bx	lr

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
