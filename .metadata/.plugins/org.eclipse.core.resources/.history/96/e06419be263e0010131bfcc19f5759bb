/*
 * state_machine.c
 *
 *  Created on: May 11, 2025
 *      Author: axeel
 */

#include "state_machine.h"
#include "flash_interface.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

static bool changed = true;
static char str[14];
static uint8_t len;
static uint8_t id;

static UART_HandleTypeDef SIM800L_uart;


static uint32_t timestamp;
static uint32_t timestamp_display_s;
static uint32_t countdown_start;

static char* set_alert_time = "****";
static char* set_new_pin = "**00";
static char* menage_number = "0*0*";
static char pin[9] = "";
static char numbers[48];

static uint32_t countdown_delay;
//HELPER FUNCTIONS
void save_new_state(void){
	char to_save[64];
	memset(to_save, 0, 64);
	memcpy(to_save, numbers, 48);
	memcpy(to_save + 48, pin, 8);
	snprintf(to_save + 56, 8, "%ld", countdown_delay/1000);
	for(size_t i = 0; i < 64; ++i)
		if(to_save[i] == '\0' || to_save[i] == '#') to_save[i] = '*';
	flash_write_erase_sector7();
	flash_write_multiple_word(0x08060000, (uint32_t *)to_save, 16);

}

static inline void change_state(alarm_state new_state){
	state = new_state;
	memset(str,0,14);
	len = 0;
	changed = true;
}

uint32_t s_to_ms(uint32_t s){return s*1000UL;}

//IMPLEMENTATIONS
void state_machine_init(char data_blob[64], UART_HandleTypeDef uart){
	char temp[8];
	for(size_t i = 0; i < 64; ++i)
		if(data_blob[i] == '*') data_blob[i] = '\0';
	memcpy(numbers, data_blob, 48);
	memcpy(pin, data_blob + 48, 8);
	memcpy(temp, data_blob + 56, 8);


	countdown_delay = strtol(temp, NULL, 10);
	pin[strlen(pin)] = '#';
	countdown_delay = s_to_ms(countdown_delay);
	SIM800L_uart = uart;

}

void state_machine_run(char input){
	if(input){
		changed = true;
		str[len++] = input;
	}
	static void(*state_functions[8])(void) = {state_machine_armed, state_machine_countdown, state_machine_alert,
			state_machine_disarmed, state_machine_set_new_pin, state_machine_menage_number,
			state_machine_replace_number, state_machine_set_alert_time};
	state_functions[state]();
}

void state_machine_armed(void){
	GPIO_PinState singal_state = HAL_GPIO_ReadPin(Alarm_Signal_GPIO_Port, Alarm_Signal_Pin);
	if(changed == true || !singal_state || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
		if(len == 0 && changed){
			changed = false;
			lcd_clear();
			lcd_put_cur(0, 0);
			lcd_send_string ("ARMED");
			lcd_put_cur(1, 0);
			lcd_send_string("PIN TO DISARM");
		}
		else if(!singal_state){
			change_state(ARMED_COUNTDOWN);
			countdown_start = HAL_GetTick();
		}
		else if(len != 0){
			lcd_clear();
			lcd_put_cur(0, 0);
			lcd_send_string("DISARM");
			lcd_put_cur(1, 0);
			str[len] = '\0';
			lcd_send_string(str);
			if(strcmp(str,pin) == 0){
				change_state(DISARMED);
			}
			else if(str[len - 1] == '#' || len == 14 || !changed){
				lcd_clear();
				lcd_put_cur(0, 0);
				lcd_send_string ("WRONG PIN");
				memset(str,0,14);
				len = 0;
				changed = true;
				HAL_Delay(3000);
			}
			else{
				timestamp = HAL_GetTick();
				changed = false;
			}

		}

	}
}

void state_machine_disarmed(void){
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
	  if(len == 0 && changed){
		  changed = false;
		  lcd_clear();
		  lcd_put_cur(0, 0);
		  lcd_send_string ("DISARMED");
		  lcd_put_cur(1, 0);
		  lcd_send_string("PIN TO ARM");
	  }
	  else if(len != 0){
		  lcd_clear();
		  lcd_put_cur(0, 0);
		  lcd_send_string("DISARMED PIN");
		  lcd_put_cur(1, 0);
		  str[len] = '\0';
		  lcd_send_string(str);
		  if(strcmp(str,pin) == 0){
			  change_state(ARMED);
		  }
		  else if(strcmp(str,set_new_pin) == 0){
			  change_state(SET_NEW_PIN);
		  }
		  else if(strcmp(str,set_alert_time) == 0){
			  change_state(SET_ALERT_TIME);
		  }
		  else if(strcmp(str,menage_number) == 0){
			  change_state(MENAGE_NUMBER);
		  }
		  else if(str[len - 1] == '#' || len == 14 || !changed){
			  lcd_clear();
			  lcd_put_cur(0, 0);
			  lcd_send_string ("WRONG PIN");
			  memset(str,0,14);
			  len = 0;
			  changed = true;
			  HAL_Delay(3000);

		  }
		  else{
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}

void state_machine_countdown(void){
	if(HAL_GetTick() - countdown_start > countdown_delay){
		change_state(ALERT_SMS);
	}
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL || HAL_GetTick() - timestamp_display_s > 1000){
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
			timestamp_display_s = HAL_GetTick();
			changed = false;
			lcd_clear();
			lcd_put_cur(0, 0);
			char buf[14];
			snprintf(buf, 14 ,"COUNTDOWN %lu s",(uint32_t)(countdown_delay/1000 - (HAL_GetTick() - countdown_start)/1000));
			lcd_send_string (buf);
			lcd_put_cur(1, 0);
			lcd_send_string("PIN TO DISARM");
		}
		else if(len != 0 && (HAL_GetTick() - timestamp > TIME_PER_SYMBOL || changed)){
			lcd_clear();
			lcd_put_cur(0, 0);
			lcd_send_string("DISARM");
			lcd_put_cur(1, 0);
			str[len] = '\0';
			lcd_send_string(str);
			if(strcmp(str,pin) == 0){
				change_state(DISARMED);
			}
			else if(str[len - 1] == '#' || len == 14 || !changed){
				lcd_clear();
				lcd_put_cur(0, 0);
				lcd_send_string ("WRONG PIN");
				memset(str,0,14);
				len = 0;
				changed = true;
				HAL_Delay(3000);
			}
			else{
				timestamp = HAL_GetTick();
				changed = false;
			}
		}
	}

}

void state_machine_alert(void){

	for(int i = 0; i < 3; ++i){
		if(numbers[i*16] == 0) continue;
		char data[100] = "AT+CMGF=1\r\n";
		HAL_UART_Transmit(SIM800L_uart, data, strlen(data), 100);
		HAL_Delay(50);

		snprintf(data,100,"AT+CMGS=\"+48%s\"",numbers + 16*i);
		HAL_UART_Transmit(SIM800L_uart, data, strlen(data), 100);
		HAL_Delay(50);

		strcpy(data, "ALARM!!!");
		HAL_UART_Transmit(SIM800L_uart, data, strlen(data), 100);
		HAL_Delay(50);

		data[0] = 0x1A; data[1] = 0;
		HAL_UART_Transmit(SIM800L_uart, data, strlen(data), 100);
		HAL_Delay(200);
	}
	change_state(ARMED);
}

void state_machine_set_alert_time(void){
	if(changed == true){
		if(len == 0 && changed){
			changed = false;
			lcd_clear();
			lcd_put_cur(0, 0);
			lcd_send_string ("TIME(S),#=SAVE");
		}
		else if(len != 0){
			lcd_put_cur(1, 0);
			if(str[len - 1] == '*' || len > 9){
				change_state(DISARMED);
			}
			lcd_send_string(str);
			if(str[len - 1] == '#'){
				countdown_delay = s_to_ms(strtol(str, NULL, 10));
				save_new_state();

				change_state(DISARMED);
			}
		}
	}
}

void state_machine_set_new_pin(void){
	if(changed == true){
		if(len == 0 && changed){
			changed = false;
			lcd_clear();
			lcd_put_cur(0, 0);
			lcd_send_string ("SET PIN,#=SAVE");
		}
		else if(len != 0){
			lcd_put_cur(1, 0);
			if(str[len - 1] == '*' || len > 9){
				change_state(DISARMED);
			}
			lcd_send_string(str);
			if(str[len - 1] == '#'){
				memset(pin, 0, 9);
				memcpy(pin,str,len);
				save_new_state();

				change_state(DISARMED);
			}
		}
	}
}

void state_machine_menage_number(void){
	static char code[4] = "";
	bool code_add = false;
	if(changed == true){
		changed = false;
		if(!*str) id = 0;
		else if(*str == '8') id = (id + 1) % 3;
		else if(*str == '2' && id > 0) id = id - 1;
		else if(*str == '2') id = 2;
		else if(*str == '*') change_state(DISARMED);
		else{
			code[strlen(code)] = *str;
			code_add = true;
			if(strcmp(code, "7777") == 0)//REPLACE
				change_state(REPLACE_NUMBER);
			else if(strcmp(code,"3333") == 0)//DELETE
			{
				for(int i = 0; i < 16; ++i){
					numbers[id*16 + i] = '\0';
				}
				save_new_state();
			}
		}
		*str = '\0';
		len = 0;
		if(!code_add) memset(code,0,4);

		char line[14] = "";
		snprintf(line, 14, "->%d.", id + 1);
		memcpy(line+4, numbers + 16*id, 9);
		lcd_clear();
		lcd_put_cur(0, 0);
		lcd_send_string(line);
		lcd_put_cur(1, 0);
		snprintf(line, 14, "  %d.", (id + 1)%3 + 1);
		memcpy(line + 4, numbers + 16*((id+1)%3), 9);
		lcd_send_string(line);
	}
}

void state_machine_replace_number(void){
	if(changed == true){
		changed = false;
		lcd_clear();
		lcd_put_cur(0, 0);
		lcd_send_string("ADD NUMBER #-save");
		lcd_put_cur(1, 0);
		str[len] = '\0';
		lcd_send_string(str);

		if(str[len - 1] == '*' || len > 10 || (len != 10 && str[len - 1] == '#')) change_state(MENAGE_NUMBER);
		else if(str[len - 1] == '#'){
			memcpy(numbers + id * 16, str, 9);
			save_new_state();
			change_state(MENAGE_NUMBER);
		}
	}
}


