
Alarm_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002254  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002314  08002314  00003314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002358  08002358  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002358  08002358  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002358  08002358  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002358  08002358  00003358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800235c  0800235c  0000335c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002360  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800236c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800236c  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063bb  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014db  00000000  00000000  0000a3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0000b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000538  00000000  00000000  0000bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e52  00000000  00000000  0000c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007edc  00000000  00000000  00024352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000987b7  00000000  00000000  0002c22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c49e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017c8  00000000  00000000  000c4a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000c61f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022fc 	.word	0x080022fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022fc 	.word	0x080022fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <write_nrf_register>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void write_nrf_register(uint8_t addr, uint8_t* data, uint8_t size){
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b08a      	sub	sp, #40	@ 0x28
 8000224:	af02      	add	r7, sp, #8
 8000226:	6039      	str	r1, [r7, #0]
 8000228:	0011      	movs	r1, r2
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	1c02      	adds	r2, r0, #0
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	1dbb      	adds	r3, r7, #6
 8000232:	1c0a      	adds	r2, r1, #0
 8000234:	701a      	strb	r2, [r3, #0]
	uint8_t txData[12];
	uint8_t rxData[12];
	txData[0] = addr | 1<<5;
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2220      	movs	r2, #32
 800023c:	4313      	orrs	r3, r2
 800023e:	b2da      	uxtb	r2, r3
 8000240:	2514      	movs	r5, #20
 8000242:	197b      	adds	r3, r7, r5
 8000244:	701a      	strb	r2, [r3, #0]
	memcpy(txData + 1, data, size);
 8000246:	197b      	adds	r3, r7, r5
 8000248:	3301      	adds	r3, #1
 800024a:	1dba      	adds	r2, r7, #6
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	6839      	ldr	r1, [r7, #0]
 8000250:	0018      	movs	r0, r3
 8000252:	f002 f849 	bl	80022e8 <memcpy>

	HAL_GPIO_WritePin(GPIOB, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 8000256:	4b0f      	ldr	r3, [pc, #60]	@ (8000294 <write_nrf_register+0x74>)
 8000258:	2200      	movs	r2, #0
 800025a:	2104      	movs	r1, #4
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fdae 	bl	8000dbe <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, txData, rxData, size + 1, HAL_MAX_DELAY);
 8000262:	1dbb      	adds	r3, r7, #6
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b29b      	uxth	r3, r3
 8000268:	3301      	adds	r3, #1
 800026a:	b29c      	uxth	r4, r3
 800026c:	2308      	movs	r3, #8
 800026e:	18fa      	adds	r2, r7, r3
 8000270:	1979      	adds	r1, r7, r5
 8000272:	4809      	ldr	r0, [pc, #36]	@ (8000298 <write_nrf_register+0x78>)
 8000274:	2301      	movs	r3, #1
 8000276:	425b      	negs	r3, r3
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	0023      	movs	r3, r4
 800027c:	f001 fcb0 	bl	8001be0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <write_nrf_register+0x74>)
 8000282:	2201      	movs	r2, #1
 8000284:	2104      	movs	r1, #4
 8000286:	0018      	movs	r0, r3
 8000288:	f000 fd99 	bl	8000dbe <HAL_GPIO_WritePin>
}
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b008      	add	sp, #32
 8000292:	bdb0      	pop	{r4, r5, r7, pc}
 8000294:	50000400 	.word	0x50000400
 8000298:	20000028 	.word	0x20000028

0800029c <init_nrf_slave>:

void init_nrf_slave(){
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	uint8_t data[12];
	HAL_GPIO_WritePin(GPIOB, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 80002a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000394 <init_nrf_slave+0xf8>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	2102      	movs	r1, #2
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fd88 	bl	8000dbe <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80002ae:	2064      	movs	r0, #100	@ 0x64
 80002b0:	f000 fb26 	bl	8000900 <HAL_Delay>

	//Shared settings
	data[0] = 0x03; write_nrf_register(0x03, data, 1);
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2203      	movs	r2, #3
 80002b8:	701a      	strb	r2, [r3, #0]
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2201      	movs	r2, #1
 80002be:	0019      	movs	r1, r3
 80002c0:	2003      	movs	r0, #3
 80002c2:	f7ff ffad 	bl	8000220 <write_nrf_register>
	data[0] = 0x3C; write_nrf_register(0x05, data, 1);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	223c      	movs	r2, #60	@ 0x3c
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2201      	movs	r2, #1
 80002d0:	0019      	movs	r1, r3
 80002d2:	2005      	movs	r0, #5
 80002d4:	f7ff ffa4 	bl	8000220 <write_nrf_register>
	data[0] = 0x27; write_nrf_register(0x06, data, 1);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2227      	movs	r2, #39	@ 0x27
 80002dc:	701a      	strb	r2, [r3, #0]
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2201      	movs	r2, #1
 80002e2:	0019      	movs	r1, r3
 80002e4:	2006      	movs	r0, #6
 80002e6:	f7ff ff9b 	bl	8000220 <write_nrf_register>
	data[0] = 0x01; write_nrf_register(0x1C, data, 1);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2201      	movs	r2, #1
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2201      	movs	r2, #1
 80002f4:	0019      	movs	r1, r3
 80002f6:	201c      	movs	r0, #28
 80002f8:	f7ff ff92 	bl	8000220 <write_nrf_register>
	data[0] = 0x04; write_nrf_register(0x1D, data, 1);
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2204      	movs	r2, #4
 8000300:	701a      	strb	r2, [r3, #0]
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2201      	movs	r2, #1
 8000306:	0019      	movs	r1, r3
 8000308:	201d      	movs	r0, #29
 800030a:	f7ff ff89 	bl	8000220 <write_nrf_register>

	//Slave settings
	data[0] = 0x0E; write_nrf_register(0x00, data, 1);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	220e      	movs	r2, #14
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2201      	movs	r2, #1
 8000318:	0019      	movs	r1, r3
 800031a:	2000      	movs	r0, #0
 800031c:	f7ff ff80 	bl	8000220 <write_nrf_register>
	data[0] = 0x01; write_nrf_register(0x01, data, 1);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2201      	movs	r2, #1
 800032a:	0019      	movs	r1, r3
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff77 	bl	8000220 <write_nrf_register>
	data[0] = 0x01; write_nrf_register(0x02, data, 1);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2201      	movs	r2, #1
 800033c:	0019      	movs	r1, r3
 800033e:	2002      	movs	r0, #2
 8000340:	f7ff ff6e 	bl	8000220 <write_nrf_register>
	data[0] = 0x0F;	write_nrf_register(0x04, data, 1);
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	220f      	movs	r2, #15
 8000348:	701a      	strb	r2, [r3, #0]
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	2201      	movs	r2, #1
 800034e:	0019      	movs	r1, r3
 8000350:	2004      	movs	r0, #4
 8000352:	f7ff ff65 	bl	8000220 <write_nrf_register>

	data[0] = 0x0A;
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	220a      	movs	r2, #10
 800035a:	701a      	strb	r2, [r3, #0]
	data[1] = 0x0B;
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	220b      	movs	r2, #11
 8000360:	705a      	strb	r2, [r3, #1]
	data[2] = 0x0C;
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	220c      	movs	r2, #12
 8000366:	709a      	strb	r2, [r3, #2]
	data[3] = 0x0D;
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	220d      	movs	r2, #13
 800036c:	70da      	strb	r2, [r3, #3]
	data[4] = 0x0E;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	220e      	movs	r2, #14
 8000372:	711a      	strb	r2, [r3, #4]
	write_nrf_register(0x10, data, 5);
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2205      	movs	r2, #5
 8000378:	0019      	movs	r1, r3
 800037a:	2010      	movs	r0, #16
 800037c:	f7ff ff50 	bl	8000220 <write_nrf_register>
	write_nrf_register(0x0A, data, 5);
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2205      	movs	r2, #5
 8000384:	0019      	movs	r1, r3
 8000386:	200a      	movs	r0, #10
 8000388:	f7ff ff4a 	bl	8000220 <write_nrf_register>
}
 800038c:	46c0      	nop			@ (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b004      	add	sp, #16
 8000392:	bd80      	pop	{r7, pc}
 8000394:	50000400 	.word	0x50000400

08000398 <transmit_nrf>:

void transmit_nrf(uint8_t size, char data[static size]){
 8000398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800039a:	b097      	sub	sp, #92	@ 0x5c
 800039c:	af02      	add	r7, sp, #8
 800039e:	0002      	movs	r2, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	701a      	strb	r2, [r3, #0]
	uint8_t data_to_send[33] = {0b10100000,};
 80003a6:	252c      	movs	r5, #44	@ 0x2c
 80003a8:	197b      	adds	r3, r7, r5
 80003aa:	22a0      	movs	r2, #160	@ 0xa0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	3304      	adds	r3, #4
 80003b0:	221d      	movs	r2, #29
 80003b2:	2100      	movs	r1, #0
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 ff6b 	bl	8002290 <memset>
	uint8_t data_to_receive[33] = {0b10100000,};
 80003ba:	2608      	movs	r6, #8
 80003bc:	19bb      	adds	r3, r7, r6
 80003be:	22a0      	movs	r2, #160	@ 0xa0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	3304      	adds	r3, #4
 80003c4:	221d      	movs	r2, #29
 80003c6:	2100      	movs	r1, #0
 80003c8:	0018      	movs	r0, r3
 80003ca:	f001 ff61 	bl	8002290 <memset>
	if(size == 0 || size > 32) return;
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d035      	beq.n	8000442 <transmit_nrf+0xaa>
 80003d6:	1dfb      	adds	r3, r7, #7
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b20      	cmp	r3, #32
 80003dc:	d831      	bhi.n	8000442 <transmit_nrf+0xaa>

	memcpy(data_to_send + 1, data, size);
 80003de:	197b      	adds	r3, r7, r5
 80003e0:	3301      	adds	r3, #1
 80003e2:	1dfa      	adds	r2, r7, #7
 80003e4:	7812      	ldrb	r2, [r2, #0]
 80003e6:	6839      	ldr	r1, [r7, #0]
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 ff7d 	bl	80022e8 <memcpy>

	HAL_GPIO_WritePin(GPIOB, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 80003ee:	4b17      	ldr	r3, [pc, #92]	@ (800044c <transmit_nrf+0xb4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	2104      	movs	r1, #4
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fce2 	bl	8000dbe <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, data_to_send, data_to_receive, size + 1, HAL_MAX_DELAY);
 80003fa:	1dfb      	adds	r3, r7, #7
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	b29b      	uxth	r3, r3
 8000400:	3301      	adds	r3, #1
 8000402:	b29c      	uxth	r4, r3
 8000404:	19ba      	adds	r2, r7, r6
 8000406:	1979      	adds	r1, r7, r5
 8000408:	4811      	ldr	r0, [pc, #68]	@ (8000450 <transmit_nrf+0xb8>)
 800040a:	2301      	movs	r3, #1
 800040c:	425b      	negs	r3, r3
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	0023      	movs	r3, r4
 8000412:	f001 fbe5 	bl	8001be0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000416:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <transmit_nrf+0xb4>)
 8000418:	2201      	movs	r2, #1
 800041a:	2104      	movs	r1, #4
 800041c:	0018      	movs	r0, r3
 800041e:	f000 fcce 	bl	8000dbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, SPI_SW_CE_Pin, GPIO_PIN_SET);
 8000422:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <transmit_nrf+0xb4>)
 8000424:	2201      	movs	r2, #1
 8000426:	2102      	movs	r1, #2
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fcc8 	bl	8000dbe <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800042e:	2001      	movs	r0, #1
 8000430:	f000 fa66 	bl	8000900 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <transmit_nrf+0xb4>)
 8000436:	2200      	movs	r2, #0
 8000438:	2102      	movs	r1, #2
 800043a:	0018      	movs	r0, r3
 800043c:	f000 fcbf 	bl	8000dbe <HAL_GPIO_WritePin>
 8000440:	e000      	b.n	8000444 <transmit_nrf+0xac>
	if(size == 0 || size > 32) return;
 8000442:	46c0      	nop			@ (mov r8, r8)

}
 8000444:	46bd      	mov	sp, r7
 8000446:	b015      	add	sp, #84	@ 0x54
 8000448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	50000400 	.word	0x50000400
 8000450:	20000028 	.word	0x20000028

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 f9d7 	bl	800080a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f822 	bl	80004a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f000 f8a4 	bl	80005ac <MX_GPIO_Init>
  MX_SPI2_Init();
 8000464:	f000 f864 	bl	8000530 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000468:	23fa      	movs	r3, #250	@ 0xfa
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fa47 	bl	8000900 <HAL_Delay>
  init_nrf_slave();
 8000472:	f7ff ff13 	bl	800029c <init_nrf_slave>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000476:	23fa      	movs	r3, #250	@ 0xfa
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fa40 	bl	8000900 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_input_Pin) == 1)
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <main+0x48>)
 8000482:	2120      	movs	r1, #32
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fc7d 	bl	8000d84 <HAL_GPIO_ReadPin>
 800048a:	0003      	movs	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d1f2      	bne.n	8000476 <main+0x22>
		  transmit_nrf(1, "a");
 8000490:	4b03      	ldr	r3, [pc, #12]	@ (80004a0 <main+0x4c>)
 8000492:	0019      	movs	r1, r3
 8000494:	2001      	movs	r0, #1
 8000496:	f7ff ff7f 	bl	8000398 <transmit_nrf>
	  HAL_Delay(1000);
 800049a:	e7ec      	b.n	8000476 <main+0x22>
 800049c:	50000400 	.word	0x50000400
 80004a0:	08002314 	.word	0x08002314

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b097      	sub	sp, #92	@ 0x5c
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	2410      	movs	r4, #16
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	0018      	movs	r0, r3
 80004b0:	2348      	movs	r3, #72	@ 0x48
 80004b2:	001a      	movs	r2, r3
 80004b4:	2100      	movs	r1, #0
 80004b6:	f001 feeb 	bl	8002290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ba:	003b      	movs	r3, r7
 80004bc:	0018      	movs	r0, r3
 80004be:	2310      	movs	r3, #16
 80004c0:	001a      	movs	r2, r3
 80004c2:	2100      	movs	r1, #0
 80004c4:	f001 fee4 	bl	8002290 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004c8:	2380      	movs	r3, #128	@ 0x80
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fc93 	bl	8000df8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2202      	movs	r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	0052      	lsls	r2, r2, #1
 80004de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2240      	movs	r2, #64	@ 0x40
 80004e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fcee 	bl	8000ed0 <HAL_RCC_OscConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004f8:	f000 f8a4 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fc:	003b      	movs	r3, r7
 80004fe:	2207      	movs	r2, #7
 8000500:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000502:	003b      	movs	r3, r7
 8000504:	2201      	movs	r2, #1
 8000506:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	003b      	movs	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000514:	003b      	movs	r3, r7
 8000516:	2101      	movs	r1, #1
 8000518:	0018      	movs	r0, r3
 800051a:	f001 f8bf 	bl	800169c <HAL_RCC_ClockConfig>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000522:	f000 f88f 	bl	8000644 <Error_Handler>
  }
}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b017      	add	sp, #92	@ 0x5c
 800052c:	bd90      	pop	{r4, r7, pc}
	...

08000530 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000534:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000536:	4a1c      	ldr	r2, [pc, #112]	@ (80005a8 <MX_SPI2_Init+0x78>)
 8000538:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <MX_SPI2_Init+0x74>)
 800053c:	2282      	movs	r2, #130	@ 0x82
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <MX_SPI2_Init+0x74>)
 800054a:	22e0      	movs	r2, #224	@ 0xe0
 800054c:	00d2      	lsls	r2, r2, #3
 800054e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000550:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <MX_SPI2_Init+0x74>)
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <MX_SPI2_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_SPI2_Init+0x74>)
 800057e:	2207      	movs	r2, #7
 8000580:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_SPI2_Init+0x74>)
 800058a:	2208      	movs	r2, #8
 800058c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800058e:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <MX_SPI2_Init+0x74>)
 8000590:	0018      	movs	r0, r3
 8000592:	f001 fa77 	bl	8001a84 <HAL_SPI_Init>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800059a:	f000 f853 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000028 	.word	0x20000028
 80005a8:	40003800 	.word	0x40003800

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	0018      	movs	r0, r3
 80005b6:	2314      	movs	r3, #20
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f001 fe68 	bl	8002290 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c0:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <MX_GPIO_Init+0x90>)
 80005c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005c4:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <MX_GPIO_Init+0x90>)
 80005c6:	2102      	movs	r1, #2
 80005c8:	430a      	orrs	r2, r1
 80005ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_GPIO_Init+0x90>)
 80005ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d0:	2202      	movs	r2, #2
 80005d2:	4013      	ands	r3, r2
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 80005d8:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <MX_GPIO_Init+0x94>)
 80005da:	2200      	movs	r2, #0
 80005dc:	2102      	movs	r1, #2
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fbed 	bl	8000dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80005e4:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <MX_GPIO_Init+0x94>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	2104      	movs	r1, #4
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fbe7 	bl	8000dbe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_SW_CE_Pin SPI_SW_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_SW_CE_Pin|SPI_SW_CSN_Pin;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2206      	movs	r2, #6
 80005f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2201      	movs	r2, #1
 80005fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4a0d      	ldr	r2, [pc, #52]	@ (8000640 <MX_GPIO_Init+0x94>)
 800060c:	0019      	movs	r1, r3
 800060e:	0010      	movs	r0, r2
 8000610:	f000 fa4c 	bl	8000aac <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_input_Pin */
  GPIO_InitStruct.Pin = GPIO_input_Pin;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2220      	movs	r2, #32
 8000618:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_input_GPIO_Port, &GPIO_InitStruct);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <MX_GPIO_Init+0x94>)
 800062a:	0019      	movs	r1, r3
 800062c:	0010      	movs	r0, r2
 800062e:	f000 fa3d 	bl	8000aac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b006      	add	sp, #24
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	40021000 	.word	0x40021000
 8000640:	50000400 	.word	0x50000400

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <HAL_MspInit+0x44>)
 8000658:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <HAL_MspInit+0x44>)
 800065c:	2180      	movs	r1, #128	@ 0x80
 800065e:	0549      	lsls	r1, r1, #21
 8000660:	430a      	orrs	r2, r1
 8000662:	659a      	str	r2, [r3, #88]	@ 0x58
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <HAL_MspInit+0x44>)
 8000666:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000668:	2380      	movs	r3, #128	@ 0x80
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	4013      	ands	r3, r2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <HAL_MspInit+0x44>)
 8000674:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <HAL_MspInit+0x44>)
 8000678:	2101      	movs	r1, #1
 800067a:	430a      	orrs	r2, r1
 800067c:	661a      	str	r2, [r3, #96]	@ 0x60
 800067e:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <HAL_MspInit+0x44>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000682:	2201      	movs	r2, #1
 8000684:	4013      	ands	r3, r2
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b08b      	sub	sp, #44	@ 0x2c
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	2414      	movs	r4, #20
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2314      	movs	r3, #20
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f001 fdf0 	bl	8002290 <memset>
  if(hspi->Instance==SPI2)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <HAL_SPI_MspInit+0x8c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d130      	bne.n	800071c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <HAL_SPI_MspInit+0x90>)
 80006bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <HAL_SPI_MspInit+0x90>)
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	01c9      	lsls	r1, r1, #7
 80006c4:	430a      	orrs	r2, r1
 80006c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_SPI_MspInit+0x90>)
 80006ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	01db      	lsls	r3, r3, #7
 80006d0:	4013      	ands	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <HAL_SPI_MspInit+0x90>)
 80006d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <HAL_SPI_MspInit+0x90>)
 80006dc:	2102      	movs	r1, #2
 80006de:	430a      	orrs	r2, r1
 80006e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80006e2:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <HAL_SPI_MspInit+0x90>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	2202      	movs	r2, #2
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	22e0      	movs	r2, #224	@ 0xe0
 80006f2:	0212      	lsls	r2, r2, #8
 80006f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f6:	0021      	movs	r1, r4
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2202      	movs	r2, #2
 80006fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2205      	movs	r2, #5
 800070e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	187b      	adds	r3, r7, r1
 8000712:	4a06      	ldr	r2, [pc, #24]	@ (800072c <HAL_SPI_MspInit+0x94>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f000 f9c8 	bl	8000aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b00b      	add	sp, #44	@ 0x2c
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	40003800 	.word	0x40003800
 8000728:	40021000 	.word	0x40021000
 800072c:	50000400 	.word	0x50000400

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f8b8 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <SystemInit+0x4c>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	0512      	lsls	r2, r2, #20
 800076e:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8000770:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <SystemInit+0x50>)
 8000772:	2380      	movs	r3, #128	@ 0x80
 8000774:	58d2      	ldr	r2, [r2, r3]
 8000776:	2380      	movs	r3, #128	@ 0x80
 8000778:	025b      	lsls	r3, r3, #9
 800077a:	401a      	ands	r2, r3
 800077c:	2380      	movs	r3, #128	@ 0x80
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	429a      	cmp	r2, r3
 8000782:	d112      	bne.n	80007aa <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8000784:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <SystemInit+0x50>)
 8000786:	6a1b      	ldr	r3, [r3, #32]
 8000788:	22ff      	movs	r2, #255	@ 0xff
 800078a:	4013      	ands	r3, r2
 800078c:	2bcc      	cmp	r3, #204	@ 0xcc
 800078e:	d00c      	beq.n	80007aa <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8000790:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <SystemInit+0x50>)
 8000792:	6a1b      	ldr	r3, [r3, #32]
 8000794:	22ff      	movs	r2, #255	@ 0xff
 8000796:	4013      	ands	r3, r2
 8000798:	2baa      	cmp	r3, #170	@ 0xaa
 800079a:	d006      	beq.n	80007aa <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <SystemInit+0x50>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <SystemInit+0x50>)
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	02c9      	lsls	r1, r1, #11
 80007a6:	430a      	orrs	r2, r1
 80007a8:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	40022000 	.word	0x40022000

080007b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007bc:	f7ff ffd2 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007e6:	f001 fd5b 	bl	80022a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ea:	f7ff fe33 	bl	8000454 <main>

080007ee <LoopForever>:

LoopForever:
  b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   r0, =_estack
 80007f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007fc:	08002360 	.word	0x08002360
  ldr r2, =_sbss
 8000800:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000804:	20000090 	.word	0x20000090

08000808 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC_COMP1_IRQHandler>

0800080a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000816:	2003      	movs	r0, #3
 8000818:	f000 f80e 	bl	8000838 <HAL_InitTick>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d003      	beq.n	8000828 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e001      	b.n	800082c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000828:	f7ff ff12 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	230f      	movs	r3, #15
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000848:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <HAL_InitTick+0x88>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d02b      	beq.n	80008a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000850:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <HAL_InitTick+0x8c>)
 8000852:	681c      	ldr	r4, [r3, #0]
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <HAL_InitTick+0x88>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	0019      	movs	r1, r3
 800085a:	23fa      	movs	r3, #250	@ 0xfa
 800085c:	0098      	lsls	r0, r3, #2
 800085e:	f7ff fc53 	bl	8000108 <__udivsi3>
 8000862:	0003      	movs	r3, r0
 8000864:	0019      	movs	r1, r3
 8000866:	0020      	movs	r0, r4
 8000868:	f7ff fc4e 	bl	8000108 <__udivsi3>
 800086c:	0003      	movs	r3, r0
 800086e:	0018      	movs	r0, r3
 8000870:	f000 f90f 	bl	8000a92 <HAL_SYSTICK_Config>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d112      	bne.n	800089e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d80a      	bhi.n	8000894 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	2301      	movs	r3, #1
 8000882:	425b      	negs	r3, r3
 8000884:	2200      	movs	r2, #0
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f8ee 	bl	8000a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088c:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_InitTick+0x90>)
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	e00d      	b.n	80008b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000894:	230f      	movs	r3, #15
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e008      	b.n	80008b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800089e:	230f      	movs	r3, #15
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e003      	b.n	80008b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008a8:	230f      	movs	r3, #15
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	781b      	ldrb	r3, [r3, #0]
}
 80008b6:	0018      	movs	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b005      	add	sp, #20
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d0:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <HAL_IncTick+0x18>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <HAL_IncTick+0x1c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	18d2      	adds	r2, r2, r3
 80008da:	4b02      	ldr	r3, [pc, #8]	@ (80008e4 <HAL_IncTick+0x18>)
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	20000008 	.word	0x20000008

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	@ (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	2000008c 	.word	0x2000008c

08000900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000908:	f7ff fff0 	bl	80008ec <HAL_GetTick>
 800090c:	0003      	movs	r3, r0
 800090e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	d004      	beq.n	8000924 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_Delay+0x40>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	f7ff ffe1 	bl	80008ec <HAL_GetTick>
 800092a:	0002      	movs	r2, r0
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	429a      	cmp	r2, r3
 8000934:	d8f7      	bhi.n	8000926 <HAL_Delay+0x26>
  {
  }
}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b004      	add	sp, #16
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000008 	.word	0x20000008

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	0002      	movs	r2, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b7f      	cmp	r3, #127	@ 0x7f
 8000958:	d828      	bhi.n	80009ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a18 <__NVIC_SetPriority+0xd4>)
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b25b      	sxtb	r3, r3
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	33c0      	adds	r3, #192	@ 0xc0
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	589b      	ldr	r3, [r3, r2]
 800096a:	1dfa      	adds	r2, r7, #7
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	0011      	movs	r1, r2
 8000970:	2203      	movs	r2, #3
 8000972:	400a      	ands	r2, r1
 8000974:	00d2      	lsls	r2, r2, #3
 8000976:	21ff      	movs	r1, #255	@ 0xff
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	43d2      	mvns	r2, r2
 800097e:	401a      	ands	r2, r3
 8000980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	22ff      	movs	r2, #255	@ 0xff
 8000988:	401a      	ands	r2, r3
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	0018      	movs	r0, r3
 8000990:	2303      	movs	r3, #3
 8000992:	4003      	ands	r3, r0
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000998:	481f      	ldr	r0, [pc, #124]	@ (8000a18 <__NVIC_SetPriority+0xd4>)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	430a      	orrs	r2, r1
 80009a4:	33c0      	adds	r3, #192	@ 0xc0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009aa:	e031      	b.n	8000a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ac:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <__NVIC_SetPriority+0xd8>)
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	0019      	movs	r1, r3
 80009b4:	230f      	movs	r3, #15
 80009b6:	400b      	ands	r3, r1
 80009b8:	3b08      	subs	r3, #8
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3306      	adds	r3, #6
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	3304      	adds	r3, #4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1dfa      	adds	r2, r7, #7
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	0011      	movs	r1, r2
 80009cc:	2203      	movs	r2, #3
 80009ce:	400a      	ands	r2, r1
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	21ff      	movs	r1, #255	@ 0xff
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	019b      	lsls	r3, r3, #6
 80009e2:	22ff      	movs	r2, #255	@ 0xff
 80009e4:	401a      	ands	r2, r3
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	0018      	movs	r0, r3
 80009ec:	2303      	movs	r3, #3
 80009ee:	4003      	ands	r3, r0
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <__NVIC_SetPriority+0xd8>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	001c      	movs	r4, r3
 80009fc:	230f      	movs	r3, #15
 80009fe:	4023      	ands	r3, r4
 8000a00:	3b08      	subs	r3, #8
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	430a      	orrs	r2, r1
 8000a06:	3306      	adds	r3, #6
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	18c3      	adds	r3, r0, r3
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b003      	add	sp, #12
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	1e5a      	subs	r2, r3, #1
 8000a2c:	2380      	movs	r3, #128	@ 0x80
 8000a2e:	045b      	lsls	r3, r3, #17
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d301      	bcc.n	8000a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a34:	2301      	movs	r3, #1
 8000a36:	e010      	b.n	8000a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <SysTick_Config+0x44>)
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a40:	2301      	movs	r3, #1
 8000a42:	425b      	negs	r3, r3
 8000a44:	2103      	movs	r1, #3
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff ff7c 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <SysTick_Config+0x44>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <SysTick_Config+0x44>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	210f      	movs	r1, #15
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff ff5d 	bl	8000944 <__NVIC_SetPriority>
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f7ff ffbf 	bl	8000a20 <SysTick_Config>
 8000aa2:	0003      	movs	r3, r0
}
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b002      	add	sp, #8
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aba:	e14d      	b.n	8000d58 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <HAL_GPIO_Init+0x28>
 8000ad2:	e13e      	b.n	8000d52 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2203      	movs	r2, #3
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <HAL_GPIO_Init+0x40>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d130      	bne.n	8000b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	43da      	mvns	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2203      	movs	r2, #3
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d017      	beq.n	8000b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d123      	bne.n	8000bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	58d3      	ldr	r3, [r2, r3]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	4013      	ands	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	220f      	movs	r2, #15
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	6939      	ldr	r1, [r7, #16]
 8000bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	23c0      	movs	r3, #192	@ 0xc0
 8000c18:	029b      	lsls	r3, r3, #10
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x174>
 8000c1e:	e098      	b.n	8000d52 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c20:	4a53      	ldr	r2, [pc, #332]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	089b      	lsrs	r3, r3, #2
 8000c26:	3318      	adds	r3, #24
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	589b      	ldr	r3, [r3, r2]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	220f      	movs	r2, #15
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	0013      	movs	r3, r2
 8000c3c:	43da      	mvns	r2, r3
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	23a0      	movs	r3, #160	@ 0xa0
 8000c48:	05db      	lsls	r3, r3, #23
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d019      	beq.n	8000c82 <HAL_GPIO_Init+0x1d6>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a48      	ldr	r2, [pc, #288]	@ (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d013      	beq.n	8000c7e <HAL_GPIO_Init+0x1d2>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a47      	ldr	r2, [pc, #284]	@ (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d00d      	beq.n	8000c7a <HAL_GPIO_Init+0x1ce>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a46      	ldr	r2, [pc, #280]	@ (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d007      	beq.n	8000c76 <HAL_GPIO_Init+0x1ca>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a45      	ldr	r2, [pc, #276]	@ (8000d80 <HAL_GPIO_Init+0x2d4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_GPIO_Init+0x1c6>
 8000c6e:	2305      	movs	r3, #5
 8000c70:	e008      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c72:	2306      	movs	r3, #6
 8000c74:	e006      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e004      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e002      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x1d8>
 8000c82:	2300      	movs	r3, #0
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	2103      	movs	r1, #3
 8000c88:	400a      	ands	r2, r1
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	4093      	lsls	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c94:	4936      	ldr	r1, [pc, #216]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3318      	adds	r3, #24
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca2:	4b33      	ldr	r3, [pc, #204]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	035b      	lsls	r3, r3, #13
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ccc:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	039b      	lsls	r3, r3, #14
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000cf8:	2384      	movs	r3, #132	@ 0x84
 8000cfa:	58d3      	ldr	r3, [r2, r3]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	43da      	mvns	r2, r3
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	2380      	movs	r3, #128	@ 0x80
 8000d0e:	029b      	lsls	r3, r3, #10
 8000d10:	4013      	ands	r3, r2
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d1c:	4914      	ldr	r1, [pc, #80]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000d1e:	2284      	movs	r2, #132	@ 0x84
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d24:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000d26:	2380      	movs	r3, #128	@ 0x80
 8000d28:	58d3      	ldr	r3, [r2, r3]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	025b      	lsls	r3, r3, #9
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d4a:	4909      	ldr	r1, [pc, #36]	@ (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	40da      	lsrs	r2, r3
 8000d60:	1e13      	subs	r3, r2, #0
 8000d62:	d000      	beq.n	8000d66 <HAL_GPIO_Init+0x2ba>
 8000d64:	e6aa      	b.n	8000abc <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b006      	add	sp, #24
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021800 	.word	0x40021800
 8000d74:	50000400 	.word	0x50000400
 8000d78:	50000800 	.word	0x50000800
 8000d7c:	50000c00 	.word	0x50000c00
 8000d80:	50001400 	.word	0x50001400

08000d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	000a      	movs	r2, r1
 8000d8e:	1cbb      	adds	r3, r7, #2
 8000d90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	1cba      	adds	r2, r7, #2
 8000d98:	8812      	ldrh	r2, [r2, #0]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d004      	beq.n	8000da8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000d9e:	230f      	movs	r3, #15
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e003      	b.n	8000db0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	0008      	movs	r0, r1
 8000dc8:	0011      	movs	r1, r2
 8000dca:	1cbb      	adds	r3, r7, #2
 8000dcc:	1c02      	adds	r2, r0, #0
 8000dce:	801a      	strh	r2, [r3, #0]
 8000dd0:	1c7b      	adds	r3, r7, #1
 8000dd2:	1c0a      	adds	r2, r1, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd6:	1c7b      	adds	r3, r7, #1
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d004      	beq.n	8000de8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dde:	1cbb      	adds	r3, r7, #2
 8000de0:	881a      	ldrh	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de8:	1cbb      	adds	r3, r7, #2
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	2380      	movs	r3, #128	@ 0x80
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d137      	bne.n	8000e7a <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	23c0      	movs	r3, #192	@ 0xc0
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	401a      	ands	r2, r3
 8000e14:	2380      	movs	r3, #128	@ 0x80
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d040      	beq.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a22      	ldr	r2, [pc, #136]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000e22:	401a      	ands	r2, r3
 8000e24:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e26:	2180      	movs	r1, #128	@ 0x80
 8000e28:	0089      	lsls	r1, r1, #2
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2232      	movs	r2, #50	@ 0x32
 8000e34:	4353      	muls	r3, r2
 8000e36:	491f      	ldr	r1, [pc, #124]	@ (8000eb4 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff f965 	bl	8000108 <__udivsi3>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e44:	e002      	b.n	8000e4c <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	401a      	ands	r2, r3
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d102      	bne.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f0      	bne.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e66:	695a      	ldr	r2, [r3, #20]
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	2380      	movs	r3, #128	@ 0x80
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d113      	bne.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e012      	b.n	8000ea0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	23c0      	movs	r3, #192	@ 0xc0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	401a      	ands	r2, r3
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d008      	beq.n	8000e9e <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000e92:	401a      	ands	r2, r3
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e96:	2180      	movs	r1, #128	@ 0x80
 8000e98:	00c9      	lsls	r1, r1, #3
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40007000 	.word	0x40007000
 8000eac:	fffff9ff 	.word	0xfffff9ff
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	000f4240 	.word	0x000f4240

08000eb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <HAL_PWREx_GetVoltageRange+0x14>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	23c0      	movs	r3, #192	@ 0xc0
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4013      	ands	r3, r2
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed8:	4bc8      	ldr	r3, [pc, #800]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2238      	movs	r2, #56	@ 0x38
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ee2:	4bc6      	ldr	r3, [pc, #792]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d100      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x28>
 8000ef6:	e0ee      	b.n	80010d6 <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <HAL_RCC_OscConfig+0x3e>
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	2b18      	cmp	r3, #24
 8000f02:	d000      	beq.n	8000f06 <HAL_RCC_OscConfig+0x36>
 8000f04:	e093      	b.n	800102e <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d000      	beq.n	8000f0e <HAL_RCC_OscConfig+0x3e>
 8000f0c:	e08f      	b.n	800102e <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f0e:	4bbb      	ldr	r3, [pc, #748]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2202      	movs	r2, #2
 8000f14:	4013      	ands	r3, r2
 8000f16:	d006      	beq.n	8000f26 <HAL_RCC_OscConfig+0x56>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f000 fbae 	bl	8001682 <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f2a:	4bb4      	ldr	r3, [pc, #720]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2108      	movs	r1, #8
 8000f30:	400b      	ands	r3, r1
 8000f32:	d004      	beq.n	8000f3e <HAL_RCC_OscConfig+0x6e>
 8000f34:	4bb1      	ldr	r3, [pc, #708]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	21f0      	movs	r1, #240	@ 0xf0
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	e005      	b.n	8000f4a <HAL_RCC_OscConfig+0x7a>
 8000f3e:	49af      	ldr	r1, [pc, #700]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f40:	2394      	movs	r3, #148	@ 0x94
 8000f42:	58cb      	ldr	r3, [r1, r3]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	21f0      	movs	r1, #240	@ 0xf0
 8000f48:	400b      	ands	r3, r1
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d225      	bcs.n	8000f9a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fd2a 	bl	80019ac <RCC_SetFlashLatencyFromMSIRange>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d002      	beq.n	8000f62 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f000 fb90 	bl	8001682 <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f62:	4ba6      	ldr	r3, [pc, #664]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4ba5      	ldr	r3, [pc, #660]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f68:	2108      	movs	r1, #8
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	4ba3      	ldr	r3, [pc, #652]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	22f0      	movs	r2, #240	@ 0xf0
 8000f74:	4393      	bics	r3, r2
 8000f76:	0019      	movs	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f7c:	4b9f      	ldr	r3, [pc, #636]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f82:	4b9e      	ldr	r3, [pc, #632]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4a9e      	ldr	r2, [pc, #632]	@ (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	021a      	lsls	r2, r3, #8
 8000f92:	4b9a      	ldr	r3, [pc, #616]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f94:	430a      	orrs	r2, r1
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	e027      	b.n	8000fea <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f9a:	4b98      	ldr	r3, [pc, #608]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4b97      	ldr	r3, [pc, #604]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	4b95      	ldr	r3, [pc, #596]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	22f0      	movs	r2, #240	@ 0xf0
 8000fac:	4393      	bics	r3, r2
 8000fae:	0019      	movs	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fb4:	4b91      	ldr	r3, [pc, #580]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fba:	4b90      	ldr	r3, [pc, #576]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4a90      	ldr	r2, [pc, #576]	@ (8001200 <HAL_RCC_OscConfig+0x330>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	021a      	lsls	r2, r3, #8
 8000fca:	4b8c      	ldr	r3, [pc, #560]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 fce6 	bl	80019ac <RCC_SetFlashLatencyFromMSIRange>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d002      	beq.n	8000fea <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f000 fb4c 	bl	8001682 <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8000fea:	f000 fc43 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8000fee:	0001      	movs	r1, r0
 8000ff0:	4b82      	ldr	r3, [pc, #520]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8000ffa:	4a82      	ldr	r2, [pc, #520]	@ (8001204 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ffe:	001a      	movs	r2, r3
 8001000:	231f      	movs	r3, #31
 8001002:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001004:	000a      	movs	r2, r1
 8001006:	40da      	lsrs	r2, r3
 8001008:	4b7f      	ldr	r3, [pc, #508]	@ (8001208 <HAL_RCC_OscConfig+0x338>)
 800100a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800100c:	4b7f      	ldr	r3, [pc, #508]	@ (800120c <HAL_RCC_OscConfig+0x33c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	250f      	movs	r5, #15
 8001012:	197c      	adds	r4, r7, r5
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff fc0f 	bl	8000838 <HAL_InitTick>
 800101a:	0003      	movs	r3, r0
 800101c:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 800101e:	197b      	adds	r3, r7, r5
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d056      	beq.n	80010d4 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 8001026:	197b      	adds	r3, r7, r5
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	f000 fb2a 	bl	8001682 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d034      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001036:	4b71      	ldr	r3, [pc, #452]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4b70      	ldr	r3, [pc, #448]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800103c:	2101      	movs	r1, #1
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001042:	f7ff fc53 	bl	80008ec <HAL_GetTick>
 8001046:	0003      	movs	r3, r0
 8001048:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 800104c:	f7ff fc4e 	bl	80008ec <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e311      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800105e:	4b67      	ldr	r3, [pc, #412]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2202      	movs	r2, #2
 8001064:	4013      	ands	r3, r2
 8001066:	d0f1      	beq.n	800104c <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001068:	4b64      	ldr	r3, [pc, #400]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b63      	ldr	r3, [pc, #396]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800106e:	2108      	movs	r1, #8
 8001070:	430a      	orrs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	4b61      	ldr	r3, [pc, #388]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	22f0      	movs	r2, #240	@ 0xf0
 800107a:	4393      	bics	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001082:	4b5e      	ldr	r3, [pc, #376]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001088:	4b5c      	ldr	r3, [pc, #368]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a5c      	ldr	r2, [pc, #368]	@ (8001200 <HAL_RCC_OscConfig+0x330>)
 800108e:	4013      	ands	r3, r2
 8001090:	0019      	movs	r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	021a      	lsls	r2, r3, #8
 8001098:	4b58      	ldr	r3, [pc, #352]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800109a:	430a      	orrs	r2, r1
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	e01a      	b.n	80010d6 <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010a0:	4b56      	ldr	r3, [pc, #344]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b55      	ldr	r3, [pc, #340]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010a6:	2101      	movs	r1, #1
 80010a8:	438a      	bics	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc1e 	bl	80008ec <HAL_GetTick>
 80010b0:	0003      	movs	r3, r0
 80010b2:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80010b6:	f7ff fc19 	bl	80008ec <HAL_GetTick>
 80010ba:	0002      	movs	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e2dc      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010c8:	4b4c      	ldr	r3, [pc, #304]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2202      	movs	r2, #2
 80010ce:	4013      	ands	r3, r2
 80010d0:	d1f1      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1e6>
 80010d2:	e000      	b.n	80010d6 <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010d4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2201      	movs	r2, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	d100      	bne.n	80010e2 <HAL_RCC_OscConfig+0x212>
 80010e0:	e065      	b.n	80011ae <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	d005      	beq.n	80010f4 <HAL_RCC_OscConfig+0x224>
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2b18      	cmp	r3, #24
 80010ec:	d10e      	bne.n	800110c <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d10b      	bne.n	800110c <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	4b41      	ldr	r3, [pc, #260]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	2380      	movs	r3, #128	@ 0x80
 80010fa:	029b      	lsls	r3, r3, #10
 80010fc:	4013      	ands	r3, r2
 80010fe:	d055      	beq.n	80011ac <HAL_RCC_OscConfig+0x2dc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d151      	bne.n	80011ac <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e2ba      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	429a      	cmp	r2, r3
 8001116:	d107      	bne.n	8001128 <HAL_RCC_OscConfig+0x258>
 8001118:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800111e:	2180      	movs	r1, #128	@ 0x80
 8001120:	0249      	lsls	r1, r1, #9
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e013      	b.n	8001150 <HAL_RCC_OscConfig+0x280>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	23a0      	movs	r3, #160	@ 0xa0
 800112e:	02db      	lsls	r3, r3, #11
 8001130:	429a      	cmp	r2, r3
 8001132:	d107      	bne.n	8001144 <HAL_RCC_OscConfig+0x274>
 8001134:	4b31      	ldr	r3, [pc, #196]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b30      	ldr	r3, [pc, #192]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800113a:	21a0      	movs	r1, #160	@ 0xa0
 800113c:	02c9      	lsls	r1, r1, #11
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e005      	b.n	8001150 <HAL_RCC_OscConfig+0x280>
 8001144:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b2c      	ldr	r3, [pc, #176]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 800114a:	4931      	ldr	r1, [pc, #196]	@ (8001210 <HAL_RCC_OscConfig+0x340>)
 800114c:	400a      	ands	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d014      	beq.n	8001182 <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fbc8 	bl	80008ec <HAL_GetTick>
 800115c:	0003      	movs	r3, r0
 800115e:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001162:	f7ff fbc3 	bl	80008ec <HAL_GetTick>
 8001166:	0002      	movs	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b64      	cmp	r3, #100	@ 0x64
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e286      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x292>
 8001180:	e015      	b.n	80011ae <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fbb3 	bl	80008ec <HAL_GetTick>
 8001186:	0003      	movs	r3, r0
 8001188:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800118c:	f7ff fbae 	bl	80008ec <HAL_GetTick>
 8001190:	0002      	movs	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	@ 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e271      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	2380      	movs	r3, #128	@ 0x80
 80011a4:	029b      	lsls	r3, r3, #10
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x2bc>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d100      	bne.n	80011ba <HAL_RCC_OscConfig+0x2ea>
 80011b8:	e073      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d005      	beq.n	80011cc <HAL_RCC_OscConfig+0x2fc>
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2b18      	cmp	r3, #24
 80011c4:	d128      	bne.n	8001218 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d125      	bne.n	8001218 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2380      	movs	r3, #128	@ 0x80
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_OscConfig+0x314>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e24e      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_RCC_OscConfig+0x344>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	0019      	movs	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	061a      	lsls	r2, r3, #24
 80011f4:	4b01      	ldr	r3, [pc, #4]	@ (80011fc <HAL_RCC_OscConfig+0x32c>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011fa:	e052      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d2>
 80011fc:	40021000 	.word	0x40021000
 8001200:	ffff00ff 	.word	0xffff00ff
 8001204:	08002318 	.word	0x08002318
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004
 8001210:	fffaffff 	.word	0xfffaffff
 8001214:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d026      	beq.n	800126e <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4bc7      	ldr	r3, [pc, #796]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4bc6      	ldr	r3, [pc, #792]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001226:	2180      	movs	r1, #128	@ 0x80
 8001228:	0049      	lsls	r1, r1, #1
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122e:	f7ff fb5d 	bl	80008ec <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001238:	f7ff fb58 	bl	80008ec <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e21b      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800124a:	4bbd      	ldr	r3, [pc, #756]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	2380      	movs	r3, #128	@ 0x80
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4013      	ands	r3, r2
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4bba      	ldr	r3, [pc, #744]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4aba      	ldr	r2, [pc, #744]	@ (8001544 <HAL_RCC_OscConfig+0x674>)
 800125c:	4013      	ands	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	061a      	lsls	r2, r3, #24
 8001266:	4bb6      	ldr	r3, [pc, #728]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001268:	430a      	orrs	r2, r1
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	e019      	b.n	80012a2 <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126e:	4bb4      	ldr	r3, [pc, #720]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4bb3      	ldr	r3, [pc, #716]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001274:	49b4      	ldr	r1, [pc, #720]	@ (8001548 <HAL_RCC_OscConfig+0x678>)
 8001276:	400a      	ands	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fb37 	bl	80008ec <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001284:	f7ff fb32 	bl	80008ec <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1f5      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001296:	4baa      	ldr	r3, [pc, #680]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2208      	movs	r2, #8
 80012a8:	4013      	ands	r3, r2
 80012aa:	d051      	beq.n	8001350 <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d031      	beq.n	8001318 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d108      	bne.n	80012ce <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80012bc:	4aa0      	ldr	r2, [pc, #640]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80012be:	2394      	movs	r3, #148	@ 0x94
 80012c0:	58d3      	ldr	r3, [r2, r3]
 80012c2:	499f      	ldr	r1, [pc, #636]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	4393      	bics	r3, r2
 80012c8:	2294      	movs	r2, #148	@ 0x94
 80012ca:	508b      	str	r3, [r1, r2]
 80012cc:	e007      	b.n	80012de <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80012ce:	4a9c      	ldr	r2, [pc, #624]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80012d0:	2394      	movs	r3, #148	@ 0x94
 80012d2:	58d3      	ldr	r3, [r2, r3]
 80012d4:	499a      	ldr	r1, [pc, #616]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	4313      	orrs	r3, r2
 80012da:	2294      	movs	r2, #148	@ 0x94
 80012dc:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4a98      	ldr	r2, [pc, #608]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80012e0:	2394      	movs	r3, #148	@ 0x94
 80012e2:	58d3      	ldr	r3, [r2, r3]
 80012e4:	4996      	ldr	r1, [pc, #600]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	4313      	orrs	r3, r2
 80012ea:	2294      	movs	r2, #148	@ 0x94
 80012ec:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ee:	f7ff fafd 	bl	80008ec <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff faf8 	bl	80008ec <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b11      	cmp	r3, #17
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1bb      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800130a:	4a8d      	ldr	r2, [pc, #564]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800130c:	2394      	movs	r3, #148	@ 0x94
 800130e:	58d3      	ldr	r3, [r2, r3]
 8001310:	2202      	movs	r2, #2
 8001312:	4013      	ands	r3, r2
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x428>
 8001316:	e01b      	b.n	8001350 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001318:	4a89      	ldr	r2, [pc, #548]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800131a:	2394      	movs	r3, #148	@ 0x94
 800131c:	58d3      	ldr	r3, [r2, r3]
 800131e:	4988      	ldr	r1, [pc, #544]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001320:	2201      	movs	r2, #1
 8001322:	4393      	bics	r3, r2
 8001324:	2294      	movs	r2, #148	@ 0x94
 8001326:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001328:	f7ff fae0 	bl	80008ec <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fadb 	bl	80008ec <HAL_GetTick>
 8001336:	0002      	movs	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b11      	cmp	r3, #17
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e19e      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001344:	4a7e      	ldr	r2, [pc, #504]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001346:	2394      	movs	r3, #148	@ 0x94
 8001348:	58d3      	ldr	r3, [r2, r3]
 800134a:	2202      	movs	r2, #2
 800134c:	4013      	ands	r3, r2
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2204      	movs	r2, #4
 8001356:	4013      	ands	r3, r2
 8001358:	d100      	bne.n	800135c <HAL_RCC_OscConfig+0x48c>
 800135a:	e10d      	b.n	8001578 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135c:	201f      	movs	r0, #31
 800135e:	183b      	adds	r3, r7, r0
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8001364:	4b76      	ldr	r3, [pc, #472]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001366:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	055b      	lsls	r3, r3, #21
 800136c:	4013      	ands	r3, r2
 800136e:	d110      	bne.n	8001392 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	4b73      	ldr	r3, [pc, #460]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001372:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001374:	4b72      	ldr	r3, [pc, #456]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001376:	2180      	movs	r1, #128	@ 0x80
 8001378:	0549      	lsls	r1, r1, #21
 800137a:	430a      	orrs	r2, r1
 800137c:	659a      	str	r2, [r3, #88]	@ 0x58
 800137e:	4b70      	ldr	r3, [pc, #448]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001380:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	055b      	lsls	r3, r3, #21
 8001386:	4013      	ands	r3, r2
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138c:	183b      	adds	r3, r7, r0
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001392:	4b6e      	ldr	r3, [pc, #440]	@ (800154c <HAL_RCC_OscConfig+0x67c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4013      	ands	r3, r2
 800139c:	d11a      	bne.n	80013d4 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800139e:	4b6b      	ldr	r3, [pc, #428]	@ (800154c <HAL_RCC_OscConfig+0x67c>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b6a      	ldr	r3, [pc, #424]	@ (800154c <HAL_RCC_OscConfig+0x67c>)
 80013a4:	2180      	movs	r1, #128	@ 0x80
 80013a6:	0049      	lsls	r1, r1, #1
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fa9e 	bl	80008ec <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b6:	f7ff fa99 	bl	80008ec <HAL_GetTick>
 80013ba:	0002      	movs	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e15c      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c8:	4b60      	ldr	r3, [pc, #384]	@ (800154c <HAL_RCC_OscConfig+0x67c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	d01e      	beq.n	800141c <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d010      	beq.n	800140a <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80013e8:	4a55      	ldr	r2, [pc, #340]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80013ea:	2390      	movs	r3, #144	@ 0x90
 80013ec:	58d3      	ldr	r3, [r2, r3]
 80013ee:	4954      	ldr	r1, [pc, #336]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	4313      	orrs	r3, r2
 80013f4:	2290      	movs	r2, #144	@ 0x90
 80013f6:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013f8:	4a51      	ldr	r2, [pc, #324]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80013fa:	2390      	movs	r3, #144	@ 0x90
 80013fc:	58d3      	ldr	r3, [r2, r3]
 80013fe:	4950      	ldr	r1, [pc, #320]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001400:	2201      	movs	r2, #1
 8001402:	4313      	orrs	r3, r2
 8001404:	2290      	movs	r2, #144	@ 0x90
 8001406:	508b      	str	r3, [r1, r2]
 8001408:	e018      	b.n	800143c <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800140a:	4a4d      	ldr	r2, [pc, #308]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800140c:	2390      	movs	r3, #144	@ 0x90
 800140e:	58d3      	ldr	r3, [r2, r3]
 8001410:	494b      	ldr	r1, [pc, #300]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001412:	2201      	movs	r2, #1
 8001414:	4313      	orrs	r3, r2
 8001416:	2290      	movs	r2, #144	@ 0x90
 8001418:	508b      	str	r3, [r1, r2]
 800141a:	e00f      	b.n	800143c <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800141c:	4a48      	ldr	r2, [pc, #288]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800141e:	2390      	movs	r3, #144	@ 0x90
 8001420:	58d3      	ldr	r3, [r2, r3]
 8001422:	4947      	ldr	r1, [pc, #284]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001424:	2201      	movs	r2, #1
 8001426:	4393      	bics	r3, r2
 8001428:	2290      	movs	r2, #144	@ 0x90
 800142a:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800142c:	4a44      	ldr	r2, [pc, #272]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800142e:	2390      	movs	r3, #144	@ 0x90
 8001430:	58d3      	ldr	r3, [r2, r3]
 8001432:	4943      	ldr	r1, [pc, #268]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001434:	2204      	movs	r2, #4
 8001436:	4393      	bics	r3, r2
 8001438:	2290      	movs	r2, #144	@ 0x90
 800143a:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d04f      	beq.n	80014e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fa52 	bl	80008ec <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144c:	e009      	b.n	8001462 <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f7ff fa4d 	bl	80008ec <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	4a3d      	ldr	r2, [pc, #244]	@ (8001550 <HAL_RCC_OscConfig+0x680>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e10f      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001462:	4a37      	ldr	r2, [pc, #220]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001464:	2390      	movs	r3, #144	@ 0x90
 8001466:	58d3      	ldr	r3, [r2, r3]
 8001468:	2202      	movs	r2, #2
 800146a:	4013      	ands	r3, r2
 800146c:	d0ef      	beq.n	800144e <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2280      	movs	r2, #128	@ 0x80
 8001474:	4013      	ands	r3, r2
 8001476:	d01a      	beq.n	80014ae <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001478:	4a31      	ldr	r2, [pc, #196]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800147a:	2390      	movs	r3, #144	@ 0x90
 800147c:	58d3      	ldr	r3, [r2, r3]
 800147e:	4930      	ldr	r1, [pc, #192]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001480:	2280      	movs	r2, #128	@ 0x80
 8001482:	4313      	orrs	r3, r2
 8001484:	2290      	movs	r2, #144	@ 0x90
 8001486:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001488:	e009      	b.n	800149e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fa2f 	bl	80008ec <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4a2e      	ldr	r2, [pc, #184]	@ (8001550 <HAL_RCC_OscConfig+0x680>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e0f1      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800149e:	4a28      	ldr	r2, [pc, #160]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80014a0:	2390      	movs	r3, #144	@ 0x90
 80014a2:	58d2      	ldr	r2, [r2, r3]
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	4013      	ands	r3, r2
 80014aa:	d0ee      	beq.n	800148a <HAL_RCC_OscConfig+0x5ba>
 80014ac:	e059      	b.n	8001562 <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014ae:	4a24      	ldr	r2, [pc, #144]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80014b0:	2390      	movs	r3, #144	@ 0x90
 80014b2:	58d3      	ldr	r3, [r2, r3]
 80014b4:	4922      	ldr	r1, [pc, #136]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80014b6:	2280      	movs	r2, #128	@ 0x80
 80014b8:	4393      	bics	r3, r2
 80014ba:	2290      	movs	r2, #144	@ 0x90
 80014bc:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80014be:	e009      	b.n	80014d4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fa14 	bl	80008ec <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	4a21      	ldr	r2, [pc, #132]	@ (8001550 <HAL_RCC_OscConfig+0x680>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0d6      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80014d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 80014d6:	2390      	movs	r3, #144	@ 0x90
 80014d8:	58d2      	ldr	r2, [r2, r3]
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	4013      	ands	r3, r2
 80014e0:	d1ee      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5f0>
 80014e2:	e03e      	b.n	8001562 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fa02 	bl	80008ec <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ec:	e009      	b.n	8001502 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff f9fd 	bl	80008ec <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <HAL_RCC_OscConfig+0x680>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0bf      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001502:	4a0f      	ldr	r2, [pc, #60]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001504:	2390      	movs	r3, #144	@ 0x90
 8001506:	58d3      	ldr	r3, [r2, r3]
 8001508:	2202      	movs	r2, #2
 800150a:	4013      	ands	r3, r2
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800150e:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001510:	2390      	movs	r3, #144	@ 0x90
 8001512:	58d3      	ldr	r3, [r2, r3]
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	4013      	ands	r3, r2
 8001518:	d023      	beq.n	8001562 <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 800151c:	2390      	movs	r3, #144	@ 0x90
 800151e:	58d3      	ldr	r3, [r2, r3]
 8001520:	4907      	ldr	r1, [pc, #28]	@ (8001540 <HAL_RCC_OscConfig+0x670>)
 8001522:	2280      	movs	r2, #128	@ 0x80
 8001524:	4393      	bics	r3, r2
 8001526:	2290      	movs	r2, #144	@ 0x90
 8001528:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800152a:	e013      	b.n	8001554 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff f9de 	bl	80008ec <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_RCC_OscConfig+0x680>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d90b      	bls.n	8001554 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0a0      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
 8001540:	40021000 	.word	0x40021000
 8001544:	80ffffff 	.word	0x80ffffff
 8001548:	fffffeff 	.word	0xfffffeff
 800154c:	40007000 	.word	0x40007000
 8001550:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001554:	4a4d      	ldr	r2, [pc, #308]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001556:	2390      	movs	r3, #144	@ 0x90
 8001558:	58d2      	ldr	r2, [r2, r3]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	4013      	ands	r3, r2
 8001560:	d1e4      	bne.n	800152c <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001562:	231f      	movs	r3, #31
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800156c:	4b47      	ldr	r3, [pc, #284]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 800156e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001570:	4b46      	ldr	r3, [pc, #280]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001572:	4947      	ldr	r1, [pc, #284]	@ (8001690 <HAL_RCC_OscConfig+0x7c0>)
 8001574:	400a      	ands	r2, r1
 8001576:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157c:	2b00      	cmp	r3, #0
 800157e:	d100      	bne.n	8001582 <HAL_RCC_OscConfig+0x6b2>
 8001580:	e07e      	b.n	8001680 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001582:	4b42      	ldr	r3, [pc, #264]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2238      	movs	r2, #56	@ 0x38
 8001588:	4013      	ands	r3, r2
 800158a:	2b18      	cmp	r3, #24
 800158c:	d100      	bne.n	8001590 <HAL_RCC_OscConfig+0x6c0>
 800158e:	e075      	b.n	800167c <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	2b02      	cmp	r3, #2
 8001596:	d156      	bne.n	8001646 <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001598:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 800159e:	493d      	ldr	r1, [pc, #244]	@ (8001694 <HAL_RCC_OscConfig+0x7c4>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff f9a2 	bl	80008ec <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff f99d 	bl	80008ec <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e060      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c0:	4b32      	ldr	r3, [pc, #200]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	049b      	lsls	r3, r3, #18
 80015c8:	4013      	ands	r3, r2
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015cc:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4a31      	ldr	r2, [pc, #196]	@ (8001698 <HAL_RCC_OscConfig+0x7c8>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f8:	431a      	orrs	r2, r3
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001606:	2180      	movs	r1, #128	@ 0x80
 8001608:	0549      	lsls	r1, r1, #21
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001614:	2180      	movs	r1, #128	@ 0x80
 8001616:	0449      	lsls	r1, r1, #17
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff f966 	bl	80008ec <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001626:	f7ff f961 	bl	80008ec <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e024      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2380      	movs	r3, #128	@ 0x80
 800163e:	049b      	lsls	r3, r3, #18
 8001640:	4013      	ands	r3, r2
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x756>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 800164c:	4911      	ldr	r1, [pc, #68]	@ (8001694 <HAL_RCC_OscConfig+0x7c4>)
 800164e:	400a      	ands	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff f94b 	bl	80008ec <HAL_GetTick>
 8001656:	0003      	movs	r3, r0
 8001658:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff f946 	bl	80008ec <HAL_GetTick>
 8001660:	0002      	movs	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e009      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <HAL_RCC_OscConfig+0x7bc>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	2380      	movs	r3, #128	@ 0x80
 8001674:	049b      	lsls	r3, r3, #18
 8001676:	4013      	ands	r3, r2
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x78c>
 800167a:	e001      	b.n	8001680 <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b008      	add	sp, #32
 8001688:	bdb0      	pop	{r4, r5, r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	40021000 	.word	0x40021000
 8001690:	efffffff 	.word	0xefffffff
 8001694:	feffffff 	.word	0xfeffffff
 8001698:	11c1808c 	.word	0x11c1808c

0800169c <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2207      	movs	r2, #7
 80016ac:	4013      	ands	r3, r2
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d911      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b4:	4b68      	ldr	r3, [pc, #416]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2207      	movs	r2, #7
 80016ba:	4393      	bics	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b64      	ldr	r3, [pc, #400]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2207      	movs	r2, #7
 80016cc:	4013      	ands	r3, r2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0bb      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	d100      	bne.n	80016e4 <HAL_RCC_ClockConfig+0x48>
 80016e2:	e064      	b.n	80017ae <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d107      	bne.n	80016fc <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ec:	4b5b      	ldr	r3, [pc, #364]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	049b      	lsls	r3, r3, #18
 80016f4:	4013      	ands	r3, r2
 80016f6:	d138      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0a9      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d107      	bne.n	8001714 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001704:	4b55      	ldr	r3, [pc, #340]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	4013      	ands	r3, r2
 800170e:	d12c      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e09d      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d106      	bne.n	800172a <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171c:	4b4f      	ldr	r3, [pc, #316]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d121      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e092      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001732:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4013      	ands	r3, r2
 800173c:	d115      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e086      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800174a:	4a44      	ldr	r2, [pc, #272]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	2394      	movs	r3, #148	@ 0x94
 800174e:	58d3      	ldr	r3, [r2, r3]
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d109      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07a      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175a:	4a40      	ldr	r2, [pc, #256]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	2390      	movs	r3, #144	@ 0x90
 800175e:	58d3      	ldr	r3, [r2, r3]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e072      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800176a:	4b3c      	ldr	r3, [pc, #240]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2207      	movs	r2, #7
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4b38      	ldr	r3, [pc, #224]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177e:	f7ff f8b5 	bl	80008ec <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	e009      	b.n	800179c <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f8b0 	bl	80008ec <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	4a33      	ldr	r2, [pc, #204]	@ (8001860 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e059      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179c:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2238      	movs	r2, #56	@ 0x38
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d1ec      	bne.n	8001788 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	d009      	beq.n	80017cc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a29      	ldr	r2, [pc, #164]	@ (8001864 <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	4013      	ands	r3, r2
 80017c0:	0019      	movs	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b25      	ldr	r3, [pc, #148]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017cc:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2207      	movs	r2, #7
 80017d2:	4013      	ands	r3, r2
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d211      	bcs.n	80017fe <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017da:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2207      	movs	r2, #7
 80017e0:	4393      	bics	r3, r2
 80017e2:	0019      	movs	r1, r3
 80017e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2207      	movs	r2, #7
 80017f2:	4013      	ands	r3, r2
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d001      	beq.n	80017fe <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e028      	b.n	8001850 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2204      	movs	r2, #4
 8001804:	4013      	ands	r3, r2
 8001806:	d009      	beq.n	800181c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <HAL_RCC_ClockConfig+0x1cc>)
 800180e:	4013      	ands	r3, r2
 8001810:	0019      	movs	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800181c:	f000 f82a 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001820:	0001      	movs	r1, r0
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	220f      	movs	r2, #15
 800182a:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800182c:	4a0f      	ldr	r2, [pc, #60]	@ (800186c <HAL_RCC_ClockConfig+0x1d0>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001830:	001a      	movs	r2, r3
 8001832:	231f      	movs	r3, #31
 8001834:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001836:	000a      	movs	r2, r1
 8001838:	40da      	lsrs	r2, r3
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <HAL_RCC_ClockConfig+0x1d4>)
 800183c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	250b      	movs	r5, #11
 8001840:	197c      	adds	r4, r7, r5
 8001842:	2003      	movs	r0, #3
 8001844:	f7fe fff8 	bl	8000838 <HAL_InitTick>
 8001848:	0003      	movs	r3, r0
 800184a:	7023      	strb	r3, [r4, #0]

  return halstatus;
 800184c:	197b      	adds	r3, r7, r5
 800184e:	781b      	ldrb	r3, [r3, #0]
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bdb0      	pop	{r4, r5, r7, pc}
 8001858:	40022000 	.word	0x40022000
 800185c:	40021000 	.word	0x40021000
 8001860:	00001388 	.word	0x00001388
 8001864:	fffff0ff 	.word	0xfffff0ff
 8001868:	ffff8fff 	.word	0xffff8fff
 800186c:	08002318 	.word	0x08002318
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001882:	4b46      	ldr	r3, [pc, #280]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2238      	movs	r2, #56	@ 0x38
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800188c:	4b43      	ldr	r3, [pc, #268]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2203      	movs	r2, #3
 8001892:	4013      	ands	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x34>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b18      	cmp	r3, #24
 80018a0:	d125      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d122      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018a8:	4b3c      	ldr	r3, [pc, #240]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2208      	movs	r2, #8
 80018ae:	4013      	ands	r3, r2
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80018b2:	4a3a      	ldr	r2, [pc, #232]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 80018b4:	2394      	movs	r3, #148	@ 0x94
 80018b6:	58d3      	ldr	r3, [r2, r3]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	220f      	movs	r2, #15
 80018bc:	4013      	ands	r3, r2
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c0:	e005      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018c2:	4b36      	ldr	r3, [pc, #216]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	220f      	movs	r2, #15
 80018ca:	4013      	ands	r3, r2
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	2b0b      	cmp	r3, #11
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 80018d8:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80018da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	58d3      	ldr	r3, [r2, r3]
 80018e0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11b      	bne.n	8001920 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ea:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018ec:	e018      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d102      	bne.n	80018fa <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018f4:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x130>)
 80018f6:	623b      	str	r3, [r7, #32]
 80018f8:	e012      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001900:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	e00c      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b20      	cmp	r3, #32
 800190a:	d103      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800190c:	23fa      	movs	r3, #250	@ 0xfa
 800190e:	01db      	lsls	r3, r3, #7
 8001910:	623b      	str	r3, [r7, #32]
 8001912:	e005      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b28      	cmp	r3, #40	@ 0x28
 8001918:	d102      	bne.n	8001920 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b18      	cmp	r3, #24
 8001924:	d135      	bne.n	8001992 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2203      	movs	r2, #3
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	2207      	movs	r2, #7
 8001938:	4013      	ands	r3, r2
 800193a:	3301      	adds	r3, #1
 800193c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d003      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0xd8>
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0xde>
 800194a:	e005      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x130>)
 800194e:	61fb      	str	r3, [r7, #28]
        break;
 8001950:	e005      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x134>)
 8001954:	61fb      	str	r3, [r7, #28]
        break;
 8001956:	e002      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	61fb      	str	r3, [r7, #28]
        break;
 800195c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	227f      	movs	r2, #127	@ 0x7f
 8001966:	4013      	ands	r3, r2
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	4353      	muls	r3, r2
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbca 	bl	8000108 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001978:	4b08      	ldr	r3, [pc, #32]	@ (800199c <HAL_RCC_GetSysClockFreq+0x128>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0f5b      	lsrs	r3, r3, #29
 800197e:	2207      	movs	r2, #7
 8001980:	4013      	ands	r3, r2
 8001982:	3301      	adds	r3, #1
 8001984:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	68b8      	ldr	r0, [r7, #8]
 800198a:	f7fe fbbd 	bl	8000108 <__udivsi3>
 800198e:	0003      	movs	r3, r0
 8001990:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001992:	6a3b      	ldr	r3, [r7, #32]
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b00a      	add	sp, #40	@ 0x28
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	08002328 	.word	0x08002328
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	003d0900 	.word	0x003d0900

080019ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80019ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	055b      	lsls	r3, r3, #21
 80019c0:	4013      	ands	r3, r2
 80019c2:	d004      	beq.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019c4:	f7ff fa78 	bl	8000eb8 <HAL_PWREx_GetVoltageRange>
 80019c8:	0003      	movs	r3, r0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e017      	b.n	80019fe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80019d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80019d4:	2180      	movs	r1, #128	@ 0x80
 80019d6:	0549      	lsls	r1, r1, #21
 80019d8:	430a      	orrs	r2, r1
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58
 80019dc:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80019de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	055b      	lsls	r3, r3, #21
 80019e4:	4013      	ands	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019ea:	f7ff fa65 	bl	8000eb8 <HAL_PWREx_GetVoltageRange>
 80019ee:	0003      	movs	r3, r0
 80019f0:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80019f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80019f8:	4920      	ldr	r1, [pc, #128]	@ (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d111      	bne.n	8001a2c <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b80      	cmp	r3, #128	@ 0x80
 8001a0c:	d91c      	bls.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2bb0      	cmp	r3, #176	@ 0xb0
 8001a12:	d902      	bls.n	8001a1a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a14:	2302      	movs	r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	e016      	b.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b90      	cmp	r3, #144	@ 0x90
 8001a1e:	d902      	bls.n	8001a26 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a20:	2301      	movs	r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	e010      	b.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	e00d      	b.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a30:	d902      	bls.n	8001a38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8001a32:	2302      	movs	r3, #2
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e007      	b.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b70      	cmp	r3, #112	@ 0x70
 8001a3c:	d102      	bne.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	e001      	b.n	8001a48 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8001a44:	2300      	movs	r3, #0
 8001a46:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2207      	movs	r2, #7
 8001a60:	4013      	ands	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b006      	add	sp, #24
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	efffffff 	.word	0xefffffff
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0a0      	b.n	8001bd8 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	2382      	movs	r3, #130	@ 0x82
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d009      	beq.n	8001abe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
 8001ab0:	e005      	b.n	8001abe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	225d      	movs	r2, #93	@ 0x5d
 8001ac8:	5c9b      	ldrb	r3, [r3, r2]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d107      	bne.n	8001ae0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	225c      	movs	r2, #92	@ 0x5c
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f7fe fddc 	bl	8000698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	225d      	movs	r2, #93	@ 0x5d
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2140      	movs	r1, #64	@ 0x40
 8001af4:	438a      	bics	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68da      	ldr	r2, [r3, #12]
 8001afc:	23e0      	movs	r3, #224	@ 0xe0
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d902      	bls.n	8001b0a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e002      	b.n	8001b10 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	015b      	lsls	r3, r3, #5
 8001b0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	23f0      	movs	r3, #240	@ 0xf0
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d008      	beq.n	8001b2e <HAL_SPI_Init+0xaa>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	23e0      	movs	r3, #224	@ 0xe0
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d002      	beq.n	8001b2e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2382      	movs	r3, #130	@ 0x82
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	2384      	movs	r3, #132	@ 0x84
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	400b      	ands	r3, r1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2102      	movs	r1, #2
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2101      	movs	r1, #1
 8001b54:	400b      	ands	r3, r1
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6999      	ldr	r1, [r3, #24]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	400b      	ands	r3, r1
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2138      	movs	r1, #56	@ 0x38
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	2180      	movs	r1, #128	@ 0x80
 8001b74:	400b      	ands	r3, r1
 8001b76:	431a      	orrs	r2, r3
 8001b78:	0011      	movs	r1, r2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	401a      	ands	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	0c1b      	lsrs	r3, r3, #16
 8001b92:	2204      	movs	r2, #4
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ba4:	2108      	movs	r1, #8
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68d9      	ldr	r1, [r3, #12]
 8001bae:	23f0      	movs	r3, #240	@ 0xf0
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	015b      	lsls	r3, r3, #5
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	225d      	movs	r2, #93	@ 0x5d
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b004      	add	sp, #16
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	001a      	movs	r2, r3
 8001bee:	1cbb      	adds	r3, r7, #2
 8001bf0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001bf6:	2323      	movs	r3, #35	@ 0x23
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	225c      	movs	r2, #92	@ 0x5c
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_SPI_TransmitReceive+0x2c>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e1c4      	b.n	8001f96 <HAL_SPI_TransmitReceive+0x3b6>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	225c      	movs	r2, #92	@ 0x5c
 8001c10:	2101      	movs	r1, #1
 8001c12:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c14:	f7fe fe6a 	bl	80008ec <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c1c:	201b      	movs	r0, #27
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	215d      	movs	r1, #93	@ 0x5d
 8001c24:	5c52      	ldrb	r2, [r2, r1]
 8001c26:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001c2e:	2312      	movs	r3, #18
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	1cba      	adds	r2, r7, #2
 8001c34:	8812      	ldrh	r2, [r2, #0]
 8001c36:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001c38:	183b      	adds	r3, r7, r0
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d011      	beq.n	8001c64 <HAL_SPI_TransmitReceive+0x84>
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	2382      	movs	r3, #130	@ 0x82
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d107      	bne.n	8001c5a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <HAL_SPI_TransmitReceive+0x7a>
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d004      	beq.n	8001c64 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001c5a:	2323      	movs	r3, #35	@ 0x23
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c62:	e191      	b.n	8001f88 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_SPI_TransmitReceive+0x98>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_SPI_TransmitReceive+0x98>
 8001c70:	1cbb      	adds	r3, r7, #2
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001c78:	2323      	movs	r3, #35	@ 0x23
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c80:	e182      	b.n	8001f88 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	225d      	movs	r2, #93	@ 0x5d
 8001c86:	5c9b      	ldrb	r3, [r3, r2]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d003      	beq.n	8001c96 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	225d      	movs	r2, #93	@ 0x5d
 8001c92:	2105      	movs	r1, #5
 8001c94:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1cba      	adds	r2, r7, #2
 8001ca6:	2146      	movs	r1, #70	@ 0x46
 8001ca8:	8812      	ldrh	r2, [r2, #0]
 8001caa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1cba      	adds	r2, r7, #2
 8001cb0:	2144      	movs	r1, #68	@ 0x44
 8001cb2:	8812      	ldrh	r2, [r2, #0]
 8001cb4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1cba      	adds	r2, r7, #2
 8001cc0:	8812      	ldrh	r2, [r2, #0]
 8001cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1cba      	adds	r2, r7, #2
 8001cc8:	8812      	ldrh	r2, [r2, #0]
 8001cca:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	23e0      	movs	r3, #224	@ 0xe0
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d908      	bls.n	8001cf6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	49ac      	ldr	r1, [pc, #688]	@ (8001fa0 <HAL_SPI_TransmitReceive+0x3c0>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	605a      	str	r2, [r3, #4]
 8001cf4:	e008      	b.n	8001d08 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2180      	movs	r1, #128	@ 0x80
 8001d02:	0149      	lsls	r1, r1, #5
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b40      	cmp	r3, #64	@ 0x40
 8001d14:	d007      	beq.n	8001d26 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2140      	movs	r1, #64	@ 0x40
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	23e0      	movs	r3, #224	@ 0xe0
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d800      	bhi.n	8001d34 <HAL_SPI_TransmitReceive+0x154>
 8001d32:	e083      	b.n	8001e3c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_SPI_TransmitReceive+0x168>
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d000      	beq.n	8001d48 <HAL_SPI_TransmitReceive+0x168>
 8001d46:	e06d      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d4c:	881a      	ldrh	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d58:	1c9a      	adds	r2, r3, #2
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d6c:	e05a      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d11b      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x1d4>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <HAL_SPI_TransmitReceive+0x1d4>
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d113      	bne.n	8001db4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d11c      	bne.n	8001dfc <HAL_SPI_TransmitReceive+0x21c>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2246      	movs	r2, #70	@ 0x46
 8001dc6:	5a9b      	ldrh	r3, [r3, r2]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	1c9a      	adds	r2, r3, #2
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2246      	movs	r2, #70	@ 0x46
 8001dea:	5a9b      	ldrh	r3, [r3, r2]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b299      	uxth	r1, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2246      	movs	r2, #70	@ 0x46
 8001df6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001dfc:	f7fe fd76 	bl	80008ec <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d80b      	bhi.n	8001e24 <HAL_SPI_TransmitReceive+0x244>
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0e:	3301      	adds	r3, #1
 8001e10:	d008      	beq.n	8001e24 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001e12:	2323      	movs	r3, #35	@ 0x23
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	2203      	movs	r2, #3
 8001e18:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	225d      	movs	r2, #93	@ 0x5d
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]
        goto error;
 8001e22:	e0b1      	b.n	8001f88 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d19f      	bne.n	8001d6e <HAL_SPI_TransmitReceive+0x18e>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2246      	movs	r2, #70	@ 0x46
 8001e32:	5a9b      	ldrh	r3, [r3, r2]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d199      	bne.n	8001d6e <HAL_SPI_TransmitReceive+0x18e>
 8001e3a:	e089      	b.n	8001f50 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x270>
 8001e44:	2312      	movs	r3, #18
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d000      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x270>
 8001e4e:	e074      	b.n	8001f3a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	330c      	adds	r3, #12
 8001e5a:	7812      	ldrb	r2, [r2, #0]
 8001e5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e76:	e060      	b.n	8001f3a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d11c      	bne.n	8001ec0 <HAL_SPI_TransmitReceive+0x2e0>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d017      	beq.n	8001ec0 <HAL_SPI_TransmitReceive+0x2e0>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d114      	bne.n	8001ec0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	330c      	adds	r3, #12
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d11e      	bne.n	8001f0c <HAL_SPI_TransmitReceive+0x32c>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2246      	movs	r2, #70	@ 0x46
 8001ed2:	5a9b      	ldrh	r3, [r3, r2]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d018      	beq.n	8001f0c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	330c      	adds	r3, #12
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	7812      	ldrb	r2, [r2, #0]
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2246      	movs	r2, #70	@ 0x46
 8001efa:	5a9b      	ldrh	r3, [r3, r2]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b299      	uxth	r1, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2246      	movs	r2, #70	@ 0x46
 8001f06:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f0c:	f7fe fcee 	bl	80008ec <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d802      	bhi.n	8001f22 <HAL_SPI_TransmitReceive+0x342>
 8001f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f1e:	3301      	adds	r3, #1
 8001f20:	d102      	bne.n	8001f28 <HAL_SPI_TransmitReceive+0x348>
 8001f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001f28:	2323      	movs	r3, #35	@ 0x23
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	225d      	movs	r2, #93	@ 0x5d
 8001f34:	2101      	movs	r1, #1
 8001f36:	5499      	strb	r1, [r3, r2]
        goto error;
 8001f38:	e026      	b.n	8001f88 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d199      	bne.n	8001e78 <HAL_SPI_TransmitReceive+0x298>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2246      	movs	r2, #70	@ 0x46
 8001f48:	5a9b      	ldrh	r3, [r3, r2]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d193      	bne.n	8001e78 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f954 	bl	8002204 <SPI_EndRxTxTransaction>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001f60:	2323      	movs	r3, #35	@ 0x23
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8001f76:	2323      	movs	r3, #35	@ 0x23
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e003      	b.n	8001f88 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	225d      	movs	r2, #93	@ 0x5d
 8001f84:	2101      	movs	r1, #1
 8001f86:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	225c      	movs	r2, #92	@ 0x5c
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f90:	2323      	movs	r3, #35	@ 0x23
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	781b      	ldrb	r3, [r3, #0]
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b00a      	add	sp, #40	@ 0x28
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	ffffefff 	.word	0xffffefff

08001fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fb4:	f7fe fc9a 	bl	80008ec <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	18d3      	adds	r3, r2, r3
 8001fc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fc4:	f7fe fc92 	bl	80008ec <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80020b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	0d1b      	lsrs	r3, r3, #20
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	4353      	muls	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fda:	e058      	b.n	800208e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	d055      	beq.n	800208e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fe2:	f7fe fc83 	bl	80008ec <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d902      	bls.n	8001ff8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d142      	bne.n	800207e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	21e0      	movs	r1, #224	@ 0xe0
 8002004:	438a      	bics	r2, r1
 8002006:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	2382      	movs	r3, #130	@ 0x82
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	429a      	cmp	r2, r3
 8002012:	d113      	bne.n	800203c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	429a      	cmp	r2, r3
 800201e:	d005      	beq.n	800202c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2140      	movs	r1, #64	@ 0x40
 8002038:	438a      	bics	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	429a      	cmp	r2, r3
 8002046:	d110      	bne.n	800206a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	491a      	ldr	r1, [pc, #104]	@ (80020bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2180      	movs	r1, #128	@ 0x80
 8002064:	0189      	lsls	r1, r1, #6
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	225d      	movs	r2, #93	@ 0x5d
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	225c      	movs	r2, #92	@ 0x5c
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e017      	b.n	80020ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3b01      	subs	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	4013      	ands	r3, r2
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	425a      	negs	r2, r3
 800209e:	4153      	adcs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	001a      	movs	r2, r3
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d197      	bne.n	8001fdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b008      	add	sp, #32
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	20000000 	.word	0x20000000
 80020bc:	ffffdfff 	.word	0xffffdfff

080020c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	@ 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020ce:	2317      	movs	r3, #23
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80020d6:	f7fe fc09 	bl	80008ec <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	18d3      	adds	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80020e6:	f7fe fc01 	bl	80008ec <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	330c      	adds	r3, #12
 80020f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020f6:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	0013      	movs	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	00da      	lsls	r2, r3, #3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	0d1b      	lsrs	r3, r3, #20
 8002106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002108:	4353      	muls	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800210c:	e068      	b.n	80021e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	23c0      	movs	r3, #192	@ 0xc0
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	429a      	cmp	r2, r3
 8002116:	d10a      	bne.n	800212e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	2117      	movs	r1, #23
 8002126:	187b      	adds	r3, r7, r1
 8002128:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800212a:	187b      	adds	r3, r7, r1
 800212c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	d055      	beq.n	80021e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002134:	f7fe fbda 	bl	80008ec <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002140:	429a      	cmp	r2, r3
 8002142:	d902      	bls.n	800214a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002146:	2b00      	cmp	r3, #0
 8002148:	d142      	bne.n	80021d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	21e0      	movs	r1, #224	@ 0xe0
 8002156:	438a      	bics	r2, r1
 8002158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	2382      	movs	r3, #130	@ 0x82
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	429a      	cmp	r2, r3
 8002164:	d113      	bne.n	800218e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	429a      	cmp	r2, r3
 8002170:	d005      	beq.n	800217e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	429a      	cmp	r2, r3
 800217c:	d107      	bne.n	800218e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2140      	movs	r1, #64	@ 0x40
 800218a:	438a      	bics	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	429a      	cmp	r2, r3
 8002198:	d110      	bne.n	80021bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4916      	ldr	r1, [pc, #88]	@ (8002200 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2180      	movs	r1, #128	@ 0x80
 80021b6:	0189      	lsls	r1, r1, #6
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	225d      	movs	r2, #93	@ 0x5d
 80021c0:	2101      	movs	r1, #1
 80021c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	225c      	movs	r2, #92	@ 0x5c
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e010      	b.n	80021f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	3b01      	subs	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d18e      	bne.n	800210e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	0018      	movs	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b00a      	add	sp, #40	@ 0x28
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	20000000 	.word	0x20000000
 8002200:	ffffdfff 	.word	0xffffdfff

08002204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	23c0      	movs	r3, #192	@ 0xc0
 8002214:	0159      	lsls	r1, r3, #5
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	0013      	movs	r3, r2
 800221e:	2200      	movs	r2, #0
 8002220:	f7ff ff4e 	bl	80020c0 <SPI_WaitFifoStateUntilTimeout>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d007      	beq.n	8002238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222c:	2220      	movs	r2, #32
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e027      	b.n	8002288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	0013      	movs	r3, r2
 8002242:	2200      	movs	r2, #0
 8002244:	2180      	movs	r1, #128	@ 0x80
 8002246:	f7ff fead 	bl	8001fa4 <SPI_WaitFlagStateUntilTimeout>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d007      	beq.n	800225e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002252:	2220      	movs	r2, #32
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e014      	b.n	8002288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	23c0      	movs	r3, #192	@ 0xc0
 8002262:	00d9      	lsls	r1, r3, #3
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	0013      	movs	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	f7ff ff27 	bl	80020c0 <SPI_WaitFifoStateUntilTimeout>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d007      	beq.n	8002286 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227a:	2220      	movs	r2, #32
 800227c:	431a      	orrs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e000      	b.n	8002288 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}

08002290 <memset>:
 8002290:	0003      	movs	r3, r0
 8002292:	1882      	adds	r2, r0, r2
 8002294:	4293      	cmp	r3, r2
 8002296:	d100      	bne.n	800229a <memset+0xa>
 8002298:	4770      	bx	lr
 800229a:	7019      	strb	r1, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	e7f9      	b.n	8002294 <memset+0x4>

080022a0 <__libc_init_array>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	2600      	movs	r6, #0
 80022a4:	4c0c      	ldr	r4, [pc, #48]	@ (80022d8 <__libc_init_array+0x38>)
 80022a6:	4d0d      	ldr	r5, [pc, #52]	@ (80022dc <__libc_init_array+0x3c>)
 80022a8:	1b64      	subs	r4, r4, r5
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	42a6      	cmp	r6, r4
 80022ae:	d109      	bne.n	80022c4 <__libc_init_array+0x24>
 80022b0:	2600      	movs	r6, #0
 80022b2:	f000 f823 	bl	80022fc <_init>
 80022b6:	4c0a      	ldr	r4, [pc, #40]	@ (80022e0 <__libc_init_array+0x40>)
 80022b8:	4d0a      	ldr	r5, [pc, #40]	@ (80022e4 <__libc_init_array+0x44>)
 80022ba:	1b64      	subs	r4, r4, r5
 80022bc:	10a4      	asrs	r4, r4, #2
 80022be:	42a6      	cmp	r6, r4
 80022c0:	d105      	bne.n	80022ce <__libc_init_array+0x2e>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	00b3      	lsls	r3, r6, #2
 80022c6:	58eb      	ldr	r3, [r5, r3]
 80022c8:	4798      	blx	r3
 80022ca:	3601      	adds	r6, #1
 80022cc:	e7ee      	b.n	80022ac <__libc_init_array+0xc>
 80022ce:	00b3      	lsls	r3, r6, #2
 80022d0:	58eb      	ldr	r3, [r5, r3]
 80022d2:	4798      	blx	r3
 80022d4:	3601      	adds	r6, #1
 80022d6:	e7f2      	b.n	80022be <__libc_init_array+0x1e>
 80022d8:	08002358 	.word	0x08002358
 80022dc:	08002358 	.word	0x08002358
 80022e0:	0800235c 	.word	0x0800235c
 80022e4:	08002358 	.word	0x08002358

080022e8 <memcpy>:
 80022e8:	2300      	movs	r3, #0
 80022ea:	b510      	push	{r4, lr}
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d100      	bne.n	80022f2 <memcpy+0xa>
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	5ccc      	ldrb	r4, [r1, r3]
 80022f4:	54c4      	strb	r4, [r0, r3]
 80022f6:	3301      	adds	r3, #1
 80022f8:	e7f8      	b.n	80022ec <memcpy+0x4>
	...

080022fc <_init>:
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002302:	bc08      	pop	{r3}
 8002304:	469e      	mov	lr, r3
 8002306:	4770      	bx	lr

08002308 <_fini>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230e:	bc08      	pop	{r3}
 8002310:	469e      	mov	lr, r3
 8002312:	4770      	bx	lr
