
Alarm_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
<<<<<<< HEAD
  1 .text         00004be4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  08004d84  08004d84  00005d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e0  080054e0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080054e0  080054e0  000064e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054e8  080054e8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054ec  080054ec  000064ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080054f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000068  08005558  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08005558  00007364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d68b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ba  00000000  00000000  00014723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  000168e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a24  00000000  00000000  000175e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175ef  00000000  00000000  00018004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b92  00000000  00000000  0002f5f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c53a  00000000  00000000  00040185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc6bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  000cc704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d0544  2**0
=======
  1 .text         00004d5c  080001a0  080001a0  000011a0  2**4
=======
  1 .text         00005170  080001a0  080001a0  000011a0  2**4
>>>>>>> c1d5507 (packet_list and sim800L alert)
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08005310  08005310  00006310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800558c  0800558c  00007098  2**0
                  CONTENTS
  4 .ARM          00000008  0800558c  0800558c  0000658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005594  08005594  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005598  08005598  00006598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800559c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000098  08005634  00007098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08005634  000073f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da58  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002354  00000000  00000000  00014b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00016e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a01  00000000  00000000  00017b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d8  00000000  00000000  00018559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001129c  00000000  00000000  0002fe31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c101  00000000  00000000  000410cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd1ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000cd214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 21 .debug_line_str 00000058  00000000  00000000  000d0c00  2**0
>>>>>>> 0207771 (switch changed to function array)
=======
 21 .debug_line_str 00000058  00000000  00000000  000d0ffc  2**0
>>>>>>> c1d5507 (packet_list and sim800L alert)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d6c 	.word	0x08004d6c
=======
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c0:	08004ee4 	.word	0x08004ee4
>>>>>>> 0207771 (switch changed to function array)
=======
 80001c0:	080052f8 	.word	0x080052f8
>>>>>>> c1d5507 (packet_list and sim800L alert)

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004d6c 	.word	0x08004d6c
=======
 80001d8:	2000009c 	.word	0x2000009c
<<<<<<< HEAD
 80001dc:	08004ee4 	.word	0x08004ee4
>>>>>>> 0207771 (switch changed to function array)
=======
 80001dc:	080052f8 	.word	0x080052f8
>>>>>>> c1d5507 (packet_list and sim800L alert)

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000588:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800058c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d013      	beq.n	80005c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000598:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	e000      	b.n	80005ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80005aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0f9      	beq.n	80005aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	b2d2      	uxtb	r2, r2
 80005be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

<<<<<<< HEAD
080005d0 <nrf_write_register>:
 * @param reg_addr: The register address (5 LSBs are used).
 * @param data: Pointer to the data to write.
 * @param size: Number of bytes to write.
 * @retval HAL_StatusTypeDef from SPI transaction.
 */
HAL_StatusTypeDef nrf_write_register(uint8_t reg_addr, uint8_t* data, uint8_t size) {
 80005d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005d4:	b08d      	sub	sp, #52	@ 0x34
 80005d6:	af02      	add	r7, sp, #8
 80005d8:	4603      	mov	r3, r0
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	4613      	mov	r3, r2
 80005e0:	73bb      	strb	r3, [r7, #14]
 80005e2:	466b      	mov	r3, sp
 80005e4:	461e      	mov	r6, r3
    uint8_t tx_buf[size + 1];
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	1c59      	adds	r1, r3, #1
 80005ea:	1e4b      	subs	r3, r1, #1
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ee:	460a      	mov	r2, r1
 80005f0:	2300      	movs	r3, #0
 80005f2:	603a      	str	r2, [r7, #0]
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	f04f 0200 	mov.w	r2, #0
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	00c3      	lsls	r3, r0, #3
 8000602:	6838      	ldr	r0, [r7, #0]
 8000604:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000608:	6838      	ldr	r0, [r7, #0]
 800060a:	00c2      	lsls	r2, r0, #3
 800060c:	460a      	mov	r2, r1
 800060e:	2300      	movs	r3, #0
 8000610:	4692      	mov	sl, r2
 8000612:	469b      	mov	fp, r3
 8000614:	f04f 0200 	mov.w	r2, #0
 8000618:	f04f 0300 	mov.w	r3, #0
 800061c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000628:	460b      	mov	r3, r1
 800062a:	3307      	adds	r3, #7
 800062c:	08db      	lsrs	r3, r3, #3
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	ebad 0d03 	sub.w	sp, sp, r3
 8000634:	ab02      	add	r3, sp, #8
 8000636:	3300      	adds	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
    uint8_t rx_buf[size + 1]; // To capture status bytes clocked out
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	1c59      	adds	r1, r3, #1
 800063e:	1e4b      	subs	r3, r1, #1
 8000640:	61fb      	str	r3, [r7, #28]
 8000642:	460a      	mov	r2, r1
 8000644:	2300      	movs	r3, #0
 8000646:	4690      	mov	r8, r2
 8000648:	4699      	mov	r9, r3
 800064a:	f04f 0200 	mov.w	r2, #0
 800064e:	f04f 0300 	mov.w	r3, #0
 8000652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800065a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800065e:	460a      	mov	r2, r1
 8000660:	2300      	movs	r3, #0
 8000662:	4614      	mov	r4, r2
 8000664:	461d      	mov	r5, r3
 8000666:	f04f 0200 	mov.w	r2, #0
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	00eb      	lsls	r3, r5, #3
 8000670:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000674:	00e2      	lsls	r2, r4, #3
 8000676:	460b      	mov	r3, r1
 8000678:	3307      	adds	r3, #7
 800067a:	08db      	lsrs	r3, r3, #3
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	ebad 0d03 	sub.w	sp, sp, r3
 8000682:	ab02      	add	r3, sp, #8
 8000684:	3300      	adds	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
    HAL_StatusTypeDef status;

    tx_buf[0] = NRF_CMD_W_REGISTER | (reg_addr & 0x1F); // Command OR'd with register address
 8000688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068c:	f003 031f 	and.w	r3, r3, #31
 8000690:	b25b      	sxtb	r3, r3
 8000692:	f043 0320 	orr.w	r3, r3, #32
 8000696:	b25b      	sxtb	r3, r3
 8000698:	b2da      	uxtb	r2, r3
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	701a      	strb	r2, [r3, #0]
    memcpy(tx_buf + 1, data, size);
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	3301      	adds	r3, #1
 80006a2:	7bba      	ldrb	r2, [r7, #14]
 80006a4:	68b9      	ldr	r1, [r7, #8]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 fe49 	bl	800433e <memcpy>

    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006b2:	4813      	ldr	r0, [pc, #76]	@ (8000700 <nrf_write_register+0x130>)
 80006b4:	f001 f9cc 	bl	8001a50 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buf, rx_buf, size + 1, HAL_MAX_DELAY);
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3301      	adds	r3, #1
 80006be:	b29b      	uxth	r3, r3
 80006c0:	f04f 32ff 	mov.w	r2, #4294967295
 80006c4:	9200      	str	r2, [sp, #0]
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	6a39      	ldr	r1, [r7, #32]
 80006ca:	480e      	ldr	r0, [pc, #56]	@ (8000704 <nrf_write_register+0x134>)
 80006cc:	f002 fc72 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006da:	4809      	ldr	r0, [pc, #36]	@ (8000700 <nrf_write_register+0x130>)
 80006dc:	f001 f9b8 	bl	8001a50 <HAL_GPIO_WritePin>

    // rx_buf[0] contains the STATUS register value at the time of command byte transmission.
    // You can print or log rx_buf[0] for debugging if needed.
    // printf("NRF_Write: Reg 0x%02X, Status during write: 0x%02X\n", reg_addr, rx_buf[0]);

    if (status != HAL_OK) {
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d005      	beq.n	80006f2 <nrf_write_register+0x122>
        printf("SPI Error in nrf_write_register: %d for reg 0x%02X\n", (int)status, reg_addr);
 80006e6:	7dfb      	ldrb	r3, [r7, #23]
 80006e8:	7bfa      	ldrb	r2, [r7, #15]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <nrf_write_register+0x138>)
 80006ee:	f003 fc63 	bl	8003fb8 <iprintf>
    }
    return status;
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	46b5      	mov	sp, r6
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	372c      	adds	r7, #44	@ 0x2c
 80006fa:	46bd      	mov	sp, r7
 80006fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000700:	40020000 	.word	0x40020000
 8000704:	200000d8 	.word	0x200000d8
 8000708:	08004d84 	.word	0x08004d84

0800070c <nrf_read_register_multi>:
 * @param reg_addr: The register address (5 LSBs are used).
 * @param read_data: Pointer to a buffer to store the read data.
 * @param size: Number of bytes to read.
 * @retval HAL_StatusTypeDef from SPI transaction.
 */
HAL_StatusTypeDef nrf_read_register_multi(uint8_t reg_addr, uint8_t* read_data, uint8_t size) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af02      	add	r7, sp, #8
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	71bb      	strb	r3, [r7, #6]
    uint8_t cmd = NRF_CMD_R_REGISTER | (reg_addr & 0x1F);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73bb      	strb	r3, [r7, #14]
    uint8_t status_byte; // To store the status clocked out during command transmission
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800072c:	4818      	ldr	r0, [pc, #96]	@ (8000790 <nrf_read_register_multi+0x84>)
 800072e:	f001 f98f 	bl	8001a50 <HAL_GPIO_WritePin>
    // Transmit the read command, receive status byte
    status = HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_byte, 1, HAL_MAX_DELAY);
 8000732:	f107 020d 	add.w	r2, r7, #13
 8000736:	f107 010e 	add.w	r1, r7, #14
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	4814      	ldr	r0, [pc, #80]	@ (8000794 <nrf_read_register_multi+0x88>)
 8000744:	f002 fc36 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d109      	bne.n	8000766 <nrf_read_register_multi+0x5a>
        // Receive the register data (clocks out NOPs on MOSI if HAL_SPI_Receive requires it,
        // or send dummy bytes if using HAL_SPI_TransmitReceive for reading)
        // Using HAL_SPI_Receive is cleaner here.
        status = HAL_SPI_Receive(&hspi2, read_data, size, HAL_MAX_DELAY);
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	b29a      	uxth	r2, r3
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	6839      	ldr	r1, [r7, #0]
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <nrf_read_register_multi+0x88>)
 800075e:	f002 fb10 	bl	8002d82 <HAL_SPI_Receive>
 8000762:	4603      	mov	r3, r0
 8000764:	73fb      	strb	r3, [r7, #15]
    }
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800076c:	4808      	ldr	r0, [pc, #32]	@ (8000790 <nrf_read_register_multi+0x84>)
 800076e:	f001 f96f 	bl	8001a50 <HAL_GPIO_WritePin>

    // printf("NRF_Read_Multi: Reg 0x%02X, Status during read cmd: 0x%02X\n", reg_addr, status_byte);

    if (status != HAL_OK) {
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d005      	beq.n	8000784 <nrf_read_register_multi+0x78>
        printf("SPI Error in nrf_read_register_multi: %d for reg 0x%02X\n", (int)status, reg_addr);
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <nrf_read_register_multi+0x8c>)
 8000780:	f003 fc1a 	bl	8003fb8 <iprintf>
    }
    return status;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000
 8000794:	200000d8 	.word	0x200000d8
 8000798:	08004db8 	.word	0x08004db8

0800079c <nrf_read_single_register>:
/*
 * @brief Reads a single byte from an NRF24L01+ register.
 * @param reg_addr: The register address.
 * @retval The byte read from the register. Returns 0xFF on SPI error for simplicity.
 */
uint8_t nrf_read_single_register(uint8_t reg_addr) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    uint8_t data_byte;
    if (nrf_read_register_multi(reg_addr, &data_byte, 1) == HAL_OK) {
 80007a6:	f107 010f 	add.w	r1, r7, #15
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffac 	bl	800070c <nrf_read_register_multi>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <nrf_read_single_register+0x22>
        return data_byte;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	e005      	b.n	80007ca <nrf_read_single_register+0x2e>
    }
    printf("Error reading single register 0x%02X\n", reg_addr);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4619      	mov	r1, r3
 80007c2:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <nrf_read_single_register+0x38>)
 80007c4:	f003 fbf8 	bl	8003fb8 <iprintf>
    return 0xFF; // Indicate error
 80007c8:	23ff      	movs	r3, #255	@ 0xff
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08004df4 	.word	0x08004df4

080007d8 <nrf_read_status_register>:

/*
 * @brief Reads the NRF24L01+ STATUS register using NOP command.
 * @retval The STATUS register value. Returns 0xFF on SPI error.
 */
uint8_t nrf_read_status_register(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af02      	add	r7, sp, #8
    uint8_t status_val;
    uint8_t nop_cmd = NRF_CMD_NOP;
 80007de:	23ff      	movs	r3, #255	@ 0xff
 80007e0:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef spi_status;
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e8:	4811      	ldr	r0, [pc, #68]	@ (8000830 <nrf_read_status_register+0x58>)
 80007ea:	f001 f931 	bl	8001a50 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_TransmitReceive(&hspi2, &nop_cmd, &status_val, 1, HAL_MAX_DELAY);
 80007ee:	1dba      	adds	r2, r7, #6
 80007f0:	1d79      	adds	r1, r7, #5
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	480e      	ldr	r0, [pc, #56]	@ (8000834 <nrf_read_status_register+0x5c>)
 80007fc:	f002 fbda 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <nrf_read_status_register+0x58>)
 800080c:	f001 f920 	bl	8001a50 <HAL_GPIO_WritePin>
    if (spi_status != HAL_OK) {
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d006      	beq.n	8000824 <nrf_read_status_register+0x4c>
        printf("SPI Error reading STATUS register: %d\n", (int)spi_status);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	@ (8000838 <nrf_read_status_register+0x60>)
 800081c:	f003 fbcc 	bl	8003fb8 <iprintf>
        return 0xFF; // Error
 8000820:	23ff      	movs	r3, #255	@ 0xff
 8000822:	e000      	b.n	8000826 <nrf_read_status_register+0x4e>
    }
    return status_val;
 8000824:	79bb      	ldrb	r3, [r7, #6]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40020000 	.word	0x40020000
 8000834:	200000d8 	.word	0x200000d8
 8000838:	08004e1c 	.word	0x08004e1c

0800083c <nrf_clear_status_flags>:

/*
 * @brief Clears specified IRQ flags in the STATUS register.
 * @param flags_to_clear: Bitmask of flags (NRF_STATUS_RX_DR, NRF_STATUS_TX_DS, NRF_STATUS_MAX_RT).
 */
void nrf_clear_status_flags(uint8_t flags_to_clear) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
    // To clear a flag, write '1' to its bit position in the STATUS register
    nrf_write_register(NRF_REG_STATUS, &flags_to_clear, 1);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	2007      	movs	r0, #7
 800084e:	f7ff febf 	bl	80005d0 <nrf_write_register>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <nrf_read_rx_payload_width>:

/*
 * @brief Reads the RX payload width from the NRF24L01+ using R_RX_PL_WID command.
 * @retval Payload width (1-32). Returns 0 if FIFO is empty or error, or width > 32.
 */
uint8_t nrf_read_rx_payload_width(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af02      	add	r7, sp, #8
    uint8_t cmd = NRF_CMD_R_RX_PL_WID;
 8000862:	2360      	movs	r3, #96	@ 0x60
 8000864:	71bb      	strb	r3, [r7, #6]
    uint8_t width;
    uint8_t status_at_cmd_time; // Status byte returned when sending the command
    HAL_StatusTypeDef spi_status;

    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800086c:	481b      	ldr	r0, [pc, #108]	@ (80008dc <nrf_read_rx_payload_width+0x80>)
 800086e:	f001 f8ef 	bl	8001a50 <HAL_GPIO_WritePin>
    // Send command, get status
    spi_status = HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_at_cmd_time, 1, HAL_MAX_DELAY);
 8000872:	1d3a      	adds	r2, r7, #4
 8000874:	1db9      	adds	r1, r7, #6
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	4818      	ldr	r0, [pc, #96]	@ (80008e0 <nrf_read_rx_payload_width+0x84>)
 8000880:	f002 fb98 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 8000884:	4603      	mov	r3, r0
 8000886:	71fb      	strb	r3, [r7, #7]
    if (spi_status == HAL_OK) {
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d10c      	bne.n	80008a8 <nrf_read_rx_payload_width+0x4c>
        // Get width (send NOP to clock it out, or just receive if SPI driver supports it)
        // Using a NOP to clock out the width byte is a common practice.
        uint8_t nop = NRF_CMD_NOP;
 800088e:	23ff      	movs	r3, #255	@ 0xff
 8000890:	70fb      	strb	r3, [r7, #3]
        spi_status = HAL_SPI_TransmitReceive(&hspi2, &nop, &width, 1, HAL_MAX_DELAY);
 8000892:	1d7a      	adds	r2, r7, #5
 8000894:	1cf9      	adds	r1, r7, #3
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <nrf_read_rx_payload_width+0x84>)
 80008a0:	f002 fb88 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
    }
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ae:	480b      	ldr	r0, [pc, #44]	@ (80008dc <nrf_read_rx_payload_width+0x80>)
 80008b0:	f001 f8ce 	bl	8001a50 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d006      	beq.n	80008c8 <nrf_read_rx_payload_width+0x6c>
        printf("SPI Error in nrf_read_rx_payload_width: %d\n", (int)spi_status);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4619      	mov	r1, r3
 80008be:	4809      	ldr	r0, [pc, #36]	@ (80008e4 <nrf_read_rx_payload_width+0x88>)
 80008c0:	f003 fb7a 	bl	8003fb8 <iprintf>
        return 0; // Error
 80008c4:	2300      	movs	r3, #0
 80008c6:	e005      	b.n	80008d4 <nrf_read_rx_payload_width+0x78>
    }

    // If width > 32, it indicates an error or empty FIFO.
    // The NRF24L01+ datasheet states: "A payload width value > 32 is an error and should be discarded."
    if (width > 32) {
 80008c8:	797b      	ldrb	r3, [r7, #5]
 80008ca:	2b20      	cmp	r3, #32
 80008cc:	d901      	bls.n	80008d2 <nrf_read_rx_payload_width+0x76>
        // This often means the RX FIFO is empty.
        // printf("NRF_Read_RX_PL_WID: Width > 32 (0x%02X), likely empty FIFO. Status was 0x%02X\n", width, status_at_cmd_time);
        return 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e000      	b.n	80008d4 <nrf_read_rx_payload_width+0x78>
    }
    return width;
 80008d2:	797b      	ldrb	r3, [r7, #5]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40020000 	.word	0x40020000
 80008e0:	200000d8 	.word	0x200000d8
 80008e4:	08004e44 	.word	0x08004e44

080008e8 <nrf_read_rx_payload>:
 * @brief Reads the received payload from the RX FIFO.
 * @param payload_buffer: Buffer to store the payload.
 * @param width: The width of the payload to read (obtained from nrf_read_rx_payload_width).
 * @retval HAL_StatusTypeDef from SPI transaction.
 */
HAL_StatusTypeDef nrf_read_rx_payload(uint8_t* payload_buffer, uint8_t width) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd = NRF_CMD_R_RX_PAYLOAD;
 80008f4:	2361      	movs	r3, #97	@ 0x61
 80008f6:	73bb      	strb	r3, [r7, #14]
    uint8_t status_at_cmd_time; // Status byte returned when sending the command
    HAL_StatusTypeDef spi_status;

    if (width == 0 || width > 32) {
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <nrf_read_rx_payload+0x1c>
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2b20      	cmp	r3, #32
 8000902:	d906      	bls.n	8000912 <nrf_read_rx_payload+0x2a>
        printf("NRF_Read_RX_Payload: Invalid width %d\n", width);
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	4619      	mov	r1, r3
 8000908:	481b      	ldr	r0, [pc, #108]	@ (8000978 <nrf_read_rx_payload+0x90>)
 800090a:	f003 fb55 	bl	8003fb8 <iprintf>
        return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e02e      	b.n	8000970 <nrf_read_rx_payload+0x88>
    }

    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000918:	4818      	ldr	r0, [pc, #96]	@ (800097c <nrf_read_rx_payload+0x94>)
 800091a:	f001 f899 	bl	8001a50 <HAL_GPIO_WritePin>
    // Send command, get status
    spi_status = HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_at_cmd_time, 1, HAL_MAX_DELAY);
 800091e:	f107 020d 	add.w	r2, r7, #13
 8000922:	f107 010e 	add.w	r1, r7, #14
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2301      	movs	r3, #1
 800092e:	4814      	ldr	r0, [pc, #80]	@ (8000980 <nrf_read_rx_payload+0x98>)
 8000930:	f002 fb40 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]
    if (spi_status == HAL_OK) {
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d109      	bne.n	8000952 <nrf_read_rx_payload+0x6a>
        // Get payload
        // Send dummy bytes if using HAL_SPI_TransmitReceive, or just receive.
        spi_status = HAL_SPI_Receive(&hspi2, payload_buffer, width, HAL_MAX_DELAY);
 800093e:	78fb      	ldrb	r3, [r7, #3]
 8000940:	b29a      	uxth	r2, r3
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	480d      	ldr	r0, [pc, #52]	@ (8000980 <nrf_read_rx_payload+0x98>)
 800094a:	f002 fa1a 	bl	8002d82 <HAL_SPI_Receive>
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
    }
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000958:	4808      	ldr	r0, [pc, #32]	@ (800097c <nrf_read_rx_payload+0x94>)
 800095a:	f001 f879 	bl	8001a50 <HAL_GPIO_WritePin>

    // printf("NRF_Read_RX_Payload: Status during R_RX_PAYLOAD cmd: 0x%02X\n", status_at_cmd_time);
    if (spi_status != HAL_OK) {
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d004      	beq.n	800096e <nrf_read_rx_payload+0x86>
        printf("SPI Error in nrf_read_rx_payload: %d\n", (int)spi_status);
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	4619      	mov	r1, r3
 8000968:	4806      	ldr	r0, [pc, #24]	@ (8000984 <nrf_read_rx_payload+0x9c>)
 800096a:	f003 fb25 	bl	8003fb8 <iprintf>
    }
    // After reading the payload, the RX_DR bit in STATUS is cleared if DYNPD is disabled and payload width matches RX_PW_Px.
    // If DYNPD is enabled, RX_DR must be cleared manually.
    return spi_status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08004e70 	.word	0x08004e70
 800097c:	40020000 	.word	0x40020000
 8000980:	200000d8 	.word	0x200000d8
 8000984:	08004e98 	.word	0x08004e98

08000988 <nrf_flush_tx_fifo>:

/*
 * @brief Flushes the TX FIFO.
 */
void nrf_flush_tx_fifo(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af02      	add	r7, sp, #8
    uint8_t cmd = NRF_CMD_FLUSH_TX;
 800098e:	23e1      	movs	r3, #225	@ 0xe1
 8000990:	71fb      	strb	r3, [r7, #7]
    uint8_t status_byte;
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000998:	480a      	ldr	r0, [pc, #40]	@ (80009c4 <nrf_flush_tx_fifo+0x3c>)
 800099a:	f001 f859 	bl	8001a50 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_byte, 1, HAL_MAX_DELAY);
 800099e:	1dba      	adds	r2, r7, #6
 80009a0:	1df9      	adds	r1, r7, #7
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <nrf_flush_tx_fifo+0x40>)
 80009ac:	f002 fb02 	bl	8002fb4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009b6:	4803      	ldr	r0, [pc, #12]	@ (80009c4 <nrf_flush_tx_fifo+0x3c>)
 80009b8:	f001 f84a 	bl	8001a50 <HAL_GPIO_WritePin>
    // printf("NRF_Flush_TX: Status during flush: 0x%02X\n", status_byte);
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40020000 	.word	0x40020000
 80009c8:	200000d8 	.word	0x200000d8

080009cc <nrf_flush_rx_fifo>:

/*
 * @brief Flushes the RX FIFO.
 */
void nrf_flush_rx_fifo(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af02      	add	r7, sp, #8
    uint8_t cmd = NRF_CMD_FLUSH_RX;
 80009d2:	23e2      	movs	r3, #226	@ 0xe2
 80009d4:	71fb      	strb	r3, [r7, #7]
    uint8_t status_byte;
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	480a      	ldr	r0, [pc, #40]	@ (8000a08 <nrf_flush_rx_fifo+0x3c>)
 80009de:	f001 f837 	bl	8001a50 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_byte, 1, HAL_MAX_DELAY);
 80009e2:	1dba      	adds	r2, r7, #6
 80009e4:	1df9      	adds	r1, r7, #7
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <nrf_flush_rx_fifo+0x40>)
 80009f0:	f002 fae0 	bl	8002fb4 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009fa:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <nrf_flush_rx_fifo+0x3c>)
 80009fc:	f001 f828 	bl	8001a50 <HAL_GPIO_WritePin>
    // printf("NRF_Flush_RX: Status during flush: 0x%02X\n", status_byte);
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	200000d8 	.word	0x200000d8

08000a10 <init_nrf_master>:
    // Or, you can poll the STATUS register.
    // It's good practice to wait for TX_DS or MAX_RT, or implement a timeout.
}

// --- Master (Receiver) Functions ---
void init_nrf_master(void) {
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b089      	sub	sp, #36	@ 0x24
 8000a14:	af02      	add	r7, sp, #8
    uint8_t data_val[5];
    uint8_t addr[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7}; // Must match slave's TX_ADDR and RX_ADDR_P0 for ACKs
 8000a16:	4a5e      	ldr	r2, [pc, #376]	@ (8000b90 <init_nrf_master+0x180>)
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a20:	6018      	str	r0, [r3, #0]
 8000a22:	3304      	adds	r3, #4
 8000a24:	7019      	strb	r1, [r3, #0]

    HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET); // Start with CE low
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a2c:	4859      	ldr	r0, [pc, #356]	@ (8000b94 <init_nrf_master+0x184>)
 8000a2e:	f001 f80f 	bl	8001a50 <HAL_GPIO_WritePin>
    HAL_Delay(100); // Allow NRF to settle
 8000a32:	2064      	movs	r0, #100	@ 0x64
 8000a34:	f000 fd7e 	bl	8001534 <HAL_Delay>

    printf("--- Initializing NRF Master (PRX) ---\n");
 8000a38:	4857      	ldr	r0, [pc, #348]	@ (8000b98 <init_nrf_master+0x188>)
 8000a3a:	f003 fb25 	bl	8004088 <puts>

    // CONFIG: Power Up, 2-byte CRC, PRX mode. Unmask RX_DR IRQ, mask TX_DS and MAX_RT.
    data_val[0] = NRF_CONFIG_PWR_UP | NRF_CONFIG_EN_CRC | NRF_CONFIG_CRCO | NRF_CONFIG_PRIM_RX |
 8000a3e:	233f      	movs	r3, #63	@ 0x3f
 8000a40:	743b      	strb	r3, [r7, #16]
                  NRF_CONFIG_MASK_TX_DS | NRF_CONFIG_MASK_MAX_RT;
    // Your original 0x0F is (PWR_UP | EN_CRC | CRCO | PRIM_RX). This is correct for PRX.
    // The masking part is important for IRQ behavior.
    nrf_write_register(NRF_REG_CONFIG, data_val, 1);
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2201      	movs	r2, #1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff fdc0 	bl	80005d0 <nrf_write_register>
    HAL_Delay(2); // Allow time for state change
 8000a50:	2002      	movs	r0, #2
 8000a52:	f000 fd6f 	bl	8001534 <HAL_Delay>

    // Enable Auto-Acknowledgement on Pipe 0 (master will send ACKs automatically)
    data_val[0] = 0x00; nrf_write_register(NRF_REG_EN_AA, data_val, 1);
 8000a56:	2300      	movs	r3, #0
 8000a58:	743b      	strb	r3, [r7, #16]
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4619      	mov	r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fdb4 	bl	80005d0 <nrf_write_register>

    // Enable RX Pipe 0
    data_val[0] = 0x01; nrf_write_register(NRF_REG_EN_RXADDR, data_val, 1);
 8000a68:	2301      	movs	r3, #1
 8000a6a:	743b      	strb	r3, [r7, #16]
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2201      	movs	r2, #1
 8000a72:	4619      	mov	r1, r3
 8000a74:	2002      	movs	r0, #2
 8000a76:	f7ff fdab 	bl	80005d0 <nrf_write_register>

    // Address Width: 5 bytes
    data_val[0] = 0x03; nrf_write_register(NRF_REG_SETUP_AW, data_val, 1);
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	743b      	strb	r3, [r7, #16]
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	2201      	movs	r2, #1
 8000a84:	4619      	mov	r1, r3
 8000a86:	2003      	movs	r0, #3
 8000a88:	f7ff fda2 	bl	80005d0 <nrf_write_register>

    // RF Channel: (Must match slave)
    data_val[0] = 0x01; nrf_write_register(NRF_REG_RF_CH, data_val, 1);
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	743b      	strb	r3, [r7, #16]
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2201      	movs	r2, #1
 8000a96:	4619      	mov	r1, r3
 8000a98:	2005      	movs	r0, #5
 8000a9a:	f7ff fd99 	bl	80005d0 <nrf_write_register>

    // RF Setup: Data Rate 1Mbps, Output Power 0dBm (Must match slave)
    data_val[0] = 0x07; nrf_write_register(NRF_REG_RF_SETUP, data_val, 1);
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	743b      	strb	r3, [r7, #16]
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2006      	movs	r0, #6
 8000aac:	f7ff fd90 	bl	80005d0 <nrf_write_register>

    // RX Address for Pipe 0 (master listens on this address)
    nrf_write_register(NRF_REG_RX_ADDR_P0, addr, 5);
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2205      	movs	r2, #5
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	200a      	movs	r0, #10
 8000aba:	f7ff fd89 	bl	80005d0 <nrf_write_register>
    // If master also needs to transmit data (not just ACKs), set TX_ADDR.
    // For basic ACK, P0 address is used automatically by NRF.
    // nrf_write_register(NRF_REG_TX_ADDR, master_tx_addr_if_needed, 5);

    // Enable Dynamic Payload Length for Pipe 0 and globally enable DPL feature.
    data_val[0] = 0x01; nrf_write_register(NRF_REG_DYNPD, data_val, 1);
 8000abe:	2301      	movs	r3, #1
 8000ac0:	743b      	strb	r3, [r7, #16]
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	201c      	movs	r0, #28
 8000acc:	f7ff fd80 	bl	80005d0 <nrf_write_register>
    data_val[0] = (1<<2); // FEATURE: EN_DPL bit
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	743b      	strb	r3, [r7, #16]
    nrf_write_register(NRF_REG_FEATURE, data_val, 1);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	201d      	movs	r0, #29
 8000ade:	f7ff fd77 	bl	80005d0 <nrf_write_register>
    // This is often set even if DPL is used, but DPL overrides it.
    // data_val[0] = 32; // Max payload size, or your expected fixed size
    // nrf_write_register(NRF_REG_RX_PW_P0, data_val, 1);

    // Clear any pending IRQ flags
    nrf_clear_status_flags(NRF_STATUS_RX_DR | NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT);
 8000ae2:	2070      	movs	r0, #112	@ 0x70
 8000ae4:	f7ff feaa 	bl	800083c <nrf_clear_status_flags>
    nrf_flush_tx_fifo();
 8000ae8:	f7ff ff4e 	bl	8000988 <nrf_flush_tx_fifo>
    nrf_flush_rx_fifo();
 8000aec:	f7ff ff6e 	bl	80009cc <nrf_flush_rx_fifo>

    HAL_Delay(5); // Allow settings to take effect
 8000af0:	2005      	movs	r0, #5
 8000af2:	f000 fd1f 	bl	8001534 <HAL_Delay>

    // --- Verification Prints ---
    printf("Master CONFIG: 0x%02X (Expected PRX: PWR_UP, CRC_EN, CRC_2B, PRIM_RX, MASK_TX_DS, MASK_MAX_RT)\n", nrf_read_single_register(NRF_REG_CONFIG));
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fe50 	bl	800079c <nrf_read_single_register>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4619      	mov	r1, r3
 8000b00:	4826      	ldr	r0, [pc, #152]	@ (8000b9c <init_nrf_master+0x18c>)
 8000b02:	f003 fa59 	bl	8003fb8 <iprintf>
    printf("Master RF_SETUP: 0x%02X (Expected 1Mbps, 0dBm: 0x07)\n", nrf_read_single_register(NRF_REG_RF_SETUP));
 8000b06:	2006      	movs	r0, #6
 8000b08:	f7ff fe48 	bl	800079c <nrf_read_single_register>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4823      	ldr	r0, [pc, #140]	@ (8000ba0 <init_nrf_master+0x190>)
 8000b12:	f003 fa51 	bl	8003fb8 <iprintf>
    printf("Master RF_CH: 0x%02X (Expected 0x3C)\n", nrf_read_single_register(NRF_REG_RF_CH));
 8000b16:	2005      	movs	r0, #5
 8000b18:	f7ff fe40 	bl	800079c <nrf_read_single_register>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4820      	ldr	r0, [pc, #128]	@ (8000ba4 <init_nrf_master+0x194>)
 8000b22:	f003 fa49 	bl	8003fb8 <iprintf>
    uint8_t rx_p0_addr_check[5];
    nrf_read_register_multi(NRF_REG_RX_ADDR_P0, rx_p0_addr_check, 5);
 8000b26:	463b      	mov	r3, r7
 8000b28:	2205      	movs	r2, #5
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f7ff fded 	bl	800070c <nrf_read_register_multi>
    printf("Master RX_ADDR_P0: %02X:%02X:%02X:%02X:%02X\n", rx_p0_addr_check[0],rx_p0_addr_check[1],rx_p0_addr_check[2],rx_p0_addr_check[3],rx_p0_addr_check[4]);
 8000b32:	783b      	ldrb	r3, [r7, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	787b      	ldrb	r3, [r7, #1]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	78bb      	ldrb	r3, [r7, #2]
 8000b3c:	461c      	mov	r4, r3
 8000b3e:	78fb      	ldrb	r3, [r7, #3]
 8000b40:	793a      	ldrb	r2, [r7, #4]
 8000b42:	9201      	str	r2, [sp, #4]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	4623      	mov	r3, r4
 8000b48:	4602      	mov	r2, r0
 8000b4a:	4817      	ldr	r0, [pc, #92]	@ (8000ba8 <init_nrf_master+0x198>)
 8000b4c:	f003 fa34 	bl	8003fb8 <iprintf>
    printf("Master STATUS: 0x%02X\n", nrf_read_status_register());
 8000b50:	f7ff fe42 	bl	80007d8 <nrf_read_status_register>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4619      	mov	r1, r3
 8000b58:	4814      	ldr	r0, [pc, #80]	@ (8000bac <init_nrf_master+0x19c>)
 8000b5a:	f003 fa2d 	bl	8003fb8 <iprintf>
    printf("Master FIFO_STATUS: 0x%02X\n", nrf_read_single_register(NRF_REG_FIFO_STATUS));
 8000b5e:	2017      	movs	r0, #23
 8000b60:	f7ff fe1c 	bl	800079c <nrf_read_single_register>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4619      	mov	r1, r3
 8000b68:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <init_nrf_master+0x1a0>)
 8000b6a:	f003 fa25 	bl	8003fb8 <iprintf>
    printf("--- NRF Master Initialized ---\n");
 8000b6e:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <init_nrf_master+0x1a4>)
 8000b70:	f003 fa8a 	bl	8004088 <puts>

    // IMPORTANT: After initialization, put master in RX mode by setting CE HIGH
    HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <init_nrf_master+0x184>)
 8000b7c:	f000 ff68 	bl	8001a50 <HAL_GPIO_WritePin>
    printf("Master CE is HIGH, listening for packets.\n");
 8000b80:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <init_nrf_master+0x1a8>)
 8000b82:	f003 fa81 	bl	8004088 <puts>
}
 8000b86:	bf00      	nop
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	08005040 	.word	0x08005040
 8000b94:	40020400 	.word	0x40020400
 8000b98:	08005070 	.word	0x08005070
 8000b9c:	08005098 	.word	0x08005098
 8000ba0:	080050f8 	.word	0x080050f8
 8000ba4:	08005130 	.word	0x08005130
 8000ba8:	08005158 	.word	0x08005158
 8000bac:	08005188 	.word	0x08005188
 8000bb0:	080051a0 	.word	0x080051a0
 8000bb4:	080051bc 	.word	0x080051bc
 8000bb8:	080051dc 	.word	0x080051dc

08000bbc <main>:
=======
080005f0 <main>:
>>>>>>> 0207771 (switch changed to function array)
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b0ad      	sub	sp, #180	@ 0xb4
 8000bc0:	af12      	add	r7, sp, #72	@ 0x48
=======
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b0a5      	sub	sp, #148	@ 0x94
 80005f4:	af12      	add	r7, sp, #72	@ 0x48
>>>>>>> 0207771 (switch changed to function array)
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
<<<<<<< HEAD
 8000bc2:	f000 fc45 	bl	8001450 <HAL_Init>
=======
 80005f6:	f000 fbe9 	bl	8000dcc <HAL_Init>
>>>>>>> 0207771 (switch changed to function array)
=======
 80005f6:	f000 fbed 	bl	8000dd4 <HAL_Init>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
<<<<<<< HEAD
 8000bc6:	f000 f8b3 	bl	8000d30 <SystemClock_Config>
=======
 80005fa:	f000 f857 	bl	80006ac <SystemClock_Config>
>>>>>>> 0207771 (switch changed to function array)
=======
 80005fa:	f000 f85b 	bl	80006b4 <SystemClock_Config>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
<<<<<<< HEAD
 8000bca:	f000 f9a9 	bl	8000f20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bce:	f000 f919 	bl	8000e04 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000bd2:	f000 f945 	bl	8000e60 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000bd6:	f000 f979 	bl	8000ecc <MX_USART1_UART_Init>
=======
 80005fe:	f000 f94d 	bl	800089c <MX_GPIO_Init>
=======
 80005fe:	f000 f951 	bl	80008a4 <MX_GPIO_Init>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  MX_I2C1_Init();
 8000602:	f000 f8c1 	bl	8000788 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000606:	f000 f8ed 	bl	80007e4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
<<<<<<< HEAD
 800060a:	f000 f91d 	bl	8000848 <MX_USART1_UART_Init>
>>>>>>> 0207771 (switch changed to function array)
=======
 800060a:	f000 f921 	bl	8000850 <MX_USART1_UART_Init>
>>>>>>> c1d5507 (packet_list and sim800L alert)
//  flash_write_multiple_word(0x08060000, (uint32_t *)data_in, 16);

  //READOUT
  {
	char data_out[64];
	flash_read_multiple_words(0x08060000, (uint32_t *)data_out, 16);
<<<<<<< HEAD
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2210      	movs	r2, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	4848      	ldr	r0, [pc, #288]	@ (8000d04 <main+0x148>)
 8000be2:	f002 ff97 	bl	8003b14 <flash_read_multiple_words>
	//PARSING TO VARIABLES
	state_machine_init(data_out);
 8000be6:	463b      	mov	r3, r7
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 f843 	bl	8003c74 <state_machine_init>
  }
  lcd_init(hi2c1);
 8000bee:	4c46      	ldr	r4, [pc, #280]	@ (8000d08 <main+0x14c>)
 8000bf0:	4668      	mov	r0, sp
 8000bf2:	f104 0310 	add.w	r3, r4, #16
 8000bf6:	2244      	movs	r2, #68	@ 0x44
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f003 fba0 	bl	800433e <memcpy>
 8000bfe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c02:	f002 ffd9 	bl	8003bb8 <lcd_init>
  char x;
  init_nrf_master(); // CE will be set high at the end of this function
 8000c06:	f7ff ff03 	bl	8000a10 <init_nrf_master>

  // OPTION 1: POLLING METHOD (Recommended for initial debugging)
  printf("Master: Starting in POLLING mode.\n");
 8000c0a:	4840      	ldr	r0, [pc, #256]	@ (8000d0c <main+0x150>)
 8000c0c:	f003 fa3c 	bl	8004088 <puts>
      // Check IRQ Pin (Active LOW) - This simulates an EXTI interrupt check
      // if (HAL_GPIO_ReadPin(SPI_IRQ_GPIO_Port, SPI_IRQ_Pin) == GPIO_PIN_RESET) {
      //    printf("Master: IRQ Pin is LOW!\n");
      // }
	  static uint32_t last_master_print = 0;
	  if (HAL_GetTick() - last_master_print > 250) { // Print every 250ms
 8000c10:	f000 fc84 	bl	800151c <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b3e      	ldr	r3, [pc, #248]	@ (8000d10 <main+0x154>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c1e:	d917      	bls.n	8000c50 <main+0x94>
	      last_master_print = HAL_GetTick();
 8000c20:	f000 fc7c 	bl	800151c <HAL_GetTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4a3a      	ldr	r2, [pc, #232]	@ (8000d10 <main+0x154>)
 8000c28:	6013      	str	r3, [r2, #0]
	      uint8_t mst_status = nrf_read_status_register();
 8000c2a:	f7ff fdd5 	bl	80007d8 <nrf_read_status_register>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	      uint8_t mst_fifo = nrf_read_single_register(NRF_REG_FIFO_STATUS);
 8000c34:	2017      	movs	r0, #23
 8000c36:	f7ff fdb1 	bl	800079c <nrf_read_single_register>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	      printf("Master Poll: STATUS=0x%02X, FIFO=0x%02X\n", mst_status, mst_fifo);
 8000c40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000c44:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4832      	ldr	r0, [pc, #200]	@ (8000d14 <main+0x158>)
 8000c4c:	f003 f9b4 	bl	8003fb8 <iprintf>
	  }

      uint8_t status = nrf_read_status_register();
 8000c50:	f7ff fdc2 	bl	80007d8 <nrf_read_status_register>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      if (status & NRF_STATUS_RX_DR) { // Check RX_DR flag in STATUS register
 8000c5a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d049      	beq.n	8000cfa <main+0x13e>
          printf("Master: RX_DR detected! STATUS: 0x%02X\n", status);
 8000c66:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	482a      	ldr	r0, [pc, #168]	@ (8000d18 <main+0x15c>)
 8000c6e:	f003 f9a3 	bl	8003fb8 <iprintf>

          // Optional: Temporarily lower CE while processing. Not strictly necessary for simple RX.
          // HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);

          payload_width = nrf_read_rx_payload_width();
 8000c72:	f7ff fdf3 	bl	800085c <nrf_read_rx_payload_width>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
          if (payload_width > 0 && payload_width <= 32) {
 8000c7c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d022      	beq.n	8000cca <main+0x10e>
 8000c84:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d81e      	bhi.n	8000cca <main+0x10e>
              if (nrf_read_rx_payload(received_payload, payload_width) == HAL_OK) {
 8000c8c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8000c90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe26 	bl	80008e8 <nrf_read_rx_payload>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10f      	bne.n	8000cc2 <main+0x106>
                  received_payload[payload_width] = '\0'; // Null-terminate for printf
 8000ca2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000ca6:	3368      	adds	r3, #104	@ 0x68
 8000ca8:	443b      	add	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	f803 2c28 	strb.w	r2, [r3, #-40]
                  printf("Master: Payload Received (width %d): \"%s\"\n", payload_width, (char*)received_payload);
 8000cb0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000cb4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <main+0x160>)
 8000cbc:	f003 f97c 	bl	8003fb8 <iprintf>
              if (nrf_read_rx_payload(received_payload, payload_width) == HAL_OK) {
 8000cc0:	e015      	b.n	8000cee <main+0x132>
              } else {
                  printf("Master: Error reading payload after width indicated data.\n");
 8000cc2:	4817      	ldr	r0, [pc, #92]	@ (8000d20 <main+0x164>)
 8000cc4:	f003 f9e0 	bl	8004088 <puts>
              if (nrf_read_rx_payload(received_payload, payload_width) == HAL_OK) {
 8000cc8:	e011      	b.n	8000cee <main+0x132>
              }
          } else if (payload_width == 0) {
 8000cca:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d105      	bne.n	8000cde <main+0x122>
               // This can happen if R_RX_PL_WID is called when FIFO is empty, even if RX_DR was set.
               // Or if there was an error reading width.
               printf("Master: RX_DR set, but payload width is 0. Flushing RX FIFO.\n");
 8000cd2:	4814      	ldr	r0, [pc, #80]	@ (8000d24 <main+0x168>)
 8000cd4:	f003 f9d8 	bl	8004088 <puts>
               nrf_flush_rx_fifo(); // Good practice to flush if width is unexpected
 8000cd8:	f7ff fe78 	bl	80009cc <nrf_flush_rx_fifo>
 8000cdc:	e007      	b.n	8000cee <main+0x132>
          } else { // payload_width > 32 (error)
               printf("Master: RX_DR set, but payload width invalid (%d). Flushing RX FIFO.\n", payload_width);
 8000cde:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <main+0x16c>)
 8000ce6:	f003 f967 	bl	8003fb8 <iprintf>
               nrf_flush_rx_fifo();
 8000cea:	f7ff fe6f 	bl	80009cc <nrf_flush_rx_fifo>
          }

          // CRITICAL: Clear the RX_DR flag in the STATUS register.
          // Otherwise, IRQ pin might stay asserted (if using actual IRQ) or this flag will persist.
          nrf_clear_status_flags(NRF_STATUS_RX_DR);
 8000cee:	2040      	movs	r0, #64	@ 0x40
 8000cf0:	f7ff fda4 	bl	800083c <nrf_clear_status_flags>

          // Optional: Ensure CE is high again if it was lowered.
          // HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_SET);
          printf("Master: RX_DR cleared. Listening...\n");
 8000cf4:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <main+0x170>)
 8000cf6:	f003 f9c7 	bl	8004088 <puts>
      //    else if(x == 11) x = '0';
      //    else if(x == 12) x = '#';
      // }
      // state_machine_run(x);

      HAL_Delay(100); // Polling interval for STATUS register. Adjust as needed.
 8000cfa:	2064      	movs	r0, #100	@ 0x64
 8000cfc:	f000 fc1a 	bl	8001534 <HAL_Delay>
  {
 8000d00:	e786      	b.n	8000c10 <main+0x54>
 8000d02:	bf00      	nop
 8000d04:	08060000 	.word	0x08060000
 8000d08:	20000084 	.word	0x20000084
 8000d0c:	08005208 	.word	0x08005208
 8000d10:	20000178 	.word	0x20000178
 8000d14:	0800522c 	.word	0x0800522c
 8000d18:	08005258 	.word	0x08005258
 8000d1c:	08005280 	.word	0x08005280
 8000d20:	080052ac 	.word	0x080052ac
 8000d24:	080052e8 	.word	0x080052e8
 8000d28:	08005328 	.word	0x08005328
 8000d2c:	08005370 	.word	0x08005370

08000d30 <SystemClock_Config>:
=======
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2210      	movs	r2, #16
 8000612:	4619      	mov	r1, r3
 8000614:	4823      	ldr	r0, [pc, #140]	@ (80006a4 <main+0xb4>)
 8000616:	f002 fd4b 	bl	80030b0 <flash_read_multiple_words>
	//PARSING TO VARIABLES
	state_machine_init(data_out, &huart1);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4922      	ldr	r1, [pc, #136]	@ (80006a8 <main+0xb8>)
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f806 	bl	8003630 <state_machine_init>
  }
  lcd_init(hi2c1);
 8000624:	4c21      	ldr	r4, [pc, #132]	@ (80006ac <main+0xbc>)
 8000626:	4668      	mov	r0, sp
 8000628:	f104 0310 	add.w	r3, r4, #16
 800062c:	2244      	movs	r2, #68	@ 0x44
 800062e:	4619      	mov	r1, r3
 8000630:	f004 f8e5 	bl	80047fe <memcpy>
 8000634:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000638:	f002 fed8 	bl	80033ec <lcd_init>
  char x;
  printf("Hello\n");
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <main+0xc0>)
 800063e:	f003 ff4f 	bl	80044e0 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  x = check_keyboard();
 8000642:	f002 fdfb 	bl	800323c <check_keyboard>
 8000646:	4603      	mov	r3, r0
 8000648:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  if(x){
 800064c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000650:	2b00      	cmp	r3, #0
 8000652:	d020      	beq.n	8000696 <main+0xa6>
		  if(x < 10) x += '0';
 8000654:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000658:	2b09      	cmp	r3, #9
 800065a:	d805      	bhi.n	8000668 <main+0x78>
 800065c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000660:	3330      	adds	r3, #48	@ 0x30
 8000662:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000666:	e016      	b.n	8000696 <main+0xa6>
		  else if(x == 10) x = '*';
 8000668:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800066c:	2b0a      	cmp	r3, #10
 800066e:	d103      	bne.n	8000678 <main+0x88>
 8000670:	232a      	movs	r3, #42	@ 0x2a
 8000672:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000676:	e00e      	b.n	8000696 <main+0xa6>
		  else if(x == 11) x = '0';
 8000678:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800067c:	2b0b      	cmp	r3, #11
 800067e:	d103      	bne.n	8000688 <main+0x98>
 8000680:	2330      	movs	r3, #48	@ 0x30
 8000682:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000686:	e006      	b.n	8000696 <main+0xa6>
		  else if(x == 12) x = '#';
 8000688:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068c:	2b0c      	cmp	r3, #12
 800068e:	d102      	bne.n	8000696 <main+0xa6>
 8000690:	2323      	movs	r3, #35	@ 0x23
 8000692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  }
	  state_machine_run(x);
 8000696:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800069a:	4618      	mov	r0, r3
 800069c:	f003 f82a 	bl	80036f4 <state_machine_run>
	  x = check_keyboard();
 80006a0:	e7cf      	b.n	8000642 <main+0x52>
 80006a2:	bf00      	nop
 80006a4:	08060000 	.word	0x08060000
 80006a8:	20000160 	.word	0x20000160
 80006ac:	200000b4 	.word	0x200000b4
 80006b0:	08005310 	.word	0x08005310

<<<<<<< HEAD
080006ac <SystemClock_Config>:
>>>>>>> 0207771 (switch changed to function array)
=======
080006b4 <SystemClock_Config>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	@ 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2230      	movs	r2, #48	@ 0x30
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fa82 	bl	8004248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
=======
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
=======
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 f820 	bl	8004708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
<<<<<<< HEAD
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
>>>>>>> 0207771 (switch changed to function array)
=======
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <SystemClock_Config+0xcc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	4a27      	ldr	r2, [pc, #156]	@ (8000dfc <SystemClock_Config+0xcc>)
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <SystemClock_Config+0xcc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4b22      	ldr	r3, [pc, #136]	@ (8000e00 <SystemClock_Config+0xd0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a21      	ldr	r2, [pc, #132]	@ (8000e00 <SystemClock_Config+0xd0>)
 8000d7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <SystemClock_Config+0xd0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]
=======
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
<<<<<<< HEAD
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	2302      	movs	r3, #2
 8000d98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000da0:	2310      	movs	r3, #16
 8000da2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 8000da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000daa:	2304      	movs	r3, #4
 8000dac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dae:	2304      	movs	r3, #4
 8000db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 fb02 	bl	80023c0 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dc2:	f000 f94d 	bl	8001060 <Error_Handler>
=======
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
=======
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 8000728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fb1a 	bl	8001d74 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x96>
  {
    Error_Handler();
<<<<<<< HEAD
 800073e:	f000 f94d 	bl	80009dc <Error_Handler>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000746:	f000 f94d 	bl	80009e4 <Error_Handler>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
<<<<<<< HEAD
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2103      	movs	r1, #3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fd64 	bl	80028b0 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dee:	f000 f937 	bl	8001060 <Error_Handler>
  }
}
 8000df2:	bf00      	nop
 8000df4:	3750      	adds	r7, #80	@ 0x50
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40007000 	.word	0x40007000

08000e04 <MX_I2C1_Init>:
=======
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
=======
 800074a:	230f      	movs	r3, #15
 800074c:	60fb      	str	r3, [r7, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2103      	movs	r1, #3
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fd7c 	bl	8002264 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000772:	f000 f937 	bl	80009e4 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

<<<<<<< HEAD
08000780 <MX_I2C1_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000788 <MX_I2C1_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
=======
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
<<<<<<< HEAD
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	@ (8000e58 <MX_I2C1_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <MX_I2C1_Init+0x58>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <MX_I2C1_Init+0x50>)
 8000e42:	f000 fe1f 	bl	8001a84 <HAL_I2C_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 f908 	bl	8001060 <Error_Handler>
=======
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
=======
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_I2C1_Init+0x50>)
 800078e:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <MX_I2C1_Init+0x54>)
 8000790:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  hi2c1.Init.ClockSpeed = 100000;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_I2C1_Init+0x50>)
 8000794:	4a12      	ldr	r2, [pc, #72]	@ (80007e0 <MX_I2C1_Init+0x58>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_I2C1_Init+0x50>)
 80007c6:	f000 fe37 	bl	8001438 <HAL_I2C_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
<<<<<<< HEAD
 80007c8:	f000 f908 	bl	80009dc <Error_Handler>
>>>>>>> 0207771 (switch changed to function array)
=======
 80007d0:	f000 f908 	bl	80009e4 <Error_Handler>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
<<<<<<< HEAD
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000084 	.word	0x20000084
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	000186a0 	.word	0x000186a0

08000e60 <MX_SPI2_Init>:
=======
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000b4 	.word	0x200000b4
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <MX_SPI2_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000b4 	.word	0x200000b4
 80007dc:	40005400 	.word	0x40005400
 80007e0:	000186a0 	.word	0x000186a0

080007e4 <MX_SPI2_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
=======
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
<<<<<<< HEAD
<<<<<<< HEAD
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e66:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <MX_SPI2_Init+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e70:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e90:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e94:	2210      	movs	r2, #16
 8000e96:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000eac:	220a      	movs	r2, #10
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_SPI2_Init+0x64>)
 8000eb2:	f001 fedd 	bl	8002c70 <HAL_SPI_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ebc:	f000 f8d0 	bl	8001060 <Error_Handler>
=======
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_SPI2_Init+0x64>)
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <MX_SPI2_Init+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
=======
 80007e8:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_SPI2_Init+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	@ (800084c <MX_SPI2_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_SPI2_Init+0x64>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_SPI2_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_SPI2_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_SPI2_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_SPI2_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_SPI2_Init+0x64>)
 8000810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000814:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000816:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_SPI2_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_SPI2_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_SPI2_Init+0x64>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	@ (8000848 <MX_SPI2_Init+0x64>)
 8000836:	f001 fef5 	bl	8002624 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
<<<<<<< HEAD
 8000838:	f000 f8d0 	bl	80009dc <Error_Handler>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000840:	f000 f8d0 	bl	80009e4 <Error_Handler>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
<<<<<<< HEAD
<<<<<<< HEAD
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000d8 	.word	0x200000d8
 8000ec8:	40003800 	.word	0x40003800

08000ecc <MX_USART1_UART_Init>:
=======
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000108 	.word	0x20000108
 8000844:	40003800 	.word	0x40003800

08000848 <MX_USART1_UART_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000108 	.word	0x20000108
 800084c:	40003800 	.word	0x40003800

08000850 <MX_USART1_UART_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
=======
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
<<<<<<< HEAD
 8000ed0:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <MX_USART1_UART_Init+0x50>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_USART1_UART_Init+0x4c>)
 8000f04:	f002 fb42 	bl	800358c <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f8a7 	bl	8001060 <Error_Handler>
=======
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_USART1_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
=======
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <MX_USART1_UART_Init+0x50>)
 8000858:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  huart1.Init.BaudRate = 115200;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000876:	2208      	movs	r2, #8
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART1_UART_Init+0x4c>)
 8000888:	f001 ff55 	bl	8002736 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
<<<<<<< HEAD
 800088a:	f000 f8a7 	bl	80009dc <Error_Handler>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000892:	f000 f8a7 	bl	80009e4 <Error_Handler>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
<<<<<<< HEAD
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000130 	.word	0x20000130
 8000f1c:	40011000 	.word	0x40011000

08000f20 <MX_GPIO_Init>:
=======
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000160 	.word	0x20000160
 8000898:	40011000 	.word	0x40011000

0800089c <MX_GPIO_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000160 	.word	0x20000160
 80008a0:	40011000 	.word	0x40011000

080008a4 <MX_GPIO_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
=======
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
>>>>>>> 0207771 (switch changed to function array)
=======
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b38      	ldr	r3, [pc, #224]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a37      	ldr	r2, [pc, #220]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b35      	ldr	r3, [pc, #212]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b31      	ldr	r3, [pc, #196]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a30      	ldr	r2, [pc, #192]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a29      	ldr	r2, [pc, #164]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <MX_GPIO_Init+0xfc>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f640 0154 	movw	r1, #2132	@ 0x854
 8000f90:	4823      	ldr	r0, [pc, #140]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000f92:	f000 fd5d 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9c:	4821      	ldr	r0, [pc, #132]	@ (8001024 <MX_GPIO_Init+0x104>)
 8000f9e:	f000 fd57 	bl	8001a50 <HAL_GPIO_WritePin>
=======
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b38      	ldr	r3, [pc, #224]	@ (8000998 <MX_GPIO_Init+0xfc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a37      	ldr	r2, [pc, #220]	@ (8000998 <MX_GPIO_Init+0xfc>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <MX_GPIO_Init+0xfc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
=======
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b38      	ldr	r3, [pc, #224]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a37      	ldr	r2, [pc, #220]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b35      	ldr	r3, [pc, #212]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b31      	ldr	r3, [pc, #196]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a29      	ldr	r2, [pc, #164]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <MX_GPIO_Init+0xfc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f640 0154 	movw	r1, #2132	@ 0x854
 8000914:	4823      	ldr	r0, [pc, #140]	@ (80009a4 <MX_GPIO_Init+0x100>)
 8000916:	f000 fd75 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000918:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_GPIO_Init+0x104>)
 800091a:	f000 fd6f 	bl	80013fc <HAL_GPIO_WritePin>
>>>>>>> 0207771 (switch changed to function array)
=======
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000920:	4821      	ldr	r0, [pc, #132]	@ (80009a8 <MX_GPIO_Init+0x104>)
 8000922:	f000 fd6f 	bl	8001404 <HAL_GPIO_WritePin>
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin
                           Alarm_Signal_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin
<<<<<<< HEAD
<<<<<<< HEAD
 8000fa2:	f248 032b 	movw	r3, #32811	@ 0x802b
 8000fa6:	60fb      	str	r3, [r7, #12]
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481a      	ldr	r0, [pc, #104]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000fb8:	f000 fbc6 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin SPI_SW_CSN_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin;
 8000fbc:	f640 0354 	movw	r3, #2132	@ 0x854
 8000fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4812      	ldr	r0, [pc, #72]	@ (8001020 <MX_GPIO_Init+0x100>)
 8000fd6:	f000 fbb7 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SW_CE_Pin */
  GPIO_InitStruct.Pin = SPI_SW_CE_Pin;
 8000fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_SW_CE_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <MX_GPIO_Init+0x104>)
 8000ff4:	f000 fba8 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 8000ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <MX_GPIO_Init+0x100>)
 800100e:	f000 fb9b 	bl	8001748 <HAL_GPIO_Init>
=======
 800091e:	f248 032b 	movw	r3, #32811	@ 0x802b
 8000922:	60fb      	str	r3, [r7, #12]
=======
 8000926:	f248 032b 	movw	r3, #32811	@ 0x802b
 800092a:	60fb      	str	r3, [r7, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	481a      	ldr	r0, [pc, #104]	@ (80009a4 <MX_GPIO_Init+0x100>)
 800093c:	f000 fbc6 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin SPI_SW_CSN_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin;
 8000940:	f640 0354 	movw	r3, #2132	@ 0x854
 8000944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <MX_GPIO_Init+0x100>)
 800095a:	f000 fbb7 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SW_CE_Pin */
  GPIO_InitStruct.Pin = SPI_SW_CE_Pin;
 800095e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_SW_CE_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	@ (80009a8 <MX_GPIO_Init+0x104>)
 8000978:	f000 fba8 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 800097c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0x100>)
 800098a:	f000 fb9b 	bl	80010c4 <HAL_GPIO_Init>
>>>>>>> 0207771 (switch changed to function array)
=======
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_GPIO_Init+0x100>)
 8000992:	f000 fb9b 	bl	80010cc <HAL_GPIO_Init>
>>>>>>> c1d5507 (packet_list and sim800L alert)

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400

08001028 <_write>:
=======
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
=======
>>>>>>> c1d5507 (packet_list and sim800L alert)
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400

<<<<<<< HEAD
080009a4 <_write>:
>>>>>>> 0207771 (switch changed to function array)
=======
080009ac <_write>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
=======
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
<<<<<<< HEAD
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e009      	b.n	800104e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	60ba      	str	r2, [r7, #8]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa9c 	bl	8000580 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3301      	adds	r3, #1
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	429a      	cmp	r2, r3
 8001054:	dbf1      	blt.n	800103a <_write+0x12>
  }
  return len;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <Error_Handler>:
=======
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e009      	b.n	80009ca <_write+0x26>
=======
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e009      	b.n	80009d2 <_write+0x26>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    ITM_SendChar(*ptr++);
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	60ba      	str	r2, [r7, #8]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fdea 	bl	80005a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dbf1      	blt.n	80009be <_write+0x12>
  }
  return len;
 80009da:	687b      	ldr	r3, [r7, #4]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080009dc <Error_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
080009e4 <Error_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
=======
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
<<<<<<< HEAD
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
=======
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
>>>>>>> 0207771 (switch changed to function array)
=======
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <Error_Handler+0x8>

0800106c <HAL_MspInit>:
=======
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
>>>>>>> 0207771 (switch changed to function array)
=======
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
=======
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
=======
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_I2C_MspInit>:
=======
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_I2C_MspInit>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_I2C_MspInit>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <HAL_I2C_MspInit+0x84>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12b      	bne.n	8001136 <HAL_I2C_MspInit+0x7a>
=======
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
=======
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
<<<<<<< HEAD
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <HAL_I2C_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_I2C_MspInit+0x7a>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <HAL_I2C_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12b      	bne.n	8000aba <HAL_I2C_MspInit+0x7a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a17      	ldr	r2, [pc, #92]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
=======
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
<<<<<<< HEAD
 80010fa:	23c0      	movs	r3, #192	@ 0xc0
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	2312      	movs	r3, #18
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110a:	2304      	movs	r3, #4
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <HAL_I2C_MspInit+0x8c>)
 8001116:	f000 fb17 	bl	8001748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_I2C_MspInit+0x88>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
=======
 8000a76:	23c0      	movs	r3, #192	@ 0xc0
 8000a78:	617b      	str	r3, [r7, #20]
=======
 8000a7e:	23c0      	movs	r3, #192	@ 0xc0
 8000a80:	617b      	str	r3, [r7, #20]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <HAL_I2C_MspInit+0x8c>)
 8000a9a:	f000 fb17 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
<<<<<<< HEAD
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <HAL_I2C_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000aa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
<<<<<<< HEAD
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	@ 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40005400 	.word	0x40005400
 8001144:	40023800 	.word	0x40023800
 8001148:	40020400 	.word	0x40020400

0800114c <HAL_SPI_MspInit>:
=======
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
=======
>>>>>>> c1d5507 (packet_list and sim800L alert)
 8000aba:	bf00      	nop
 8000abc:	3728      	adds	r7, #40	@ 0x28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400

<<<<<<< HEAD
08000ac8 <HAL_SPI_MspInit>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000ad0 <HAL_SPI_MspInit>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	@ (80011d0 <HAL_SPI_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12c      	bne.n	80011c8 <HAL_SPI_MspInit+0x7c>
=======
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
=======
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
<<<<<<< HEAD
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	@ (8000b4c <HAL_SPI_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_SPI_MspInit+0x7c>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	@ (8000b54 <HAL_SPI_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12c      	bne.n	8000b4c <HAL_SPI_MspInit+0x7c>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_SPI_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
=======
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <HAL_SPI_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	@ (8000b50 <HAL_SPI_MspInit+0x88>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_SPI_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <HAL_SPI_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <HAL_SPI_MspInit+0x88>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_SPI_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a17      	ldr	r2, [pc, #92]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_SPI_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
<<<<<<< HEAD
<<<<<<< HEAD
 80011a6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011b8:	2305      	movs	r3, #5
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <HAL_SPI_MspInit+0x8c>)
 80011c4:	f000 fac0 	bl	8001748 <HAL_GPIO_Init>
=======
 8000b22:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b26:	617b      	str	r3, [r7, #20]
=======
 8000b2a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b2e:	617b      	str	r3, [r7, #20]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b3c:	2305      	movs	r3, #5
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <HAL_SPI_MspInit+0x8c>)
 8000b40:	f000 fac0 	bl	80010c4 <HAL_GPIO_Init>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <HAL_SPI_MspInit+0x8c>)
 8000b48:	f000 fac0 	bl	80010cc <HAL_GPIO_Init>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
<<<<<<< HEAD
<<<<<<< HEAD
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	@ 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40003800 	.word	0x40003800
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020400 	.word	0x40020400

080011dc <HAL_UART_MspInit>:
=======
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	@ 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40003800 	.word	0x40003800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400

08000b58 <HAL_UART_MspInit>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40003800 	.word	0x40003800
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020400 	.word	0x40020400

08000b60 <HAL_UART_MspInit>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <HAL_UART_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12c      	bne.n	8001258 <HAL_UART_MspInit+0x7c>
=======
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
=======
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
<<<<<<< HEAD
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_UART_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12c      	bne.n	8000bd4 <HAL_UART_MspInit+0x7c>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <HAL_UART_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12c      	bne.n	8000bdc <HAL_UART_MspInit+0x7c>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <HAL_UART_MspInit+0x88>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <HAL_UART_MspInit+0x88>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_UART_MspInit+0x88>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <HAL_UART_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <HAL_UART_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
=======
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a17      	ldr	r2, [pc, #92]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_UART_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
<<<<<<< HEAD
 8001236:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001248:	2307      	movs	r3, #7
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	@ (8001268 <HAL_UART_MspInit+0x8c>)
 8001254:	f000 fa78 	bl	8001748 <HAL_GPIO_Init>
=======
 8000bb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bb6:	617b      	str	r3, [r7, #20]
=======
 8000bba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bbe:	617b      	str	r3, [r7, #20]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <HAL_UART_MspInit+0x8c>)
 8000bd0:	f000 fa78 	bl	80010c4 <HAL_GPIO_Init>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <HAL_UART_MspInit+0x8c>)
 8000bd8:	f000 fa78 	bl	80010cc <HAL_GPIO_Init>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
<<<<<<< HEAD
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	@ 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40011000 	.word	0x40011000
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <NMI_Handler>:
=======
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <NMI_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	@ 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40011000 	.word	0x40011000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <NMI_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
=======
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <NMI_Handler+0x4>

08001274 <HardFault_Handler>:
=======
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
=======
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <HardFault_Handler+0x4>

0800127c <MemManage_Handler>:
=======
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
=======
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <MemManage_Handler+0x4>

08001284 <BusFault_Handler>:
=======
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
=======
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <BusFault_Handler+0x4>

0800128c <UsageFault_Handler>:
=======
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
=======
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
<<<<<<< HEAD
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <UsageFault_Handler+0x4>

08001294 <SVC_Handler>:
=======
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <SVC_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <SVC_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
=======
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <DebugMon_Handler>:
=======
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <DebugMon_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
=======
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <PendSV_Handler>:
=======
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <PendSV_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
=======
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <SysTick_Handler>:
=======
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <SysTick_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
=======
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	af00      	add	r7, sp, #0
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
<<<<<<< HEAD
 80012c2:	f000 f917 	bl	80014f4 <HAL_IncTick>
=======
 8000c3e:	f000 f917 	bl	8000e70 <HAL_IncTick>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c46:	f000 f917 	bl	8000e78 <HAL_IncTick>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_read>:
=======
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_read>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_read>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
=======
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
<<<<<<< HEAD
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e00a      	b.n	80012f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012dc:	f3af 8000 	nop.w
 80012e0:	4601      	mov	r1, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	b2ca      	uxtb	r2, r1
 80012ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	3301      	adds	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dbf0      	blt.n	80012dc <_read+0x12>
  }

  return len;
 80012fa:	687b      	ldr	r3, [r7, #4]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_close>:
=======
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e00a      	b.n	8000c6e <_read+0x28>
=======
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e00a      	b.n	8000c76 <_read+0x28>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    *ptr++ = __io_getchar();
 8000c60:	f3af 8000 	nop.w
 8000c64:	4601      	mov	r1, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	60ba      	str	r2, [r7, #8]
 8000c6c:	b2ca      	uxtb	r2, r1
 8000c6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	dbf0      	blt.n	8000c60 <_read+0x12>
  }

  return len;
 8000c7e:	687b      	ldr	r3, [r7, #4]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08000c80 <_close>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000c88 <_close>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  return len;
}

int _close(int file)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_fstat>:
=======
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
=======
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  (void)file;
  return -1;
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

<<<<<<< HEAD
08000c98 <_fstat>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000ca0 <_fstat>:
>>>>>>> c1d5507 (packet_list and sim800L alert)


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800132c:	605a      	str	r2, [r3, #4]
  return 0;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <_isatty>:

int _isatty(int file)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
=======
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
=======
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  (void)file;
  st->st_mode = S_IFCHR;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_isatty>:

int _isatty(int file)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
<<<<<<< HEAD
 8000cce:	b480      	push	{r7}
 8000cd0:	b085      	sub	sp, #20
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000cd6:	b480      	push	{r7}
 8000cd8:	b085      	sub	sp, #20
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
<<<<<<< HEAD
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_sbrk>:
=======
 8000cda:	2300      	movs	r3, #0
=======
 8000ce2:	2300      	movs	r3, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

<<<<<<< HEAD
08000ce8 <_sbrk>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000cf0 <_sbrk>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
=======
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
<<<<<<< HEAD
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
=======
 8000cf0:	4a14      	ldr	r2, [pc, #80]	@ (8000d44 <_sbrk+0x5c>)
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <_sbrk+0x60>)
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	613b      	str	r3, [r7, #16]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000cf8:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
<<<<<<< HEAD
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
=======
 8000cfc:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <_sbrk+0x64>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	@ (8000d50 <_sbrk+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000d04:	4b13      	ldr	r3, [pc, #76]	@ (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
<<<<<<< HEAD
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f002 ffa2 	bl	80042e4 <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20020000 	.word	0x20020000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	2000017c 	.word	0x2000017c
 80013d4:	20000368 	.word	0x20000368

080013d8 <SystemInit>:
=======
 8000d0a:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d207      	bcs.n	8000d28 <_sbrk+0x40>
=======
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    errno = ENOMEM;
 8000d20:	f003 fd40 	bl	80047a4 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20020000 	.word	0x20020000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	200001a8 	.word	0x200001a8
 8000d58:	200003f8 	.word	0x200003f8

<<<<<<< HEAD
08000d54 <SystemInit>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000d5c <SystemInit>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> 0207771 (switch changed to function array)
=======
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
<<<<<<< HEAD
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:
=======
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< HEAD
<<<<<<< HEAD
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001400:	f7ff ffea 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	@ (800143c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	@ (8001448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 ff61 	bl	80042f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff fbc5 	bl	8000bbc <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001440:	080054f0 	.word	0x080054f0
  ldr r2, =_sbss
 8001444:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001448:	20000364 	.word	0x20000364

0800144c <ADC_IRQHandler>:
=======
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db0 <LoopFillZerobss+0xe>
=======
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000db8 <LoopFillZerobss+0xe>
>>>>>>> c1d5507 (packet_list and sim800L alert)

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d84:	f7ff ffea 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	@ (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dae:	f003 fcff 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fc1d 	bl	80005f0 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000dc4:	0800559c 	.word	0x0800559c
  ldr r2, =_sbss
 8000dc8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000dcc:	200003f8 	.word	0x200003f8

<<<<<<< HEAD
08000dc8 <ADC_IRQHandler>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000dd0 <ADC_IRQHandler>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
<<<<<<< HEAD
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <HAL_Init>:
=======
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_IRQHandler>
	...

08000dcc <HAL_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>
	...

08000dd4 <HAL_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <HAL_Init+0x40>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0d      	ldr	r2, [pc, #52]	@ (8001490 <HAL_Init+0x40>)
 800145a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800145e:	6013      	str	r3, [r2, #0]
=======
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e0c <HAL_Init+0x40>)
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dda:	6013      	str	r3, [r2, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e14 <HAL_Init+0x40>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de2:	6013      	str	r3, [r2, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_Init+0x40>)
 8001466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800146a:	6013      	str	r3, [r2, #0]
=======
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_Init+0x40>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de6:	6013      	str	r3, [r2, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_Init+0x40>)
 8000dea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dee:	6013      	str	r3, [r2, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 800146c:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <HAL_Init+0x40>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001476:	6013      	str	r3, [r2, #0]
=======
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a07      	ldr	r2, [pc, #28]	@ (8000e0c <HAL_Init+0x40>)
 8000dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df2:	6013      	str	r3, [r2, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <HAL_Init+0x40>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfa:	6013      	str	r3, [r2, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
<<<<<<< HEAD
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f931 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147e:	200f      	movs	r0, #15
 8001480:	f000 f808 	bl	8001494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fdf2 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023c00 	.word	0x40023c00

08001494 <HAL_InitTick>:
=======
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 f931 	bl	800105c <HAL_NVIC_SetPriorityGrouping>
=======
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f931 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	200f      	movs	r0, #15
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fdf2 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023c00 	.word	0x40023c00

<<<<<<< HEAD
08000e10 <HAL_InitTick>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000e18 <HAL_InitTick>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f93b 	bl	800172e <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
=======
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
=======
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f93b 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e00e      	b.n	8000e5c <HAL_InitTick+0x4c>
>>>>>>> 0207771 (switch changed to function array)
=======
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
<<<<<<< HEAD
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f911 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
=======
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d80a      	bhi.n	8000e5a <HAL_InitTick+0x4a>
=======
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f000 f911 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
<<<<<<< HEAD
 8000e50:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <HAL_InitTick+0x5c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8000e58:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000008 	.word	0x20000008
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_IncTick>:
=======
 8000e56:	2300      	movs	r3, #0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x4c>
=======
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	20000008 	.word	0x20000008

<<<<<<< HEAD
08000e70 <HAL_IncTick>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000e78 <HAL_IncTick>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	20000180 	.word	0x20000180

0800151c <HAL_GetTick>:
=======
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
=======
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2000000c 	.word	0x2000000c
 8000e9c:	200001ac 	.word	0x200001ac

<<<<<<< HEAD
08000e98 <HAL_GetTick>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000ea0 <HAL_GetTick>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000180 	.word	0x20000180

08001534 <HAL_Delay>:
=======
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
=======
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001ac 	.word	0x200001ac

<<<<<<< HEAD
08000eb0 <HAL_Delay>:
>>>>>>> 0207771 (switch changed to function array)
=======
08000eb8 <HAL_Delay>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008

0800157c <__NVIC_SetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_SetPriority>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
=======
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
=======
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000000c 	.word	0x2000000c

08000f00 <__NVIC_SetPriorityGrouping>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_SetPriority>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

<<<<<<< HEAD
0800105c <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001064 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
=======
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
<<<<<<< HEAD
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff47 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
=======
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
=======
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff47 	bl	8000f00 <__NVIC_SetPriorityGrouping>
>>>>>>> c1d5507 (packet_list and sim800L alert)
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001072 <HAL_NVIC_SetPriority>:
>>>>>>> 0207771 (switch changed to function array)
=======
0800107a <HAL_NVIC_SetPriority>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
<<<<<<< HEAD
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
=======
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
>>>>>>> 0207771 (switch changed to function array)
=======
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
<<<<<<< HEAD
 8001708:	f7ff ff5c 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
=======
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
=======
 800108c:	f7ff ff5c 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080010aa <HAL_SYSTICK_Config>:
>>>>>>> 0207771 (switch changed to function array)
=======
080010b2 <HAL_SYSTICK_Config>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb0 	bl	800169c <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_Init>:
=======
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
=======
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb0 	bl	8001020 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

<<<<<<< HEAD
080010c4 <HAL_GPIO_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
080010cc <HAL_GPIO_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	@ 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
=======
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	@ 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
=======
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d6:	2300      	movs	r3, #0
<<<<<<< HEAD
 80010d8:	61bb      	str	r3, [r7, #24]
>>>>>>> 0207771 (switch changed to function array)
=======
 80010d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
<<<<<<< HEAD
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e159      	b.n	8001a18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8148 	bne.w	8001a12 <HAL_GPIO_Init+0x2ca>
=======
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	e159      	b.n	8001394 <HAL_GPIO_Init+0x2d0>
=======
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e159      	b.n	800139c <HAL_GPIO_Init+0x2d0>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
<<<<<<< HEAD
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8148 	bne.w	800138e <HAL_GPIO_Init+0x2ca>
>>>>>>> 0207771 (switch changed to function array)
=======
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8148 	bne.w	8001396 <HAL_GPIO_Init+0x2ca>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
<<<<<<< HEAD
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d005      	beq.n	800179a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	2b02      	cmp	r3, #2
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xb4>
=======
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d005      	beq.n	8001116 <HAL_GPIO_Init+0x52>
=======
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b01      	cmp	r3, #1
 8001110:	d005      	beq.n	800111e <HAL_GPIO_Init+0x52>
>>>>>>> c1d5507 (packet_list and sim800L alert)
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8001112:	2b02      	cmp	r3, #2
 8001114:	d130      	bne.n	8001178 <HAL_GPIO_Init+0xb4>
>>>>>>> 0207771 (switch changed to function array)
=======
 800111a:	2b02      	cmp	r3, #2
 800111c:	d130      	bne.n	8001180 <HAL_GPIO_Init+0xb4>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
<<<<<<< HEAD
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b03      	cmp	r3, #3
 8001806:	d017      	beq.n	8001838 <HAL_GPIO_Init+0xf0>
=======
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	61bb      	str	r3, [r7, #24]
=======
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	61bb      	str	r3, [r7, #24]
>>>>>>> c1d5507 (packet_list and sim800L alert)
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 0201 	and.w	r2, r3, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b03      	cmp	r3, #3
 8001182:	d017      	beq.n	80011b4 <HAL_GPIO_Init+0xf0>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b03      	cmp	r3, #3
 800118a:	d017      	beq.n	80011bc <HAL_GPIO_Init+0xf0>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
<<<<<<< HEAD
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	60da      	str	r2, [r3, #12]
=======
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
=======
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
>>>>>>> c1d5507 (packet_list and sim800L alert)
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
<<<<<<< HEAD
 80011b2:	60da      	str	r2, [r3, #12]
>>>>>>> 0207771 (switch changed to function array)
=======
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	60da      	str	r2, [r3, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
<<<<<<< HEAD
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x144>
=======
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d123      	bne.n	8001208 <HAL_GPIO_Init+0x144>
>>>>>>> 0207771 (switch changed to function array)
=======
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d123      	bne.n	8001210 <HAL_GPIO_Init+0x144>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
<<<<<<< HEAD
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011cc:	61bb      	str	r3, [r7, #24]
=======
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	08da      	lsrs	r2, r3, #3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3208      	adds	r2, #8
 80011d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d4:	61bb      	str	r3, [r7, #24]
>>>>>>> c1d5507 (packet_list and sim800L alert)
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
<<<<<<< HEAD
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	69b9      	ldr	r1, [r7, #24]
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	69b9      	ldr	r1, [r7, #24]
 800120c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
<<<<<<< HEAD
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]
=======
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	61bb      	str	r3, [r7, #24]
=======
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	61bb      	str	r3, [r7, #24]
>>>>>>> c1d5507 (packet_list and sim800L alert)
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0203 	and.w	r2, r3, #3
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
<<<<<<< HEAD
 800123a:	601a      	str	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
<<<<<<< HEAD
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a2 	beq.w	8001a12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b57      	ldr	r3, [pc, #348]	@ (8001a30 <HAL_GPIO_Init+0x2e8>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	4a56      	ldr	r2, [pc, #344]	@ (8001a30 <HAL_GPIO_Init+0x2e8>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018de:	4b54      	ldr	r3, [pc, #336]	@ (8001a30 <HAL_GPIO_Init+0x2e8>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ea:	4a52      	ldr	r2, [pc, #328]	@ (8001a34 <HAL_GPIO_Init+0x2ec>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a49      	ldr	r2, [pc, #292]	@ (8001a38 <HAL_GPIO_Init+0x2f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x202>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a48      	ldr	r2, [pc, #288]	@ (8001a3c <HAL_GPIO_Init+0x2f4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x1fe>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a47      	ldr	r2, [pc, #284]	@ (8001a40 <HAL_GPIO_Init+0x2f8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x1fa>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a46      	ldr	r2, [pc, #280]	@ (8001a44 <HAL_GPIO_Init+0x2fc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x1f6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a45      	ldr	r2, [pc, #276]	@ (8001a48 <HAL_GPIO_Init+0x300>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x1f2>
 8001936:	2304      	movs	r3, #4
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x204>
 800193a:	2307      	movs	r3, #7
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x204>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x204>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x204>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x204>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	@ (8001a34 <HAL_GPIO_Init+0x2ec>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196a:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001994:	4b2d      	ldr	r3, [pc, #180]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b8:	4a24      	ldr	r2, [pc, #144]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019be:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e8:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a4c <HAL_GPIO_Init+0x304>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f aea2 	bls.w	8001764 <HAL_GPIO_Init+0x1c>
=======
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a2 	beq.w	800138e <HAL_GPIO_Init+0x2ca>
=======
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80a2 	beq.w	8001396 <HAL_GPIO_Init+0x2ca>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b57      	ldr	r3, [pc, #348]	@ (80013b4 <HAL_GPIO_Init+0x2e8>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a56      	ldr	r2, [pc, #344]	@ (80013b4 <HAL_GPIO_Init+0x2e8>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
 8001262:	4b54      	ldr	r3, [pc, #336]	@ (80013b4 <HAL_GPIO_Init+0x2e8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126e:	4a52      	ldr	r2, [pc, #328]	@ (80013b8 <HAL_GPIO_Init+0x2ec>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a49      	ldr	r2, [pc, #292]	@ (80013bc <HAL_GPIO_Init+0x2f0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0x202>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a48      	ldr	r2, [pc, #288]	@ (80013c0 <HAL_GPIO_Init+0x2f4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x1fe>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a47      	ldr	r2, [pc, #284]	@ (80013c4 <HAL_GPIO_Init+0x2f8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x1fa>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a46      	ldr	r2, [pc, #280]	@ (80013c8 <HAL_GPIO_Init+0x2fc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x1f6>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a45      	ldr	r2, [pc, #276]	@ (80013cc <HAL_GPIO_Init+0x300>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x1f2>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e008      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012be:	2307      	movs	r3, #7
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_GPIO_Init+0x204>
 80012ce:	2300      	movs	r3, #0
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	f002 0203 	and.w	r2, r2, #3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4093      	lsls	r3, r2
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e0:	4935      	ldr	r1, [pc, #212]	@ (80013b8 <HAL_GPIO_Init+0x2ec>)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ee:	4b38      	ldr	r3, [pc, #224]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001312:	4a2f      	ldr	r2, [pc, #188]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001318:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800133c:	4a24      	ldr	r2, [pc, #144]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001366:	4a1a      	ldr	r2, [pc, #104]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001390:	4a0f      	ldr	r2, [pc, #60]	@ (80013d0 <HAL_GPIO_Init+0x304>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f aea2 	bls.w	80010e0 <HAL_GPIO_Init+0x1c>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b0f      	cmp	r3, #15
 80013a0:	f67f aea2 	bls.w	80010e8 <HAL_GPIO_Init+0x1c>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	@ 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
=======
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40013c00 	.word	0x40013c00
=======
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020c00 	.word	0x40020c00
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40013c00 	.word	0x40013c00
>>>>>>> c1d5507 (packet_list and sim800L alert)

080013d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

<<<<<<< HEAD
080013fc <HAL_GPIO_WritePin>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001404 <HAL_GPIO_WritePin>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
=======
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
 8001408:	4613      	mov	r3, r2
 800140a:	707b      	strb	r3, [r7, #1]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
=======
 800140c:	787b      	ldrb	r3, [r7, #1]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_I2C_Init>:
=======
 8001418:	e003      	b.n	8001422 <HAL_GPIO_WritePin+0x26>
=======
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

<<<<<<< HEAD
08001430 <HAL_I2C_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001438 <HAL_I2C_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
=======
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e12b      	b.n	8001cee <HAL_I2C_Init+0x26a>
=======
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e12b      	b.n	800169a <HAL_I2C_Init+0x26a>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e12b      	b.n	80016a2 <HAL_I2C_Init+0x26a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 0207771 (switch changed to function array)
=======
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
<<<<<<< HEAD
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fb06 	bl	80010bc <HAL_I2C_MspInit>
=======
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff faee 	bl	8000a38 <HAL_I2C_MspInit>
>>>>>>> 0207771 (switch changed to function array)
=======
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff faee 	bl	8000a40 <HAL_I2C_MspInit>
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	@ 0x24
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae8:	f001 f89a 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 8001aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a81      	ldr	r2, [pc, #516]	@ (8001cf8 <HAL_I2C_Init+0x274>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d807      	bhi.n	8001b08 <HAL_I2C_Init+0x84>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a80      	ldr	r2, [pc, #512]	@ (8001cfc <HAL_I2C_Init+0x278>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	e006      	b.n	8001b16 <HAL_I2C_Init+0x92>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d00 <HAL_I2C_Init+0x27c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bf94      	ite	ls
 8001b10:	2301      	movls	r3, #1
 8001b12:	2300      	movhi	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0e7      	b.n	8001cee <HAL_I2C_Init+0x26a>
=======
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2224      	movs	r2, #36	@ 0x24
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	@ 0x24
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800148a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800149a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800149c:	f001 f89a 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a81      	ldr	r2, [pc, #516]	@ (80016ac <HAL_I2C_Init+0x274>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d807      	bhi.n	80014bc <HAL_I2C_Init+0x84>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4a80      	ldr	r2, [pc, #512]	@ (80016b0 <HAL_I2C_Init+0x278>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	bf94      	ite	ls
 80014b4:	2301      	movls	r3, #1
 80014b6:	2300      	movhi	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e006      	b.n	80014ca <HAL_I2C_Init+0x92>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a7d      	ldr	r2, [pc, #500]	@ (80016b4 <HAL_I2C_Init+0x27c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	bf94      	ite	ls
 80014c4:	2301      	movls	r3, #1
 80014c6:	2300      	movhi	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0e7      	b.n	800169a <HAL_I2C_Init+0x26a>
>>>>>>> 0207771 (switch changed to function array)
=======
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0e7      	b.n	80016a2 <HAL_I2C_Init+0x26a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
<<<<<<< HEAD
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a78      	ldr	r2, [pc, #480]	@ (8001d04 <HAL_I2C_Init+0x280>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9b      	lsrs	r3, r3, #18
 8001b28:	60bb      	str	r3, [r7, #8]
=======
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4a78      	ldr	r2, [pc, #480]	@ (80016b0 <HAL_I2C_Init+0x280>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	0c9b      	lsrs	r3, r3, #18
 80014d4:	60bb      	str	r3, [r7, #8]
>>>>>>> 0207771 (switch changed to function array)
=======
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a78      	ldr	r2, [pc, #480]	@ (80016b8 <HAL_I2C_Init+0x280>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	60bb      	str	r3, [r7, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
<<<<<<< HEAD
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]
=======
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
<<<<<<< HEAD
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf8 <HAL_I2C_Init+0x274>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d802      	bhi.n	8001b58 <HAL_I2C_Init+0xd4>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3301      	adds	r3, #1
 8001b56:	e009      	b.n	8001b6c <HAL_I2C_Init+0xe8>
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4a69      	ldr	r2, [pc, #420]	@ (8001d08 <HAL_I2C_Init+0x284>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	6213      	str	r3, [r2, #32]
=======
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a6a      	ldr	r2, [pc, #424]	@ (80016a4 <HAL_I2C_Init+0x274>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d802      	bhi.n	8001504 <HAL_I2C_Init+0xd4>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	3301      	adds	r3, #1
 8001502:	e009      	b.n	8001518 <HAL_I2C_Init+0xe8>
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a69      	ldr	r2, [pc, #420]	@ (80016b4 <HAL_I2C_Init+0x284>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	3301      	adds	r3, #1
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	430b      	orrs	r3, r1
 800151e:	6213      	str	r3, [r2, #32]
>>>>>>> 0207771 (switch changed to function array)
=======
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a6a      	ldr	r2, [pc, #424]	@ (80016ac <HAL_I2C_Init+0x274>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d802      	bhi.n	800150c <HAL_I2C_Init+0xd4>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3301      	adds	r3, #1
 800150a:	e009      	b.n	8001520 <HAL_I2C_Init+0xe8>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a69      	ldr	r2, [pc, #420]	@ (80016bc <HAL_I2C_Init+0x284>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	3301      	adds	r3, #1
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	6213      	str	r3, [r2, #32]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
<<<<<<< HEAD
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	495c      	ldr	r1, [pc, #368]	@ (8001cf8 <HAL_I2C_Init+0x274>)
 8001b88:	428b      	cmp	r3, r1
 8001b8a:	d819      	bhi.n	8001bc0 <HAL_I2C_Init+0x13c>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1e59      	subs	r1, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b9a:	1c59      	adds	r1, r3, #1
 8001b9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00a      	beq.n	8001bbc <HAL_I2C_Init+0x138>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1e59      	subs	r1, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bba:	e051      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e04f      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d111      	bne.n	8001bec <HAL_I2C_Init+0x168>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e58      	subs	r0, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	e012      	b.n	8001c12 <HAL_I2C_Init+0x18e>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	0099      	lsls	r1, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Init+0x196>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e022      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10e      	bne.n	8001c40 <HAL_I2C_Init+0x1bc>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1e58      	subs	r0, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	440b      	add	r3, r1
 8001c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c3e:	e00f      	b.n	8001c60 <HAL_I2C_Init+0x1dc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e58      	subs	r0, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	0099      	lsls	r1, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	6809      	ldr	r1, [r1, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61cb      	str	r3, [r1, #28]
=======
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800152a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	495c      	ldr	r1, [pc, #368]	@ (80016a4 <HAL_I2C_Init+0x274>)
 8001534:	428b      	cmp	r3, r1
 8001536:	d819      	bhi.n	800156c <HAL_I2C_Init+0x13c>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1e59      	subs	r1, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fbb1 f3f3 	udiv	r3, r1, r3
 8001546:	1c59      	adds	r1, r3, #1
 8001548:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800154c:	400b      	ands	r3, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00a      	beq.n	8001568 <HAL_I2C_Init+0x138>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1e59      	subs	r1, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001560:	3301      	adds	r3, #1
 8001562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001566:	e051      	b.n	800160c <HAL_I2C_Init+0x1dc>
 8001568:	2304      	movs	r3, #4
 800156a:	e04f      	b.n	800160c <HAL_I2C_Init+0x1dc>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d111      	bne.n	8001598 <HAL_I2C_Init+0x168>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1e58      	subs	r0, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	440b      	add	r3, r1
 8001582:	fbb0 f3f3 	udiv	r3, r0, r3
 8001586:	3301      	adds	r3, #1
 8001588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	e012      	b.n	80015be <HAL_I2C_Init+0x18e>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	0099      	lsls	r1, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_I2C_Init+0x196>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e022      	b.n	800160c <HAL_I2C_Init+0x1dc>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10e      	bne.n	80015ec <HAL_I2C_Init+0x1bc>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1e58      	subs	r0, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6859      	ldr	r1, [r3, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	440b      	add	r3, r1
 80015dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e0:	3301      	adds	r3, #1
 80015e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ea:	e00f      	b.n	800160c <HAL_I2C_Init+0x1dc>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	0099      	lsls	r1, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	6809      	ldr	r1, [r1, #0]
 8001610:	4313      	orrs	r3, r2
 8001612:	61cb      	str	r3, [r1, #28]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001532:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	495c      	ldr	r1, [pc, #368]	@ (80016ac <HAL_I2C_Init+0x274>)
 800153c:	428b      	cmp	r3, r1
 800153e:	d819      	bhi.n	8001574 <HAL_I2C_Init+0x13c>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e59      	subs	r1, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fbb1 f3f3 	udiv	r3, r1, r3
 800154e:	1c59      	adds	r1, r3, #1
 8001550:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001554:	400b      	ands	r3, r1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <HAL_I2C_Init+0x138>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e59      	subs	r1, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
 8001568:	3301      	adds	r3, #1
 800156a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156e:	e051      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001570:	2304      	movs	r3, #4
 8001572:	e04f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d111      	bne.n	80015a0 <HAL_I2C_Init+0x168>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e012      	b.n	80015c6 <HAL_I2C_Init+0x18e>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Init+0x196>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e022      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10e      	bne.n	80015f4 <HAL_I2C_Init+0x1bc>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e58      	subs	r0, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	440b      	add	r3, r1
 80015e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e8:	3301      	adds	r3, #1
 80015ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	6809      	ldr	r1, [r1, #0]
 8001618:	4313      	orrs	r3, r2
 800161a:	61cb      	str	r3, [r1, #28]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
<<<<<<< HEAD
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
=======
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
<<<<<<< HEAD
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6911      	ldr	r1, [r2, #16]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68d2      	ldr	r2, [r2, #12]
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6093      	str	r3, [r2, #8]
=======
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800163a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6911      	ldr	r1, [r2, #16]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68d2      	ldr	r2, [r2, #12]
 8001646:	4311      	orrs	r1, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	430b      	orrs	r3, r1
 800164e:	6093      	str	r3, [r2, #8]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001642:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6911      	ldr	r1, [r2, #16]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68d2      	ldr	r2, [r2, #12]
 800164e:	4311      	orrs	r1, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	430b      	orrs	r3, r1
 8001656:	6093      	str	r3, [r2, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
<<<<<<< HEAD
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	000186a0 	.word	0x000186a0
 8001cfc:	001e847f 	.word	0x001e847f
 8001d00:	003d08ff 	.word	0x003d08ff
 8001d04:	431bde83 	.word	0x431bde83
 8001d08:	10624dd3 	.word	0x10624dd3

08001d0c <HAL_I2C_Master_Transmit>:
=======
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	60da      	str	r2, [r3, #12]
=======
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	000186a0 	.word	0x000186a0
 80016b0:	001e847f 	.word	0x001e847f
 80016b4:	003d08ff 	.word	0x003d08ff
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	10624dd3 	.word	0x10624dd3

<<<<<<< HEAD
080016b8 <HAL_I2C_Master_Transmit>:
>>>>>>> 0207771 (switch changed to function array)
=======
080016c0 <HAL_I2C_Master_Transmit>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	461a      	mov	r2, r3
 8001d18:	460b      	mov	r3, r1
 8001d1a:	817b      	strh	r3, [r7, #10]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff fbfc 	bl	800151c <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	f040 80e0 	bne.w	8001ef4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2319      	movs	r3, #25
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4970      	ldr	r1, [pc, #448]	@ (8001f00 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f964 	bl	800200c <I2C_WaitOnFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e0d3      	b.n	8001ef6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	461a      	mov	r2, r3
 80016c4:	460b      	mov	r3, r1
 80016c6:	817b      	strh	r3, [r7, #10]
 80016c8:	4613      	mov	r3, r2
 80016ca:	813b      	strh	r3, [r7, #8]
=======
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	817b      	strh	r3, [r7, #10]
 80016d0:	4613      	mov	r3, r2
 80016d2:	813b      	strh	r3, [r7, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fbe4 	bl	8000ea0 <HAL_GetTick>
 80016d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	f040 80e0 	bne.w	80018a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2319      	movs	r3, #25
 80016ee:	2201      	movs	r2, #1
 80016f0:	4970      	ldr	r1, [pc, #448]	@ (80018b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 f964 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
<<<<<<< HEAD
 80016f6:	2302      	movs	r3, #2
 80016f8:	e0d3      	b.n	80018a2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 0207771 (switch changed to function array)
=======
 80016fe:	2302      	movs	r3, #2
 8001700:	e0d3      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
<<<<<<< HEAD
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_I2C_Master_Transmit+0x50>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e0cc      	b.n	8001ef6 <HAL_I2C_Master_Transmit+0x1ea>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d007      	beq.n	8001d82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
=======
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_I2C_Master_Transmit+0x50>
 8001704:	2302      	movs	r3, #2
 8001706:	e0cc      	b.n	80018a2 <HAL_I2C_Master_Transmit+0x1ea>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_I2C_Master_Transmit+0x50>
 800170c:	2302      	movs	r3, #2
 800170e:	e0cc      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d007      	beq.n	8001736 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
<<<<<<< HEAD
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0201 	orr.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
<<<<<<< HEAD
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2221      	movs	r2, #33	@ 0x21
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	893a      	ldrh	r2, [r7, #8]
 8001db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4a50      	ldr	r2, [pc, #320]	@ (8001f04 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	6a3a      	ldr	r2, [r7, #32]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f89c 	bl	8001f08 <I2C_MasterRequestWrite>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e08d      	b.n	8001ef6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800173c:	601a      	str	r2, [r3, #0]
=======
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001744:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2221      	movs	r2, #33	@ 0x21
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2210      	movs	r2, #16
 8001752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	893a      	ldrh	r2, [r7, #8]
 8001766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a50      	ldr	r2, [pc, #320]	@ (80018b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001778:	8979      	ldrh	r1, [r7, #10]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	6a3a      	ldr	r2, [r7, #32]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f89c 	bl	80018bc <I2C_MasterRequestWrite>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8001782:	2301      	movs	r3, #1
 8001784:	e08d      	b.n	80018a2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 0207771 (switch changed to function array)
=======
 800178a:	2301      	movs	r3, #1
 800178c:	e08d      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
<<<<<<< HEAD
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001df0:	e066      	b.n	8001ec0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	6a39      	ldr	r1, [r7, #32]
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fa22 	bl	8002240 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00d      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d107      	bne.n	8001e1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
=======
 800178e:	2300      	movs	r3, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017a4:	e066      	b.n	8001874 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	6a39      	ldr	r1, [r7, #32]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fa22 	bl	8001bf4 <I2C_WaitOnTXEFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d107      	bne.n	80017ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
<<<<<<< HEAD
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06b      	b.n	80018a2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 0207771 (switch changed to function array)
=======
 80017ce:	2301      	movs	r3, #1
 80017d0:	e06b      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
<<<<<<< HEAD
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d11b      	bne.n	8001e94 <HAL_I2C_Master_Transmit+0x188>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d017      	beq.n	8001e94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e68:	781a      	ldrb	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	851a      	strh	r2, [r3, #40]	@ 0x28
=======
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	611a      	str	r2, [r3, #16]
=======
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	611a      	str	r2, [r3, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	3b01      	subs	r3, #1
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b04      	cmp	r3, #4
 800180e:	d11b      	bne.n	8001848 <HAL_I2C_Master_Transmit+0x188>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800183c:	68fb      	ldr	r3, [r7, #12]
<<<<<<< HEAD
 800183e:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> 0207771 (switch changed to function array)
=======
 800183e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	@ 0x28
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
<<<<<<< HEAD
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	6a39      	ldr	r1, [r7, #32]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fa19 	bl	80022d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d107      	bne.n	8001ebc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e01a      	b.n	8001ef6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d194      	bne.n	8001df2 <HAL_I2C_Master_Transmit+0xe6>
=======
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	6a39      	ldr	r1, [r7, #32]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 fa19 	bl	8001c7c <I2C_WaitOnBTFFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00d      	beq.n	800186c <HAL_I2C_Master_Transmit+0x1b4>
=======
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	6a39      	ldr	r1, [r7, #32]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fa19 	bl	8001c84 <I2C_WaitOnBTFFlagUntilTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00d      	beq.n	8001874 <HAL_I2C_Master_Transmit+0x1b4>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	2b04      	cmp	r3, #4
 800185e:	d107      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800186e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e01a      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
<<<<<<< HEAD
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d194      	bne.n	800179e <HAL_I2C_Master_Transmit+0xe6>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d194      	bne.n	80017a6 <HAL_I2C_Master_Transmit+0xe6>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
<<<<<<< HEAD
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e000      	b.n	8001ef6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001882:	601a      	str	r2, [r3, #0]
=======
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800188a:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

    hi2c->State = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
<<<<<<< HEAD
 800189c:	2300      	movs	r3, #0
 800189e:	e000      	b.n	80018a2 <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 0207771 (switch changed to function array)
=======
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 8001ef4:	2302      	movs	r3, #2
  }
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	00100002 	.word	0x00100002
 8001f04:	ffff0000 	.word	0xffff0000

08001f08 <I2C_MasterRequestWrite>:
=======
 80018a0:	2302      	movs	r3, #2
=======
 80018a8:	2302      	movs	r3, #2
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	00100002 	.word	0x00100002
 80018b8:	ffff0000 	.word	0xffff0000

<<<<<<< HEAD
080018b4 <I2C_MasterRequestWrite>:
>>>>>>> 0207771 (switch changed to function array)
=======
080018bc <I2C_MasterRequestWrite>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	460b      	mov	r3, r1
 8001f16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d006      	beq.n	8001f32 <I2C_MasterRequestWrite+0x2a>
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d003      	beq.n	8001f32 <I2C_MasterRequestWrite+0x2a>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f30:	d108      	bne.n	8001f44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e00b      	b.n	8001f5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f48:	2b12      	cmp	r3, #18
 8001f4a:	d107      	bne.n	8001f5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f5a:	601a      	str	r2, [r3, #0]
=======
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	460b      	mov	r3, r1
 80018c2:	817b      	strh	r3, [r7, #10]
=======
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	817b      	strh	r3, [r7, #10]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d006      	beq.n	80018e6 <I2C_MasterRequestWrite+0x2a>
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d003      	beq.n	80018e6 <I2C_MasterRequestWrite+0x2a>
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018e4:	d108      	bne.n	80018f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e00b      	b.n	8001910 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fc:	2b12      	cmp	r3, #18
 80018fe:	d107      	bne.n	8001910 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
<<<<<<< HEAD
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001906:	601a      	str	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800190e:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
<<<<<<< HEAD
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f84f 	bl	800200c <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f82:	d103      	bne.n	8001f8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e035      	b.n	8001ffc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f98:	d108      	bne.n	8001fac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f9a:	897b      	ldrh	r3, [r7, #10]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	e01b      	b.n	8001fe4 <I2C_MasterRequestWrite+0xdc>
=======
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f84f 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00d      	beq.n	800193c <I2C_MasterRequestWrite+0x88>
=======
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f84f 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00d      	beq.n	8001944 <I2C_MasterRequestWrite+0x88>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001936:	d103      	bne.n	8001940 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e035      	b.n	80019b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800194c:	d108      	bne.n	8001960 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8001946:	897b      	ldrh	r3, [r7, #10]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	e01b      	b.n	8001990 <I2C_MasterRequestWrite+0xdc>
>>>>>>> 0207771 (switch changed to function array)
=======
 800194e:	897b      	ldrh	r3, [r7, #10]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	e01b      	b.n	8001998 <I2C_MasterRequestWrite+0xdc>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
<<<<<<< HEAD
 8001fac:	897b      	ldrh	r3, [r7, #10]
 8001fae:	11db      	asrs	r3, r3, #7
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f003 0306 	and.w	r3, r3, #6
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f063 030f 	orn	r3, r3, #15
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	490e      	ldr	r1, [pc, #56]	@ (8002004 <I2C_MasterRequestWrite+0xfc>)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f898 	bl	8002100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e010      	b.n	8001ffc <I2C_MasterRequestWrite+0xf4>
=======
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	11db      	asrs	r3, r3, #7
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f003 0306 	and.w	r3, r3, #6
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f063 030f 	orn	r3, r3, #15
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	611a      	str	r2, [r3, #16]
=======
 8001960:	897b      	ldrh	r3, [r7, #10]
 8001962:	11db      	asrs	r3, r3, #7
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f003 0306 	and.w	r3, r3, #6
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f063 030f 	orn	r3, r3, #15
 8001970:	b2da      	uxtb	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	611a      	str	r2, [r3, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	490e      	ldr	r1, [pc, #56]	@ (80019b8 <I2C_MasterRequestWrite+0xfc>)
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f898 	bl	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8001982:	2301      	movs	r3, #1
 8001984:	e010      	b.n	80019a8 <I2C_MasterRequestWrite+0xf4>
>>>>>>> 0207771 (switch changed to function array)
=======
 800198a:	2301      	movs	r3, #1
 800198c:	e010      	b.n	80019b0 <I2C_MasterRequestWrite+0xf4>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
<<<<<<< HEAD
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	611a      	str	r2, [r3, #16]
=======
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	611a      	str	r2, [r3, #16]
>>>>>>> 0207771 (switch changed to function array)
=======
 800198e:	897b      	ldrh	r3, [r7, #10]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	611a      	str	r2, [r3, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
<<<<<<< HEAD
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4907      	ldr	r1, [pc, #28]	@ (8002008 <I2C_MasterRequestWrite+0x100>)
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f888 	bl	8002100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	00010008 	.word	0x00010008
 8002008:	00010002 	.word	0x00010002

0800200c <I2C_WaitOnFlagUntilTimeout>:
=======
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4907      	ldr	r1, [pc, #28]	@ (80019b4 <I2C_MasterRequestWrite+0x100>)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f888 	bl	8001aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_MasterRequestWrite+0xf2>
=======
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4907      	ldr	r1, [pc, #28]	@ (80019bc <I2C_MasterRequestWrite+0x100>)
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f888 	bl	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <I2C_MasterRequestWrite+0xf2>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	00010008 	.word	0x00010008
 80019bc:	00010002 	.word	0x00010002

<<<<<<< HEAD
080019b8 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> 0207771 (switch changed to function array)
=======
080019c0 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	4613      	mov	r3, r2
 800201a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800201c:	e048      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d044      	beq.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002026:	f7ff fa79 	bl	800151c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d302      	bcc.n	800203c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d139      	bne.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	0c1b      	lsrs	r3, r3, #16
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d10d      	bne.n	8002062 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	43da      	mvns	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4013      	ands	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	e00c      	b.n	800207c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	429a      	cmp	r2, r3
 8002080:	d116      	bne.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	f043 0220 	orr.w	r2, r3, #32
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e023      	b.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10d      	bne.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	e00c      	b.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d093      	beq.n	800201e <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71fb      	strb	r3, [r7, #7]
=======
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71fb      	strb	r3, [r7, #7]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d0:	e048      	b.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d044      	beq.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7ff fa61 	bl	8000ea0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d139      	bne.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10d      	bne.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x56>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	43da      	mvns	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	e00c      	b.n	8001a30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4013      	ands	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d116      	bne.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e023      	b.n	8001aac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
<<<<<<< HEAD
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10d      	bne.n	8001a82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	e00c      	b.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d093      	beq.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d10d      	bne.n	8001a8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	43da      	mvns	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	e00c      	b.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4013      	ands	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d093      	beq.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 8001aa2:	2300      	movs	r3, #0
=======
 8001aaa:	2300      	movs	r3, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001aac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800210e:	e071      	b.n	80021f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800211e:	d123      	bne.n	8002168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800212e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	f043 0204 	orr.w	r2, r3, #4
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e067      	b.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
=======
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
=======
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ac2:	e071      	b.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d123      	bne.n	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f043 0204 	orr.w	r2, r3, #4
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
<<<<<<< HEAD
 8001b10:	2301      	movs	r3, #1
 8001b12:	e067      	b.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e067      	b.n	8001bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
<<<<<<< HEAD
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216e:	d041      	beq.n	80021f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002170:	f7ff f9d4 	bl	800151c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d302      	bcc.n	8002186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d136      	bne.n	80021f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	0c1b      	lsrs	r3, r3, #16
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10c      	bne.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4013      	ands	r3, r2
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	e00b      	b.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4013      	ands	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf14      	ite	ne
 80021bc:	2301      	movne	r3, #1
 80021be:	2300      	moveq	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e021      	b.n	8002238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10c      	bne.n	8002218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	43da      	mvns	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4013      	ands	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e00b      	b.n	8002230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4013      	ands	r3, r2
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f af6d 	bne.w	8002110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1a:	d041      	beq.n	8001ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
=======
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b22:	d041      	beq.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b24:	f7ff f9bc 	bl	8000ea0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d302      	bcc.n	8001b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d136      	bne.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10c      	bne.n	8001b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	e00b      	b.n	8001b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e021      	b.n	8001bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
<<<<<<< HEAD
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	0c1b      	lsrs	r3, r3, #16
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10c      	bne.n	8001bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	e00b      	b.n	8001bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f af6d 	bne.w	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	0c1b      	lsrs	r3, r3, #16
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10c      	bne.n	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e00b      	b.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f47f af6d 	bne.w	8001ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 8001be2:	2300      	movs	r3, #0
=======
 8001bea:	2300      	movs	r3, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001bec <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001bf4 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800224c:	e034      	b.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f886 	bl	8002360 <I2C_IsAcknowledgeFailed>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e034      	b.n	80022c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
=======
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
=======
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c00:	e034      	b.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f886 	bl	8001d14 <I2C_IsAcknowledgeFailed>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8001c06:	2301      	movs	r3, #1
 8001c08:	e034      	b.n	8001c74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e034      	b.n	8001c7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
<<<<<<< HEAD
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d028      	beq.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002266:	f7ff f959 	bl	800151c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	d302      	bcc.n	800227c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d11d      	bne.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002286:	2b80      	cmp	r3, #128	@ 0x80
 8002288:	d016      	beq.n	80022b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e007      	b.n	80022c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c2:	2b80      	cmp	r3, #128	@ 0x80
 80022c4:	d1c3      	bne.n	800224e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d028      	beq.n	8001c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
=======
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d028      	beq.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7ff f941 	bl	8000ea0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d11d      	bne.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3a:	2b80      	cmp	r3, #128	@ 0x80
 8001c3c:	d016      	beq.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
<<<<<<< HEAD
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b80      	cmp	r3, #128	@ 0x80
 8001c70:	d1c3      	bne.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c76:	2b80      	cmp	r3, #128	@ 0x80
 8001c78:	d1c3      	bne.n	8001c02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 8001c72:	2300      	movs	r3, #0
=======
 8001c7a:	2300      	movs	r3, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001c7c <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001c84 <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022dc:	e034      	b.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f83e 	bl	8002360 <I2C_IsAcknowledgeFailed>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e034      	b.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
=======
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
=======
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c90:	e034      	b.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f83e 	bl	8001d14 <I2C_IsAcknowledgeFailed>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
<<<<<<< HEAD
 8001c96:	2301      	movs	r3, #1
 8001c98:	e034      	b.n	8001d04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e034      	b.n	8001d0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
<<<<<<< HEAD
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d028      	beq.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7ff f911 	bl	800151c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11d      	bne.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b04      	cmp	r3, #4
 8002318:	d016      	beq.n	8002348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e007      	b.n	8002358 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d1c3      	bne.n	80022de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d028      	beq.n	8001cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
=======
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d028      	beq.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001caa:	f7ff f8f9 	bl	8000ea0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d302      	bcc.n	8001cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d11d      	bne.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d016      	beq.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f043 0220 	orr.w	r2, r3, #32
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e007      	b.n	8001d0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
<<<<<<< HEAD
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d1c3      	bne.n	8001c8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d1c3      	bne.n	8001c92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_IsAcknowledgeFailed>:
=======
 8001d02:	2300      	movs	r3, #0
=======
 8001d0a:	2300      	movs	r3, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08001d0c <I2C_IsAcknowledgeFailed>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001d14 <I2C_IsAcknowledgeFailed>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002376:	d11b      	bne.n	80023b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_RCC_OscConfig>:
=======
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
=======
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d2a:	d11b      	bne.n	8001d64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f043 0204 	orr.w	r2, r3, #4
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

<<<<<<< HEAD
08001d6c <HAL_RCC_OscConfig>:
>>>>>>> 0207771 (switch changed to function array)
=======
08001d74 <HAL_RCC_OscConfig>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
=======
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e267      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
=======
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e267      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e267      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
<<<<<<< HEAD
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d075      	beq.n	80024ca <HAL_RCC_OscConfig+0x10a>
=======
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d075      	beq.n	8001e76 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d075      	beq.n	8001e7e <HAL_RCC_OscConfig+0x10a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
<<<<<<< HEAD
<<<<<<< HEAD
 80023de:	4b88      	ldr	r3, [pc, #544]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d00c      	beq.n	8002404 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ea:	4b85      	ldr	r3, [pc, #532]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d112      	bne.n	800241c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023f6:	4b82      	ldr	r3, [pc, #520]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002402:	d10b      	bne.n	800241c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	4b7e      	ldr	r3, [pc, #504]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d05b      	beq.n	80024c8 <HAL_RCC_OscConfig+0x108>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d157      	bne.n	80024c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e242      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
=======
 8001d8a:	4b88      	ldr	r3, [pc, #544]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d00c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x44>
=======
 8001d92:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d00c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x44>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9e:	4b85      	ldr	r3, [pc, #532]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d112      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001daa:	4b82      	ldr	r3, [pc, #520]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001db6:	d10b      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d05b      	beq.n	8001e7c <HAL_RCC_OscConfig+0x108>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d157      	bne.n	8001e7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e242      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e242      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
<<<<<<< HEAD
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002424:	d106      	bne.n	8002434 <HAL_RCC_OscConfig+0x74>
 8002426:	4b76      	ldr	r3, [pc, #472]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a75      	ldr	r2, [pc, #468]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b70      	ldr	r3, [pc, #448]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a6f      	ldr	r2, [pc, #444]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b6d      	ldr	r3, [pc, #436]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a6c      	ldr	r2, [pc, #432]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xb0>
 8002458:	4b69      	ldr	r3, [pc, #420]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a68      	ldr	r2, [pc, #416]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b66      	ldr	r3, [pc, #408]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a65      	ldr	r2, [pc, #404]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002478:	f7ff f850 	bl	800151c <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff f84c 	bl	800151c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	@ 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e207      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b5b      	ldr	r3, [pc, #364]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xc0>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
=======
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x74>
 8001dd2:	4b76      	ldr	r3, [pc, #472]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a75      	ldr	r2, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xb0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x98>
 8001dea:	4b70      	ldr	r3, [pc, #448]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6f      	ldr	r2, [pc, #444]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6d      	ldr	r3, [pc, #436]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6c      	ldr	r2, [pc, #432]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xb0>
 8001e04:	4b69      	ldr	r3, [pc, #420]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a68      	ldr	r2, [pc, #416]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a65      	ldr	r2, [pc, #404]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]
=======
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd8:	d106      	bne.n	8001de8 <HAL_RCC_OscConfig+0x74>
 8001dda:	4b76      	ldr	r3, [pc, #472]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a75      	ldr	r2, [pc, #468]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0xb0>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x98>
 8001df2:	4b70      	ldr	r3, [pc, #448]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6f      	ldr	r2, [pc, #444]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6c      	ldr	r2, [pc, #432]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xb0>
 8001e0c:	4b69      	ldr	r3, [pc, #420]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a68      	ldr	r2, [pc, #416]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b66      	ldr	r3, [pc, #408]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a65      	ldr	r2, [pc, #404]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e22:	6013      	str	r3, [r2, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f838 	bl	8000ea0 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff f834 	bl	8000ea0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	@ 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e207      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
<<<<<<< HEAD
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xc0>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001e46:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xc0>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x10a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
<<<<<<< HEAD
 80024a0:	f7ff f83c 	bl	800151c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff f838 	bl	800151c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	@ 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e1f3      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b51      	ldr	r3, [pc, #324]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0xe8>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
=======
 8001e4c:	f7ff f824 	bl	8000e98 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]
=======
 8001e54:	f7ff f824 	bl	8000ea0 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f820 	bl	8000ea0 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	@ 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1f3      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	4b51      	ldr	r3, [pc, #324]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0xe8>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8001e74:	bf00      	nop
>>>>>>> 0207771 (switch changed to function array)
=======
 8001e7c:	bf00      	nop
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
<<<<<<< HEAD
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_OscConfig+0x1de>
=======
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
<<<<<<< HEAD
<<<<<<< HEAD
 80024d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e2:	4b47      	ldr	r3, [pc, #284]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ee:	4b44      	ldr	r3, [pc, #272]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x152>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1c7      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
=======
 8001e82:	4b4a      	ldr	r3, [pc, #296]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x13a>
=======
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x13a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e96:	4b47      	ldr	r3, [pc, #284]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea2:	4b44      	ldr	r3, [pc, #272]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	4b41      	ldr	r3, [pc, #260]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x152>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c7      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1c7      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
<<<<<<< HEAD
 8002512:	4b3b      	ldr	r3, [pc, #236]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4937      	ldr	r1, [pc, #220]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e03a      	b.n	800259e <HAL_RCC_OscConfig+0x1de>
=======
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4937      	ldr	r1, [pc, #220]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4937      	ldr	r1, [pc, #220]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< HEAD
<<<<<<< HEAD
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b34      	ldr	r3, [pc, #208]	@ (8002604 <HAL_RCC_OscConfig+0x244>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fff1 	bl	800151c <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253e:	f7fe ffed 	bl	800151c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1a8      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x17e>
=======
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1b2>
=======
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1b2>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <HAL_RCC_OscConfig+0x244>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe ffd9 	bl	8000ea0 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7fe ffd5 	bl	8000ea0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e1a8      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001efc:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x17e>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001f04:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x17e>
>>>>>>> c1d5507 (packet_list and sim800L alert)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
<<<<<<< HEAD
 800255c:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4925      	ldr	r1, [pc, #148]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e015      	b.n	800259e <HAL_RCC_OscConfig+0x1de>
=======
 8001f08:	4b28      	ldr	r3, [pc, #160]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4925      	ldr	r1, [pc, #148]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x1de>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001f10:	4b28      	ldr	r3, [pc, #160]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4925      	ldr	r1, [pc, #148]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x1de>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8002572:	4b24      	ldr	r3, [pc, #144]	@ (8002604 <HAL_RCC_OscConfig+0x244>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe ffd0 	bl	800151c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe ffcc 	bl	800151c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e187      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x1c0>
=======
 8001f1e:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <HAL_RCC_OscConfig+0x244>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
=======
 8001f26:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <HAL_RCC_OscConfig+0x244>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ffb8 	bl	8000ea0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7fe ffb4 	bl	8000ea0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e187      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
<<<<<<< HEAD
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001f46:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
<<<<<<< HEAD
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d036      	beq.n	8002618 <HAL_RCC_OscConfig+0x258>
=======
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d036      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x258>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d036      	beq.n	8001fcc <HAL_RCC_OscConfig+0x258>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< HEAD
<<<<<<< HEAD
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d016      	beq.n	80025e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b2:	4b15      	ldr	r3, [pc, #84]	@ (8002608 <HAL_RCC_OscConfig+0x248>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b8:	f7fe ffb0 	bl	800151c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c0:	f7fe ffac 	bl	800151c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e167      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_RCC_OscConfig+0x240>)
 80025d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x200>
 80025de:	e01b      	b.n	8002618 <HAL_RCC_OscConfig+0x258>
=======
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <HAL_RCC_OscConfig+0x220>
=======
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <HAL_RCC_OscConfig+0x220>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_RCC_OscConfig+0x248>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7fe ff98 	bl	8000ea0 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7fe ff94 	bl	8000ea0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e167      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
<<<<<<< HEAD
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_RCC_OscConfig+0x240>)
 8001f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x200>
 8001f8a:	e01b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x258>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_OscConfig+0x240>)
 8001f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x200>
 8001f92:	e01b      	b.n	8001fcc <HAL_RCC_OscConfig+0x258>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80025e0:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_OscConfig+0x248>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe ff99 	bl	800151c <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ec:	e00e      	b.n	800260c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ee:	f7fe ff95 	bl	800151c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d907      	bls.n	800260c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e150      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
 8002600:	40023800 	.word	0x40023800
 8002604:	42470000 	.word	0x42470000
 8002608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	4b88      	ldr	r3, [pc, #544]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ea      	bne.n	80025ee <HAL_RCC_OscConfig+0x22e>
=======
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_RCC_OscConfig+0x248>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
=======
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCC_OscConfig+0x248>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe ff81 	bl	8000ea0 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa0:	e00e      	b.n	8001fc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa2:	f7fe ff7d 	bl	8000ea0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d907      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e150      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470000 	.word	0x42470000
 8001fbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
<<<<<<< HEAD
 8001fb8:	4b88      	ldr	r3, [pc, #544]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8001fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ea      	bne.n	8001f9a <HAL_RCC_OscConfig+0x22e>
>>>>>>> 0207771 (switch changed to function array)
=======
 8001fc0:	4b88      	ldr	r3, [pc, #544]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ea      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x22e>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
<<<<<<< HEAD
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8097 	beq.w	8002754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
=======
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8097 	beq.w	8002100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 0207771 (switch changed to function array)
=======
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8097 	beq.w	8002108 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
<<<<<<< HEAD
 800262a:	4b81      	ldr	r3, [pc, #516]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10f      	bne.n	8002656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	4b7d      	ldr	r3, [pc, #500]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	4a7c      	ldr	r2, [pc, #496]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	@ 0x40
 8002646:	4b7a      	ldr	r3, [pc, #488]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002652:	2301      	movs	r3, #1
 8002654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002656:	4b77      	ldr	r3, [pc, #476]	@ (8002834 <HAL_RCC_OscConfig+0x474>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d118      	bne.n	8002694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002662:	4b74      	ldr	r3, [pc, #464]	@ (8002834 <HAL_RCC_OscConfig+0x474>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a73      	ldr	r2, [pc, #460]	@ (8002834 <HAL_RCC_OscConfig+0x474>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266e:	f7fe ff55 	bl	800151c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7fe ff51 	bl	800151c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e10c      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b6a      	ldr	r3, [pc, #424]	@ (8002834 <HAL_RCC_OscConfig+0x474>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x2b6>
=======
 8001fd6:	4b81      	ldr	r3, [pc, #516]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <HAL_RCC_OscConfig+0x296>
=======
 8001fde:	4b81      	ldr	r3, [pc, #516]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_RCC_OscConfig+0x296>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b7d      	ldr	r3, [pc, #500]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a7c      	ldr	r2, [pc, #496]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002006:	2301      	movs	r3, #1
 8002008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200a:	4b77      	ldr	r3, [pc, #476]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002012:	2b00      	cmp	r3, #0
 8002014:	d118      	bne.n	8002048 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002016:	4b74      	ldr	r3, [pc, #464]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a73      	ldr	r2, [pc, #460]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002022:	f7fe ff3d 	bl	8000ea0 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7fe ff39 	bl	8000ea0 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e10c      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
<<<<<<< HEAD
 8002034:	4b6a      	ldr	r3, [pc, #424]	@ (80021e0 <HAL_RCC_OscConfig+0x474>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> 0207771 (switch changed to function array)
=======
 800203c:	4b6a      	ldr	r3, [pc, #424]	@ (80021e8 <HAL_RCC_OscConfig+0x474>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x2b6>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
<<<<<<< HEAD
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d106      	bne.n	80026aa <HAL_RCC_OscConfig+0x2ea>
 800269c:	4b64      	ldr	r3, [pc, #400]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a0:	4a63      	ldr	r2, [pc, #396]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a8:	e01c      	b.n	80026e4 <HAL_RCC_OscConfig+0x324>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0x30c>
 80026b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026be:	4b5c      	ldr	r3, [pc, #368]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0x324>
 80026cc:	4b58      	ldr	r3, [pc, #352]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	4a57      	ldr	r2, [pc, #348]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d8:	4b55      	ldr	r3, [pc, #340]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026dc:	4a54      	ldr	r2, [pc, #336]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80026de:	f023 0304 	bic.w	r3, r3, #4
 80026e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe ff16 	bl	800151c <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f4:	f7fe ff12 	bl	800151c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0cb      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ee      	beq.n	80026f4 <HAL_RCC_OscConfig+0x334>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x382>
=======
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x2ea>
 8002048:	4b64      	ldr	r3, [pc, #400]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204c:	4a63      	ldr	r2, [pc, #396]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6713      	str	r3, [r2, #112]	@ 0x70
 8002054:	e01c      	b.n	8002090 <HAL_RCC_OscConfig+0x324>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b05      	cmp	r3, #5
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x30c>
 800205e:	4b5f      	ldr	r3, [pc, #380]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	4a5e      	ldr	r2, [pc, #376]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	@ 0x70
 800206a:	4b5c      	ldr	r3, [pc, #368]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	4a5b      	ldr	r2, [pc, #364]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6713      	str	r3, [r2, #112]	@ 0x70
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0x324>
 8002078:	4b58      	ldr	r3, [pc, #352]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207c:	4a57      	ldr	r2, [pc, #348]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	@ 0x70
 8002084:	4b55      	ldr	r3, [pc, #340]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002088:	4a54      	ldr	r2, [pc, #336]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	6713      	str	r3, [r2, #112]	@ 0x70
=======
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x2ea>
 8002050:	4b64      	ldr	r3, [pc, #400]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a63      	ldr	r2, [pc, #396]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
 800205c:	e01c      	b.n	8002098 <HAL_RCC_OscConfig+0x324>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x30c>
 8002066:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206a:	4a5e      	ldr	r2, [pc, #376]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6713      	str	r3, [r2, #112]	@ 0x70
 8002072:	4b5c      	ldr	r3, [pc, #368]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002076:	4a5b      	ldr	r2, [pc, #364]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6713      	str	r3, [r2, #112]	@ 0x70
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0x324>
 8002080:	4b58      	ldr	r3, [pc, #352]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002084:	4a57      	ldr	r2, [pc, #348]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	6713      	str	r3, [r2, #112]	@ 0x70
 800208c:	4b55      	ldr	r3, [pc, #340]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002090:	4a54      	ldr	r2, [pc, #336]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6713      	str	r3, [r2, #112]	@ 0x70
>>>>>>> c1d5507 (packet_list and sim800L alert)
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe fefe 	bl	8000ea0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe fefa 	bl	8000ea0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0cb      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
<<<<<<< HEAD
 80020b6:	4b49      	ldr	r3, [pc, #292]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ee      	beq.n	80020a0 <HAL_RCC_OscConfig+0x334>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x382>
>>>>>>> 0207771 (switch changed to function array)
=======
 80020be:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ee      	beq.n	80020a8 <HAL_RCC_OscConfig+0x334>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x382>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
<<<<<<< HEAD
 8002718:	f7fe ff00 	bl	800151c <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271e:	e00a      	b.n	8002736 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002720:	f7fe fefc 	bl	800151c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0b5      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002736:	4b3e      	ldr	r3, [pc, #248]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ee      	bne.n	8002720 <HAL_RCC_OscConfig+0x360>
=======
 80020c4:	f7fe fee8 	bl	8000e98 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]
=======
 80020cc:	f7fe fee8 	bl	8000ea0 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7fe fee4 	bl	8000ea0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0b5      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
<<<<<<< HEAD
 80020e2:	4b3e      	ldr	r3, [pc, #248]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ee      	bne.n	80020cc <HAL_RCC_OscConfig+0x360>
>>>>>>> 0207771 (switch changed to function array)
=======
 80020ea:	4b3e      	ldr	r3, [pc, #248]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ee      	bne.n	80020d4 <HAL_RCC_OscConfig+0x360>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
<<<<<<< HEAD
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d105      	bne.n	8002754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002748:	4b39      	ldr	r3, [pc, #228]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	4a38      	ldr	r2, [pc, #224]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002752:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 80020ee:	7dfb      	ldrb	r3, [r7, #23]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f4:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	4a38      	ldr	r2, [pc, #224]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80020fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020fe:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> 0207771 (switch changed to function array)
=======
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b39      	ldr	r3, [pc, #228]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	4a38      	ldr	r2, [pc, #224]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002106:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
<<<<<<< HEAD
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80a1 	beq.w	80028a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275e:	4b34      	ldr	r3, [pc, #208]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d05c      	beq.n	8002824 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d141      	bne.n	80027f6 <HAL_RCC_OscConfig+0x436>
=======
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a1 	beq.w	800224c <HAL_RCC_OscConfig+0x4e0>
=======
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a1 	beq.w	8002254 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002112:	4b34      	ldr	r3, [pc, #208]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d05c      	beq.n	80021d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
<<<<<<< HEAD
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d141      	bne.n	80021a2 <HAL_RCC_OscConfig+0x436>
>>>>>>> 0207771 (switch changed to function array)
=======
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d141      	bne.n	80021aa <HAL_RCC_OscConfig+0x436>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <HAL_RCC_OscConfig+0x478>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe fed0 	bl	800151c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7fe fecc 	bl	800151c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e087      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	4b27      	ldr	r3, [pc, #156]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x3c0>
=======
 800211e:	4b31      	ldr	r3, [pc, #196]	@ (80021e4 <HAL_RCC_OscConfig+0x478>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
=======
 8002126:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_RCC_OscConfig+0x478>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe feb8 	bl	8000ea0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe feb4 	bl	8000ea0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e087      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 800213e:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002146:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> c1d5507 (packet_list and sim800L alert)
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
<<<<<<< HEAD
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	019b      	lsls	r3, r3, #6
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	3b01      	subs	r3, #1
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	491b      	ldr	r1, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
=======
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	019b      	lsls	r3, r3, #6
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	041b      	lsls	r3, r3, #16
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	061b      	lsls	r3, r3, #24
 800216e:	491b      	ldr	r1, [pc, #108]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	041b      	lsls	r3, r3, #16
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	491b      	ldr	r1, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80027c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_RCC_OscConfig+0x478>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fea5 	bl	800151c <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7fe fea1 	bl	800151c <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e05c      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x416>
 80027f4:	e054      	b.n	80028a0 <HAL_RCC_OscConfig+0x4e0>
=======
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x478>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]
=======
 800217c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_RCC_OscConfig+0x478>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7fe fe8d 	bl	8000ea0 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218a:	f7fe fe89 	bl	8000ea0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e05c      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
<<<<<<< HEAD
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x416>
 80021a0:	e054      	b.n	800224c <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 0207771 (switch changed to function array)
=======
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x416>
 80021a8:	e054      	b.n	8002254 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
<<<<<<< HEAD
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <HAL_RCC_OscConfig+0x478>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe fe8e 	bl	800151c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fe8a 	bl	800151c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e045      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_RCC_OscConfig+0x470>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x444>
 8002822:	e03d      	b.n	80028a0 <HAL_RCC_OscConfig+0x4e0>
=======
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <HAL_RCC_OscConfig+0x478>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
=======
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_RCC_OscConfig+0x478>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b0:	f7fe fe76 	bl	8000ea0 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7fe fe72 	bl	8000ea0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e045      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
<<<<<<< HEAD
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_RCC_OscConfig+0x470>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x444>
 80021ce:	e03d      	b.n	800224c <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 0207771 (switch changed to function array)
=======
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_OscConfig+0x470>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x444>
 80021d6:	e03d      	b.n	8002254 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
<<<<<<< HEAD
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e038      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
 8002830:	40023800 	.word	0x40023800
 8002834:	40007000 	.word	0x40007000
 8002838:	42470060 	.word	0x42470060
=======
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e038      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42470060 	.word	0x42470060
>>>>>>> 0207771 (switch changed to function array)
=======
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e038      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000
 80021ec:	42470060 	.word	0x42470060
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
<<<<<<< HEAD
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x4ec>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	60fb      	str	r3, [r7, #12]
=======
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_OscConfig+0x4ec>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
>>>>>>> 0207771 (switch changed to function array)
=======
 80021f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002260 <HAL_RCC_OscConfig+0x4ec>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60fb      	str	r3, [r7, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
<<<<<<< HEAD
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d028      	beq.n	800289c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d121      	bne.n	800289c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d11a      	bne.n	800289c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800286c:	4013      	ands	r3, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002874:	4293      	cmp	r3, r2
 8002876:	d111      	bne.n	800289c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d107      	bne.n	800289c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x4e2>
=======
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d028      	beq.n	8002248 <HAL_RCC_OscConfig+0x4dc>
=======
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d028      	beq.n	8002250 <HAL_RCC_OscConfig+0x4dc>
>>>>>>> c1d5507 (packet_list and sim800L alert)
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d121      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d11a      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002220:	4013      	ands	r3, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002226:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002228:	4293      	cmp	r3, r2
 800222a:	d111      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	3b01      	subs	r3, #1
 800223a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d107      	bne.n	8002250 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
<<<<<<< HEAD
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> c1d5507 (packet_list and sim800L alert)
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
<<<<<<< HEAD
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_RCC_ClockConfig>:
=======
 800224c:	2300      	movs	r3, #0
=======
 8002254:	2300      	movs	r3, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

<<<<<<< HEAD
0800225c <HAL_RCC_ClockConfig>:
>>>>>>> 0207771 (switch changed to function array)
=======
08002264 <HAL_RCC_ClockConfig>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
<<<<<<< HEAD
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
=======
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
<<<<<<< HEAD
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0cc      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cc      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0207771 (switch changed to function array)
=======
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0cc      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
<<<<<<< HEAD
 80028c4:	4b68      	ldr	r3, [pc, #416]	@ (8002a68 <HAL_RCC_ClockConfig+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d90c      	bls.n	80028ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b65      	ldr	r3, [pc, #404]	@ (8002a68 <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
=======
 8002270:	4b68      	ldr	r3, [pc, #416]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d90c      	bls.n	8002298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b65      	ldr	r3, [pc, #404]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002278:	4b68      	ldr	r3, [pc, #416]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d90c      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b65      	ldr	r3, [pc, #404]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
<<<<<<< HEAD
 80028da:	4b63      	ldr	r3, [pc, #396]	@ (8002a68 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0b8      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002286:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b8      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0207771 (switch changed to function array)
=======
 800228e:	4b63      	ldr	r3, [pc, #396]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
<<<<<<< HEAD
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d020      	beq.n	800293a <HAL_RCC_ClockConfig+0x8a>
=======
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 0207771 (switch changed to function array)
=======
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_ClockConfig+0x8a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
<<<<<<< HEAD
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002904:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a58      	ldr	r2, [pc, #352]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800290e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a52      	ldr	r2, [pc, #328]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002926:	6093      	str	r3, [r2, #8]
=======
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x60>
=======
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x60>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a58      	ldr	r2, [pc, #352]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
<<<<<<< HEAD
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a52      	ldr	r2, [pc, #328]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022d2:	6093      	str	r3, [r2, #8]
>>>>>>> 0207771 (switch changed to function array)
=======
 80022d0:	4b53      	ldr	r3, [pc, #332]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a52      	ldr	r2, [pc, #328]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022da:	6093      	str	r3, [r2, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
<<<<<<< HEAD
 8002928:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	494d      	ldr	r1, [pc, #308]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
=======
 80022d4:	4b50      	ldr	r3, [pc, #320]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	494d      	ldr	r1, [pc, #308]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
>>>>>>> 0207771 (switch changed to function array)
=======
 80022dc:	4b50      	ldr	r3, [pc, #320]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	494d      	ldr	r1, [pc, #308]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
<<<<<<< HEAD
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d044      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x120>
=======
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d044      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
>>>>>>> 0207771 (switch changed to function array)
=======
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d044      	beq.n	8002384 <HAL_RCC_ClockConfig+0x120>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
<<<<<<< HEAD
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b47      	ldr	r3, [pc, #284]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d119      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e07f      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ae>
=======
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xae>
=======
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_RCC_ClockConfig+0xae>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b47      	ldr	r3, [pc, #284]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d119      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002306:	2301      	movs	r3, #1
 8002308:	e07f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0207771 (switch changed to function array)
=======
 800230e:	2301      	movs	r3, #1
 8002310:	e07f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
<<<<<<< HEAD
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d003      	beq.n	800296e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296a:	2b03      	cmp	r3, #3
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e06f      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ae>
=======
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d003      	beq.n	800231a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
=======
>>>>>>> c1d5507 (packet_list and sim800L alert)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d003      	beq.n	8002322 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231e:	2b03      	cmp	r3, #3
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	4b3f      	ldr	r3, [pc, #252]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8002326:	2301      	movs	r3, #1
 8002328:	e06f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0207771 (switch changed to function array)
=======
 800232e:	2301      	movs	r3, #1
 8002330:	e06f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 800297e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e067      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ae>
=======
 800232a:	4b3b      	ldr	r3, [pc, #236]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e067      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002332:	4b3b      	ldr	r3, [pc, #236]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e067      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
<<<<<<< HEAD
 800298e:	4b37      	ldr	r3, [pc, #220]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4934      	ldr	r1, [pc, #208]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	4313      	orrs	r3, r2
 800299e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fdbc 	bl	800151c <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fdb8 	bl	800151c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e04f      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xf8>
=======
 800233a:	4b37      	ldr	r3, [pc, #220]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4934      	ldr	r1, [pc, #208]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
=======
 8002342:	4b37      	ldr	r3, [pc, #220]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4934      	ldr	r1, [pc, #208]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002354:	f7fe fda4 	bl	8000ea0 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7fe fda0 	bl	8000ea0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e04f      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
<<<<<<< HEAD
 800236a:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002372:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
<<<<<<< HEAD
 80029d0:	4b25      	ldr	r3, [pc, #148]	@ (8002a68 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d20c      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b22      	ldr	r3, [pc, #136]	@ (8002a68 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
=======
 800237c:	4b25      	ldr	r3, [pc, #148]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d20c      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002384:	4b25      	ldr	r3, [pc, #148]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d20c      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b22      	ldr	r3, [pc, #136]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
<<<<<<< HEAD
 80029e6:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e032      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1ae>
=======
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e032      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 0207771 (switch changed to function array)
=======
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e032      	b.n	8002412 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
<<<<<<< HEAD
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b19      	ldr	r3, [pc, #100]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4916      	ldr	r1, [pc, #88]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
=======
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4916      	ldr	r1, [pc, #88]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
>>>>>>> 0207771 (switch changed to function array)
=======
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4916      	ldr	r1, [pc, #88]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
<<<<<<< HEAD
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	490e      	ldr	r1, [pc, #56]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
=======
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490e      	ldr	r1, [pc, #56]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
>>>>>>> 0207771 (switch changed to function array)
=======
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	490e      	ldr	r1, [pc, #56]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
<<<<<<< HEAD
 8002a36:	f000 f821 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	490a      	ldr	r1, [pc, #40]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	5ccb      	ldrb	r3, [r1, r3]
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a52:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_RCC_ClockConfig+0x1c8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fd1c 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023c00 	.word	0x40023c00
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	08005394 	.word	0x08005394
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_RCC_GetSysClockFreq>:
=======
 80023e2:	f000 f821 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	490a      	ldr	r1, [pc, #40]	@ (800241c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a09      	ldr	r2, [pc, #36]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	6013      	str	r3, [r2, #0]
=======
 80023ea:	f000 f821 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	490a      	ldr	r1, [pc, #40]	@ (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	5ccb      	ldrb	r3, [r1, r3]
 80023fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002402:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	6013      	str	r3, [r2, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fd04 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00
 8002420:	40023800 	.word	0x40023800
 8002424:	08005440 	.word	0x08005440
 8002428:	20000004 	.word	0x20000004
 800242c:	20000008 	.word	0x20000008

<<<<<<< HEAD
08002428 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 0207771 (switch changed to function array)
=======
08002430 <HAL_RCC_GetSysClockFreq>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a80:	b090      	sub	sp, #64	@ 0x40
 8002a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a94:	4b59      	ldr	r3, [pc, #356]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 030c 	and.w	r3, r3, #12
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d00d      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x40>
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	f200 80a1 	bhi.w	8002be8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aae:	e09b      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x16c>
=======
 8002428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800242c:	b090      	sub	sp, #64	@ 0x40
 800242e:	af00      	add	r7, sp, #0
=======
 8002430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002434:	b090      	sub	sp, #64	@ 0x40
 8002436:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  uint32_t pllm = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 8002440:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d00d      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x40>
 800244c:	2b08      	cmp	r3, #8
 800244e:	f200 80a1 	bhi.w	8002594 <HAL_RCC_GetSysClockFreq+0x16c>
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x34>
 8002456:	2b04      	cmp	r3, #4
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x3a>
 800245a:	e09b      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002448:	4b59      	ldr	r3, [pc, #356]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d00d      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x40>
 8002454:	2b08      	cmp	r3, #8
 8002456:	f200 80a1 	bhi.w	800259c <HAL_RCC_GetSysClockFreq+0x16c>
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x34>
 800245e:	2b04      	cmp	r3, #4
 8002460:	d003      	beq.n	800246a <HAL_RCC_GetSysClockFreq+0x3a>
 8002462:	e09b      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x16c>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ab4:	e09b      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x172>
=======
 800245c:	4b53      	ldr	r3, [pc, #332]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x184>)
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002460:	e09b      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002466:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002468:	e09b      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8002ab6:	4b53      	ldr	r3, [pc, #332]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aba:	e098      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x172>
=======
 8002462:	4b53      	ldr	r3, [pc, #332]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002466:	e098      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 0207771 (switch changed to function array)
=======
 800246a:	4b53      	ldr	r3, [pc, #332]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800246c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800246e:	e098      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
<<<<<<< HEAD
 8002abc:	4b4f      	ldr	r3, [pc, #316]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ac4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d028      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	2200      	movs	r2, #0
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4b47      	ldr	r3, [pc, #284]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae8:	fb03 f201 	mul.w	r2, r3, r1
 8002aec:	2300      	movs	r3, #0
 8002aee:	fb00 f303 	mul.w	r3, r0, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	4a43      	ldr	r2, [pc, #268]	@ (8002c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af6:	fba0 1202 	umull	r1, r2, r0, r2
 8002afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002afc:	460a      	mov	r2, r1
 8002afe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b02:	4413      	add	r3, r2
 8002b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b08:	2200      	movs	r2, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	61fa      	str	r2, [r7, #28]
 8002b0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b16:	f7fd fbbb 	bl	8000290 <__aeabi_uldivmod>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4613      	mov	r3, r2
 8002b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b22:	e053      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x150>
=======
 8002468:	4b4f      	ldr	r3, [pc, #316]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002470:	637b      	str	r3, [r7, #52]	@ 0x34
=======
 8002470:	4b4f      	ldr	r3, [pc, #316]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002478:	637b      	str	r3, [r7, #52]	@ 0x34
>>>>>>> c1d5507 (packet_list and sim800L alert)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800247a:	4b4d      	ldr	r3, [pc, #308]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 800247e:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	2200      	movs	r2, #0
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	627a      	str	r2, [r7, #36]	@ 0x24
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002490:	2100      	movs	r1, #0
 8002492:	4b47      	ldr	r3, [pc, #284]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002494:	fb03 f201 	mul.w	r2, r3, r1
 8002498:	2300      	movs	r3, #0
 800249a:	fb00 f303 	mul.w	r3, r0, r3
 800249e:	4413      	add	r3, r2
 80024a0:	4a43      	ldr	r2, [pc, #268]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80024a2:	fba0 1202 	umull	r1, r2, r0, r2
 80024a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024a8:	460a      	mov	r2, r1
 80024aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ae:	4413      	add	r3, r2
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	2200      	movs	r2, #0
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	61fa      	str	r2, [r7, #28]
 80024ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024c2:	f7fd fef5 	bl	80002b0 <__aeabi_uldivmod>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4613      	mov	r3, r2
 80024cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ce:	e053      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	2200      	movs	r2, #0
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	627a      	str	r2, [r7, #36]	@ 0x24
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002498:	2100      	movs	r1, #0
 800249a:	4b47      	ldr	r3, [pc, #284]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800249c:	fb03 f201 	mul.w	r2, r3, r1
 80024a0:	2300      	movs	r3, #0
 80024a2:	fb00 f303 	mul.w	r3, r0, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	4a43      	ldr	r2, [pc, #268]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024aa:	fba0 1202 	umull	r1, r2, r0, r2
 80024ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024b0:	460a      	mov	r2, r1
 80024b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024b6:	4413      	add	r3, r2
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024bc:	2200      	movs	r2, #0
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	61fa      	str	r2, [r7, #28]
 80024c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024ca:	f7fd fef1 	bl	80002b0 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4613      	mov	r3, r2
 80024d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024d6:	e053      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
<<<<<<< HEAD
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	617a      	str	r2, [r7, #20]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b36:	f04f 0b00 	mov.w	fp, #0
 8002b3a:	4652      	mov	r2, sl
 8002b3c:	465b      	mov	r3, fp
 8002b3e:	f04f 0000 	mov.w	r0, #0
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	0159      	lsls	r1, r3, #5
 8002b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b4c:	0150      	lsls	r0, r2, #5
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	ebb2 080a 	subs.w	r8, r2, sl
 8002b56:	eb63 090b 	sbc.w	r9, r3, fp
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b6e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b72:	eb63 0509 	sbc.w	r5, r3, r9
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	00eb      	lsls	r3, r5, #3
 8002b80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b84:	00e2      	lsls	r2, r4, #3
 8002b86:	4614      	mov	r4, r2
 8002b88:	461d      	mov	r5, r3
 8002b8a:	eb14 030a 	adds.w	r3, r4, sl
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	eb45 030b 	adc.w	r3, r5, fp
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	028b      	lsls	r3, r1, #10
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bac:	4621      	mov	r1, r4
 8002bae:	028a      	lsls	r2, r1, #10
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	60fa      	str	r2, [r7, #12]
 8002bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc0:	f7fd fb66 	bl	8000290 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002be6:	e002      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x172>
=======
 80024d0:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	2200      	movs	r2, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	617a      	str	r2, [r7, #20]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024e2:	f04f 0b00 	mov.w	fp, #0
 80024e6:	4652      	mov	r2, sl
 80024e8:	465b      	mov	r3, fp
 80024ea:	f04f 0000 	mov.w	r0, #0
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	0159      	lsls	r1, r3, #5
 80024f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f8:	0150      	lsls	r0, r2, #5
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002502:	eb63 090b 	sbc.w	r9, r3, fp
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	f04f 0300 	mov.w	r3, #0
 800250e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800251a:	ebb2 0408 	subs.w	r4, r2, r8
 800251e:	eb63 0509 	sbc.w	r5, r3, r9
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	00eb      	lsls	r3, r5, #3
 800252c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002530:	00e2      	lsls	r2, r4, #3
 8002532:	4614      	mov	r4, r2
 8002534:	461d      	mov	r5, r3
 8002536:	eb14 030a 	adds.w	r3, r4, sl
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	eb45 030b 	adc.w	r3, r5, fp
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	f04f 0300 	mov.w	r3, #0
 800254a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254e:	4629      	mov	r1, r5
 8002550:	028b      	lsls	r3, r1, #10
 8002552:	4621      	mov	r1, r4
 8002554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002558:	4621      	mov	r1, r4
 800255a:	028a      	lsls	r2, r1, #10
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002562:	2200      	movs	r2, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800256c:	f7fd fea0 	bl	80002b0 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4613      	mov	r3, r2
 8002576:	63fb      	str	r3, [r7, #60]	@ 0x3c
=======
 80024d8:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	2200      	movs	r2, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	617a      	str	r2, [r7, #20]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ea:	f04f 0b00 	mov.w	fp, #0
 80024ee:	4652      	mov	r2, sl
 80024f0:	465b      	mov	r3, fp
 80024f2:	f04f 0000 	mov.w	r0, #0
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	0159      	lsls	r1, r3, #5
 80024fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002500:	0150      	lsls	r0, r2, #5
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	ebb2 080a 	subs.w	r8, r2, sl
 800250a:	eb63 090b 	sbc.w	r9, r3, fp
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800251a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800251e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002522:	ebb2 0408 	subs.w	r4, r2, r8
 8002526:	eb63 0509 	sbc.w	r5, r3, r9
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	00eb      	lsls	r3, r5, #3
 8002534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002538:	00e2      	lsls	r2, r4, #3
 800253a:	4614      	mov	r4, r2
 800253c:	461d      	mov	r5, r3
 800253e:	eb14 030a 	adds.w	r3, r4, sl
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	eb45 030b 	adc.w	r3, r5, fp
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002556:	4629      	mov	r1, r5
 8002558:	028b      	lsls	r3, r1, #10
 800255a:	4621      	mov	r1, r4
 800255c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002560:	4621      	mov	r1, r4
 8002562:	028a      	lsls	r2, r1, #10
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256a:	2200      	movs	r2, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002574:	f7fd fe9c 	bl	80002b0 <__aeabi_uldivmod>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4613      	mov	r3, r2
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
>>>>>>> c1d5507 (packet_list and sim800L alert)
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
<<<<<<< HEAD
 8002592:	e002      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> 0207771 (switch changed to function array)
=======
 800259a:	e002      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x172>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
<<<<<<< HEAD
 8002be8:	4b05      	ldr	r3, [pc, #20]	@ (8002c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3740      	adds	r7, #64	@ 0x40
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	017d7840 	.word	0x017d7840

08002c08 <HAL_RCC_GetHCLKFreq>:
=======
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002596:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800259e:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> c1d5507 (packet_list and sim800L alert)
      break;
 80025a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3740      	adds	r7, #64	@ 0x40
 80025a8:	46bd      	mov	sp, r7
 80025aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	017d7840 	.word	0x017d7840

<<<<<<< HEAD
080025b4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 0207771 (switch changed to function array)
=======
080025bc <HAL_RCC_GetHCLKFreq>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000000 	.word	0x20000000

08002c20 <HAL_RCC_GetPCLK1Freq>:
=======
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
=======
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  return SystemCoreClock;
 80025c0:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000004 	.word	0x20000004

<<<<<<< HEAD
080025cc <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 0207771 (switch changed to function array)
=======
080025d4 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c24:	f7ff fff0 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0a9b      	lsrs	r3, r3, #10
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	@ (8002c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	080053a4 	.word	0x080053a4

08002c48 <HAL_RCC_GetPCLK2Freq>:
=======
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
=======
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d8:	f7ff fff0 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0a9b      	lsrs	r3, r3, #10
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	08005450 	.word	0x08005450

<<<<<<< HEAD
080025f4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 0207771 (switch changed to function array)
=======
080025fc <HAL_RCC_GetPCLK2Freq>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c4c:	f7ff ffdc 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0b5b      	lsrs	r3, r3, #13
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	@ (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	080053a4 	.word	0x080053a4

08002c70 <HAL_SPI_Init>:
=======
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
=======
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002600:	f7ff ffdc 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0b5b      	lsrs	r3, r3, #13
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	@ (8002620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	08005450 	.word	0x08005450

<<<<<<< HEAD
0800261c <HAL_SPI_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
08002624 <HAL_SPI_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07b      	b.n	8002d7a <HAL_SPI_Init+0x10a>
=======
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
=======
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800262a:	2301      	movs	r3, #1
 800262c:	e07b      	b.n	8002726 <HAL_SPI_Init+0x10a>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002632:	2301      	movs	r3, #1
 8002634:	e07b      	b.n	800272e <HAL_SPI_Init+0x10a>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
<<<<<<< HEAD
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_SPI_Init+0x2c>
=======
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_SPI_Init+0x2c>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_SPI_Init+0x2c>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
<<<<<<< HEAD
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c92:	d009      	beq.n	8002ca8 <HAL_SPI_Init+0x38>
=======
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800263e:	d009      	beq.n	8002654 <HAL_SPI_Init+0x38>
>>>>>>> 0207771 (switch changed to function array)
=======
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002646:	d009      	beq.n	800265c <HAL_SPI_Init+0x38>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
<<<<<<< HEAD
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
 8002c9a:	e005      	b.n	8002ca8 <HAL_SPI_Init+0x38>
=======
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
 8002646:	e005      	b.n	8002654 <HAL_SPI_Init+0x38>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
 800264e:	e005      	b.n	800265c <HAL_SPI_Init+0x38>
>>>>>>> c1d5507 (packet_list and sim800L alert)
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
<<<<<<< HEAD
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
=======
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
<<<<<<< HEAD
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
=======
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28
=======
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
<<<<<<< HEAD
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
>>>>>>> 0207771 (switch changed to function array)
=======
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
<<<<<<< HEAD
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fa42 	bl	800114c <HAL_SPI_MspInit>
=======
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fa2a 	bl	8000ac8 <HAL_SPI_MspInit>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fa2a 	bl	8000ad0 <HAL_SPI_MspInit>
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cde:	601a      	str	r2, [r3, #0]
=======
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800268a:	601a      	str	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002692:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
<<<<<<< HEAD
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
=======
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 7282 	and.w	r2, r3, #260	@ 0x104
=======
>>>>>>> c1d5507 (packet_list and sim800L alert)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e0:	ea42 0103 	orr.w	r1, r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
<<<<<<< HEAD
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
>>>>>>> 0207771 (switch changed to function array)
=======
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]
>>>>>>> c1d5507 (packet_list and sim800L alert)
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
<<<<<<< HEAD
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0104 	and.w	r1, r3, #4
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	f003 0210 	and.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
=======
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0104 	and.w	r1, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	f003 0210 	and.w	r2, r3, #16
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
>>>>>>> 0207771 (switch changed to function array)
=======
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0104 	and.w	r1, r3, #4
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	f003 0210 	and.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
<<<<<<< HEAD
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b088      	sub	sp, #32
 8002d86:	af02      	add	r7, sp, #8
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e104      	b.n	8002fac <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_Receive+0x2c>
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0fc      	b.n	8002fac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dba:	d112      	bne.n	8002de2 <HAL_SPI_Receive+0x60>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10e      	bne.n	8002de2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f8eb 	bl	8002fb4 <HAL_SPI_TransmitReceive>
 8002dde:	4603      	mov	r3, r0
 8002de0:	e0e4      	b.n	8002fac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de2:	f7fe fb9b 	bl	800151c <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_SPI_Receive+0x74>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0da      	b.n	8002fac <HAL_SPI_Receive+0x22a>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2204      	movs	r2, #4
 8002e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e44:	d10f      	bne.n	8002e66 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b40      	cmp	r3, #64	@ 0x40
 8002e72:	d007      	beq.n	8002e84 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d170      	bne.n	8002f6e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e8c:	e035      	b.n	8002efa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d115      	bne.n	8002ec8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f103 020c 	add.w	r2, r3, #12
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea8:	7812      	ldrb	r2, [r2, #0]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ec6:	e018      	b.n	8002efa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec8:	f7fe fb28 	bl	800151c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d803      	bhi.n	8002ee0 <HAL_SPI_Receive+0x15e>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d102      	bne.n	8002ee6 <HAL_SPI_Receive+0x164>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e058      	b.n	8002fac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1c4      	bne.n	8002e8e <HAL_SPI_Receive+0x10c>
 8002f04:	e038      	b.n	8002f78 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d113      	bne.n	8002f3c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	1c9a      	adds	r2, r3, #2
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f3a:	e018      	b.n	8002f6e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3c:	f7fe faee 	bl	800151c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d803      	bhi.n	8002f54 <HAL_SPI_Receive+0x1d2>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d102      	bne.n	8002f5a <HAL_SPI_Receive+0x1d8>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e01e      	b.n	8002fac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1c6      	bne.n	8002f06 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6839      	ldr	r1, [r7, #0]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa4b 	bl	8003418 <SPI_EndRxTransaction>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002faa:	2300      	movs	r3, #0
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc6:	f7fe faa9 	bl	800151c <HAL_GetTick>
 8002fca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fd2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d00c      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x4a>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fea:	d106      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x46>
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d001      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e17f      	b.n	80032fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x5c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x5c>
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e174      	b.n	80032fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x6e>
 800301e:	2302      	movs	r3, #2
 8003020:	e16d      	b.n	80032fe <HAL_SPI_TransmitReceive+0x34a>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b04      	cmp	r3, #4
 8003034:	d003      	beq.n	800303e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2205      	movs	r2, #5
 800303a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307e:	2b40      	cmp	r3, #64	@ 0x40
 8003080:	d007      	beq.n	8003092 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800309a:	d17e      	bne.n	800319a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_SPI_TransmitReceive+0xf6>
 80030a4:	8afb      	ldrh	r3, [r7, #22]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d16c      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	1c9a      	adds	r2, r3, #2
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ce:	e059      	b.n	8003184 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11b      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x162>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x162>
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d113      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	881a      	ldrh	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	1c9a      	adds	r2, r3, #2
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d119      	bne.n	8003158 <HAL_SPI_TransmitReceive+0x1a4>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d014      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	b292      	uxth	r2, r2
 800313a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003154:	2301      	movs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003158:	f7fe f9e0 	bl	800151c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003164:	429a      	cmp	r2, r3
 8003166:	d80d      	bhi.n	8003184 <HAL_SPI_TransmitReceive+0x1d0>
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d009      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e0bc      	b.n	80032fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1a0      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x11c>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d19b      	bne.n	80030d0 <HAL_SPI_TransmitReceive+0x11c>
 8003198:	e082      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x1f4>
 80031a2:	8afb      	ldrh	r3, [r7, #22]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d171      	bne.n	800328c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	7812      	ldrb	r2, [r2, #0]
 80031b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ce:	e05d      	b.n	800328c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d11c      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x264>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d017      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x264>
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d114      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d119      	bne.n	800325a <HAL_SPI_TransmitReceive+0x2a6>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003256:	2301      	movs	r3, #1
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800325a:	f7fe f95f 	bl	800151c <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003266:	429a      	cmp	r2, r3
 8003268:	d803      	bhi.n	8003272 <HAL_SPI_TransmitReceive+0x2be>
 800326a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d102      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x2c4>
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e038      	b.n	80032fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d19c      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x21c>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d197      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 f91d 	bl	80034e4 <SPI_EndRxTxTransaction>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e01d      	b.n	80032fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
  }
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3728      	adds	r7, #40	@ 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003318:	f7fe f900 	bl	800151c <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	4413      	add	r3, r2
 8003326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003328:	f7fe f8f8 	bl	800151c <HAL_GetTick>
 800332c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800332e:	4b39      	ldr	r3, [pc, #228]	@ (8003414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	015b      	lsls	r3, r3, #5
 8003334:	0d1b      	lsrs	r3, r3, #20
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800333e:	e055      	b.n	80033ec <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d051      	beq.n	80033ec <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003348:	f7fe f8e8 	bl	800151c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	d902      	bls.n	800335e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d13d      	bne.n	80033da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800336c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003376:	d111      	bne.n	800339c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003380:	d004      	beq.n	800338c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338a:	d107      	bne.n	800339c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800339a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033a4:	d10f      	bne.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e018      	b.n	800340c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	e002      	b.n	80033ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	429a      	cmp	r2, r3
 8003408:	d19a      	bne.n	8003340 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000000 	.word	0x20000000

08003418 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800342c:	d111      	bne.n	8003452 <SPI_EndRxTransaction+0x3a>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003436:	d004      	beq.n	8003442 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003440:	d107      	bne.n	8003452 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003450:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800345a:	d12a      	bne.n	80034b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003464:	d012      	beq.n	800348c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	@ 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff ff49 	bl	8003308 <SPI_WaitFlagStateUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02d      	beq.n	80034d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e026      	b.n	80034da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	2101      	movs	r1, #1
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff ff36 	bl	8003308 <SPI_WaitFlagStateUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d01a      	beq.n	80034d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a6:	f043 0220 	orr.w	r2, r3, #32
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e013      	b.n	80034da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2101      	movs	r1, #1
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff ff23 	bl	8003308 <SPI_WaitFlagStateUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d007      	beq.n	80034d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e000      	b.n	80034da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2201      	movs	r2, #1
 80034f8:	2102      	movs	r1, #2
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff04 	bl	8003308 <SPI_WaitFlagStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e032      	b.n	800357c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003516:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <SPI_EndRxTxTransaction+0xa0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1b      	ldr	r2, [pc, #108]	@ (8003588 <SPI_EndRxTxTransaction+0xa4>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	0d5b      	lsrs	r3, r3, #21
 8003522:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003534:	d112      	bne.n	800355c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2200      	movs	r2, #0
 800353e:	2180      	movs	r1, #128	@ 0x80
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff fee1 	bl	8003308 <SPI_WaitFlagStateUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d016      	beq.n	800357a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e00f      	b.n	800357c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3b01      	subs	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003572:	2b80      	cmp	r3, #128	@ 0x80
 8003574:	d0f2      	beq.n	800355c <SPI_EndRxTxTransaction+0x78>
 8003576:	e000      	b.n	800357a <SPI_EndRxTxTransaction+0x96>
        break;
 8003578:	bf00      	nop
  }

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000000 	.word	0x20000000
 8003588:	165e9f81 	.word	0x165e9f81

0800358c <HAL_UART_Init>:
=======
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002714:	61da      	str	r2, [r3, #28]
=======
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800271c:	61da      	str	r2, [r3, #28]
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
0800272e <HAL_UART_Init>:
>>>>>>> 0207771 (switch changed to function array)
=======
08002736 <HAL_UART_Init>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e042      	b.n	8003624 <HAL_UART_Init+0x98>
=======
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
=======
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
<<<<<<< HEAD
 800273c:	2301      	movs	r3, #1
 800273e:	e042      	b.n	80027c6 <HAL_UART_Init+0x98>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002744:	2301      	movs	r3, #1
 8002746:	e042      	b.n	80027ce <HAL_UART_Init+0x98>
>>>>>>> c1d5507 (packet_list and sim800L alert)
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
<<<<<<< HEAD
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> 0207771 (switch changed to function array)
=======
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> c1d5507 (packet_list and sim800L alert)

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
<<<<<<< HEAD
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fe12 	bl	80011dc <HAL_UART_MspInit>
=======
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe f9ff 	bl	8000b58 <HAL_UART_MspInit>
>>>>>>> 0207771 (switch changed to function array)
=======
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fe f9ff 	bl	8000b60 <HAL_UART_MspInit>
>>>>>>> c1d5507 (packet_list and sim800L alert)
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
<<<<<<< HEAD
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	@ 0x24
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f82b 	bl	800362c <UART_SetConfig>
=======
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2224      	movs	r2, #36	@ 0x24
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2224      	movs	r2, #36	@ 0x24
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002778:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
<<<<<<< HEAD
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f82c 	bl	80027d0 <UART_SetConfig>
>>>>>>> 0207771 (switch changed to function array)
=======
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f972 	bl	8002a64 <UART_SetConfig>
>>>>>>> c1d5507 (packet_list and sim800L alert)

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
<<<<<<< HEAD
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_SetConfig>:
=======
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002786:	611a      	str	r2, [r3, #16]
=======
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800278e:	611a      	str	r2, [r3, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800279e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
080027d0 <UART_SetConfig>:
>>>>>>> 0207771 (switch changed to function array)
=======
080027d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b08a      	sub	sp, #40	@ 0x28
 80027da:	af02      	add	r7, sp, #8
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	603b      	str	r3, [r7, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d175      	bne.n	80028e2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_UART_Transmit+0x2c>
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06e      	b.n	80028e4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2221      	movs	r2, #33	@ 0x21
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002814:	f7fe fb44 	bl	8000ea0 <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	88fa      	ldrh	r2, [r7, #6]
 800281e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282e:	d108      	bne.n	8002842 <HAL_UART_Transmit+0x6c>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e003      	b.n	800284a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800284a:	e02e      	b.n	80028aa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2200      	movs	r2, #0
 8002854:	2180      	movs	r1, #128	@ 0x80
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f848 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e03a      	b.n	80028e4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002882:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	3302      	adds	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e007      	b.n	800289c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1cb      	bne.n	800284c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2200      	movs	r2, #0
 80028bc:	2140      	movs	r1, #64	@ 0x40
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f814 	bl	80028ec <UART_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e006      	b.n	80028e4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
  }
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fc:	e03b      	b.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d037      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe facb 	bl	8000ea0 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <UART_WaitOnFlagUntilTimeout+0x30>
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e03a      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d023      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b80      	cmp	r3, #128	@ 0x80
 8002932:	d020      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d01d      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b08      	cmp	r3, #8
 8002946:	d116      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 f81d 	bl	800299e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2208      	movs	r2, #8
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	429a      	cmp	r2, r3
 8002984:	bf0c      	ite	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	2300      	movne	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	429a      	cmp	r2, r3
 8002992:	d0b4      	beq.n	80028fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800299e:	b480      	push	{r7}
 80029a0:	b095      	sub	sp, #84	@ 0x54
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	330c      	adds	r3, #12
 80029c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80029c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e5      	bne.n	80029a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3314      	adds	r3, #20
 80029e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e5      	bne.n	80029da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d119      	bne.n	8002a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f023 0310 	bic.w	r3, r3, #16
 8002a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	330c      	adds	r3, #12
 8002a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a36:	61ba      	str	r2, [r7, #24]
 8002a38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6979      	ldr	r1, [r7, #20]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	613b      	str	r3, [r7, #16]
   return(result);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e5      	bne.n	8002a16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a58:	bf00      	nop
 8002a5a:	3754      	adds	r7, #84	@ 0x54
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <UART_SetConfig>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
<<<<<<< HEAD
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b0c0      	sub	sp, #256	@ 0x100
 8003632:	af00      	add	r7, sp, #0
 8003634:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
=======
 80027d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d4:	b0c0      	sub	sp, #256	@ 0x100
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
>>>>>>> 0207771 (switch changed to function array)
=======
 8002a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a68:	b0c0      	sub	sp, #256	@ 0x100
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
>>>>>>> c1d5507 (packet_list and sim800L alert)
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
<<<<<<< HEAD
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	68d9      	ldr	r1, [r3, #12]
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	ea40 0301 	orr.w	r3, r0, r1
 8003654:	6113      	str	r3, [r2, #16]
=======
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ec:	68d9      	ldr	r1, [r3, #12]
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	ea40 0301 	orr.w	r3, r0, r1
 80027f8:	6113      	str	r3, [r2, #16]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a80:	68d9      	ldr	r1, [r3, #12]
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	ea40 0301 	orr.w	r3, r0, r1
 8002a8c:	6113      	str	r3, [r2, #16]
>>>>>>> c1d5507 (packet_list and sim800L alert)
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
<<<<<<< HEAD
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	431a      	orrs	r2, r3
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003684:	f021 010c 	bic.w	r1, r1, #12
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003692:	430b      	orrs	r3, r1
 8003694:	60d3      	str	r3, [r2, #12]
=======
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	431a      	orrs	r2, r3
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	431a      	orrs	r2, r3
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002828:	f021 010c 	bic.w	r1, r1, #12
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002836:	430b      	orrs	r3, r1
 8002838:	60d3      	str	r3, [r2, #12]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002abc:	f021 010c 	bic.w	r1, r1, #12
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002aca:	430b      	orrs	r3, r1
 8002acc:	60d3      	str	r3, [r2, #12]
>>>>>>> c1d5507 (packet_list and sim800L alert)
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
<<<<<<< HEAD
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a6:	6999      	ldr	r1, [r3, #24]
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	ea40 0301 	orr.w	r3, r0, r1
 80036b2:	6153      	str	r3, [r2, #20]
=======
 800283a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800284a:	6999      	ldr	r1, [r3, #24]
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	ea40 0301 	orr.w	r3, r0, r1
 8002856:	6153      	str	r3, [r2, #20]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	6999      	ldr	r1, [r3, #24]
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	ea40 0301 	orr.w	r3, r0, r1
 8002aea:	6153      	str	r3, [r2, #20]
>>>>>>> c1d5507 (packet_list and sim800L alert)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
<<<<<<< HEAD
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b8f      	ldr	r3, [pc, #572]	@ (80038f8 <UART_SetConfig+0x2cc>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	d005      	beq.n	80036cc <UART_SetConfig+0xa0>
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b8d      	ldr	r3, [pc, #564]	@ (80038fc <UART_SetConfig+0x2d0>)
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d104      	bne.n	80036d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7ff fabc 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 80036d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036d4:	e003      	b.n	80036de <UART_SetConfig+0xb2>
=======
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a9c <UART_SetConfig+0x2cc>)
 8002860:	429a      	cmp	r2, r3
 8002862:	d005      	beq.n	8002870 <UART_SetConfig+0xa0>
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b8d      	ldr	r3, [pc, #564]	@ (8002aa0 <UART_SetConfig+0x2d0>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d104      	bne.n	800287a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002870:	f7ff fec0 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8002874:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002878:	e003      	b.n	8002882 <UART_SetConfig+0xb2>
>>>>>>> 0207771 (switch changed to function array)
=======
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b8f      	ldr	r3, [pc, #572]	@ (8002d30 <UART_SetConfig+0x2cc>)
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d005      	beq.n	8002b04 <UART_SetConfig+0xa0>
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b8d      	ldr	r3, [pc, #564]	@ (8002d34 <UART_SetConfig+0x2d0>)
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d104      	bne.n	8002b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b04:	f7ff fd7a 	bl	80025fc <HAL_RCC_GetPCLK2Freq>
 8002b08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b0c:	e003      	b.n	8002b16 <UART_SetConfig+0xb2>
>>>>>>> c1d5507 (packet_list and sim800L alert)
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
<<<<<<< HEAD
 80036d6:	f7ff faa3 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 80036da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e8:	f040 810c 	bne.w	8003904 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	1891      	adds	r1, r2, r2
 8003704:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003706:	415b      	adcs	r3, r3
 8003708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800370a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800370e:	4621      	mov	r1, r4
 8003710:	eb12 0801 	adds.w	r8, r2, r1
 8003714:	4629      	mov	r1, r5
 8003716:	eb43 0901 	adc.w	r9, r3, r1
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800372a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800372e:	4690      	mov	r8, r2
 8003730:	4699      	mov	r9, r3
 8003732:	4623      	mov	r3, r4
 8003734:	eb18 0303 	adds.w	r3, r8, r3
 8003738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800373c:	462b      	mov	r3, r5
 800373e:	eb49 0303 	adc.w	r3, r9, r3
 8003742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003752:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003756:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800375a:	460b      	mov	r3, r1
 800375c:	18db      	adds	r3, r3, r3
 800375e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003760:	4613      	mov	r3, r2
 8003762:	eb42 0303 	adc.w	r3, r2, r3
 8003766:	657b      	str	r3, [r7, #84]	@ 0x54
 8003768:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800376c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003770:	f7fc fd8e 	bl	8000290 <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <UART_SetConfig+0x2d4>)
 800377a:	fba3 2302 	umull	r2, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	011c      	lsls	r4, r3, #4
 8003782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003786:	2200      	movs	r2, #0
 8003788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800378c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003790:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003794:	4642      	mov	r2, r8
 8003796:	464b      	mov	r3, r9
 8003798:	1891      	adds	r1, r2, r2
 800379a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800379c:	415b      	adcs	r3, r3
 800379e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037a4:	4641      	mov	r1, r8
 80037a6:	eb12 0a01 	adds.w	sl, r2, r1
 80037aa:	4649      	mov	r1, r9
 80037ac:	eb43 0b01 	adc.w	fp, r3, r1
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c4:	4692      	mov	sl, r2
 80037c6:	469b      	mov	fp, r3
 80037c8:	4643      	mov	r3, r8
 80037ca:	eb1a 0303 	adds.w	r3, sl, r3
 80037ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d2:	464b      	mov	r3, r9
 80037d4:	eb4b 0303 	adc.w	r3, fp, r3
 80037d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037f0:	460b      	mov	r3, r1
 80037f2:	18db      	adds	r3, r3, r3
 80037f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80037f6:	4613      	mov	r3, r2
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003802:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003806:	f7fc fd43 	bl	8000290 <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4611      	mov	r1, r2
 8003810:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <UART_SetConfig+0x2d4>)
 8003812:	fba3 2301 	umull	r2, r3, r3, r1
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2264      	movs	r2, #100	@ 0x64
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	1acb      	subs	r3, r1, r3
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003826:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <UART_SetConfig+0x2d4>)
 8003828:	fba3 2302 	umull	r2, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003834:	441c      	add	r4, r3
 8003836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003840:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003844:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003848:	4642      	mov	r2, r8
 800384a:	464b      	mov	r3, r9
 800384c:	1891      	adds	r1, r2, r2
 800384e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003850:	415b      	adcs	r3, r3
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003858:	4641      	mov	r1, r8
 800385a:	1851      	adds	r1, r2, r1
 800385c:	6339      	str	r1, [r7, #48]	@ 0x30
 800385e:	4649      	mov	r1, r9
 8003860:	414b      	adcs	r3, r1
 8003862:	637b      	str	r3, [r7, #52]	@ 0x34
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003870:	4659      	mov	r1, fp
 8003872:	00cb      	lsls	r3, r1, #3
 8003874:	4651      	mov	r1, sl
 8003876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387a:	4651      	mov	r1, sl
 800387c:	00ca      	lsls	r2, r1, #3
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	4603      	mov	r3, r0
 8003884:	4642      	mov	r2, r8
 8003886:	189b      	adds	r3, r3, r2
 8003888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800388c:	464b      	mov	r3, r9
 800388e:	460a      	mov	r2, r1
 8003890:	eb42 0303 	adc.w	r3, r2, r3
 8003894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038ac:	460b      	mov	r3, r1
 80038ae:	18db      	adds	r3, r3, r3
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b2:	4613      	mov	r3, r2
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038c2:	f7fc fce5 	bl	8000290 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <UART_SetConfig+0x2d4>)
 80038cc:	fba3 1302 	umull	r1, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	2164      	movs	r1, #100	@ 0x64
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	3332      	adds	r3, #50	@ 0x32
 80038de:	4a08      	ldr	r2, [pc, #32]	@ (8003900 <UART_SetConfig+0x2d4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	f003 0207 	and.w	r2, r3, #7
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4422      	add	r2, r4
 80038f2:	609a      	str	r2, [r3, #8]
=======
 800287a:	f7ff fea7 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 800287e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
=======
 8002b0e:	f7ff fd61 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8002b12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
>>>>>>> c1d5507 (packet_list and sim800L alert)
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b20:	f040 810c 	bne.w	8002d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8002890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002894:	2200      	movs	r2, #0
 8002896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800289a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800289e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80028a2:	4622      	mov	r2, r4
 80028a4:	462b      	mov	r3, r5
 80028a6:	1891      	adds	r1, r2, r2
 80028a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80028aa:	415b      	adcs	r3, r3
 80028ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80028ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028b2:	4621      	mov	r1, r4
 80028b4:	eb12 0801 	adds.w	r8, r2, r1
 80028b8:	4629      	mov	r1, r5
 80028ba:	eb43 0901 	adc.w	r9, r3, r1
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d2:	4690      	mov	r8, r2
 80028d4:	4699      	mov	r9, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	eb18 0303 	adds.w	r3, r8, r3
 80028dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028e0:	462b      	mov	r3, r5
 80028e2:	eb49 0303 	adc.w	r3, r9, r3
 80028e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028fe:	460b      	mov	r3, r1
 8002900:	18db      	adds	r3, r3, r3
 8002902:	653b      	str	r3, [r7, #80]	@ 0x50
 8002904:	4613      	mov	r3, r2
 8002906:	eb42 0303 	adc.w	r3, r2, r3
 800290a:	657b      	str	r3, [r7, #84]	@ 0x54
 800290c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002914:	f7fd fccc 	bl	80002b0 <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <UART_SetConfig+0x2d4>)
 800291e:	fba3 2302 	umull	r2, r3, r3, r2
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	011c      	lsls	r4, r3, #4
 8002926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800292a:	2200      	movs	r2, #0
 800292c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002930:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002938:	4642      	mov	r2, r8
 800293a:	464b      	mov	r3, r9
 800293c:	1891      	adds	r1, r2, r2
 800293e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002940:	415b      	adcs	r3, r3
 8002942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002948:	4641      	mov	r1, r8
 800294a:	eb12 0a01 	adds.w	sl, r2, r1
 800294e:	4649      	mov	r1, r9
 8002950:	eb43 0b01 	adc.w	fp, r3, r1
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002968:	4692      	mov	sl, r2
 800296a:	469b      	mov	fp, r3
 800296c:	4643      	mov	r3, r8
 800296e:	eb1a 0303 	adds.w	r3, sl, r3
 8002972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002976:	464b      	mov	r3, r9
 8002978:	eb4b 0303 	adc.w	r3, fp, r3
 800297c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800298c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002994:	460b      	mov	r3, r1
 8002996:	18db      	adds	r3, r3, r3
 8002998:	643b      	str	r3, [r7, #64]	@ 0x40
 800299a:	4613      	mov	r3, r2
 800299c:	eb42 0303 	adc.w	r3, r2, r3
 80029a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80029a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80029aa:	f7fd fc81 	bl	80002b0 <__aeabi_uldivmod>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <UART_SetConfig+0x2d4>)
 80029b6:	fba3 2301 	umull	r2, r3, r3, r1
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2264      	movs	r2, #100	@ 0x64
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	1acb      	subs	r3, r1, r3
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029ca:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <UART_SetConfig+0x2d4>)
 80029cc:	fba3 2302 	umull	r2, r3, r3, r2
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029d8:	441c      	add	r4, r3
 80029da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029ec:	4642      	mov	r2, r8
 80029ee:	464b      	mov	r3, r9
 80029f0:	1891      	adds	r1, r2, r2
 80029f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029f4:	415b      	adcs	r3, r3
 80029f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029fc:	4641      	mov	r1, r8
 80029fe:	1851      	adds	r1, r2, r1
 8002a00:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a02:	4649      	mov	r1, r9
 8002a04:	414b      	adcs	r3, r1
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a14:	4659      	mov	r1, fp
 8002a16:	00cb      	lsls	r3, r1, #3
 8002a18:	4651      	mov	r1, sl
 8002a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a1e:	4651      	mov	r1, sl
 8002a20:	00ca      	lsls	r2, r1, #3
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	4642      	mov	r2, r8
 8002a2a:	189b      	adds	r3, r3, r2
 8002a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a30:	464b      	mov	r3, r9
 8002a32:	460a      	mov	r2, r1
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a50:	460b      	mov	r3, r1
 8002a52:	18db      	adds	r3, r3, r3
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a56:	4613      	mov	r3, r2
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a66:	f7fd fc23 	bl	80002b0 <__aeabi_uldivmod>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <UART_SetConfig+0x2d4>)
 8002a70:	fba3 1302 	umull	r1, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	2164      	movs	r1, #100	@ 0x64
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	3332      	adds	r3, #50	@ 0x32
 8002a82:	4a08      	ldr	r2, [pc, #32]	@ (8002aa4 <UART_SetConfig+0x2d4>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	f003 0207 	and.w	r2, r3, #7
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4422      	add	r2, r4
 8002a96:	609a      	str	r2, [r3, #8]
>>>>>>> 0207771 (switch changed to function array)
=======
 8002b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b36:	4622      	mov	r2, r4
 8002b38:	462b      	mov	r3, r5
 8002b3a:	1891      	adds	r1, r2, r2
 8002b3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b3e:	415b      	adcs	r3, r3
 8002b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b46:	4621      	mov	r1, r4
 8002b48:	eb12 0801 	adds.w	r8, r2, r1
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	eb43 0901 	adc.w	r9, r3, r1
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b66:	4690      	mov	r8, r2
 8002b68:	4699      	mov	r9, r3
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	eb18 0303 	adds.w	r3, r8, r3
 8002b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b74:	462b      	mov	r3, r5
 8002b76:	eb49 0303 	adc.w	r3, r9, r3
 8002b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b92:	460b      	mov	r3, r1
 8002b94:	18db      	adds	r3, r3, r3
 8002b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b98:	4613      	mov	r3, r2
 8002b9a:	eb42 0303 	adc.w	r3, r2, r3
 8002b9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ba8:	f7fd fb82 	bl	80002b0 <__aeabi_uldivmod>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4b61      	ldr	r3, [pc, #388]	@ (8002d38 <UART_SetConfig+0x2d4>)
 8002bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	011c      	lsls	r4, r3, #4
 8002bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bcc:	4642      	mov	r2, r8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	1891      	adds	r1, r2, r2
 8002bd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bd4:	415b      	adcs	r3, r3
 8002bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bdc:	4641      	mov	r1, r8
 8002bde:	eb12 0a01 	adds.w	sl, r2, r1
 8002be2:	4649      	mov	r1, r9
 8002be4:	eb43 0b01 	adc.w	fp, r3, r1
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bfc:	4692      	mov	sl, r2
 8002bfe:	469b      	mov	fp, r3
 8002c00:	4643      	mov	r3, r8
 8002c02:	eb1a 0303 	adds.w	r3, sl, r3
 8002c06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	18db      	adds	r3, r3, r3
 8002c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c2e:	4613      	mov	r3, r2
 8002c30:	eb42 0303 	adc.w	r3, r2, r3
 8002c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c3e:	f7fd fb37 	bl	80002b0 <__aeabi_uldivmod>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <UART_SetConfig+0x2d4>)
 8002c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2264      	movs	r2, #100	@ 0x64
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	1acb      	subs	r3, r1, r3
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c5e:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <UART_SetConfig+0x2d4>)
 8002c60:	fba3 2302 	umull	r2, r3, r3, r2
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c6c:	441c      	add	r4, r3
 8002c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c72:	2200      	movs	r2, #0
 8002c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c80:	4642      	mov	r2, r8
 8002c82:	464b      	mov	r3, r9
 8002c84:	1891      	adds	r1, r2, r2
 8002c86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c88:	415b      	adcs	r3, r3
 8002c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c90:	4641      	mov	r1, r8
 8002c92:	1851      	adds	r1, r2, r1
 8002c94:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c96:	4649      	mov	r1, r9
 8002c98:	414b      	adcs	r3, r1
 8002c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ca8:	4659      	mov	r1, fp
 8002caa:	00cb      	lsls	r3, r1, #3
 8002cac:	4651      	mov	r1, sl
 8002cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb2:	4651      	mov	r1, sl
 8002cb4:	00ca      	lsls	r2, r1, #3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cc4:	464b      	mov	r3, r9
 8002cc6:	460a      	mov	r2, r1
 8002cc8:	eb42 0303 	adc.w	r3, r2, r3
 8002ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	18db      	adds	r3, r3, r3
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cea:	4613      	mov	r3, r2
 8002cec:	eb42 0303 	adc.w	r3, r2, r3
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cfa:	f7fd fad9 	bl	80002b0 <__aeabi_uldivmod>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4b0d      	ldr	r3, [pc, #52]	@ (8002d38 <UART_SetConfig+0x2d4>)
 8002d04:	fba3 1302 	umull	r1, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	2164      	movs	r1, #100	@ 0x64
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	3332      	adds	r3, #50	@ 0x32
 8002d16:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <UART_SetConfig+0x2d4>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	f003 0207 	and.w	r2, r3, #7
 8002d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4422      	add	r2, r4
 8002d2a:	609a      	str	r2, [r3, #8]
>>>>>>> c1d5507 (packet_list and sim800L alert)
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
 80038f4:	e106      	b.n	8003b04 <UART_SetConfig+0x4d8>
 80038f6:	bf00      	nop
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40011400 	.word	0x40011400
 8003900:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800390e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003912:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003916:	4642      	mov	r2, r8
 8003918:	464b      	mov	r3, r9
 800391a:	1891      	adds	r1, r2, r2
 800391c:	6239      	str	r1, [r7, #32]
 800391e:	415b      	adcs	r3, r3
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
 8003922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003926:	4641      	mov	r1, r8
 8003928:	1854      	adds	r4, r2, r1
 800392a:	4649      	mov	r1, r9
 800392c:	eb43 0501 	adc.w	r5, r3, r1
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	00eb      	lsls	r3, r5, #3
 800393a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800393e:	00e2      	lsls	r2, r4, #3
 8003940:	4614      	mov	r4, r2
 8003942:	461d      	mov	r5, r3
 8003944:	4643      	mov	r3, r8
 8003946:	18e3      	adds	r3, r4, r3
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800394c:	464b      	mov	r3, r9
 800394e:	eb45 0303 	adc.w	r3, r5, r3
 8003952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003962:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003972:	4629      	mov	r1, r5
 8003974:	008b      	lsls	r3, r1, #2
 8003976:	4621      	mov	r1, r4
 8003978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397c:	4621      	mov	r1, r4
 800397e:	008a      	lsls	r2, r1, #2
 8003980:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003984:	f7fc fc84 	bl	8000290 <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b60      	ldr	r3, [pc, #384]	@ (8003b10 <UART_SetConfig+0x4e4>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	011c      	lsls	r4, r3, #4
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	61b9      	str	r1, [r7, #24]
 80039b0:	415b      	adcs	r3, r3
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b8:	4641      	mov	r1, r8
 80039ba:	1851      	adds	r1, r2, r1
 80039bc:	6139      	str	r1, [r7, #16]
 80039be:	4649      	mov	r1, r9
 80039c0:	414b      	adcs	r3, r1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d0:	4659      	mov	r1, fp
 80039d2:	00cb      	lsls	r3, r1, #3
 80039d4:	4651      	mov	r1, sl
 80039d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039da:	4651      	mov	r1, sl
 80039dc:	00ca      	lsls	r2, r1, #3
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	4642      	mov	r2, r8
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039ec:	464b      	mov	r3, r9
 80039ee:	460a      	mov	r2, r1
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a10:	4649      	mov	r1, r9
 8003a12:	008b      	lsls	r3, r1, #2
 8003a14:	4641      	mov	r1, r8
 8003a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	008a      	lsls	r2, r1, #2
 8003a1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a22:	f7fc fc35 	bl	8000290 <__aeabi_uldivmod>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4b38      	ldr	r3, [pc, #224]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2264      	movs	r2, #100	@ 0x64
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	1acb      	subs	r3, r1, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	@ 0x32
 8003a40:	4a33      	ldr	r2, [pc, #204]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a4c:	441c      	add	r4, r3
 8003a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a52:	2200      	movs	r2, #0
 8003a54:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a56:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	415b      	adcs	r3, r3
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	eb42 0303 	adc.w	r3, r2, r3
 8003aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ab2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	008b      	lsls	r3, r1, #2
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aca:	4641      	mov	r1, r8
 8003acc:	008a      	lsls	r2, r1, #2
 8003ace:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ad2:	f7fc fbdd 	bl	8000290 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003adc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	2164      	movs	r1, #100	@ 0x64
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	3332      	adds	r3, #50	@ 0x32
 8003aee:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4422      	add	r2, r4
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b10:	51eb851f 	.word	0x51eb851f

08003b14 <flash_read_multiple_words>:
}
=======
 8002a98:	e106      	b.n	8002ca8 <UART_SetConfig+0x4d8>
 8002a9a:	bf00      	nop
 8002a9c:	40011000 	.word	0x40011000
 8002aa0:	40011400 	.word	0x40011400
 8002aa4:	51eb851f 	.word	0x51eb851f
=======
 8002d2c:	e106      	b.n	8002f3c <UART_SetConfig+0x4d8>
 8002d2e:	bf00      	nop
 8002d30:	40011000 	.word	0x40011000
 8002d34:	40011400 	.word	0x40011400
 8002d38:	51eb851f 	.word	0x51eb851f
>>>>>>> c1d5507 (packet_list and sim800L alert)
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d40:	2200      	movs	r2, #0
 8002d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d4e:	4642      	mov	r2, r8
 8002d50:	464b      	mov	r3, r9
 8002d52:	1891      	adds	r1, r2, r2
 8002d54:	6239      	str	r1, [r7, #32]
 8002d56:	415b      	adcs	r3, r3
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d5e:	4641      	mov	r1, r8
 8002d60:	1854      	adds	r4, r2, r1
 8002d62:	4649      	mov	r1, r9
 8002d64:	eb43 0501 	adc.w	r5, r3, r1
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	00eb      	lsls	r3, r5, #3
 8002d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d76:	00e2      	lsls	r2, r4, #3
 8002d78:	4614      	mov	r4, r2
 8002d7a:	461d      	mov	r5, r3
 8002d7c:	4643      	mov	r3, r8
 8002d7e:	18e3      	adds	r3, r4, r3
 8002d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d84:	464b      	mov	r3, r9
 8002d86:	eb45 0303 	adc.w	r3, r5, r3
 8002d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002daa:	4629      	mov	r1, r5
 8002dac:	008b      	lsls	r3, r1, #2
 8002dae:	4621      	mov	r1, r4
 8002db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db4:	4621      	mov	r1, r4
 8002db6:	008a      	lsls	r2, r1, #2
 8002db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002dbc:	f7fd fa78 	bl	80002b0 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4b60      	ldr	r3, [pc, #384]	@ (8002f48 <UART_SetConfig+0x4e4>)
 8002dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	011c      	lsls	r4, r3, #4
 8002dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002de0:	4642      	mov	r2, r8
 8002de2:	464b      	mov	r3, r9
 8002de4:	1891      	adds	r1, r2, r2
 8002de6:	61b9      	str	r1, [r7, #24]
 8002de8:	415b      	adcs	r3, r3
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df0:	4641      	mov	r1, r8
 8002df2:	1851      	adds	r1, r2, r1
 8002df4:	6139      	str	r1, [r7, #16]
 8002df6:	4649      	mov	r1, r9
 8002df8:	414b      	adcs	r3, r1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e08:	4659      	mov	r1, fp
 8002e0a:	00cb      	lsls	r3, r1, #3
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e12:	4651      	mov	r1, sl
 8002e14:	00ca      	lsls	r2, r1, #3
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4642      	mov	r2, r8
 8002e1e:	189b      	adds	r3, r3, r2
 8002e20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e24:	464b      	mov	r3, r9
 8002e26:	460a      	mov	r2, r1
 8002e28:	eb42 0303 	adc.w	r3, r2, r3
 8002e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e48:	4649      	mov	r1, r9
 8002e4a:	008b      	lsls	r3, r1, #2
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e52:	4641      	mov	r1, r8
 8002e54:	008a      	lsls	r2, r1, #2
 8002e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e5a:	f7fd fa29 	bl	80002b0 <__aeabi_uldivmod>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <UART_SetConfig+0x4e4>)
 8002e66:	fba3 2301 	umull	r2, r3, r3, r1
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2264      	movs	r2, #100	@ 0x64
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	1acb      	subs	r3, r1, r3
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	3332      	adds	r3, #50	@ 0x32
 8002e78:	4a33      	ldr	r2, [pc, #204]	@ (8002f48 <UART_SetConfig+0x4e4>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e84:	441c      	add	r4, r3
 8002e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e94:	4642      	mov	r2, r8
 8002e96:	464b      	mov	r3, r9
 8002e98:	1891      	adds	r1, r2, r2
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	415b      	adcs	r3, r3
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	1851      	adds	r1, r2, r1
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	4649      	mov	r1, r9
 8002eac:	414b      	adcs	r3, r1
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ebc:	4659      	mov	r1, fp
 8002ebe:	00cb      	lsls	r3, r1, #3
 8002ec0:	4651      	mov	r1, sl
 8002ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	00ca      	lsls	r2, r1, #3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4642      	mov	r2, r8
 8002ed2:	189b      	adds	r3, r3, r2
 8002ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	460a      	mov	r2, r1
 8002eda:	eb42 0303 	adc.w	r3, r2, r3
 8002ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eea:	667a      	str	r2, [r7, #100]	@ 0x64
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ef8:	4649      	mov	r1, r9
 8002efa:	008b      	lsls	r3, r1, #2
 8002efc:	4641      	mov	r1, r8
 8002efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f02:	4641      	mov	r1, r8
 8002f04:	008a      	lsls	r2, r1, #2
 8002f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f0a:	f7fd f9d1 	bl	80002b0 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <UART_SetConfig+0x4e4>)
 8002f14:	fba3 1302 	umull	r1, r3, r3, r2
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	2164      	movs	r1, #100	@ 0x64
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	3332      	adds	r3, #50	@ 0x32
 8002f26:	4a08      	ldr	r2, [pc, #32]	@ (8002f48 <UART_SetConfig+0x4e4>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	095b      	lsrs	r3, r3, #5
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4422      	add	r2, r4
 8002f3a:	609a      	str	r2, [r3, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f42:	46bd      	mov	sp, r7
 8002f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f48:	51eb851f 	.word	0x51eb851f

08002f4c <flash_write_erase_sector7>:

#include "flash_interface.h"



void flash_write_erase_sector7(){
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY) ;
 8002f50:	bf00      	nop
 8002f52:	4b23      	ldr	r3, [pc, #140]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f9      	bne.n	8002f52 <flash_write_erase_sector7+0x6>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5e:	b672      	cpsid	i
}
 8002f60:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 8002f62:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <flash_write_erase_sector7+0x98>)
 8002f66:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe8 <flash_write_erase_sector7+0x9c>)
 8002f6c:	605a      	str	r2, [r3, #4]

	//SECTOR 7 ERASE
	FLASH->CR |= FLASH_CR_SER;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2;
 8002f7a:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	4a18      	ldr	r2, [pc, #96]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f80:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002f84:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;
 8002f86:	4b16      	ldr	r3, [pc, #88]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	4a15      	ldr	r2, [pc, #84]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	6113      	str	r3, [r2, #16]

	while(FLASH->SR & FLASH_SR_BSY) ;
 8002f92:	bf00      	nop
 8002f94:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <flash_write_erase_sector7+0x48>
	//RETURN TO INIT STATE
	FLASH->CR &= ~FLASH_CR_STRT;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002faa:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2);
 8002fac:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fb2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002fb6:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_SER;
 8002fb8:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	4a08      	ldr	r2, [pc, #32]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fbe:	f023 0302 	bic.w	r3, r3, #2
 8002fc2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	4a05      	ldr	r2, [pc, #20]	@ (8002fe0 <flash_write_erase_sector7+0x94>)
 8002fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fce:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fd0:	b662      	cpsie	i
}
 8002fd2:	bf00      	nop

	__enable_irq();
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023c00 	.word	0x40023c00
 8002fe4:	45670123 	.word	0x45670123
 8002fe8:	cdef89ab 	.word	0xcdef89ab

08002fec <flash_write_multiple_word>:



void flash_write_multiple_word(uint32_t addr, uint32_t* data, size_t num){
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
	//CHECK IF BUSY
	while(FLASH->SR & FLASH_SR_BSY) ;
 8002ff8:	bf00      	nop
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f9      	bne.n	8002ffa <flash_write_multiple_word+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 8003006:	b672      	cpsid	i
}
 8003008:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 800300a:	4b26      	ldr	r3, [pc, #152]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 800300c:	4a26      	ldr	r2, [pc, #152]	@ (80030a8 <flash_write_multiple_word+0xbc>)
 800300e:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8003010:	4b24      	ldr	r3, [pc, #144]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003012:	4a26      	ldr	r2, [pc, #152]	@ (80030ac <flash_write_multiple_word+0xc0>)
 8003014:	605a      	str	r2, [r3, #4]

	//PICK DOUBLE WORD WRITING
	FLASH->CR |= FLASH_CR_PSIZE_1;
 8003016:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 800301c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003020:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_0;
 8003022:	4b20      	ldr	r3, [pc, #128]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800302c:	6113      	str	r3, [r2, #16]

	//ENABLE PROGRAMMING MODE
	FLASH->CR |= FLASH_CR_PG;
 800302e:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	4a1c      	ldr	r2, [pc, #112]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6113      	str	r3, [r2, #16]

	for(size_t i = 0; i < num; ++i){
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	e00c      	b.n	800305a <flash_write_multiple_word+0x6e>
		*((uint32_t *)addr + i) = *(data + i);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	4413      	add	r3, r2
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	0091      	lsls	r1, r2, #2
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	440a      	add	r2, r1
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < num; ++i){
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	429a      	cmp	r2, r3
 8003060:	d3ee      	bcc.n	8003040 <flash_write_multiple_word+0x54>
	}

	//WAIT TILL COMPLETES
	while(FLASH->SR & FLASH_SR_BSY) ;
 8003062:	bf00      	nop
 8003064:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f9      	bne.n	8003064 <flash_write_multiple_word+0x78>
	//TURN OFF PROGRAMMING MODE
	FLASH->CR &= ~FLASH_CR_PG;
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	4a0b      	ldr	r2, [pc, #44]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_1;
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 8003082:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003086:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_LOCK;
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <flash_write_multiple_word+0xb8>)
 800308e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003092:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8003094:	b662      	cpsie	i
}
 8003096:	bf00      	nop
	__enable_irq();
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40023c00 	.word	0x40023c00
 80030a8:	45670123 	.word	0x45670123
 80030ac:	cdef89ab 	.word	0xcdef89ab

<<<<<<< HEAD
08002e1c <flash_read_multiple_words>:
>>>>>>> 0207771 (switch changed to function array)
=======
080030b0 <flash_read_multiple_words>:
>>>>>>> c1d5507 (packet_list and sim800L alert)




void flash_read_multiple_words(uint32_t addr, uint32_t* data, size_t n){
<<<<<<< HEAD
<<<<<<< HEAD
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
	for(size_t i = 0; i < n; ++i){
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	e00d      	b.n	8003b42 <flash_read_multiple_words+0x2e>
		*(data + i) = *((uint32_t*)addr + i);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	009a      	lsls	r2, r3, #2
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4619      	mov	r1, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	4413      	add	r3, r2
 8003b38:	680a      	ldr	r2, [r1, #0]
 8003b3a:	601a      	str	r2, [r3, #0]
	for(size_t i = 0; i < n; ++i){
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d3ed      	bcc.n	8003b26 <flash_read_multiple_words+0x12>
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <lcd_send_cmd>:
=======
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
=======
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
>>>>>>> c1d5507 (packet_list and sim800L alert)
	for(size_t i = 0; i < n; ++i){
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e00d      	b.n	80030de <flash_read_multiple_words+0x2e>
		*(data + i) = *((uint32_t*)addr + i);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	009a      	lsls	r2, r3, #2
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	4413      	add	r3, r2
 80030d4:	680a      	ldr	r2, [r1, #0]
 80030d6:	601a      	str	r2, [r3, #0]
	for(size_t i = 0; i < n; ++i){
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3301      	adds	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3ed      	bcc.n	80030c2 <flash_read_multiple_words+0x12>
	}
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <set_column>:
static char x;
static uint32_t i = 0;
static uint32_t lastDebounceTime[12];
static bool keyState[12] = {};

void set_column(uint8_t col, GPIO_PinState state){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	460a      	mov	r2, r1
 80030fe:	71fb      	strb	r3, [r7, #7]
 8003100:	4613      	mov	r3, r2
 8003102:	71bb      	strb	r3, [r7, #6]
	switch(col){
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d014      	beq.n	8003134 <set_column+0x40>
 800310a:	2b02      	cmp	r3, #2
 800310c:	dc19      	bgt.n	8003142 <set_column+0x4e>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <set_column+0x24>
 8003112:	2b01      	cmp	r3, #1
 8003114:	d007      	beq.n	8003126 <set_column+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
		break;
	}
}
 8003116:	e014      	b.n	8003142 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col1_Pin, state);
 8003118:	79bb      	ldrb	r3, [r7, #6]
 800311a:	461a      	mov	r2, r3
 800311c:	2110      	movs	r1, #16
 800311e:	480b      	ldr	r0, [pc, #44]	@ (800314c <set_column+0x58>)
 8003120:	f7fe f970 	bl	8001404 <HAL_GPIO_WritePin>
		break;
 8003124:	e00d      	b.n	8003142 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col2_Pin, state);
 8003126:	79bb      	ldrb	r3, [r7, #6]
 8003128:	461a      	mov	r2, r3
 800312a:	2140      	movs	r1, #64	@ 0x40
 800312c:	4807      	ldr	r0, [pc, #28]	@ (800314c <set_column+0x58>)
 800312e:	f7fe f969 	bl	8001404 <HAL_GPIO_WritePin>
		break;
 8003132:	e006      	b.n	8003142 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
 8003134:	79bb      	ldrb	r3, [r7, #6]
 8003136:	461a      	mov	r2, r3
 8003138:	2104      	movs	r1, #4
 800313a:	4804      	ldr	r0, [pc, #16]	@ (800314c <set_column+0x58>)
 800313c:	f7fe f962 	bl	8001404 <HAL_GPIO_WritePin>
		break;
 8003140:	bf00      	nop
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40020000 	.word	0x40020000

08003150 <handle_key_press>:
void handle_key_press(uint8_t col, uint8_t row){
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	460a      	mov	r2, r1
 800315a:	71fb      	strb	r3, [r7, #7]
 800315c:	4613      	mov	r3, r2
 800315e:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 1;
 8003160:	79ba      	ldrb	r2, [r7, #6]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	441a      	add	r2, r3
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	4413      	add	r3, r2
 800316c:	4a0a      	ldr	r2, [pc, #40]	@ (8003198 <handle_key_press+0x48>)
 800316e:	2101      	movs	r1, #1
 8003170:	54d1      	strb	r1, [r2, r3]
	x = (row) * 3 + col + 1;
 8003172:	79bb      	ldrb	r3, [r7, #6]
 8003174:	461a      	mov	r2, r3
 8003176:	0052      	lsls	r2, r2, #1
 8003178:	4413      	add	r3, r2
 800317a:	b2da      	uxtb	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	4413      	add	r3, r2
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3301      	adds	r3, #1
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <handle_key_press+0x4c>)
 8003188:	701a      	strb	r2, [r3, #0]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200001e8 	.word	0x200001e8
 800319c:	200001b0 	.word	0x200001b0

080031a0 <handle_key_reset>:
void handle_key_reset(uint8_t col, uint8_t row){
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	460a      	mov	r2, r1
 80031aa:	71fb      	strb	r3, [r7, #7]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 0;
 80031b0:	79ba      	ldrb	r2, [r7, #6]
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	441a      	add	r2, r3
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <handle_key_reset+0x30>)
 80031be:	2100      	movs	r1, #0
 80031c0:	54d1      	strb	r1, [r2, r3]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	200001e8 	.word	0x200001e8

080031d4 <read_row>:

GPIO_PinState read_row(uint8_t row){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	switch(row){
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d823      	bhi.n	800322c <read_row+0x58>
 80031e4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ec <read_row+0x18>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003209 	.word	0x08003209
 80031f4:	08003215 	.word	0x08003215
 80031f8:	08003221 	.word	0x08003221
		case 0:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row1_Pin);
 80031fc:	2120      	movs	r1, #32
 80031fe:	480e      	ldr	r0, [pc, #56]	@ (8003238 <read_row+0x64>)
 8003200:	f7fe f8e8 	bl	80013d4 <HAL_GPIO_ReadPin>
 8003204:	4603      	mov	r3, r0
 8003206:	e012      	b.n	800322e <read_row+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row2_Pin);
 8003208:	2101      	movs	r1, #1
 800320a:	480b      	ldr	r0, [pc, #44]	@ (8003238 <read_row+0x64>)
 800320c:	f7fe f8e2 	bl	80013d4 <HAL_GPIO_ReadPin>
 8003210:	4603      	mov	r3, r0
 8003212:	e00c      	b.n	800322e <read_row+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row3_Pin);
 8003214:	2102      	movs	r1, #2
 8003216:	4808      	ldr	r0, [pc, #32]	@ (8003238 <read_row+0x64>)
 8003218:	f7fe f8dc 	bl	80013d4 <HAL_GPIO_ReadPin>
 800321c:	4603      	mov	r3, r0
 800321e:	e006      	b.n	800322e <read_row+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row4_Pin);
 8003220:	2108      	movs	r1, #8
 8003222:	4805      	ldr	r0, [pc, #20]	@ (8003238 <read_row+0x64>)
 8003224:	f7fe f8d6 	bl	80013d4 <HAL_GPIO_ReadPin>
 8003228:	4603      	mov	r3, r0
 800322a:	e000      	b.n	800322e <read_row+0x5a>
			break;
	}
	return 1;
 800322c:	2301      	movs	r3, #1
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40020000 	.word	0x40020000

0800323c <check_keyboard>:
char check_keyboard(void){
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
	x = 0;
 8003242:	4b36      	ldr	r3, [pc, #216]	@ (800331c <check_keyboard+0xe0>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
	i = 0;
 8003248:	4b35      	ldr	r3, [pc, #212]	@ (8003320 <check_keyboard+0xe4>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
	for (int col = 0; col < 3; col++) {
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e059      	b.n	8003308 <check_keyboard+0xcc>
	    set_column(col, GPIO_PIN_RESET);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff4a 	bl	80030f4 <set_column>
	    for (int row = 0; row < 4; row++) {
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	e044      	b.n	80032f0 <check_keyboard+0xb4>
	    	uint32_t t = HAL_GetTick();
 8003266:	f7fd fe1b 	bl	8000ea0 <HAL_GetTick>
 800326a:	6078      	str	r0, [r7, #4]
	    	if(t - lastDebounceTime[(row) * 3 + col] > DEBOUNCE_TIME){
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	441a      	add	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	4a2a      	ldr	r2, [pc, #168]	@ (8003324 <check_keyboard+0xe8>)
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d931      	bls.n	80032ea <check_keyboard+0xae>
				if (read_row(row) == GPIO_PIN_RESET) {
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ffa2 	bl	80031d4 <read_row>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d121      	bne.n	80032da <check_keyboard+0x9e>
					if(!keyState[(row) * 3 + col])
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	4a21      	ldr	r2, [pc, #132]	@ (8003328 <check_keyboard+0xec>)
 80032a4:	5cd3      	ldrb	r3, [r2, r3]
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <check_keyboard+0x84>
						handle_key_press(col, row);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff48 	bl	8003150 <handle_key_press>
					lastDebounceTime[(row) * 3 + col] = HAL_GetTick();
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	441a      	add	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	18d4      	adds	r4, r2, r3
 80032cc:	f7fd fde8 	bl	8000ea0 <HAL_GetTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a14      	ldr	r2, [pc, #80]	@ (8003324 <check_keyboard+0xe8>)
 80032d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80032d8:	e007      	b.n	80032ea <check_keyboard+0xae>
				}
				else{
					handle_key_reset(col, row);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff5b 	bl	80031a0 <handle_key_reset>
	    for (int row = 0; row < 4; row++) {
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3301      	adds	r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	ddb7      	ble.n	8003266 <check_keyboard+0x2a>
				}
	    	}
	    }
	    set_column(col, GPIO_PIN_SET);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2101      	movs	r1, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fef9 	bl	80030f4 <set_column>
	for (int col = 0; col < 3; col++) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b02      	cmp	r3, #2
 800330c:	dda2      	ble.n	8003254 <check_keyboard+0x18>
	}
	return x;
 800330e:	4b03      	ldr	r3, [pc, #12]	@ (800331c <check_keyboard+0xe0>)
 8003310:	781b      	ldrb	r3, [r3, #0]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bd90      	pop	{r4, r7, pc}
 800331a:	bf00      	nop
 800331c:	200001b0 	.word	0x200001b0
 8003320:	200001b4 	.word	0x200001b4
 8003324:	200001b8 	.word	0x200001b8
 8003328:	200001e8 	.word	0x200001e8

<<<<<<< HEAD
08003098 <lcd_send_cmd>:
>>>>>>> 0207771 (switch changed to function array)
=======
0800332c <lcd_send_cmd>:
>>>>>>> c1d5507 (packet_list and sim800L alert)
 */
#include "lcd_driver.h"
static I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
<<<<<<< HEAD
<<<<<<< HEAD
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	f023 030f 	bic.w	r3, r3, #15
 8003b68:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	f043 030c 	orr.w	r3, r3, #12
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	f043 0308 	orr.w	r3, r3, #8
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	f043 030c 	orr.w	r3, r3, #12
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8003b8e:	7bbb      	ldrb	r3, [r7, #14]
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b98:	f107 0208 	add.w	r2, r7, #8
 8003b9c:	2364      	movs	r3, #100	@ 0x64
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	214e      	movs	r1, #78	@ 0x4e
 8003ba4:	4803      	ldr	r0, [pc, #12]	@ (8003bb4 <lcd_send_cmd+0x5c>)
 8003ba6:	f7fe f8b1 	bl	8001d0c <HAL_I2C_Master_Transmit>
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000184 	.word	0x20000184

08003bb8 <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (I2C_HandleTypeDef i2c)
{
 8003bb8:	b084      	sub	sp, #16
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	f107 0c08 	add.w	ip, r7, #8
 8003bc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 8003bc6:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <lcd_init+0x98>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f107 0308 	add.w	r3, r7, #8
 8003bce:	2254      	movs	r2, #84	@ 0x54
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f000 fbb4 	bl	800433e <memcpy>
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003bd6:	2032      	movs	r0, #50	@ 0x32
 8003bd8:	f7fd fcac 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003bdc:	2030      	movs	r0, #48	@ 0x30
 8003bde:	f7ff ffbb 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003be2:	2005      	movs	r0, #5
 8003be4:	f7fd fca6 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003be8:	2030      	movs	r0, #48	@ 0x30
 8003bea:	f7ff ffb5 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7fd fca0 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003bf4:	2030      	movs	r0, #48	@ 0x30
 8003bf6:	f7ff ffaf 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(10);
 8003bfa:	200a      	movs	r0, #10
 8003bfc:	f7fd fc9a 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003c00:	2020      	movs	r0, #32
 8003c02:	f7ff ffa9 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(10);
 8003c06:	200a      	movs	r0, #10
 8003c08:	f7fd fc94 	bl	8001534 <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003c0c:	2028      	movs	r0, #40	@ 0x28
 8003c0e:	f7ff ffa3 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(1);
 8003c12:	2001      	movs	r0, #1
 8003c14:	f7fd fc8e 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003c18:	2008      	movs	r0, #8
 8003c1a:	f7ff ff9d 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(1);
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f7fd fc88 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7ff ff97 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(2);
 8003c2a:	2002      	movs	r0, #2
 8003c2c:	f7fd fc82 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003c30:	2006      	movs	r0, #6
 8003c32:	f7ff ff91 	bl	8003b58 <lcd_send_cmd>
	HAL_Delay(1);
 8003c36:	2001      	movs	r0, #1
 8003c38:	f7fd fc7c 	bl	8001534 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003c3c:	200c      	movs	r0, #12
 8003c3e:	f7ff ff8b 	bl	8003b58 <lcd_send_cmd>
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c4a:	b004      	add	sp, #16
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000184 	.word	0x20000184

08003c54 <s_to_ms>:
	memset(str,0,14);
	len = 0;
	changed = true;
}

uint32_t s_to_ms(uint32_t s){return s*1000UL;}
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <state_machine_init>:

//IMPLEMENTATIONS
void state_machine_init(char data_blob[64]){
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	char temp[8];
	for(size_t i = 0; i < 64; ++i)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e00d      	b.n	8003c9e <state_machine_init+0x2a>
		if(data_blob[i] == '*') data_blob[i] = '\0';
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c8c:	d104      	bne.n	8003c98 <state_machine_init+0x24>
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4413      	add	r3, r2
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ca2:	d9ee      	bls.n	8003c82 <state_machine_init+0xe>
	memcpy(numbers, data_blob, 48);
 8003ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <state_machine_init+0xac>)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	461c      	mov	r4, r3
 8003caa:	4616      	mov	r6, r2
 8003cac:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8003cb0:	4635      	mov	r5, r6
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cbe:	3410      	adds	r4, #16
 8003cc0:	3610      	adds	r6, #16
 8003cc2:	4564      	cmp	r4, ip
 8003cc4:	d1f4      	bne.n	8003cb0 <state_machine_init+0x3c>
	memcpy(pin, data_blob + 48, 8);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3330      	adds	r3, #48	@ 0x30
 8003cca:	2208      	movs	r2, #8
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4815      	ldr	r0, [pc, #84]	@ (8003d24 <state_machine_init+0xb0>)
 8003cd0:	f000 fb35 	bl	800433e <memcpy>
	memcpy(temp, data_blob + 56, 8);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	6810      	ldr	r0, [r2, #0]
 8003ce0:	6851      	ldr	r1, [r2, #4]
 8003ce2:	c303      	stmia	r3!, {r0, r1}


	countdown_delay = strtol(temp, NULL, 10);
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	220a      	movs	r2, #10
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 f897 	bl	8003e20 <strtol>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003d28 <state_machine_init+0xb4>)
 8003cf8:	601a      	str	r2, [r3, #0]
	pin[strlen(pin)] = '#';
 8003cfa:	480a      	ldr	r0, [pc, #40]	@ (8003d24 <state_machine_init+0xb0>)
 8003cfc:	f7fc fa70 	bl	80001e0 <strlen>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4a08      	ldr	r2, [pc, #32]	@ (8003d24 <state_machine_init+0xb0>)
 8003d04:	2123      	movs	r1, #35	@ 0x23
 8003d06:	54d1      	strb	r1, [r2, r3]
	countdown_delay = s_to_ms(countdown_delay);
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <state_machine_init+0xb4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ffa1 	bl	8003c54 <s_to_ms>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4a04      	ldr	r2, [pc, #16]	@ (8003d28 <state_machine_init+0xb4>)
 8003d16:	6013      	str	r3, [r2, #0]

}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d20:	200001e4 	.word	0x200001e4
 8003d24:	200001d8 	.word	0x200001d8
 8003d28:	20000214 	.word	0x20000214

08003d2c <_strtol_l.constprop.0>:
 8003d2c:	2b24      	cmp	r3, #36	@ 0x24
 8003d2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d32:	4686      	mov	lr, r0
 8003d34:	4690      	mov	r8, r2
 8003d36:	d801      	bhi.n	8003d3c <_strtol_l.constprop.0+0x10>
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d106      	bne.n	8003d4a <_strtol_l.constprop.0+0x1e>
 8003d3c:	f000 fad2 	bl	80042e4 <__errno>
 8003d40:	2316      	movs	r3, #22
 8003d42:	6003      	str	r3, [r0, #0]
 8003d44:	2000      	movs	r0, #0
 8003d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4a:	4834      	ldr	r0, [pc, #208]	@ (8003e1c <_strtol_l.constprop.0+0xf0>)
 8003d4c:	460d      	mov	r5, r1
 8003d4e:	462a      	mov	r2, r5
 8003d50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d54:	5d06      	ldrb	r6, [r0, r4]
 8003d56:	f016 0608 	ands.w	r6, r6, #8
 8003d5a:	d1f8      	bne.n	8003d4e <_strtol_l.constprop.0+0x22>
 8003d5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8003d5e:	d12d      	bne.n	8003dbc <_strtol_l.constprop.0+0x90>
 8003d60:	782c      	ldrb	r4, [r5, #0]
 8003d62:	2601      	movs	r6, #1
 8003d64:	1c95      	adds	r5, r2, #2
 8003d66:	f033 0210 	bics.w	r2, r3, #16
 8003d6a:	d109      	bne.n	8003d80 <_strtol_l.constprop.0+0x54>
 8003d6c:	2c30      	cmp	r4, #48	@ 0x30
 8003d6e:	d12a      	bne.n	8003dc6 <_strtol_l.constprop.0+0x9a>
 8003d70:	782a      	ldrb	r2, [r5, #0]
 8003d72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003d76:	2a58      	cmp	r2, #88	@ 0x58
 8003d78:	d125      	bne.n	8003dc6 <_strtol_l.constprop.0+0x9a>
 8003d7a:	786c      	ldrb	r4, [r5, #1]
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	3502      	adds	r5, #2
 8003d80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003d84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003d88:	2200      	movs	r2, #0
 8003d8a:	fbbc f9f3 	udiv	r9, ip, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	fb03 ca19 	mls	sl, r3, r9, ip
 8003d94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003d98:	2f09      	cmp	r7, #9
 8003d9a:	d81b      	bhi.n	8003dd4 <_strtol_l.constprop.0+0xa8>
 8003d9c:	463c      	mov	r4, r7
 8003d9e:	42a3      	cmp	r3, r4
 8003da0:	dd27      	ble.n	8003df2 <_strtol_l.constprop.0+0xc6>
 8003da2:	1c57      	adds	r7, r2, #1
 8003da4:	d007      	beq.n	8003db6 <_strtol_l.constprop.0+0x8a>
 8003da6:	4581      	cmp	r9, r0
 8003da8:	d320      	bcc.n	8003dec <_strtol_l.constprop.0+0xc0>
 8003daa:	d101      	bne.n	8003db0 <_strtol_l.constprop.0+0x84>
 8003dac:	45a2      	cmp	sl, r4
 8003dae:	db1d      	blt.n	8003dec <_strtol_l.constprop.0+0xc0>
 8003db0:	fb00 4003 	mla	r0, r0, r3, r4
 8003db4:	2201      	movs	r2, #1
 8003db6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dba:	e7eb      	b.n	8003d94 <_strtol_l.constprop.0+0x68>
 8003dbc:	2c2b      	cmp	r4, #43	@ 0x2b
 8003dbe:	bf04      	itt	eq
 8003dc0:	782c      	ldrbeq	r4, [r5, #0]
 8003dc2:	1c95      	addeq	r5, r2, #2
 8003dc4:	e7cf      	b.n	8003d66 <_strtol_l.constprop.0+0x3a>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1da      	bne.n	8003d80 <_strtol_l.constprop.0+0x54>
 8003dca:	2c30      	cmp	r4, #48	@ 0x30
 8003dcc:	bf0c      	ite	eq
 8003dce:	2308      	moveq	r3, #8
 8003dd0:	230a      	movne	r3, #10
 8003dd2:	e7d5      	b.n	8003d80 <_strtol_l.constprop.0+0x54>
 8003dd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003dd8:	2f19      	cmp	r7, #25
 8003dda:	d801      	bhi.n	8003de0 <_strtol_l.constprop.0+0xb4>
 8003ddc:	3c37      	subs	r4, #55	@ 0x37
 8003dde:	e7de      	b.n	8003d9e <_strtol_l.constprop.0+0x72>
 8003de0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003de4:	2f19      	cmp	r7, #25
 8003de6:	d804      	bhi.n	8003df2 <_strtol_l.constprop.0+0xc6>
 8003de8:	3c57      	subs	r4, #87	@ 0x57
 8003dea:	e7d8      	b.n	8003d9e <_strtol_l.constprop.0+0x72>
 8003dec:	f04f 32ff 	mov.w	r2, #4294967295
 8003df0:	e7e1      	b.n	8003db6 <_strtol_l.constprop.0+0x8a>
 8003df2:	1c53      	adds	r3, r2, #1
 8003df4:	d108      	bne.n	8003e08 <_strtol_l.constprop.0+0xdc>
 8003df6:	2322      	movs	r3, #34	@ 0x22
 8003df8:	f8ce 3000 	str.w	r3, [lr]
 8003dfc:	4660      	mov	r0, ip
 8003dfe:	f1b8 0f00 	cmp.w	r8, #0
 8003e02:	d0a0      	beq.n	8003d46 <_strtol_l.constprop.0+0x1a>
 8003e04:	1e69      	subs	r1, r5, #1
 8003e06:	e006      	b.n	8003e16 <_strtol_l.constprop.0+0xea>
 8003e08:	b106      	cbz	r6, 8003e0c <_strtol_l.constprop.0+0xe0>
 8003e0a:	4240      	negs	r0, r0
 8003e0c:	f1b8 0f00 	cmp.w	r8, #0
 8003e10:	d099      	beq.n	8003d46 <_strtol_l.constprop.0+0x1a>
 8003e12:	2a00      	cmp	r2, #0
 8003e14:	d1f6      	bne.n	8003e04 <_strtol_l.constprop.0+0xd8>
 8003e16:	f8c8 1000 	str.w	r1, [r8]
 8003e1a:	e794      	b.n	8003d46 <_strtol_l.constprop.0+0x1a>
 8003e1c:	080053ad 	.word	0x080053ad

08003e20 <strtol>:
 8003e20:	4613      	mov	r3, r2
 8003e22:	460a      	mov	r2, r1
 8003e24:	4601      	mov	r1, r0
 8003e26:	4802      	ldr	r0, [pc, #8]	@ (8003e30 <strtol+0x10>)
 8003e28:	6800      	ldr	r0, [r0, #0]
 8003e2a:	f7ff bf7f 	b.w	8003d2c <_strtol_l.constprop.0>
 8003e2e:	bf00      	nop
 8003e30:	20000018 	.word	0x20000018

08003e34 <std>:
 8003e34:	2300      	movs	r3, #0
 8003e36:	b510      	push	{r4, lr}
 8003e38:	4604      	mov	r4, r0
 8003e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e42:	6083      	str	r3, [r0, #8]
 8003e44:	8181      	strh	r1, [r0, #12]
 8003e46:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e48:	81c2      	strh	r2, [r0, #14]
 8003e4a:	6183      	str	r3, [r0, #24]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	2208      	movs	r2, #8
 8003e50:	305c      	adds	r0, #92	@ 0x5c
 8003e52:	f000 f9f9 	bl	8004248 <memset>
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <std+0x58>)
 8003e58:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e90 <std+0x5c>)
 8003e5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <std+0x60>)
 8003e60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e62:	4b0d      	ldr	r3, [pc, #52]	@ (8003e98 <std+0x64>)
 8003e64:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <std+0x68>)
 8003e68:	6224      	str	r4, [r4, #32]
 8003e6a:	429c      	cmp	r4, r3
 8003e6c:	d006      	beq.n	8003e7c <std+0x48>
 8003e6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e72:	4294      	cmp	r4, r2
 8003e74:	d002      	beq.n	8003e7c <std+0x48>
 8003e76:	33d0      	adds	r3, #208	@ 0xd0
 8003e78:	429c      	cmp	r4, r3
 8003e7a:	d105      	bne.n	8003e88 <std+0x54>
 8003e7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e84:	f000 ba58 	b.w	8004338 <__retarget_lock_init_recursive>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	bf00      	nop
 8003e8c:	08004099 	.word	0x08004099
 8003e90:	080040bb 	.word	0x080040bb
 8003e94:	080040f3 	.word	0x080040f3
 8003e98:	08004117 	.word	0x08004117
 8003e9c:	20000218 	.word	0x20000218

08003ea0 <stdio_exit_handler>:
 8003ea0:	4a02      	ldr	r2, [pc, #8]	@ (8003eac <stdio_exit_handler+0xc>)
 8003ea2:	4903      	ldr	r1, [pc, #12]	@ (8003eb0 <stdio_exit_handler+0x10>)
 8003ea4:	4803      	ldr	r0, [pc, #12]	@ (8003eb4 <stdio_exit_handler+0x14>)
 8003ea6:	f000 b869 	b.w	8003f7c <_fwalk_sglue>
 8003eaa:	bf00      	nop
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	08004bf5 	.word	0x08004bf5
 8003eb4:	2000001c 	.word	0x2000001c
=======
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
=======
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af02      	add	r7, sp, #8
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
>>>>>>> c1d5507 (packet_list and sim800L alert)
	char data_u, data_l;
	data_u = (cmd&0xf0);
 8003336:	79fb      	ldrb	r3, [r7, #7]
 8003338:	f023 030f 	bic.w	r3, r3, #15
 800333c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	f043 030c 	orr.w	r3, r3, #12
 800334a:	b2db      	uxtb	r3, r3
 800334c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	b2db      	uxtb	r3, r3
 8003356:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	f043 030c 	orr.w	r3, r3, #12
 800335e:	b2db      	uxtb	r3, r3
 8003360:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8003362:	7bbb      	ldrb	r3, [r7, #14]
 8003364:	f043 0308 	orr.w	r3, r3, #8
 8003368:	b2db      	uxtb	r3, r3
 800336a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800336c:	f107 0208 	add.w	r2, r7, #8
 8003370:	2364      	movs	r3, #100	@ 0x64
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2304      	movs	r3, #4
 8003376:	214e      	movs	r1, #78	@ 0x4e
 8003378:	4803      	ldr	r0, [pc, #12]	@ (8003388 <lcd_send_cmd+0x5c>)
 800337a:	f7fe f9a1 	bl	80016c0 <HAL_I2C_Master_Transmit>
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	200001f4 	.word	0x200001f4

0800338c <lcd_send_data>:

void lcd_send_data (char data)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af02      	add	r7, sp, #8
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f023 030f 	bic.w	r3, r3, #15
 800339c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	f043 030d 	orr.w	r3, r3, #13
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	f043 0309 	orr.w	r3, r3, #9
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 80033b8:	7bbb      	ldrb	r3, [r7, #14]
 80033ba:	f043 030d 	orr.w	r3, r3, #13
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 80033c2:	7bbb      	ldrb	r3, [r7, #14]
 80033c4:	f043 0309 	orr.w	r3, r3, #9
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80033cc:	f107 0208 	add.w	r2, r7, #8
 80033d0:	2364      	movs	r3, #100	@ 0x64
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2304      	movs	r3, #4
 80033d6:	214e      	movs	r1, #78	@ 0x4e
 80033d8:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <lcd_send_data+0x5c>)
 80033da:	f7fe f971 	bl	80016c0 <HAL_I2C_Master_Transmit>
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200001f4 	.word	0x200001f4

080033ec <lcd_init>:

void lcd_init (I2C_HandleTypeDef i2c)
{
 80033ec:	b084      	sub	sp, #16
 80033ee:	b580      	push	{r7, lr}
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	f107 0c08 	add.w	ip, r7, #8
 80033f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 80033fa:	4b22      	ldr	r3, [pc, #136]	@ (8003484 <lcd_init+0x98>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f107 0308 	add.w	r3, r7, #8
 8003402:	2254      	movs	r2, #84	@ 0x54
 8003404:	4619      	mov	r1, r3
 8003406:	f001 f9fa 	bl	80047fe <memcpy>
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800340a:	2032      	movs	r0, #50	@ 0x32
 800340c:	f7fd fd54 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003410:	2030      	movs	r0, #48	@ 0x30
 8003412:	f7ff ff8b 	bl	800332c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003416:	2005      	movs	r0, #5
 8003418:	f7fd fd4e 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800341c:	2030      	movs	r0, #48	@ 0x30
 800341e:	f7ff ff85 	bl	800332c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003422:	2001      	movs	r0, #1
 8003424:	f7fd fd48 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003428:	2030      	movs	r0, #48	@ 0x30
 800342a:	f7ff ff7f 	bl	800332c <lcd_send_cmd>
	HAL_Delay(10);
 800342e:	200a      	movs	r0, #10
 8003430:	f7fd fd42 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003434:	2020      	movs	r0, #32
 8003436:	f7ff ff79 	bl	800332c <lcd_send_cmd>
	HAL_Delay(10);
 800343a:	200a      	movs	r0, #10
 800343c:	f7fd fd3c 	bl	8000eb8 <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003440:	2028      	movs	r0, #40	@ 0x28
 8003442:	f7ff ff73 	bl	800332c <lcd_send_cmd>
	HAL_Delay(1);
 8003446:	2001      	movs	r0, #1
 8003448:	f7fd fd36 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800344c:	2008      	movs	r0, #8
 800344e:	f7ff ff6d 	bl	800332c <lcd_send_cmd>
	HAL_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f7fd fd30 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003458:	2001      	movs	r0, #1
 800345a:	f7ff ff67 	bl	800332c <lcd_send_cmd>
	HAL_Delay(2);
 800345e:	2002      	movs	r0, #2
 8003460:	f7fd fd2a 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003464:	2006      	movs	r0, #6
 8003466:	f7ff ff61 	bl	800332c <lcd_send_cmd>
	HAL_Delay(1);
 800346a:	2001      	movs	r0, #1
 800346c:	f7fd fd24 	bl	8000eb8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003470:	200c      	movs	r0, #12
 8003472:	f7ff ff5b 	bl	800332c <lcd_send_cmd>
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800347e:	b004      	add	sp, #16
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	200001f4 	.word	0x200001f4

08003488 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003490:	e006      	b.n	80034a0 <lcd_send_string+0x18>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff76 	bl	800338c <lcd_send_data>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f4      	bne.n	8003492 <lcd_send_string+0xa>
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <lcd_clear>:

void lcd_clear(void){
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 80034b8:	2100      	movs	r1, #0
 80034ba:	2000      	movs	r0, #0
 80034bc:	f000 f80e 	bl	80034dc <lcd_put_cur>
	  lcd_send_string ("                ");
 80034c0:	4805      	ldr	r0, [pc, #20]	@ (80034d8 <lcd_clear+0x24>)
 80034c2:	f7ff ffe1 	bl	8003488 <lcd_send_string>
	  lcd_put_cur(1, 0);
 80034c6:	2100      	movs	r1, #0
 80034c8:	2001      	movs	r0, #1
 80034ca:	f000 f807 	bl	80034dc <lcd_put_cur>
	  lcd_send_string ("                ");
 80034ce:	4802      	ldr	r0, [pc, #8]	@ (80034d8 <lcd_clear+0x24>)
 80034d0:	f7ff ffda 	bl	8003488 <lcd_send_string>
}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	08005318 	.word	0x08005318

080034dc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	switch (row)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <lcd_put_cur+0x18>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d005      	beq.n	80034fe <lcd_put_cur+0x22>
 80034f2:	e009      	b.n	8003508 <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034fa:	603b      	str	r3, [r7, #0]
			break;
 80034fc:	e004      	b.n	8003508 <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003504:	603b      	str	r3, [r7, #0]
			break;
 8003506:	bf00      	nop
	}
	lcd_send_cmd (col);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff0d 	bl	800332c <lcd_send_cmd>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <save_new_state>:
static char pin[9] = "";
static char numbers[48];

static uint32_t countdown_delay;
//HELPER FUNCTIONS
void save_new_state(void){
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b092      	sub	sp, #72	@ 0x48
 8003520:	af00      	add	r7, sp, #0
	char to_save[64];
	memset(to_save, 0, 64);
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2240      	movs	r2, #64	@ 0x40
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f8ed 	bl	8004708 <memset>
	memcpy(to_save, numbers, 48);
 800352e:	4b22      	ldr	r3, [pc, #136]	@ (80035b8 <save_new_state+0x9c>)
 8003530:	1d3c      	adds	r4, r7, #4
 8003532:	461d      	mov	r5, r3
 8003534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800353a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800353c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003540:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(to_save + 48, pin, 8);
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	3330      	adds	r3, #48	@ 0x30
 8003548:	2208      	movs	r2, #8
 800354a:	491c      	ldr	r1, [pc, #112]	@ (80035bc <save_new_state+0xa0>)
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f956 	bl	80047fe <memcpy>
	snprintf(to_save + 56, 8, "%ld", countdown_delay/1000);
 8003552:	1d38      	adds	r0, r7, #4
 8003554:	3038      	adds	r0, #56	@ 0x38
 8003556:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <save_new_state+0xa4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1a      	ldr	r2, [pc, #104]	@ (80035c4 <save_new_state+0xa8>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	4a19      	ldr	r2, [pc, #100]	@ (80035c8 <save_new_state+0xac>)
 8003564:	2108      	movs	r1, #8
 8003566:	f000 ffc3 	bl	80044f0 <sniprintf>
	for(size_t i = 0; i < 64; ++i)
 800356a:	2300      	movs	r3, #0
 800356c:	647b      	str	r3, [r7, #68]	@ 0x44
 800356e:	e013      	b.n	8003598 <save_new_state+0x7c>
		if(to_save[i] == '\0' || to_save[i] == '#') to_save[i] = '*';
 8003570:	1d3a      	adds	r2, r7, #4
 8003572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003574:	4413      	add	r3, r2
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <save_new_state+0x6c>
 800357c:	1d3a      	adds	r2, r7, #4
 800357e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003580:	4413      	add	r3, r2
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b23      	cmp	r3, #35	@ 0x23
 8003586:	d104      	bne.n	8003592 <save_new_state+0x76>
 8003588:	1d3a      	adds	r2, r7, #4
 800358a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358c:	4413      	add	r3, r2
 800358e:	222a      	movs	r2, #42	@ 0x2a
 8003590:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8003592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003594:	3301      	adds	r3, #1
 8003596:	647b      	str	r3, [r7, #68]	@ 0x44
 8003598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800359a:	2b3f      	cmp	r3, #63	@ 0x3f
 800359c:	d9e8      	bls.n	8003570 <save_new_state+0x54>
	flash_write_erase_sector7();
 800359e:	f7ff fcd5 	bl	8002f4c <flash_write_erase_sector7>
	flash_write_multiple_word(0x08060000, (uint32_t *)to_save, 16);
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	2210      	movs	r2, #16
 80035a6:	4619      	mov	r1, r3
 80035a8:	4808      	ldr	r0, [pc, #32]	@ (80035cc <save_new_state+0xb0>)
 80035aa:	f7ff fd1f 	bl	8002fec <flash_write_multiple_word>

}
 80035ae:	bf00      	nop
 80035b0:	3748      	adds	r7, #72	@ 0x48
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bdb0      	pop	{r4, r5, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000274 	.word	0x20000274
 80035bc:	20000268 	.word	0x20000268
 80035c0:	200002a4 	.word	0x200002a4
 80035c4:	10624dd3 	.word	0x10624dd3
 80035c8:	08005344 	.word	0x08005344
 80035cc:	08060000 	.word	0x08060000

080035d0 <change_state>:

static inline void change_state(alarm_state new_state){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
	state = new_state;
 80035da:	4a09      	ldr	r2, [pc, #36]	@ (8003600 <change_state+0x30>)
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	7013      	strb	r3, [r2, #0]
	memset(str,0,14);
 80035e0:	220e      	movs	r2, #14
 80035e2:	2100      	movs	r1, #0
 80035e4:	4807      	ldr	r0, [pc, #28]	@ (8003604 <change_state+0x34>)
 80035e6:	f001 f88f 	bl	8004708 <memset>
	len = 0;
 80035ea:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <change_state+0x38>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
	changed = true;
 80035f0:	4b06      	ldr	r3, [pc, #24]	@ (800360c <change_state+0x3c>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000
 8003604:	20000248 	.word	0x20000248
 8003608:	20000256 	.word	0x20000256
 800360c:	2000000d 	.word	0x2000000d

08003610 <s_to_ms>:

uint32_t s_to_ms(uint32_t s){return s*1000UL;}
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <state_machine_init>:

//IMPLEMENTATIONS
void state_machine_init(char data_blob[64], UART_HandleTypeDef* uart){
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	char temp[8];
	for(size_t i = 0; i < 64; ++i)
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e00d      	b.n	800365c <state_machine_init+0x2c>
		if(data_blob[i] == '*') data_blob[i] = '\0';
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	4413      	add	r3, r2
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b2a      	cmp	r3, #42	@ 0x2a
 800364a:	d104      	bne.n	8003656 <state_machine_init+0x26>
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	4413      	add	r3, r2
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3301      	adds	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003660:	d9ee      	bls.n	8003640 <state_machine_init+0x10>
	memcpy(numbers, data_blob, 48);
 8003662:	4a20      	ldr	r2, [pc, #128]	@ (80036e4 <state_machine_init+0xb4>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	461c      	mov	r4, r3
 8003668:	4616      	mov	r6, r2
 800366a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800366e:	4635      	mov	r5, r6
 8003670:	4623      	mov	r3, r4
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800367c:	3410      	adds	r4, #16
 800367e:	3610      	adds	r6, #16
 8003680:	4564      	cmp	r4, ip
 8003682:	d1f4      	bne.n	800366e <state_machine_init+0x3e>
	memcpy(pin, data_blob + 48, 8);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3330      	adds	r3, #48	@ 0x30
 8003688:	2208      	movs	r2, #8
 800368a:	4619      	mov	r1, r3
 800368c:	4816      	ldr	r0, [pc, #88]	@ (80036e8 <state_machine_init+0xb8>)
 800368e:	f001 f8b6 	bl	80047fe <memcpy>
	memcpy(temp, data_blob + 56, 8);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	6810      	ldr	r0, [r2, #0]
 800369e:	6851      	ldr	r1, [r2, #4]
 80036a0:	c303      	stmia	r3!, {r0, r1}


	countdown_delay = strtol(temp, NULL, 10);
 80036a2:	f107 030c 	add.w	r3, r7, #12
 80036a6:	220a      	movs	r2, #10
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fdf6 	bl	800429c <strtol>
 80036b0:	4603      	mov	r3, r0
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <state_machine_init+0xbc>)
 80036b6:	601a      	str	r2, [r3, #0]
	pin[strlen(pin)] = '#';
 80036b8:	480b      	ldr	r0, [pc, #44]	@ (80036e8 <state_machine_init+0xb8>)
 80036ba:	f7fc fd9b 	bl	80001f4 <strlen>
 80036be:	4603      	mov	r3, r0
 80036c0:	4a09      	ldr	r2, [pc, #36]	@ (80036e8 <state_machine_init+0xb8>)
 80036c2:	2123      	movs	r1, #35	@ 0x23
 80036c4:	54d1      	strb	r1, [r2, r3]
	countdown_delay = s_to_ms(countdown_delay);
 80036c6:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <state_machine_init+0xbc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff ffa0 	bl	8003610 <s_to_ms>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4a06      	ldr	r2, [pc, #24]	@ (80036ec <state_machine_init+0xbc>)
 80036d4:	6013      	str	r3, [r2, #0]
	SIM800L_uart = uart;
 80036d6:	4a06      	ldr	r2, [pc, #24]	@ (80036f0 <state_machine_init+0xc0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6013      	str	r3, [r2, #0]

}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e4:	20000274 	.word	0x20000274
 80036e8:	20000268 	.word	0x20000268
 80036ec:	200002a4 	.word	0x200002a4
 80036f0:	20000258 	.word	0x20000258

080036f4 <state_machine_run>:

void state_machine_run(char input){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
	if(input){
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <state_machine_run+0x2a>
		changed = true;
 8003704:	4b0b      	ldr	r3, [pc, #44]	@ (8003734 <state_machine_run+0x40>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
		str[len++] = input;
 800370a:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <state_machine_run+0x44>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	b2d1      	uxtb	r1, r2
 8003712:	4a09      	ldr	r2, [pc, #36]	@ (8003738 <state_machine_run+0x44>)
 8003714:	7011      	strb	r1, [r2, #0]
 8003716:	4619      	mov	r1, r3
 8003718:	4a08      	ldr	r2, [pc, #32]	@ (800373c <state_machine_run+0x48>)
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	5453      	strb	r3, [r2, r1]
	}
	static void(*state_functions[8])(void) = {state_machine_armed, state_machine_countdown, state_machine_alert,
			state_machine_disarmed, state_machine_set_new_pin, state_machine_menage_number,
			state_machine_replace_number, state_machine_set_alert_time};
	state_functions[state]();
 800371e:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <state_machine_run+0x4c>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <state_machine_run+0x50>)
 8003726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372a:	4798      	blx	r3
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000000d 	.word	0x2000000d
 8003738:	20000256 	.word	0x20000256
 800373c:	20000248 	.word	0x20000248
 8003740:	20000000 	.word	0x20000000
 8003744:	2000001c 	.word	0x2000001c

08003748 <state_machine_armed>:

void state_machine_armed(void){
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
	GPIO_PinState singal_state = HAL_GPIO_ReadPin(Alarm_Signal_GPIO_Port, Alarm_Signal_Pin);
 800374e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003752:	484d      	ldr	r0, [pc, #308]	@ (8003888 <state_machine_armed+0x140>)
 8003754:	f7fd fe3e 	bl	80013d4 <HAL_GPIO_ReadPin>
 8003758:	4603      	mov	r3, r0
 800375a:	71fb      	strb	r3, [r7, #7]
	if(changed == true || !singal_state || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 800375c:	4b4b      	ldr	r3, [pc, #300]	@ (800388c <state_machine_armed+0x144>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10c      	bne.n	800377e <state_machine_armed+0x36>
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <state_machine_armed+0x36>
 800376a:	f7fd fb99 	bl	8000ea0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	4b47      	ldr	r3, [pc, #284]	@ (8003890 <state_machine_armed+0x148>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800377a:	f240 8081 	bls.w	8003880 <state_machine_armed+0x138>
		if(len == 0 && changed){
 800377e:	4b45      	ldr	r3, [pc, #276]	@ (8003894 <state_machine_armed+0x14c>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d117      	bne.n	80037b6 <state_machine_armed+0x6e>
 8003786:	4b41      	ldr	r3, [pc, #260]	@ (800388c <state_machine_armed+0x144>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d013      	beq.n	80037b6 <state_machine_armed+0x6e>
			changed = false;
 800378e:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <state_machine_armed+0x144>)
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003794:	f7ff fe8e 	bl	80034b4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003798:	2100      	movs	r1, #0
 800379a:	2000      	movs	r0, #0
 800379c:	f7ff fe9e 	bl	80034dc <lcd_put_cur>
			lcd_send_string ("ARMED");
 80037a0:	483d      	ldr	r0, [pc, #244]	@ (8003898 <state_machine_armed+0x150>)
 80037a2:	f7ff fe71 	bl	8003488 <lcd_send_string>
			lcd_put_cur(1, 0);
 80037a6:	2100      	movs	r1, #0
 80037a8:	2001      	movs	r0, #1
 80037aa:	f7ff fe97 	bl	80034dc <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 80037ae:	483b      	ldr	r0, [pc, #236]	@ (800389c <state_machine_armed+0x154>)
 80037b0:	f7ff fe6a 	bl	8003488 <lcd_send_string>
 80037b4:	e064      	b.n	8003880 <state_machine_armed+0x138>
		}
		else if(!singal_state){
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <state_machine_armed+0x86>
			change_state(ARMED_COUNTDOWN);
 80037bc:	2001      	movs	r0, #1
 80037be:	f7ff ff07 	bl	80035d0 <change_state>
			countdown_start = HAL_GetTick();
 80037c2:	f7fd fb6d 	bl	8000ea0 <HAL_GetTick>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4a35      	ldr	r2, [pc, #212]	@ (80038a0 <state_machine_armed+0x158>)
 80037ca:	6013      	str	r3, [r2, #0]
			}
>>>>>>> 0207771 (switch changed to function array)

08003eb8 <cleanup_stdio>:
 8003eb8:	6841      	ldr	r1, [r0, #4]
 8003eba:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <cleanup_stdio+0x34>)
 8003ebc:	4299      	cmp	r1, r3
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	d001      	beq.n	8003ec8 <cleanup_stdio+0x10>
 8003ec4:	f000 fe96 	bl	8004bf4 <_fflush_r>
 8003ec8:	68a1      	ldr	r1, [r4, #8]
 8003eca:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <cleanup_stdio+0x38>)
 8003ecc:	4299      	cmp	r1, r3
 8003ece:	d002      	beq.n	8003ed6 <cleanup_stdio+0x1e>
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f000 fe8f 	bl	8004bf4 <_fflush_r>
 8003ed6:	68e1      	ldr	r1, [r4, #12]
 8003ed8:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <cleanup_stdio+0x3c>)
 8003eda:	4299      	cmp	r1, r3
 8003edc:	d004      	beq.n	8003ee8 <cleanup_stdio+0x30>
 8003ede:	4620      	mov	r0, r4
 8003ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ee4:	f000 be86 	b.w	8004bf4 <_fflush_r>
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	20000218 	.word	0x20000218
 8003ef0:	20000280 	.word	0x20000280
 8003ef4:	200002e8 	.word	0x200002e8

<<<<<<< HEAD
08003ef8 <global_stdio_init.part.0>:
 8003ef8:	b510      	push	{r4, lr}
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <global_stdio_init.part.0+0x30>)
 8003efc:	4c0b      	ldr	r4, [pc, #44]	@ (8003f2c <global_stdio_init.part.0+0x34>)
 8003efe:	4a0c      	ldr	r2, [pc, #48]	@ (8003f30 <global_stdio_init.part.0+0x38>)
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	4620      	mov	r0, r4
 8003f04:	2200      	movs	r2, #0
 8003f06:	2104      	movs	r1, #4
 8003f08:	f7ff ff94 	bl	8003e34 <std>
 8003f0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f10:	2201      	movs	r2, #1
 8003f12:	2109      	movs	r1, #9
 8003f14:	f7ff ff8e 	bl	8003e34 <std>
 8003f18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f22:	2112      	movs	r1, #18
 8003f24:	f7ff bf86 	b.w	8003e34 <std>
 8003f28:	20000350 	.word	0x20000350
 8003f2c:	20000218 	.word	0x20000218
 8003f30:	08003ea1 	.word	0x08003ea1

08003f34 <__sfp_lock_acquire>:
 8003f34:	4801      	ldr	r0, [pc, #4]	@ (8003f3c <__sfp_lock_acquire+0x8>)
 8003f36:	f000 ba00 	b.w	800433a <__retarget_lock_acquire_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	20000359 	.word	0x20000359

08003f40 <__sfp_lock_release>:
 8003f40:	4801      	ldr	r0, [pc, #4]	@ (8003f48 <__sfp_lock_release+0x8>)
 8003f42:	f000 b9fb 	b.w	800433c <__retarget_lock_release_recursive>
 8003f46:	bf00      	nop
 8003f48:	20000359 	.word	0x20000359

08003f4c <__sinit>:
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	4604      	mov	r4, r0
 8003f50:	f7ff fff0 	bl	8003f34 <__sfp_lock_acquire>
 8003f54:	6a23      	ldr	r3, [r4, #32]
 8003f56:	b11b      	cbz	r3, 8003f60 <__sinit+0x14>
 8003f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5c:	f7ff bff0 	b.w	8003f40 <__sfp_lock_release>
 8003f60:	4b04      	ldr	r3, [pc, #16]	@ (8003f74 <__sinit+0x28>)
 8003f62:	6223      	str	r3, [r4, #32]
 8003f64:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <__sinit+0x2c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f5      	bne.n	8003f58 <__sinit+0xc>
 8003f6c:	f7ff ffc4 	bl	8003ef8 <global_stdio_init.part.0>
 8003f70:	e7f2      	b.n	8003f58 <__sinit+0xc>
 8003f72:	bf00      	nop
 8003f74:	08003eb9 	.word	0x08003eb9
 8003f78:	20000350 	.word	0x20000350

08003f7c <_fwalk_sglue>:
 8003f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f80:	4607      	mov	r7, r0
 8003f82:	4688      	mov	r8, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	2600      	movs	r6, #0
 8003f88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f8c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f90:	d505      	bpl.n	8003f9e <_fwalk_sglue+0x22>
 8003f92:	6824      	ldr	r4, [r4, #0]
 8003f94:	2c00      	cmp	r4, #0
 8003f96:	d1f7      	bne.n	8003f88 <_fwalk_sglue+0xc>
 8003f98:	4630      	mov	r0, r6
 8003f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f9e:	89ab      	ldrh	r3, [r5, #12]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d907      	bls.n	8003fb4 <_fwalk_sglue+0x38>
 8003fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	d003      	beq.n	8003fb4 <_fwalk_sglue+0x38>
 8003fac:	4629      	mov	r1, r5
 8003fae:	4638      	mov	r0, r7
 8003fb0:	47c0      	blx	r8
 8003fb2:	4306      	orrs	r6, r0
 8003fb4:	3568      	adds	r5, #104	@ 0x68
 8003fb6:	e7e9      	b.n	8003f8c <_fwalk_sglue+0x10>

08003fb8 <iprintf>:
 8003fb8:	b40f      	push	{r0, r1, r2, r3}
 8003fba:	b507      	push	{r0, r1, r2, lr}
 8003fbc:	4906      	ldr	r1, [pc, #24]	@ (8003fd8 <iprintf+0x20>)
 8003fbe:	ab04      	add	r3, sp, #16
 8003fc0:	6808      	ldr	r0, [r1, #0]
 8003fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc6:	6881      	ldr	r1, [r0, #8]
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	f000 fae9 	bl	80045a0 <_vfiprintf_r>
 8003fce:	b003      	add	sp, #12
 8003fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd4:	b004      	add	sp, #16
 8003fd6:	4770      	bx	lr
 8003fd8:	20000018 	.word	0x20000018

08003fdc <_puts_r>:
 8003fdc:	6a03      	ldr	r3, [r0, #32]
 8003fde:	b570      	push	{r4, r5, r6, lr}
 8003fe0:	6884      	ldr	r4, [r0, #8]
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	460e      	mov	r6, r1
 8003fe6:	b90b      	cbnz	r3, 8003fec <_puts_r+0x10>
 8003fe8:	f7ff ffb0 	bl	8003f4c <__sinit>
 8003fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fee:	07db      	lsls	r3, r3, #31
 8003ff0:	d405      	bmi.n	8003ffe <_puts_r+0x22>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	0598      	lsls	r0, r3, #22
 8003ff6:	d402      	bmi.n	8003ffe <_puts_r+0x22>
 8003ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ffa:	f000 f99e 	bl	800433a <__retarget_lock_acquire_recursive>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	0719      	lsls	r1, r3, #28
 8004002:	d502      	bpl.n	800400a <_puts_r+0x2e>
 8004004:	6923      	ldr	r3, [r4, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d135      	bne.n	8004076 <_puts_r+0x9a>
 800400a:	4621      	mov	r1, r4
 800400c:	4628      	mov	r0, r5
 800400e:	f000 f8c5 	bl	800419c <__swsetup_r>
 8004012:	b380      	cbz	r0, 8004076 <_puts_r+0x9a>
 8004014:	f04f 35ff 	mov.w	r5, #4294967295
 8004018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800401a:	07da      	lsls	r2, r3, #31
 800401c:	d405      	bmi.n	800402a <_puts_r+0x4e>
 800401e:	89a3      	ldrh	r3, [r4, #12]
 8004020:	059b      	lsls	r3, r3, #22
 8004022:	d402      	bmi.n	800402a <_puts_r+0x4e>
 8004024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004026:	f000 f989 	bl	800433c <__retarget_lock_release_recursive>
 800402a:	4628      	mov	r0, r5
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	2b00      	cmp	r3, #0
 8004030:	da04      	bge.n	800403c <_puts_r+0x60>
 8004032:	69a2      	ldr	r2, [r4, #24]
 8004034:	429a      	cmp	r2, r3
 8004036:	dc17      	bgt.n	8004068 <_puts_r+0x8c>
 8004038:	290a      	cmp	r1, #10
 800403a:	d015      	beq.n	8004068 <_puts_r+0x8c>
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	6022      	str	r2, [r4, #0]
 8004042:	7019      	strb	r1, [r3, #0]
 8004044:	68a3      	ldr	r3, [r4, #8]
 8004046:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800404a:	3b01      	subs	r3, #1
 800404c:	60a3      	str	r3, [r4, #8]
 800404e:	2900      	cmp	r1, #0
 8004050:	d1ed      	bne.n	800402e <_puts_r+0x52>
 8004052:	2b00      	cmp	r3, #0
 8004054:	da11      	bge.n	800407a <_puts_r+0x9e>
 8004056:	4622      	mov	r2, r4
 8004058:	210a      	movs	r1, #10
 800405a:	4628      	mov	r0, r5
 800405c:	f000 f85f 	bl	800411e <__swbuf_r>
 8004060:	3001      	adds	r0, #1
 8004062:	d0d7      	beq.n	8004014 <_puts_r+0x38>
 8004064:	250a      	movs	r5, #10
 8004066:	e7d7      	b.n	8004018 <_puts_r+0x3c>
 8004068:	4622      	mov	r2, r4
 800406a:	4628      	mov	r0, r5
 800406c:	f000 f857 	bl	800411e <__swbuf_r>
 8004070:	3001      	adds	r0, #1
 8004072:	d1e7      	bne.n	8004044 <_puts_r+0x68>
 8004074:	e7ce      	b.n	8004014 <_puts_r+0x38>
 8004076:	3e01      	subs	r6, #1
 8004078:	e7e4      	b.n	8004044 <_puts_r+0x68>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	6022      	str	r2, [r4, #0]
 8004080:	220a      	movs	r2, #10
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e7ee      	b.n	8004064 <_puts_r+0x88>
	...

08004088 <puts>:
 8004088:	4b02      	ldr	r3, [pc, #8]	@ (8004094 <puts+0xc>)
 800408a:	4601      	mov	r1, r0
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f7ff bfa5 	b.w	8003fdc <_puts_r>
 8004092:	bf00      	nop
 8004094:	20000018 	.word	0x20000018

08004098 <__sread>:
 8004098:	b510      	push	{r4, lr}
 800409a:	460c      	mov	r4, r1
 800409c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a0:	f000 f8fc 	bl	800429c <_read_r>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	bfab      	itete	ge
 80040a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040aa:	89a3      	ldrhlt	r3, [r4, #12]
 80040ac:	181b      	addge	r3, r3, r0
 80040ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040b2:	bfac      	ite	ge
 80040b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040b6:	81a3      	strhlt	r3, [r4, #12]
 80040b8:	bd10      	pop	{r4, pc}

080040ba <__swrite>:
 80040ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040be:	461f      	mov	r7, r3
 80040c0:	898b      	ldrh	r3, [r1, #12]
 80040c2:	05db      	lsls	r3, r3, #23
 80040c4:	4605      	mov	r5, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	4616      	mov	r6, r2
 80040ca:	d505      	bpl.n	80040d8 <__swrite+0x1e>
 80040cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d0:	2302      	movs	r3, #2
 80040d2:	2200      	movs	r2, #0
 80040d4:	f000 f8d0 	bl	8004278 <_lseek_r>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040e2:	81a3      	strh	r3, [r4, #12]
 80040e4:	4632      	mov	r2, r6
 80040e6:	463b      	mov	r3, r7
 80040e8:	4628      	mov	r0, r5
 80040ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ee:	f000 b8e7 	b.w	80042c0 <_write_r>

080040f2 <__sseek>:
 80040f2:	b510      	push	{r4, lr}
 80040f4:	460c      	mov	r4, r1
 80040f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040fa:	f000 f8bd 	bl	8004278 <_lseek_r>
 80040fe:	1c43      	adds	r3, r0, #1
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	bf15      	itete	ne
 8004104:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004106:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800410a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800410e:	81a3      	strheq	r3, [r4, #12]
 8004110:	bf18      	it	ne
 8004112:	81a3      	strhne	r3, [r4, #12]
 8004114:	bd10      	pop	{r4, pc}

08004116 <__sclose>:
 8004116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800411a:	f000 b89d 	b.w	8004258 <_close_r>

0800411e <__swbuf_r>:
 800411e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004120:	460e      	mov	r6, r1
 8004122:	4614      	mov	r4, r2
 8004124:	4605      	mov	r5, r0
 8004126:	b118      	cbz	r0, 8004130 <__swbuf_r+0x12>
 8004128:	6a03      	ldr	r3, [r0, #32]
 800412a:	b90b      	cbnz	r3, 8004130 <__swbuf_r+0x12>
 800412c:	f7ff ff0e 	bl	8003f4c <__sinit>
 8004130:	69a3      	ldr	r3, [r4, #24]
 8004132:	60a3      	str	r3, [r4, #8]
 8004134:	89a3      	ldrh	r3, [r4, #12]
 8004136:	071a      	lsls	r2, r3, #28
 8004138:	d501      	bpl.n	800413e <__swbuf_r+0x20>
 800413a:	6923      	ldr	r3, [r4, #16]
 800413c:	b943      	cbnz	r3, 8004150 <__swbuf_r+0x32>
 800413e:	4621      	mov	r1, r4
 8004140:	4628      	mov	r0, r5
 8004142:	f000 f82b 	bl	800419c <__swsetup_r>
 8004146:	b118      	cbz	r0, 8004150 <__swbuf_r+0x32>
 8004148:	f04f 37ff 	mov.w	r7, #4294967295
 800414c:	4638      	mov	r0, r7
 800414e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	6922      	ldr	r2, [r4, #16]
 8004154:	1a98      	subs	r0, r3, r2
 8004156:	6963      	ldr	r3, [r4, #20]
 8004158:	b2f6      	uxtb	r6, r6
 800415a:	4283      	cmp	r3, r0
 800415c:	4637      	mov	r7, r6
 800415e:	dc05      	bgt.n	800416c <__swbuf_r+0x4e>
 8004160:	4621      	mov	r1, r4
 8004162:	4628      	mov	r0, r5
 8004164:	f000 fd46 	bl	8004bf4 <_fflush_r>
 8004168:	2800      	cmp	r0, #0
 800416a:	d1ed      	bne.n	8004148 <__swbuf_r+0x2a>
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	3b01      	subs	r3, #1
 8004170:	60a3      	str	r3, [r4, #8]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	6022      	str	r2, [r4, #0]
 8004178:	701e      	strb	r6, [r3, #0]
 800417a:	6962      	ldr	r2, [r4, #20]
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	429a      	cmp	r2, r3
 8004180:	d004      	beq.n	800418c <__swbuf_r+0x6e>
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	07db      	lsls	r3, r3, #31
 8004186:	d5e1      	bpl.n	800414c <__swbuf_r+0x2e>
 8004188:	2e0a      	cmp	r6, #10
 800418a:	d1df      	bne.n	800414c <__swbuf_r+0x2e>
 800418c:	4621      	mov	r1, r4
 800418e:	4628      	mov	r0, r5
 8004190:	f000 fd30 	bl	8004bf4 <_fflush_r>
 8004194:	2800      	cmp	r0, #0
 8004196:	d0d9      	beq.n	800414c <__swbuf_r+0x2e>
 8004198:	e7d6      	b.n	8004148 <__swbuf_r+0x2a>
	...

0800419c <__swsetup_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4b29      	ldr	r3, [pc, #164]	@ (8004244 <__swsetup_r+0xa8>)
 80041a0:	4605      	mov	r5, r0
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	460c      	mov	r4, r1
 80041a6:	b118      	cbz	r0, 80041b0 <__swsetup_r+0x14>
 80041a8:	6a03      	ldr	r3, [r0, #32]
 80041aa:	b90b      	cbnz	r3, 80041b0 <__swsetup_r+0x14>
 80041ac:	f7ff fece 	bl	8003f4c <__sinit>
 80041b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041b4:	0719      	lsls	r1, r3, #28
 80041b6:	d422      	bmi.n	80041fe <__swsetup_r+0x62>
 80041b8:	06da      	lsls	r2, r3, #27
 80041ba:	d407      	bmi.n	80041cc <__swsetup_r+0x30>
 80041bc:	2209      	movs	r2, #9
 80041be:	602a      	str	r2, [r5, #0]
 80041c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	e033      	b.n	8004234 <__swsetup_r+0x98>
 80041cc:	0758      	lsls	r0, r3, #29
 80041ce:	d512      	bpl.n	80041f6 <__swsetup_r+0x5a>
 80041d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041d2:	b141      	cbz	r1, 80041e6 <__swsetup_r+0x4a>
 80041d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041d8:	4299      	cmp	r1, r3
 80041da:	d002      	beq.n	80041e2 <__swsetup_r+0x46>
 80041dc:	4628      	mov	r0, r5
 80041de:	f000 f8bd 	bl	800435c <_free_r>
 80041e2:	2300      	movs	r3, #0
 80041e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80041ec:	81a3      	strh	r3, [r4, #12]
 80041ee:	2300      	movs	r3, #0
 80041f0:	6063      	str	r3, [r4, #4]
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	f043 0308 	orr.w	r3, r3, #8
 80041fc:	81a3      	strh	r3, [r4, #12]
 80041fe:	6923      	ldr	r3, [r4, #16]
 8004200:	b94b      	cbnz	r3, 8004216 <__swsetup_r+0x7a>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420c:	d003      	beq.n	8004216 <__swsetup_r+0x7a>
 800420e:	4621      	mov	r1, r4
 8004210:	4628      	mov	r0, r5
 8004212:	f000 fd3d 	bl	8004c90 <__smakebuf_r>
 8004216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800421a:	f013 0201 	ands.w	r2, r3, #1
 800421e:	d00a      	beq.n	8004236 <__swsetup_r+0x9a>
 8004220:	2200      	movs	r2, #0
 8004222:	60a2      	str	r2, [r4, #8]
 8004224:	6962      	ldr	r2, [r4, #20]
 8004226:	4252      	negs	r2, r2
 8004228:	61a2      	str	r2, [r4, #24]
 800422a:	6922      	ldr	r2, [r4, #16]
 800422c:	b942      	cbnz	r2, 8004240 <__swsetup_r+0xa4>
 800422e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004232:	d1c5      	bne.n	80041c0 <__swsetup_r+0x24>
 8004234:	bd38      	pop	{r3, r4, r5, pc}
 8004236:	0799      	lsls	r1, r3, #30
 8004238:	bf58      	it	pl
 800423a:	6962      	ldrpl	r2, [r4, #20]
 800423c:	60a2      	str	r2, [r4, #8]
 800423e:	e7f4      	b.n	800422a <__swsetup_r+0x8e>
 8004240:	2000      	movs	r0, #0
 8004242:	e7f7      	b.n	8004234 <__swsetup_r+0x98>
 8004244:	20000018 	.word	0x20000018

08004248 <memset>:
 8004248:	4402      	add	r2, r0
 800424a:	4603      	mov	r3, r0
 800424c:	4293      	cmp	r3, r2
 800424e:	d100      	bne.n	8004252 <memset+0xa>
 8004250:	4770      	bx	lr
 8004252:	f803 1b01 	strb.w	r1, [r3], #1
 8004256:	e7f9      	b.n	800424c <memset+0x4>

08004258 <_close_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d06      	ldr	r5, [pc, #24]	@ (8004274 <_close_r+0x1c>)
 800425c:	2300      	movs	r3, #0
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fd f84e 	bl	8001304 <_close>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_close_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_close_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	20000354 	.word	0x20000354

08004278 <_lseek_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4d07      	ldr	r5, [pc, #28]	@ (8004298 <_lseek_r+0x20>)
 800427c:	4604      	mov	r4, r0
 800427e:	4608      	mov	r0, r1
 8004280:	4611      	mov	r1, r2
 8004282:	2200      	movs	r2, #0
 8004284:	602a      	str	r2, [r5, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	f7fd f863 	bl	8001352 <_lseek>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_lseek_r+0x1e>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_lseek_r+0x1e>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000354 	.word	0x20000354

0800429c <_read_r>:
 800429c:	b538      	push	{r3, r4, r5, lr}
 800429e:	4d07      	ldr	r5, [pc, #28]	@ (80042bc <_read_r+0x20>)
 80042a0:	4604      	mov	r4, r0
 80042a2:	4608      	mov	r0, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	602a      	str	r2, [r5, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f7fd f80d 	bl	80012ca <_read>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d102      	bne.n	80042ba <_read_r+0x1e>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	b103      	cbz	r3, 80042ba <_read_r+0x1e>
 80042b8:	6023      	str	r3, [r4, #0]
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	20000354 	.word	0x20000354

080042c0 <_write_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4d07      	ldr	r5, [pc, #28]	@ (80042e0 <_write_r+0x20>)
 80042c4:	4604      	mov	r4, r0
 80042c6:	4608      	mov	r0, r1
 80042c8:	4611      	mov	r1, r2
 80042ca:	2200      	movs	r2, #0
 80042cc:	602a      	str	r2, [r5, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	f7fc feaa 	bl	8001028 <_write>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d102      	bne.n	80042de <_write_r+0x1e>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	b103      	cbz	r3, 80042de <_write_r+0x1e>
 80042dc:	6023      	str	r3, [r4, #0]
 80042de:	bd38      	pop	{r3, r4, r5, pc}
 80042e0:	20000354 	.word	0x20000354

080042e4 <__errno>:
 80042e4:	4b01      	ldr	r3, [pc, #4]	@ (80042ec <__errno+0x8>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000018 	.word	0x20000018

080042f0 <__libc_init_array>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004328 <__libc_init_array+0x38>)
 80042f4:	4c0d      	ldr	r4, [pc, #52]	@ (800432c <__libc_init_array+0x3c>)
 80042f6:	1b64      	subs	r4, r4, r5
 80042f8:	10a4      	asrs	r4, r4, #2
 80042fa:	2600      	movs	r6, #0
 80042fc:	42a6      	cmp	r6, r4
 80042fe:	d109      	bne.n	8004314 <__libc_init_array+0x24>
 8004300:	4d0b      	ldr	r5, [pc, #44]	@ (8004330 <__libc_init_array+0x40>)
 8004302:	4c0c      	ldr	r4, [pc, #48]	@ (8004334 <__libc_init_array+0x44>)
 8004304:	f000 fd32 	bl	8004d6c <_init>
 8004308:	1b64      	subs	r4, r4, r5
 800430a:	10a4      	asrs	r4, r4, #2
 800430c:	2600      	movs	r6, #0
 800430e:	42a6      	cmp	r6, r4
 8004310:	d105      	bne.n	800431e <__libc_init_array+0x2e>
 8004312:	bd70      	pop	{r4, r5, r6, pc}
 8004314:	f855 3b04 	ldr.w	r3, [r5], #4
 8004318:	4798      	blx	r3
 800431a:	3601      	adds	r6, #1
 800431c:	e7ee      	b.n	80042fc <__libc_init_array+0xc>
 800431e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004322:	4798      	blx	r3
 8004324:	3601      	adds	r6, #1
 8004326:	e7f2      	b.n	800430e <__libc_init_array+0x1e>
 8004328:	080054e8 	.word	0x080054e8
 800432c:	080054e8 	.word	0x080054e8
 8004330:	080054e8 	.word	0x080054e8
 8004334:	080054ec 	.word	0x080054ec

08004338 <__retarget_lock_init_recursive>:
 8004338:	4770      	bx	lr

0800433a <__retarget_lock_acquire_recursive>:
 800433a:	4770      	bx	lr

0800433c <__retarget_lock_release_recursive>:
 800433c:	4770      	bx	lr

0800433e <memcpy>:
 800433e:	440a      	add	r2, r1
 8004340:	4291      	cmp	r1, r2
 8004342:	f100 33ff 	add.w	r3, r0, #4294967295
 8004346:	d100      	bne.n	800434a <memcpy+0xc>
 8004348:	4770      	bx	lr
 800434a:	b510      	push	{r4, lr}
 800434c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004354:	4291      	cmp	r1, r2
 8004356:	d1f9      	bne.n	800434c <memcpy+0xe>
 8004358:	bd10      	pop	{r4, pc}
	...

0800435c <_free_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4605      	mov	r5, r0
 8004360:	2900      	cmp	r1, #0
 8004362:	d041      	beq.n	80043e8 <_free_r+0x8c>
 8004364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004368:	1f0c      	subs	r4, r1, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	bfb8      	it	lt
 800436e:	18e4      	addlt	r4, r4, r3
 8004370:	f000 f8e0 	bl	8004534 <__malloc_lock>
 8004374:	4a1d      	ldr	r2, [pc, #116]	@ (80043ec <_free_r+0x90>)
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	b933      	cbnz	r3, 8004388 <_free_r+0x2c>
 800437a:	6063      	str	r3, [r4, #4]
 800437c:	6014      	str	r4, [r2, #0]
 800437e:	4628      	mov	r0, r5
 8004380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004384:	f000 b8dc 	b.w	8004540 <__malloc_unlock>
 8004388:	42a3      	cmp	r3, r4
 800438a:	d908      	bls.n	800439e <_free_r+0x42>
 800438c:	6820      	ldr	r0, [r4, #0]
 800438e:	1821      	adds	r1, r4, r0
 8004390:	428b      	cmp	r3, r1
 8004392:	bf01      	itttt	eq
 8004394:	6819      	ldreq	r1, [r3, #0]
 8004396:	685b      	ldreq	r3, [r3, #4]
 8004398:	1809      	addeq	r1, r1, r0
 800439a:	6021      	streq	r1, [r4, #0]
 800439c:	e7ed      	b.n	800437a <_free_r+0x1e>
 800439e:	461a      	mov	r2, r3
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	b10b      	cbz	r3, 80043a8 <_free_r+0x4c>
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d9fa      	bls.n	800439e <_free_r+0x42>
 80043a8:	6811      	ldr	r1, [r2, #0]
 80043aa:	1850      	adds	r0, r2, r1
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d10b      	bne.n	80043c8 <_free_r+0x6c>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	4401      	add	r1, r0
 80043b4:	1850      	adds	r0, r2, r1
 80043b6:	4283      	cmp	r3, r0
 80043b8:	6011      	str	r1, [r2, #0]
 80043ba:	d1e0      	bne.n	800437e <_free_r+0x22>
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	6053      	str	r3, [r2, #4]
 80043c2:	4408      	add	r0, r1
 80043c4:	6010      	str	r0, [r2, #0]
 80043c6:	e7da      	b.n	800437e <_free_r+0x22>
 80043c8:	d902      	bls.n	80043d0 <_free_r+0x74>
 80043ca:	230c      	movs	r3, #12
 80043cc:	602b      	str	r3, [r5, #0]
 80043ce:	e7d6      	b.n	800437e <_free_r+0x22>
 80043d0:	6820      	ldr	r0, [r4, #0]
 80043d2:	1821      	adds	r1, r4, r0
 80043d4:	428b      	cmp	r3, r1
 80043d6:	bf04      	itt	eq
 80043d8:	6819      	ldreq	r1, [r3, #0]
 80043da:	685b      	ldreq	r3, [r3, #4]
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	bf04      	itt	eq
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	6054      	str	r4, [r2, #4]
 80043e6:	e7ca      	b.n	800437e <_free_r+0x22>
 80043e8:	bd38      	pop	{r3, r4, r5, pc}
 80043ea:	bf00      	nop
 80043ec:	20000360 	.word	0x20000360

080043f0 <sbrk_aligned>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004430 <sbrk_aligned+0x40>)
 80043f4:	460c      	mov	r4, r1
 80043f6:	6831      	ldr	r1, [r6, #0]
 80043f8:	4605      	mov	r5, r0
 80043fa:	b911      	cbnz	r1, 8004402 <sbrk_aligned+0x12>
 80043fc:	f000 fca6 	bl	8004d4c <_sbrk_r>
 8004400:	6030      	str	r0, [r6, #0]
 8004402:	4621      	mov	r1, r4
 8004404:	4628      	mov	r0, r5
 8004406:	f000 fca1 	bl	8004d4c <_sbrk_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d103      	bne.n	8004416 <sbrk_aligned+0x26>
 800440e:	f04f 34ff 	mov.w	r4, #4294967295
 8004412:	4620      	mov	r0, r4
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	1cc4      	adds	r4, r0, #3
 8004418:	f024 0403 	bic.w	r4, r4, #3
 800441c:	42a0      	cmp	r0, r4
 800441e:	d0f8      	beq.n	8004412 <sbrk_aligned+0x22>
 8004420:	1a21      	subs	r1, r4, r0
 8004422:	4628      	mov	r0, r5
 8004424:	f000 fc92 	bl	8004d4c <_sbrk_r>
 8004428:	3001      	adds	r0, #1
 800442a:	d1f2      	bne.n	8004412 <sbrk_aligned+0x22>
 800442c:	e7ef      	b.n	800440e <sbrk_aligned+0x1e>
 800442e:	bf00      	nop
 8004430:	2000035c 	.word	0x2000035c

08004434 <_malloc_r>:
 8004434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004438:	1ccd      	adds	r5, r1, #3
 800443a:	f025 0503 	bic.w	r5, r5, #3
 800443e:	3508      	adds	r5, #8
 8004440:	2d0c      	cmp	r5, #12
 8004442:	bf38      	it	cc
 8004444:	250c      	movcc	r5, #12
 8004446:	2d00      	cmp	r5, #0
 8004448:	4606      	mov	r6, r0
 800444a:	db01      	blt.n	8004450 <_malloc_r+0x1c>
 800444c:	42a9      	cmp	r1, r5
 800444e:	d904      	bls.n	800445a <_malloc_r+0x26>
 8004450:	230c      	movs	r3, #12
 8004452:	6033      	str	r3, [r6, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004530 <_malloc_r+0xfc>
 800445e:	f000 f869 	bl	8004534 <__malloc_lock>
 8004462:	f8d8 3000 	ldr.w	r3, [r8]
 8004466:	461c      	mov	r4, r3
 8004468:	bb44      	cbnz	r4, 80044bc <_malloc_r+0x88>
 800446a:	4629      	mov	r1, r5
 800446c:	4630      	mov	r0, r6
 800446e:	f7ff ffbf 	bl	80043f0 <sbrk_aligned>
 8004472:	1c43      	adds	r3, r0, #1
 8004474:	4604      	mov	r4, r0
 8004476:	d158      	bne.n	800452a <_malloc_r+0xf6>
 8004478:	f8d8 4000 	ldr.w	r4, [r8]
 800447c:	4627      	mov	r7, r4
 800447e:	2f00      	cmp	r7, #0
 8004480:	d143      	bne.n	800450a <_malloc_r+0xd6>
 8004482:	2c00      	cmp	r4, #0
 8004484:	d04b      	beq.n	800451e <_malloc_r+0xea>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	4639      	mov	r1, r7
 800448a:	4630      	mov	r0, r6
 800448c:	eb04 0903 	add.w	r9, r4, r3
 8004490:	f000 fc5c 	bl	8004d4c <_sbrk_r>
 8004494:	4581      	cmp	r9, r0
 8004496:	d142      	bne.n	800451e <_malloc_r+0xea>
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	1a6d      	subs	r5, r5, r1
 800449c:	4629      	mov	r1, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	f7ff ffa6 	bl	80043f0 <sbrk_aligned>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d03a      	beq.n	800451e <_malloc_r+0xea>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	442b      	add	r3, r5
 80044ac:	6023      	str	r3, [r4, #0]
 80044ae:	f8d8 3000 	ldr.w	r3, [r8]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	bb62      	cbnz	r2, 8004510 <_malloc_r+0xdc>
 80044b6:	f8c8 7000 	str.w	r7, [r8]
 80044ba:	e00f      	b.n	80044dc <_malloc_r+0xa8>
 80044bc:	6822      	ldr	r2, [r4, #0]
 80044be:	1b52      	subs	r2, r2, r5
 80044c0:	d420      	bmi.n	8004504 <_malloc_r+0xd0>
 80044c2:	2a0b      	cmp	r2, #11
 80044c4:	d917      	bls.n	80044f6 <_malloc_r+0xc2>
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	6025      	str	r5, [r4, #0]
 80044cc:	bf18      	it	ne
 80044ce:	6059      	strne	r1, [r3, #4]
 80044d0:	6863      	ldr	r3, [r4, #4]
 80044d2:	bf08      	it	eq
 80044d4:	f8c8 1000 	streq.w	r1, [r8]
 80044d8:	5162      	str	r2, [r4, r5]
 80044da:	604b      	str	r3, [r1, #4]
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 f82f 	bl	8004540 <__malloc_unlock>
 80044e2:	f104 000b 	add.w	r0, r4, #11
 80044e6:	1d23      	adds	r3, r4, #4
 80044e8:	f020 0007 	bic.w	r0, r0, #7
 80044ec:	1ac2      	subs	r2, r0, r3
 80044ee:	bf1c      	itt	ne
 80044f0:	1a1b      	subne	r3, r3, r0
 80044f2:	50a3      	strne	r3, [r4, r2]
 80044f4:	e7af      	b.n	8004456 <_malloc_r+0x22>
 80044f6:	6862      	ldr	r2, [r4, #4]
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	bf0c      	ite	eq
 80044fc:	f8c8 2000 	streq.w	r2, [r8]
 8004500:	605a      	strne	r2, [r3, #4]
 8004502:	e7eb      	b.n	80044dc <_malloc_r+0xa8>
 8004504:	4623      	mov	r3, r4
 8004506:	6864      	ldr	r4, [r4, #4]
 8004508:	e7ae      	b.n	8004468 <_malloc_r+0x34>
 800450a:	463c      	mov	r4, r7
 800450c:	687f      	ldr	r7, [r7, #4]
 800450e:	e7b6      	b.n	800447e <_malloc_r+0x4a>
 8004510:	461a      	mov	r2, r3
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	42a3      	cmp	r3, r4
 8004516:	d1fb      	bne.n	8004510 <_malloc_r+0xdc>
 8004518:	2300      	movs	r3, #0
 800451a:	6053      	str	r3, [r2, #4]
 800451c:	e7de      	b.n	80044dc <_malloc_r+0xa8>
 800451e:	230c      	movs	r3, #12
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	4630      	mov	r0, r6
 8004524:	f000 f80c 	bl	8004540 <__malloc_unlock>
 8004528:	e794      	b.n	8004454 <_malloc_r+0x20>
 800452a:	6005      	str	r5, [r0, #0]
 800452c:	e7d6      	b.n	80044dc <_malloc_r+0xa8>
 800452e:	bf00      	nop
 8004530:	20000360 	.word	0x20000360

08004534 <__malloc_lock>:
 8004534:	4801      	ldr	r0, [pc, #4]	@ (800453c <__malloc_lock+0x8>)
 8004536:	f7ff bf00 	b.w	800433a <__retarget_lock_acquire_recursive>
 800453a:	bf00      	nop
 800453c:	20000358 	.word	0x20000358

08004540 <__malloc_unlock>:
 8004540:	4801      	ldr	r0, [pc, #4]	@ (8004548 <__malloc_unlock+0x8>)
 8004542:	f7ff befb 	b.w	800433c <__retarget_lock_release_recursive>
 8004546:	bf00      	nop
 8004548:	20000358 	.word	0x20000358

0800454c <__sfputc_r>:
 800454c:	6893      	ldr	r3, [r2, #8]
 800454e:	3b01      	subs	r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	b410      	push	{r4}
 8004554:	6093      	str	r3, [r2, #8]
 8004556:	da08      	bge.n	800456a <__sfputc_r+0x1e>
 8004558:	6994      	ldr	r4, [r2, #24]
 800455a:	42a3      	cmp	r3, r4
 800455c:	db01      	blt.n	8004562 <__sfputc_r+0x16>
 800455e:	290a      	cmp	r1, #10
 8004560:	d103      	bne.n	800456a <__sfputc_r+0x1e>
 8004562:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004566:	f7ff bdda 	b.w	800411e <__swbuf_r>
 800456a:	6813      	ldr	r3, [r2, #0]
 800456c:	1c58      	adds	r0, r3, #1
 800456e:	6010      	str	r0, [r2, #0]
 8004570:	7019      	strb	r1, [r3, #0]
 8004572:	4608      	mov	r0, r1
 8004574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004578:	4770      	bx	lr

0800457a <__sfputs_r>:
 800457a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	4614      	mov	r4, r2
 8004582:	18d5      	adds	r5, r2, r3
 8004584:	42ac      	cmp	r4, r5
 8004586:	d101      	bne.n	800458c <__sfputs_r+0x12>
 8004588:	2000      	movs	r0, #0
 800458a:	e007      	b.n	800459c <__sfputs_r+0x22>
 800458c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004590:	463a      	mov	r2, r7
 8004592:	4630      	mov	r0, r6
 8004594:	f7ff ffda 	bl	800454c <__sfputc_r>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d1f3      	bne.n	8004584 <__sfputs_r+0xa>
 800459c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045a0 <_vfiprintf_r>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	460d      	mov	r5, r1
 80045a6:	b09d      	sub	sp, #116	@ 0x74
 80045a8:	4614      	mov	r4, r2
 80045aa:	4698      	mov	r8, r3
 80045ac:	4606      	mov	r6, r0
 80045ae:	b118      	cbz	r0, 80045b8 <_vfiprintf_r+0x18>
 80045b0:	6a03      	ldr	r3, [r0, #32]
 80045b2:	b90b      	cbnz	r3, 80045b8 <_vfiprintf_r+0x18>
 80045b4:	f7ff fcca 	bl	8003f4c <__sinit>
 80045b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	d405      	bmi.n	80045ca <_vfiprintf_r+0x2a>
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	059a      	lsls	r2, r3, #22
 80045c2:	d402      	bmi.n	80045ca <_vfiprintf_r+0x2a>
 80045c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045c6:	f7ff feb8 	bl	800433a <__retarget_lock_acquire_recursive>
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	d501      	bpl.n	80045d4 <_vfiprintf_r+0x34>
 80045d0:	692b      	ldr	r3, [r5, #16]
 80045d2:	b99b      	cbnz	r3, 80045fc <_vfiprintf_r+0x5c>
 80045d4:	4629      	mov	r1, r5
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7ff fde0 	bl	800419c <__swsetup_r>
 80045dc:	b170      	cbz	r0, 80045fc <_vfiprintf_r+0x5c>
 80045de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045e0:	07dc      	lsls	r4, r3, #31
 80045e2:	d504      	bpl.n	80045ee <_vfiprintf_r+0x4e>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	b01d      	add	sp, #116	@ 0x74
 80045ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	0598      	lsls	r0, r3, #22
 80045f2:	d4f7      	bmi.n	80045e4 <_vfiprintf_r+0x44>
 80045f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045f6:	f7ff fea1 	bl	800433c <__retarget_lock_release_recursive>
 80045fa:	e7f3      	b.n	80045e4 <_vfiprintf_r+0x44>
 80045fc:	2300      	movs	r3, #0
 80045fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004600:	2320      	movs	r3, #32
 8004602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004606:	f8cd 800c 	str.w	r8, [sp, #12]
 800460a:	2330      	movs	r3, #48	@ 0x30
 800460c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80047bc <_vfiprintf_r+0x21c>
 8004610:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004614:	f04f 0901 	mov.w	r9, #1
 8004618:	4623      	mov	r3, r4
 800461a:	469a      	mov	sl, r3
 800461c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004620:	b10a      	cbz	r2, 8004626 <_vfiprintf_r+0x86>
 8004622:	2a25      	cmp	r2, #37	@ 0x25
 8004624:	d1f9      	bne.n	800461a <_vfiprintf_r+0x7a>
 8004626:	ebba 0b04 	subs.w	fp, sl, r4
 800462a:	d00b      	beq.n	8004644 <_vfiprintf_r+0xa4>
 800462c:	465b      	mov	r3, fp
 800462e:	4622      	mov	r2, r4
 8004630:	4629      	mov	r1, r5
 8004632:	4630      	mov	r0, r6
 8004634:	f7ff ffa1 	bl	800457a <__sfputs_r>
 8004638:	3001      	adds	r0, #1
 800463a:	f000 80a7 	beq.w	800478c <_vfiprintf_r+0x1ec>
 800463e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004640:	445a      	add	r2, fp
 8004642:	9209      	str	r2, [sp, #36]	@ 0x24
 8004644:	f89a 3000 	ldrb.w	r3, [sl]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 809f 	beq.w	800478c <_vfiprintf_r+0x1ec>
 800464e:	2300      	movs	r3, #0
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004658:	f10a 0a01 	add.w	sl, sl, #1
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	9307      	str	r3, [sp, #28]
 8004660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004664:	931a      	str	r3, [sp, #104]	@ 0x68
 8004666:	4654      	mov	r4, sl
 8004668:	2205      	movs	r2, #5
 800466a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466e:	4853      	ldr	r0, [pc, #332]	@ (80047bc <_vfiprintf_r+0x21c>)
 8004670:	f7fb fdbe 	bl	80001f0 <memchr>
 8004674:	9a04      	ldr	r2, [sp, #16]
 8004676:	b9d8      	cbnz	r0, 80046b0 <_vfiprintf_r+0x110>
 8004678:	06d1      	lsls	r1, r2, #27
 800467a:	bf44      	itt	mi
 800467c:	2320      	movmi	r3, #32
 800467e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004682:	0713      	lsls	r3, r2, #28
 8004684:	bf44      	itt	mi
 8004686:	232b      	movmi	r3, #43	@ 0x2b
 8004688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800468c:	f89a 3000 	ldrb.w	r3, [sl]
 8004690:	2b2a      	cmp	r3, #42	@ 0x2a
 8004692:	d015      	beq.n	80046c0 <_vfiprintf_r+0x120>
 8004694:	9a07      	ldr	r2, [sp, #28]
 8004696:	4654      	mov	r4, sl
 8004698:	2000      	movs	r0, #0
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	4621      	mov	r1, r4
 80046a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a4:	3b30      	subs	r3, #48	@ 0x30
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d94b      	bls.n	8004742 <_vfiprintf_r+0x1a2>
 80046aa:	b1b0      	cbz	r0, 80046da <_vfiprintf_r+0x13a>
 80046ac:	9207      	str	r2, [sp, #28]
 80046ae:	e014      	b.n	80046da <_vfiprintf_r+0x13a>
 80046b0:	eba0 0308 	sub.w	r3, r0, r8
 80046b4:	fa09 f303 	lsl.w	r3, r9, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	46a2      	mov	sl, r4
 80046be:	e7d2      	b.n	8004666 <_vfiprintf_r+0xc6>
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	1d19      	adds	r1, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	9103      	str	r1, [sp, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfbb      	ittet	lt
 80046cc:	425b      	neglt	r3, r3
 80046ce:	f042 0202 	orrlt.w	r2, r2, #2
 80046d2:	9307      	strge	r3, [sp, #28]
 80046d4:	9307      	strlt	r3, [sp, #28]
 80046d6:	bfb8      	it	lt
 80046d8:	9204      	strlt	r2, [sp, #16]
 80046da:	7823      	ldrb	r3, [r4, #0]
 80046dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80046de:	d10a      	bne.n	80046f6 <_vfiprintf_r+0x156>
 80046e0:	7863      	ldrb	r3, [r4, #1]
 80046e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80046e4:	d132      	bne.n	800474c <_vfiprintf_r+0x1ac>
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9203      	str	r2, [sp, #12]
 80046ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046f2:	3402      	adds	r4, #2
 80046f4:	9305      	str	r3, [sp, #20]
 80046f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80047cc <_vfiprintf_r+0x22c>
 80046fa:	7821      	ldrb	r1, [r4, #0]
 80046fc:	2203      	movs	r2, #3
 80046fe:	4650      	mov	r0, sl
 8004700:	f7fb fd76 	bl	80001f0 <memchr>
 8004704:	b138      	cbz	r0, 8004716 <_vfiprintf_r+0x176>
 8004706:	9b04      	ldr	r3, [sp, #16]
 8004708:	eba0 000a 	sub.w	r0, r0, sl
 800470c:	2240      	movs	r2, #64	@ 0x40
 800470e:	4082      	lsls	r2, r0
 8004710:	4313      	orrs	r3, r2
 8004712:	3401      	adds	r4, #1
 8004714:	9304      	str	r3, [sp, #16]
 8004716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800471a:	4829      	ldr	r0, [pc, #164]	@ (80047c0 <_vfiprintf_r+0x220>)
 800471c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004720:	2206      	movs	r2, #6
 8004722:	f7fb fd65 	bl	80001f0 <memchr>
 8004726:	2800      	cmp	r0, #0
 8004728:	d03f      	beq.n	80047aa <_vfiprintf_r+0x20a>
 800472a:	4b26      	ldr	r3, [pc, #152]	@ (80047c4 <_vfiprintf_r+0x224>)
 800472c:	bb1b      	cbnz	r3, 8004776 <_vfiprintf_r+0x1d6>
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	3307      	adds	r3, #7
 8004732:	f023 0307 	bic.w	r3, r3, #7
 8004736:	3308      	adds	r3, #8
 8004738:	9303      	str	r3, [sp, #12]
 800473a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800473c:	443b      	add	r3, r7
 800473e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004740:	e76a      	b.n	8004618 <_vfiprintf_r+0x78>
 8004742:	fb0c 3202 	mla	r2, ip, r2, r3
 8004746:	460c      	mov	r4, r1
 8004748:	2001      	movs	r0, #1
 800474a:	e7a8      	b.n	800469e <_vfiprintf_r+0xfe>
 800474c:	2300      	movs	r3, #0
 800474e:	3401      	adds	r4, #1
 8004750:	9305      	str	r3, [sp, #20]
 8004752:	4619      	mov	r1, r3
 8004754:	f04f 0c0a 	mov.w	ip, #10
 8004758:	4620      	mov	r0, r4
 800475a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800475e:	3a30      	subs	r2, #48	@ 0x30
 8004760:	2a09      	cmp	r2, #9
 8004762:	d903      	bls.n	800476c <_vfiprintf_r+0x1cc>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0c6      	beq.n	80046f6 <_vfiprintf_r+0x156>
 8004768:	9105      	str	r1, [sp, #20]
 800476a:	e7c4      	b.n	80046f6 <_vfiprintf_r+0x156>
 800476c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004770:	4604      	mov	r4, r0
 8004772:	2301      	movs	r3, #1
 8004774:	e7f0      	b.n	8004758 <_vfiprintf_r+0x1b8>
 8004776:	ab03      	add	r3, sp, #12
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	462a      	mov	r2, r5
 800477c:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <_vfiprintf_r+0x228>)
 800477e:	a904      	add	r1, sp, #16
 8004780:	4630      	mov	r0, r6
 8004782:	f3af 8000 	nop.w
 8004786:	4607      	mov	r7, r0
 8004788:	1c78      	adds	r0, r7, #1
 800478a:	d1d6      	bne.n	800473a <_vfiprintf_r+0x19a>
 800478c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800478e:	07d9      	lsls	r1, r3, #31
 8004790:	d405      	bmi.n	800479e <_vfiprintf_r+0x1fe>
 8004792:	89ab      	ldrh	r3, [r5, #12]
 8004794:	059a      	lsls	r2, r3, #22
 8004796:	d402      	bmi.n	800479e <_vfiprintf_r+0x1fe>
 8004798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800479a:	f7ff fdcf 	bl	800433c <__retarget_lock_release_recursive>
 800479e:	89ab      	ldrh	r3, [r5, #12]
 80047a0:	065b      	lsls	r3, r3, #25
 80047a2:	f53f af1f 	bmi.w	80045e4 <_vfiprintf_r+0x44>
 80047a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047a8:	e71e      	b.n	80045e8 <_vfiprintf_r+0x48>
 80047aa:	ab03      	add	r3, sp, #12
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	462a      	mov	r2, r5
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <_vfiprintf_r+0x228>)
 80047b2:	a904      	add	r1, sp, #16
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f879 	bl	80048ac <_printf_i>
 80047ba:	e7e4      	b.n	8004786 <_vfiprintf_r+0x1e6>
 80047bc:	080054ad 	.word	0x080054ad
 80047c0:	080054b7 	.word	0x080054b7
 80047c4:	00000000 	.word	0x00000000
 80047c8:	0800457b 	.word	0x0800457b
 80047cc:	080054b3 	.word	0x080054b3

080047d0 <_printf_common>:
 80047d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	4616      	mov	r6, r2
 80047d6:	4698      	mov	r8, r3
 80047d8:	688a      	ldr	r2, [r1, #8]
 80047da:	690b      	ldr	r3, [r1, #16]
 80047dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bfb8      	it	lt
 80047e4:	4613      	movlt	r3, r2
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047ec:	4607      	mov	r7, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	b10a      	cbz	r2, 80047f6 <_printf_common+0x26>
 80047f2:	3301      	adds	r3, #1
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	0699      	lsls	r1, r3, #26
 80047fa:	bf42      	ittt	mi
 80047fc:	6833      	ldrmi	r3, [r6, #0]
 80047fe:	3302      	addmi	r3, #2
 8004800:	6033      	strmi	r3, [r6, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	f015 0506 	ands.w	r5, r5, #6
 8004808:	d106      	bne.n	8004818 <_printf_common+0x48>
 800480a:	f104 0a19 	add.w	sl, r4, #25
 800480e:	68e3      	ldr	r3, [r4, #12]
 8004810:	6832      	ldr	r2, [r6, #0]
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	42ab      	cmp	r3, r5
 8004816:	dc26      	bgt.n	8004866 <_printf_common+0x96>
 8004818:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	3b00      	subs	r3, #0
 8004820:	bf18      	it	ne
 8004822:	2301      	movne	r3, #1
 8004824:	0692      	lsls	r2, r2, #26
 8004826:	d42b      	bmi.n	8004880 <_printf_common+0xb0>
 8004828:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800482c:	4641      	mov	r1, r8
 800482e:	4638      	mov	r0, r7
 8004830:	47c8      	blx	r9
 8004832:	3001      	adds	r0, #1
 8004834:	d01e      	beq.n	8004874 <_printf_common+0xa4>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf02      	ittt	eq
 8004842:	68e5      	ldreq	r5, [r4, #12]
 8004844:	6833      	ldreq	r3, [r6, #0]
 8004846:	1aed      	subeq	r5, r5, r3
 8004848:	68a3      	ldr	r3, [r4, #8]
 800484a:	bf0c      	ite	eq
 800484c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004850:	2500      	movne	r5, #0
 8004852:	4293      	cmp	r3, r2
 8004854:	bfc4      	itt	gt
 8004856:	1a9b      	subgt	r3, r3, r2
 8004858:	18ed      	addgt	r5, r5, r3
 800485a:	2600      	movs	r6, #0
 800485c:	341a      	adds	r4, #26
 800485e:	42b5      	cmp	r5, r6
 8004860:	d11a      	bne.n	8004898 <_printf_common+0xc8>
 8004862:	2000      	movs	r0, #0
 8004864:	e008      	b.n	8004878 <_printf_common+0xa8>
 8004866:	2301      	movs	r3, #1
 8004868:	4652      	mov	r2, sl
 800486a:	4641      	mov	r1, r8
 800486c:	4638      	mov	r0, r7
 800486e:	47c8      	blx	r9
 8004870:	3001      	adds	r0, #1
 8004872:	d103      	bne.n	800487c <_printf_common+0xac>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800487c:	3501      	adds	r5, #1
 800487e:	e7c6      	b.n	800480e <_printf_common+0x3e>
 8004880:	18e1      	adds	r1, r4, r3
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	2030      	movs	r0, #48	@ 0x30
 8004886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800488a:	4422      	add	r2, r4
 800488c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004894:	3302      	adds	r3, #2
 8004896:	e7c7      	b.n	8004828 <_printf_common+0x58>
 8004898:	2301      	movs	r3, #1
 800489a:	4622      	mov	r2, r4
 800489c:	4641      	mov	r1, r8
 800489e:	4638      	mov	r0, r7
 80048a0:	47c8      	blx	r9
 80048a2:	3001      	adds	r0, #1
 80048a4:	d0e6      	beq.n	8004874 <_printf_common+0xa4>
 80048a6:	3601      	adds	r6, #1
 80048a8:	e7d9      	b.n	800485e <_printf_common+0x8e>
	...

080048ac <_printf_i>:
 80048ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	7e0f      	ldrb	r7, [r1, #24]
 80048b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80048b4:	2f78      	cmp	r7, #120	@ 0x78
 80048b6:	4691      	mov	r9, r2
 80048b8:	4680      	mov	r8, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	469a      	mov	sl, r3
 80048be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80048c2:	d807      	bhi.n	80048d4 <_printf_i+0x28>
 80048c4:	2f62      	cmp	r7, #98	@ 0x62
 80048c6:	d80a      	bhi.n	80048de <_printf_i+0x32>
 80048c8:	2f00      	cmp	r7, #0
 80048ca:	f000 80d2 	beq.w	8004a72 <_printf_i+0x1c6>
 80048ce:	2f58      	cmp	r7, #88	@ 0x58
 80048d0:	f000 80b9 	beq.w	8004a46 <_printf_i+0x19a>
 80048d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80048d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80048dc:	e03a      	b.n	8004954 <_printf_i+0xa8>
 80048de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048e2:	2b15      	cmp	r3, #21
 80048e4:	d8f6      	bhi.n	80048d4 <_printf_i+0x28>
 80048e6:	a101      	add	r1, pc, #4	@ (adr r1, 80048ec <_printf_i+0x40>)
 80048e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048ec:	08004945 	.word	0x08004945
 80048f0:	08004959 	.word	0x08004959
 80048f4:	080048d5 	.word	0x080048d5
 80048f8:	080048d5 	.word	0x080048d5
 80048fc:	080048d5 	.word	0x080048d5
 8004900:	080048d5 	.word	0x080048d5
 8004904:	08004959 	.word	0x08004959
 8004908:	080048d5 	.word	0x080048d5
 800490c:	080048d5 	.word	0x080048d5
 8004910:	080048d5 	.word	0x080048d5
 8004914:	080048d5 	.word	0x080048d5
 8004918:	08004a59 	.word	0x08004a59
 800491c:	08004983 	.word	0x08004983
 8004920:	08004a13 	.word	0x08004a13
 8004924:	080048d5 	.word	0x080048d5
 8004928:	080048d5 	.word	0x080048d5
 800492c:	08004a7b 	.word	0x08004a7b
 8004930:	080048d5 	.word	0x080048d5
 8004934:	08004983 	.word	0x08004983
 8004938:	080048d5 	.word	0x080048d5
 800493c:	080048d5 	.word	0x080048d5
 8004940:	08004a1b 	.word	0x08004a1b
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6032      	str	r2, [r6, #0]
 800494c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004954:	2301      	movs	r3, #1
 8004956:	e09d      	b.n	8004a94 <_printf_i+0x1e8>
 8004958:	6833      	ldr	r3, [r6, #0]
 800495a:	6820      	ldr	r0, [r4, #0]
 800495c:	1d19      	adds	r1, r3, #4
 800495e:	6031      	str	r1, [r6, #0]
 8004960:	0606      	lsls	r6, r0, #24
 8004962:	d501      	bpl.n	8004968 <_printf_i+0xbc>
 8004964:	681d      	ldr	r5, [r3, #0]
 8004966:	e003      	b.n	8004970 <_printf_i+0xc4>
 8004968:	0645      	lsls	r5, r0, #25
 800496a:	d5fb      	bpl.n	8004964 <_printf_i+0xb8>
 800496c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004970:	2d00      	cmp	r5, #0
 8004972:	da03      	bge.n	800497c <_printf_i+0xd0>
 8004974:	232d      	movs	r3, #45	@ 0x2d
 8004976:	426d      	negs	r5, r5
 8004978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800497c:	4859      	ldr	r0, [pc, #356]	@ (8004ae4 <_printf_i+0x238>)
 800497e:	230a      	movs	r3, #10
 8004980:	e011      	b.n	80049a6 <_printf_i+0xfa>
 8004982:	6821      	ldr	r1, [r4, #0]
 8004984:	6833      	ldr	r3, [r6, #0]
 8004986:	0608      	lsls	r0, r1, #24
 8004988:	f853 5b04 	ldr.w	r5, [r3], #4
 800498c:	d402      	bmi.n	8004994 <_printf_i+0xe8>
 800498e:	0649      	lsls	r1, r1, #25
 8004990:	bf48      	it	mi
 8004992:	b2ad      	uxthmi	r5, r5
 8004994:	2f6f      	cmp	r7, #111	@ 0x6f
 8004996:	4853      	ldr	r0, [pc, #332]	@ (8004ae4 <_printf_i+0x238>)
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	bf14      	ite	ne
 800499c:	230a      	movne	r3, #10
 800499e:	2308      	moveq	r3, #8
 80049a0:	2100      	movs	r1, #0
 80049a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80049a6:	6866      	ldr	r6, [r4, #4]
 80049a8:	60a6      	str	r6, [r4, #8]
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	bfa2      	ittt	ge
 80049ae:	6821      	ldrge	r1, [r4, #0]
 80049b0:	f021 0104 	bicge.w	r1, r1, #4
 80049b4:	6021      	strge	r1, [r4, #0]
 80049b6:	b90d      	cbnz	r5, 80049bc <_printf_i+0x110>
 80049b8:	2e00      	cmp	r6, #0
 80049ba:	d04b      	beq.n	8004a54 <_printf_i+0x1a8>
 80049bc:	4616      	mov	r6, r2
 80049be:	fbb5 f1f3 	udiv	r1, r5, r3
 80049c2:	fb03 5711 	mls	r7, r3, r1, r5
 80049c6:	5dc7      	ldrb	r7, [r0, r7]
 80049c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049cc:	462f      	mov	r7, r5
 80049ce:	42bb      	cmp	r3, r7
 80049d0:	460d      	mov	r5, r1
 80049d2:	d9f4      	bls.n	80049be <_printf_i+0x112>
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d10b      	bne.n	80049f0 <_printf_i+0x144>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	07df      	lsls	r7, r3, #31
 80049dc:	d508      	bpl.n	80049f0 <_printf_i+0x144>
 80049de:	6923      	ldr	r3, [r4, #16]
 80049e0:	6861      	ldr	r1, [r4, #4]
 80049e2:	4299      	cmp	r1, r3
 80049e4:	bfde      	ittt	le
 80049e6:	2330      	movle	r3, #48	@ 0x30
 80049e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049f0:	1b92      	subs	r2, r2, r6
 80049f2:	6122      	str	r2, [r4, #16]
 80049f4:	f8cd a000 	str.w	sl, [sp]
 80049f8:	464b      	mov	r3, r9
 80049fa:	aa03      	add	r2, sp, #12
 80049fc:	4621      	mov	r1, r4
 80049fe:	4640      	mov	r0, r8
 8004a00:	f7ff fee6 	bl	80047d0 <_printf_common>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d14a      	bne.n	8004a9e <_printf_i+0x1f2>
 8004a08:	f04f 30ff 	mov.w	r0, #4294967295
 8004a0c:	b004      	add	sp, #16
 8004a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f043 0320 	orr.w	r3, r3, #32
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	4833      	ldr	r0, [pc, #204]	@ (8004ae8 <_printf_i+0x23c>)
 8004a1c:	2778      	movs	r7, #120	@ 0x78
 8004a1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a22:	6823      	ldr	r3, [r4, #0]
 8004a24:	6831      	ldr	r1, [r6, #0]
 8004a26:	061f      	lsls	r7, r3, #24
 8004a28:	f851 5b04 	ldr.w	r5, [r1], #4
 8004a2c:	d402      	bmi.n	8004a34 <_printf_i+0x188>
 8004a2e:	065f      	lsls	r7, r3, #25
 8004a30:	bf48      	it	mi
 8004a32:	b2ad      	uxthmi	r5, r5
 8004a34:	6031      	str	r1, [r6, #0]
 8004a36:	07d9      	lsls	r1, r3, #31
 8004a38:	bf44      	itt	mi
 8004a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a3e:	6023      	strmi	r3, [r4, #0]
 8004a40:	b11d      	cbz	r5, 8004a4a <_printf_i+0x19e>
 8004a42:	2310      	movs	r3, #16
 8004a44:	e7ac      	b.n	80049a0 <_printf_i+0xf4>
 8004a46:	4827      	ldr	r0, [pc, #156]	@ (8004ae4 <_printf_i+0x238>)
 8004a48:	e7e9      	b.n	8004a1e <_printf_i+0x172>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	f023 0320 	bic.w	r3, r3, #32
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	e7f6      	b.n	8004a42 <_printf_i+0x196>
 8004a54:	4616      	mov	r6, r2
 8004a56:	e7bd      	b.n	80049d4 <_printf_i+0x128>
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	6961      	ldr	r1, [r4, #20]
 8004a5e:	1d18      	adds	r0, r3, #4
 8004a60:	6030      	str	r0, [r6, #0]
 8004a62:	062e      	lsls	r6, r5, #24
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	d501      	bpl.n	8004a6c <_printf_i+0x1c0>
 8004a68:	6019      	str	r1, [r3, #0]
 8004a6a:	e002      	b.n	8004a72 <_printf_i+0x1c6>
 8004a6c:	0668      	lsls	r0, r5, #25
 8004a6e:	d5fb      	bpl.n	8004a68 <_printf_i+0x1bc>
 8004a70:	8019      	strh	r1, [r3, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	6123      	str	r3, [r4, #16]
 8004a76:	4616      	mov	r6, r2
 8004a78:	e7bc      	b.n	80049f4 <_printf_i+0x148>
 8004a7a:	6833      	ldr	r3, [r6, #0]
 8004a7c:	1d1a      	adds	r2, r3, #4
 8004a7e:	6032      	str	r2, [r6, #0]
 8004a80:	681e      	ldr	r6, [r3, #0]
 8004a82:	6862      	ldr	r2, [r4, #4]
 8004a84:	2100      	movs	r1, #0
 8004a86:	4630      	mov	r0, r6
 8004a88:	f7fb fbb2 	bl	80001f0 <memchr>
 8004a8c:	b108      	cbz	r0, 8004a92 <_printf_i+0x1e6>
 8004a8e:	1b80      	subs	r0, r0, r6
 8004a90:	6060      	str	r0, [r4, #4]
 8004a92:	6863      	ldr	r3, [r4, #4]
 8004a94:	6123      	str	r3, [r4, #16]
 8004a96:	2300      	movs	r3, #0
 8004a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a9c:	e7aa      	b.n	80049f4 <_printf_i+0x148>
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	47d0      	blx	sl
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d0ad      	beq.n	8004a08 <_printf_i+0x15c>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	079b      	lsls	r3, r3, #30
 8004ab0:	d413      	bmi.n	8004ada <_printf_i+0x22e>
 8004ab2:	68e0      	ldr	r0, [r4, #12]
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	4298      	cmp	r0, r3
 8004ab8:	bfb8      	it	lt
 8004aba:	4618      	movlt	r0, r3
 8004abc:	e7a6      	b.n	8004a0c <_printf_i+0x160>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	47d0      	blx	sl
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d09d      	beq.n	8004a08 <_printf_i+0x15c>
 8004acc:	3501      	adds	r5, #1
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	9903      	ldr	r1, [sp, #12]
 8004ad2:	1a5b      	subs	r3, r3, r1
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dcf2      	bgt.n	8004abe <_printf_i+0x212>
 8004ad8:	e7eb      	b.n	8004ab2 <_printf_i+0x206>
 8004ada:	2500      	movs	r5, #0
 8004adc:	f104 0619 	add.w	r6, r4, #25
 8004ae0:	e7f5      	b.n	8004ace <_printf_i+0x222>
 8004ae2:	bf00      	nop
 8004ae4:	080054be 	.word	0x080054be
 8004ae8:	080054cf 	.word	0x080054cf

08004aec <__sflush_r>:
 8004aec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	0716      	lsls	r6, r2, #28
 8004af6:	4605      	mov	r5, r0
 8004af8:	460c      	mov	r4, r1
 8004afa:	d454      	bmi.n	8004ba6 <__sflush_r+0xba>
 8004afc:	684b      	ldr	r3, [r1, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	dc02      	bgt.n	8004b08 <__sflush_r+0x1c>
 8004b02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	dd48      	ble.n	8004b9a <__sflush_r+0xae>
 8004b08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b0a:	2e00      	cmp	r6, #0
 8004b0c:	d045      	beq.n	8004b9a <__sflush_r+0xae>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b14:	682f      	ldr	r7, [r5, #0]
 8004b16:	6a21      	ldr	r1, [r4, #32]
 8004b18:	602b      	str	r3, [r5, #0]
 8004b1a:	d030      	beq.n	8004b7e <__sflush_r+0x92>
 8004b1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	0759      	lsls	r1, r3, #29
 8004b22:	d505      	bpl.n	8004b30 <__sflush_r+0x44>
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b2a:	b10b      	cbz	r3, 8004b30 <__sflush_r+0x44>
 8004b2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	2300      	movs	r3, #0
 8004b32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b34:	6a21      	ldr	r1, [r4, #32]
 8004b36:	4628      	mov	r0, r5
 8004b38:	47b0      	blx	r6
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	d106      	bne.n	8004b4e <__sflush_r+0x62>
 8004b40:	6829      	ldr	r1, [r5, #0]
 8004b42:	291d      	cmp	r1, #29
 8004b44:	d82b      	bhi.n	8004b9e <__sflush_r+0xb2>
 8004b46:	4a2a      	ldr	r2, [pc, #168]	@ (8004bf0 <__sflush_r+0x104>)
 8004b48:	410a      	asrs	r2, r1
 8004b4a:	07d6      	lsls	r6, r2, #31
 8004b4c:	d427      	bmi.n	8004b9e <__sflush_r+0xb2>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	6062      	str	r2, [r4, #4]
 8004b52:	04d9      	lsls	r1, r3, #19
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	d504      	bpl.n	8004b64 <__sflush_r+0x78>
 8004b5a:	1c42      	adds	r2, r0, #1
 8004b5c:	d101      	bne.n	8004b62 <__sflush_r+0x76>
 8004b5e:	682b      	ldr	r3, [r5, #0]
 8004b60:	b903      	cbnz	r3, 8004b64 <__sflush_r+0x78>
 8004b62:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b66:	602f      	str	r7, [r5, #0]
 8004b68:	b1b9      	cbz	r1, 8004b9a <__sflush_r+0xae>
 8004b6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b6e:	4299      	cmp	r1, r3
 8004b70:	d002      	beq.n	8004b78 <__sflush_r+0x8c>
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7ff fbf2 	bl	800435c <_free_r>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b7c:	e00d      	b.n	8004b9a <__sflush_r+0xae>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b0      	blx	r6
 8004b84:	4602      	mov	r2, r0
 8004b86:	1c50      	adds	r0, r2, #1
 8004b88:	d1c9      	bne.n	8004b1e <__sflush_r+0x32>
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0c6      	beq.n	8004b1e <__sflush_r+0x32>
 8004b90:	2b1d      	cmp	r3, #29
 8004b92:	d001      	beq.n	8004b98 <__sflush_r+0xac>
 8004b94:	2b16      	cmp	r3, #22
 8004b96:	d11e      	bne.n	8004bd6 <__sflush_r+0xea>
 8004b98:	602f      	str	r7, [r5, #0]
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	e022      	b.n	8004be4 <__sflush_r+0xf8>
 8004b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ba2:	b21b      	sxth	r3, r3
 8004ba4:	e01b      	b.n	8004bde <__sflush_r+0xf2>
 8004ba6:	690f      	ldr	r7, [r1, #16]
 8004ba8:	2f00      	cmp	r7, #0
 8004baa:	d0f6      	beq.n	8004b9a <__sflush_r+0xae>
 8004bac:	0793      	lsls	r3, r2, #30
 8004bae:	680e      	ldr	r6, [r1, #0]
 8004bb0:	bf08      	it	eq
 8004bb2:	694b      	ldreq	r3, [r1, #20]
 8004bb4:	600f      	str	r7, [r1, #0]
 8004bb6:	bf18      	it	ne
 8004bb8:	2300      	movne	r3, #0
 8004bba:	eba6 0807 	sub.w	r8, r6, r7
 8004bbe:	608b      	str	r3, [r1, #8]
 8004bc0:	f1b8 0f00 	cmp.w	r8, #0
 8004bc4:	dde9      	ble.n	8004b9a <__sflush_r+0xae>
 8004bc6:	6a21      	ldr	r1, [r4, #32]
 8004bc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004bca:	4643      	mov	r3, r8
 8004bcc:	463a      	mov	r2, r7
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b0      	blx	r6
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	dc08      	bgt.n	8004be8 <__sflush_r+0xfc>
 8004bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be8:	4407      	add	r7, r0
 8004bea:	eba8 0800 	sub.w	r8, r8, r0
 8004bee:	e7e7      	b.n	8004bc0 <__sflush_r+0xd4>
 8004bf0:	dfbffffe 	.word	0xdfbffffe

08004bf4 <_fflush_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	690b      	ldr	r3, [r1, #16]
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	b913      	cbnz	r3, 8004c04 <_fflush_r+0x10>
 8004bfe:	2500      	movs	r5, #0
 8004c00:	4628      	mov	r0, r5
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	b118      	cbz	r0, 8004c0e <_fflush_r+0x1a>
 8004c06:	6a03      	ldr	r3, [r0, #32]
 8004c08:	b90b      	cbnz	r3, 8004c0e <_fflush_r+0x1a>
 8004c0a:	f7ff f99f 	bl	8003f4c <__sinit>
 8004c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f3      	beq.n	8004bfe <_fflush_r+0xa>
 8004c16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c18:	07d0      	lsls	r0, r2, #31
 8004c1a:	d404      	bmi.n	8004c26 <_fflush_r+0x32>
 8004c1c:	0599      	lsls	r1, r3, #22
 8004c1e:	d402      	bmi.n	8004c26 <_fflush_r+0x32>
 8004c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c22:	f7ff fb8a 	bl	800433a <__retarget_lock_acquire_recursive>
 8004c26:	4628      	mov	r0, r5
 8004c28:	4621      	mov	r1, r4
 8004c2a:	f7ff ff5f 	bl	8004aec <__sflush_r>
 8004c2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c30:	07da      	lsls	r2, r3, #31
 8004c32:	4605      	mov	r5, r0
 8004c34:	d4e4      	bmi.n	8004c00 <_fflush_r+0xc>
 8004c36:	89a3      	ldrh	r3, [r4, #12]
 8004c38:	059b      	lsls	r3, r3, #22
 8004c3a:	d4e1      	bmi.n	8004c00 <_fflush_r+0xc>
 8004c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c3e:	f7ff fb7d 	bl	800433c <__retarget_lock_release_recursive>
 8004c42:	e7dd      	b.n	8004c00 <_fflush_r+0xc>

08004c44 <__swhatbuf_r>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	460c      	mov	r4, r1
 8004c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	b096      	sub	sp, #88	@ 0x58
 8004c50:	4615      	mov	r5, r2
 8004c52:	461e      	mov	r6, r3
 8004c54:	da0d      	bge.n	8004c72 <__swhatbuf_r+0x2e>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	bf14      	ite	ne
 8004c62:	2340      	movne	r3, #64	@ 0x40
 8004c64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c68:	2000      	movs	r0, #0
 8004c6a:	6031      	str	r1, [r6, #0]
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	b016      	add	sp, #88	@ 0x58
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
 8004c72:	466a      	mov	r2, sp
 8004c74:	f000 f848 	bl	8004d08 <_fstat_r>
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	dbec      	blt.n	8004c56 <__swhatbuf_r+0x12>
 8004c7c:	9901      	ldr	r1, [sp, #4]
 8004c7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c86:	4259      	negs	r1, r3
 8004c88:	4159      	adcs	r1, r3
 8004c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c8e:	e7eb      	b.n	8004c68 <__swhatbuf_r+0x24>

08004c90 <__smakebuf_r>:
 8004c90:	898b      	ldrh	r3, [r1, #12]
 8004c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c94:	079d      	lsls	r5, r3, #30
 8004c96:	4606      	mov	r6, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	d507      	bpl.n	8004cac <__smakebuf_r+0x1c>
 8004c9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	6163      	str	r3, [r4, #20]
 8004ca8:	b003      	add	sp, #12
 8004caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cac:	ab01      	add	r3, sp, #4
 8004cae:	466a      	mov	r2, sp
 8004cb0:	f7ff ffc8 	bl	8004c44 <__swhatbuf_r>
 8004cb4:	9f00      	ldr	r7, [sp, #0]
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	4639      	mov	r1, r7
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7ff fbba 	bl	8004434 <_malloc_r>
 8004cc0:	b948      	cbnz	r0, 8004cd6 <__smakebuf_r+0x46>
 8004cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc6:	059a      	lsls	r2, r3, #22
 8004cc8:	d4ee      	bmi.n	8004ca8 <__smakebuf_r+0x18>
 8004cca:	f023 0303 	bic.w	r3, r3, #3
 8004cce:	f043 0302 	orr.w	r3, r3, #2
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	e7e2      	b.n	8004c9c <__smakebuf_r+0xc>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	6020      	str	r0, [r4, #0]
 8004cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cde:	81a3      	strh	r3, [r4, #12]
 8004ce0:	9b01      	ldr	r3, [sp, #4]
 8004ce2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004ce6:	b15b      	cbz	r3, 8004d00 <__smakebuf_r+0x70>
 8004ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cec:	4630      	mov	r0, r6
 8004cee:	f000 f81d 	bl	8004d2c <_isatty_r>
 8004cf2:	b128      	cbz	r0, 8004d00 <__smakebuf_r+0x70>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	81a3      	strh	r3, [r4, #12]
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	431d      	orrs	r5, r3
 8004d04:	81a5      	strh	r5, [r4, #12]
 8004d06:	e7cf      	b.n	8004ca8 <__smakebuf_r+0x18>

08004d08 <_fstat_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d07      	ldr	r5, [pc, #28]	@ (8004d28 <_fstat_r+0x20>)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	f7fc fb01 	bl	800131c <_fstat>
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	d102      	bne.n	8004d24 <_fstat_r+0x1c>
 8004d1e:	682b      	ldr	r3, [r5, #0]
 8004d20:	b103      	cbz	r3, 8004d24 <_fstat_r+0x1c>
 8004d22:	6023      	str	r3, [r4, #0]
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
 8004d26:	bf00      	nop
 8004d28:	20000354 	.word	0x20000354

08004d2c <_isatty_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4d06      	ldr	r5, [pc, #24]	@ (8004d48 <_isatty_r+0x1c>)
 8004d30:	2300      	movs	r3, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	f7fc fb00 	bl	800133c <_isatty>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_isatty_r+0x1a>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_isatty_r+0x1a>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000354 	.word	0x20000354

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	@ (8004d68 <_sbrk_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc fb08 	bl	800136c <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000354 	.word	0x20000354

08004d6c <_init>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr

08004d78 <_fini>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	bf00      	nop
 8004d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7e:	bc08      	pop	{r3}
 8004d80:	469e      	mov	lr, r3
 8004d82:	4770      	bx	lr
=======
	}
}
 80037cc:	e058      	b.n	8003880 <state_machine_armed+0x138>
		else if(len != 0){
 80037ce:	4b31      	ldr	r3, [pc, #196]	@ (8003894 <state_machine_armed+0x14c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d054      	beq.n	8003880 <state_machine_armed+0x138>
			lcd_clear();
 80037d6:	f7ff fe6d 	bl	80034b4 <lcd_clear>
			lcd_put_cur(0, 0);
 80037da:	2100      	movs	r1, #0
 80037dc:	2000      	movs	r0, #0
 80037de:	f7ff fe7d 	bl	80034dc <lcd_put_cur>
			lcd_send_string("DISARM");
 80037e2:	4830      	ldr	r0, [pc, #192]	@ (80038a4 <state_machine_armed+0x15c>)
 80037e4:	f7ff fe50 	bl	8003488 <lcd_send_string>
			lcd_put_cur(1, 0);
 80037e8:	2100      	movs	r1, #0
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7ff fe76 	bl	80034dc <lcd_put_cur>
			str[len] = '\0';
 80037f0:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <state_machine_armed+0x14c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b2c      	ldr	r3, [pc, #176]	@ (80038a8 <state_machine_armed+0x160>)
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 80037fc:	482a      	ldr	r0, [pc, #168]	@ (80038a8 <state_machine_armed+0x160>)
 80037fe:	f7ff fe43 	bl	8003488 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8003802:	492a      	ldr	r1, [pc, #168]	@ (80038ac <state_machine_armed+0x164>)
 8003804:	4828      	ldr	r0, [pc, #160]	@ (80038a8 <state_machine_armed+0x160>)
 8003806:	f7fc fceb 	bl	80001e0 <strcmp>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <state_machine_armed+0xd0>
				change_state(DISARMED);
 8003810:	2003      	movs	r0, #3
 8003812:	f7ff fedd 	bl	80035d0 <change_state>
}
 8003816:	e033      	b.n	8003880 <state_machine_armed+0x138>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8003818:	4b1e      	ldr	r3, [pc, #120]	@ (8003894 <state_machine_armed+0x14c>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	4a22      	ldr	r2, [pc, #136]	@ (80038a8 <state_machine_armed+0x160>)
 8003820:	5cd3      	ldrb	r3, [r2, r3]
 8003822:	2b23      	cmp	r3, #35	@ 0x23
 8003824:	d00a      	beq.n	800383c <state_machine_armed+0xf4>
 8003826:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <state_machine_armed+0x14c>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b0e      	cmp	r3, #14
 800382c:	d006      	beq.n	800383c <state_machine_armed+0xf4>
 800382e:	4b17      	ldr	r3, [pc, #92]	@ (800388c <state_machine_armed+0x144>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	f083 0301 	eor.w	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <state_machine_armed+0x126>
				lcd_clear();
 800383c:	f7ff fe3a 	bl	80034b4 <lcd_clear>
				lcd_put_cur(0, 0);
 8003840:	2100      	movs	r1, #0
 8003842:	2000      	movs	r0, #0
 8003844:	f7ff fe4a 	bl	80034dc <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8003848:	4819      	ldr	r0, [pc, #100]	@ (80038b0 <state_machine_armed+0x168>)
 800384a:	f7ff fe1d 	bl	8003488 <lcd_send_string>
				memset(str,0,14);
 800384e:	220e      	movs	r2, #14
 8003850:	2100      	movs	r1, #0
 8003852:	4815      	ldr	r0, [pc, #84]	@ (80038a8 <state_machine_armed+0x160>)
 8003854:	f000 ff58 	bl	8004708 <memset>
				len = 0;
 8003858:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <state_machine_armed+0x14c>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
				changed = true;
 800385e:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <state_machine_armed+0x144>)
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8003864:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003868:	f7fd fb26 	bl	8000eb8 <HAL_Delay>
 800386c:	e008      	b.n	8003880 <state_machine_armed+0x138>
				timestamp = HAL_GetTick();
 800386e:	f7fd fb17 	bl	8000ea0 <HAL_GetTick>
 8003872:	4603      	mov	r3, r0
 8003874:	4a06      	ldr	r2, [pc, #24]	@ (8003890 <state_machine_armed+0x148>)
 8003876:	6013      	str	r3, [r2, #0]
				changed = false;
 8003878:	4b04      	ldr	r3, [pc, #16]	@ (800388c <state_machine_armed+0x144>)
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
}
 800387e:	e7ff      	b.n	8003880 <state_machine_armed+0x138>
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40020000 	.word	0x40020000
 800388c:	2000000d 	.word	0x2000000d
 8003890:	2000025c 	.word	0x2000025c
 8003894:	20000256 	.word	0x20000256
 8003898:	08005348 	.word	0x08005348
 800389c:	08005350 	.word	0x08005350
 80038a0:	20000264 	.word	0x20000264
 80038a4:	08005360 	.word	0x08005360
 80038a8:	20000248 	.word	0x20000248
 80038ac:	20000268 	.word	0x20000268
 80038b0:	08005368 	.word	0x08005368

080038b4 <state_machine_disarmed>:

void state_machine_disarmed(void){
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 80038b8:	4b55      	ldr	r3, [pc, #340]	@ (8003a10 <state_machine_disarmed+0x15c>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d109      	bne.n	80038d4 <state_machine_disarmed+0x20>
 80038c0:	f7fd faee 	bl	8000ea0 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b53      	ldr	r3, [pc, #332]	@ (8003a14 <state_machine_disarmed+0x160>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80038d0:	f240 809c 	bls.w	8003a0c <state_machine_disarmed+0x158>
	  if(len == 0 && changed){
 80038d4:	4b50      	ldr	r3, [pc, #320]	@ (8003a18 <state_machine_disarmed+0x164>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d117      	bne.n	800390c <state_machine_disarmed+0x58>
 80038dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <state_machine_disarmed+0x15c>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <state_machine_disarmed+0x58>
		  changed = false;
 80038e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003a10 <state_machine_disarmed+0x15c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
		  lcd_clear();
 80038ea:	f7ff fde3 	bl	80034b4 <lcd_clear>
		  lcd_put_cur(0, 0);
 80038ee:	2100      	movs	r1, #0
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7ff fdf3 	bl	80034dc <lcd_put_cur>
		  lcd_send_string ("DISARMED");
 80038f6:	4849      	ldr	r0, [pc, #292]	@ (8003a1c <state_machine_disarmed+0x168>)
 80038f8:	f7ff fdc6 	bl	8003488 <lcd_send_string>
		  lcd_put_cur(1, 0);
 80038fc:	2100      	movs	r1, #0
 80038fe:	2001      	movs	r0, #1
 8003900:	f7ff fdec 	bl	80034dc <lcd_put_cur>
		  lcd_send_string("PIN TO ARM");
 8003904:	4846      	ldr	r0, [pc, #280]	@ (8003a20 <state_machine_disarmed+0x16c>)
 8003906:	f7ff fdbf 	bl	8003488 <lcd_send_string>
 800390a:	e07f      	b.n	8003a0c <state_machine_disarmed+0x158>
	  }
	  else if(len != 0){
 800390c:	4b42      	ldr	r3, [pc, #264]	@ (8003a18 <state_machine_disarmed+0x164>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d07b      	beq.n	8003a0c <state_machine_disarmed+0x158>
		  lcd_clear();
 8003914:	f7ff fdce 	bl	80034b4 <lcd_clear>
		  lcd_put_cur(0, 0);
 8003918:	2100      	movs	r1, #0
 800391a:	2000      	movs	r0, #0
 800391c:	f7ff fdde 	bl	80034dc <lcd_put_cur>
		  lcd_send_string("DISARMED PIN");
 8003920:	4840      	ldr	r0, [pc, #256]	@ (8003a24 <state_machine_disarmed+0x170>)
 8003922:	f7ff fdb1 	bl	8003488 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8003926:	2100      	movs	r1, #0
 8003928:	2001      	movs	r0, #1
 800392a:	f7ff fdd7 	bl	80034dc <lcd_put_cur>
		  str[len] = '\0';
 800392e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a18 <state_machine_disarmed+0x164>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	4b3c      	ldr	r3, [pc, #240]	@ (8003a28 <state_machine_disarmed+0x174>)
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]
		  lcd_send_string(str);
 800393a:	483b      	ldr	r0, [pc, #236]	@ (8003a28 <state_machine_disarmed+0x174>)
 800393c:	f7ff fda4 	bl	8003488 <lcd_send_string>
		  if(strcmp(str,pin) == 0){
 8003940:	493a      	ldr	r1, [pc, #232]	@ (8003a2c <state_machine_disarmed+0x178>)
 8003942:	4839      	ldr	r0, [pc, #228]	@ (8003a28 <state_machine_disarmed+0x174>)
 8003944:	f7fc fc4c 	bl	80001e0 <strcmp>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <state_machine_disarmed+0xa2>
			  change_state(ARMED);
 800394e:	2000      	movs	r0, #0
 8003950:	f7ff fe3e 	bl	80035d0 <change_state>
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}
 8003954:	e05a      	b.n	8003a0c <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_new_pin) == 0){
 8003956:	4b36      	ldr	r3, [pc, #216]	@ (8003a30 <state_machine_disarmed+0x17c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4619      	mov	r1, r3
 800395c:	4832      	ldr	r0, [pc, #200]	@ (8003a28 <state_machine_disarmed+0x174>)
 800395e:	f7fc fc3f 	bl	80001e0 <strcmp>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <state_machine_disarmed+0xbc>
			  change_state(SET_NEW_PIN);
 8003968:	2004      	movs	r0, #4
 800396a:	f7ff fe31 	bl	80035d0 <change_state>
}
 800396e:	e04d      	b.n	8003a0c <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_alert_time) == 0){
 8003970:	4b30      	ldr	r3, [pc, #192]	@ (8003a34 <state_machine_disarmed+0x180>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	482c      	ldr	r0, [pc, #176]	@ (8003a28 <state_machine_disarmed+0x174>)
 8003978:	f7fc fc32 	bl	80001e0 <strcmp>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <state_machine_disarmed+0xd6>
			  change_state(SET_ALERT_TIME);
 8003982:	2007      	movs	r0, #7
 8003984:	f7ff fe24 	bl	80035d0 <change_state>
}
 8003988:	e040      	b.n	8003a0c <state_machine_disarmed+0x158>
		  else if(strcmp(str,menage_number) == 0){
 800398a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a38 <state_machine_disarmed+0x184>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4619      	mov	r1, r3
 8003990:	4825      	ldr	r0, [pc, #148]	@ (8003a28 <state_machine_disarmed+0x174>)
 8003992:	f7fc fc25 	bl	80001e0 <strcmp>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <state_machine_disarmed+0xf0>
			  change_state(MENAGE_NUMBER);
 800399c:	2005      	movs	r0, #5
 800399e:	f7ff fe17 	bl	80035d0 <change_state>
}
 80039a2:	e033      	b.n	8003a0c <state_machine_disarmed+0x158>
		  else if(str[len - 1] == '#' || len == 14 || !changed){
 80039a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003a18 <state_machine_disarmed+0x164>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003a28 <state_machine_disarmed+0x174>)
 80039ac:	5cd3      	ldrb	r3, [r2, r3]
 80039ae:	2b23      	cmp	r3, #35	@ 0x23
 80039b0:	d00a      	beq.n	80039c8 <state_machine_disarmed+0x114>
 80039b2:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <state_machine_disarmed+0x164>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b0e      	cmp	r3, #14
 80039b8:	d006      	beq.n	80039c8 <state_machine_disarmed+0x114>
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <state_machine_disarmed+0x15c>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	f083 0301 	eor.w	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d018      	beq.n	80039fa <state_machine_disarmed+0x146>
			  lcd_clear();
 80039c8:	f7ff fd74 	bl	80034b4 <lcd_clear>
			  lcd_put_cur(0, 0);
 80039cc:	2100      	movs	r1, #0
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7ff fd84 	bl	80034dc <lcd_put_cur>
			  lcd_send_string ("WRONG PIN");
 80039d4:	4819      	ldr	r0, [pc, #100]	@ (8003a3c <state_machine_disarmed+0x188>)
 80039d6:	f7ff fd57 	bl	8003488 <lcd_send_string>
			  memset(str,0,14);
 80039da:	220e      	movs	r2, #14
 80039dc:	2100      	movs	r1, #0
 80039de:	4812      	ldr	r0, [pc, #72]	@ (8003a28 <state_machine_disarmed+0x174>)
 80039e0:	f000 fe92 	bl	8004708 <memset>
			  len = 0;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <state_machine_disarmed+0x164>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
			  changed = true;
 80039ea:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <state_machine_disarmed+0x15c>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(3000);
 80039f0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80039f4:	f7fd fa60 	bl	8000eb8 <HAL_Delay>
 80039f8:	e008      	b.n	8003a0c <state_machine_disarmed+0x158>
			  timestamp = HAL_GetTick();
 80039fa:	f7fd fa51 	bl	8000ea0 <HAL_GetTick>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <state_machine_disarmed+0x160>)
 8003a02:	6013      	str	r3, [r2, #0]
			  changed = false;
 8003a04:	4b02      	ldr	r3, [pc, #8]	@ (8003a10 <state_machine_disarmed+0x15c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]
}
 8003a0a:	e7ff      	b.n	8003a0c <state_machine_disarmed+0x158>
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	2000000d 	.word	0x2000000d
 8003a14:	2000025c 	.word	0x2000025c
 8003a18:	20000256 	.word	0x20000256
 8003a1c:	08005374 	.word	0x08005374
 8003a20:	08005380 	.word	0x08005380
 8003a24:	0800538c 	.word	0x0800538c
 8003a28:	20000248 	.word	0x20000248
 8003a2c:	20000268 	.word	0x20000268
 8003a30:	20000014 	.word	0x20000014
 8003a34:	20000010 	.word	0x20000010
 8003a38:	20000018 	.word	0x20000018
 8003a3c:	08005368 	.word	0x08005368

08003a40 <state_machine_countdown>:

void state_machine_countdown(void){
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - countdown_start > countdown_delay){
 8003a46:	f7fd fa2b 	bl	8000ea0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b65      	ldr	r3, [pc, #404]	@ (8003be4 <state_machine_countdown+0x1a4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1ad2      	subs	r2, r2, r3
 8003a52:	4b65      	ldr	r3, [pc, #404]	@ (8003be8 <state_machine_countdown+0x1a8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d902      	bls.n	8003a60 <state_machine_countdown+0x20>
		change_state(ALERT_SMS);
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f7ff fdb8 	bl	80035d0 <change_state>
	}
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL || HAL_GetTick() - timestamp_display_s > 1000){
 8003a60:	4b62      	ldr	r3, [pc, #392]	@ (8003bec <state_machine_countdown+0x1ac>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d112      	bne.n	8003a8e <state_machine_countdown+0x4e>
 8003a68:	f7fd fa1a 	bl	8000ea0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b60      	ldr	r3, [pc, #384]	@ (8003bf0 <state_machine_countdown+0x1b0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003a78:	d809      	bhi.n	8003a8e <state_machine_countdown+0x4e>
 8003a7a:	f7fd fa11 	bl	8000ea0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf4 <state_machine_countdown+0x1b4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a8a:	f240 80a7 	bls.w	8003bdc <state_machine_countdown+0x19c>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 8003a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8003bf8 <state_machine_countdown+0x1b8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d13c      	bne.n	8003b10 <state_machine_countdown+0xd0>
 8003a96:	4b55      	ldr	r3, [pc, #340]	@ (8003bec <state_machine_countdown+0x1ac>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <state_machine_countdown+0x70>
 8003a9e:	f7fd f9ff 	bl	8000ea0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	4b53      	ldr	r3, [pc, #332]	@ (8003bf4 <state_machine_countdown+0x1b4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003aae:	d92f      	bls.n	8003b10 <state_machine_countdown+0xd0>
			timestamp_display_s = HAL_GetTick();
 8003ab0:	f7fd f9f6 	bl	8000ea0 <HAL_GetTick>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4a4f      	ldr	r2, [pc, #316]	@ (8003bf4 <state_machine_countdown+0x1b4>)
 8003ab8:	6013      	str	r3, [r2, #0]
			changed = false;
 8003aba:	4b4c      	ldr	r3, [pc, #304]	@ (8003bec <state_machine_countdown+0x1ac>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003ac0:	f7ff fcf8 	bl	80034b4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7ff fd08 	bl	80034dc <lcd_put_cur>
			char buf[14];
			snprintf(buf, 14 ,"COUNTDOWN %lu s",(uint32_t)(countdown_delay/1000 - (HAL_GetTick() - countdown_start)/1000));
 8003acc:	4b46      	ldr	r3, [pc, #280]	@ (8003be8 <state_machine_countdown+0x1a8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8003bfc <state_machine_countdown+0x1bc>)
 8003ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad6:	099c      	lsrs	r4, r3, #6
 8003ad8:	f7fd f9e2 	bl	8000ea0 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b41      	ldr	r3, [pc, #260]	@ (8003be4 <state_machine_countdown+0x1a4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	4a45      	ldr	r2, [pc, #276]	@ (8003bfc <state_machine_countdown+0x1bc>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	099b      	lsrs	r3, r3, #6
 8003aec:	1ae3      	subs	r3, r4, r3
 8003aee:	4638      	mov	r0, r7
 8003af0:	4a43      	ldr	r2, [pc, #268]	@ (8003c00 <state_machine_countdown+0x1c0>)
 8003af2:	210e      	movs	r1, #14
 8003af4:	f000 fcfc 	bl	80044f0 <sniprintf>
			lcd_send_string (buf);
 8003af8:	463b      	mov	r3, r7
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fcc4 	bl	8003488 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003b00:	2100      	movs	r1, #0
 8003b02:	2001      	movs	r0, #1
 8003b04:	f7ff fcea 	bl	80034dc <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8003b08:	483e      	ldr	r0, [pc, #248]	@ (8003c04 <state_machine_countdown+0x1c4>)
 8003b0a:	f7ff fcbd 	bl	8003488 <lcd_send_string>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 8003b0e:	e065      	b.n	8003bdc <state_machine_countdown+0x19c>
		}
		else if(len != 0 && (HAL_GetTick() - timestamp > TIME_PER_SYMBOL || changed)){
 8003b10:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <state_machine_countdown+0x1b8>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d061      	beq.n	8003bdc <state_machine_countdown+0x19c>
 8003b18:	f7fd f9c2 	bl	8000ea0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b34      	ldr	r3, [pc, #208]	@ (8003bf0 <state_machine_countdown+0x1b0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003b28:	d803      	bhi.n	8003b32 <state_machine_countdown+0xf2>
 8003b2a:	4b30      	ldr	r3, [pc, #192]	@ (8003bec <state_machine_countdown+0x1ac>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d054      	beq.n	8003bdc <state_machine_countdown+0x19c>
			lcd_clear();
 8003b32:	f7ff fcbf 	bl	80034b4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003b36:	2100      	movs	r1, #0
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7ff fccf 	bl	80034dc <lcd_put_cur>
			lcd_send_string("DISARM");
 8003b3e:	4832      	ldr	r0, [pc, #200]	@ (8003c08 <state_machine_countdown+0x1c8>)
 8003b40:	f7ff fca2 	bl	8003488 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003b44:	2100      	movs	r1, #0
 8003b46:	2001      	movs	r0, #1
 8003b48:	f7ff fcc8 	bl	80034dc <lcd_put_cur>
			str[len] = '\0';
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <state_machine_countdown+0x1b8>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	4b2e      	ldr	r3, [pc, #184]	@ (8003c0c <state_machine_countdown+0x1cc>)
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 8003b58:	482c      	ldr	r0, [pc, #176]	@ (8003c0c <state_machine_countdown+0x1cc>)
 8003b5a:	f7ff fc95 	bl	8003488 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8003b5e:	492c      	ldr	r1, [pc, #176]	@ (8003c10 <state_machine_countdown+0x1d0>)
 8003b60:	482a      	ldr	r0, [pc, #168]	@ (8003c0c <state_machine_countdown+0x1cc>)
 8003b62:	f7fc fb3d 	bl	80001e0 <strcmp>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <state_machine_countdown+0x134>
				change_state(DISARMED);
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	f7ff fd2f 	bl	80035d0 <change_state>
				changed = false;
			}
		}
	}

}
 8003b72:	e033      	b.n	8003bdc <state_machine_countdown+0x19c>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <state_machine_countdown+0x1b8>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	4a24      	ldr	r2, [pc, #144]	@ (8003c0c <state_machine_countdown+0x1cc>)
 8003b7c:	5cd3      	ldrb	r3, [r2, r3]
 8003b7e:	2b23      	cmp	r3, #35	@ 0x23
 8003b80:	d00a      	beq.n	8003b98 <state_machine_countdown+0x158>
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <state_machine_countdown+0x1b8>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b0e      	cmp	r3, #14
 8003b88:	d006      	beq.n	8003b98 <state_machine_countdown+0x158>
 8003b8a:	4b18      	ldr	r3, [pc, #96]	@ (8003bec <state_machine_countdown+0x1ac>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	f083 0301 	eor.w	r3, r3, #1
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d018      	beq.n	8003bca <state_machine_countdown+0x18a>
				lcd_clear();
 8003b98:	f7ff fc8c 	bl	80034b4 <lcd_clear>
				lcd_put_cur(0, 0);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f7ff fc9c 	bl	80034dc <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8003ba4:	481b      	ldr	r0, [pc, #108]	@ (8003c14 <state_machine_countdown+0x1d4>)
 8003ba6:	f7ff fc6f 	bl	8003488 <lcd_send_string>
				memset(str,0,14);
 8003baa:	220e      	movs	r2, #14
 8003bac:	2100      	movs	r1, #0
 8003bae:	4817      	ldr	r0, [pc, #92]	@ (8003c0c <state_machine_countdown+0x1cc>)
 8003bb0:	f000 fdaa 	bl	8004708 <memset>
				len = 0;
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <state_machine_countdown+0x1b8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
				changed = true;
 8003bba:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <state_machine_countdown+0x1ac>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8003bc0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003bc4:	f7fd f978 	bl	8000eb8 <HAL_Delay>
 8003bc8:	e008      	b.n	8003bdc <state_machine_countdown+0x19c>
				timestamp = HAL_GetTick();
 8003bca:	f7fd f969 	bl	8000ea0 <HAL_GetTick>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4a07      	ldr	r2, [pc, #28]	@ (8003bf0 <state_machine_countdown+0x1b0>)
 8003bd2:	6013      	str	r3, [r2, #0]
				changed = false;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <state_machine_countdown+0x1ac>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
}
 8003bda:	e7ff      	b.n	8003bdc <state_machine_countdown+0x19c>
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	20000264 	.word	0x20000264
 8003be8:	200002a4 	.word	0x200002a4
 8003bec:	2000000d 	.word	0x2000000d
 8003bf0:	2000025c 	.word	0x2000025c
 8003bf4:	20000260 	.word	0x20000260
 8003bf8:	20000256 	.word	0x20000256
 8003bfc:	10624dd3 	.word	0x10624dd3
 8003c00:	0800539c 	.word	0x0800539c
 8003c04:	08005350 	.word	0x08005350
 8003c08:	08005360 	.word	0x08005360
 8003c0c:	20000248 	.word	0x20000248
 8003c10:	20000268 	.word	0x20000268
 8003c14:	08005368 	.word	0x08005368

08003c18 <state_machine_alert>:

void state_machine_alert(void){
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b09b      	sub	sp, #108	@ 0x6c
 8003c1c:	af00      	add	r7, sp, #0

	char data[100] = "AT+COPS?\r\n";
 8003c1e:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <state_machine_alert+0x168>)
 8003c20:	463b      	mov	r3, r7
 8003c22:	6810      	ldr	r0, [r2, #0]
 8003c24:	6851      	ldr	r1, [r2, #4]
 8003c26:	c303      	stmia	r3!, {r0, r1}
 8003c28:	8911      	ldrh	r1, [r2, #8]
 8003c2a:	7a92      	ldrb	r2, [r2, #10]
 8003c2c:	8019      	strh	r1, [r3, #0]
 8003c2e:	709a      	strb	r2, [r3, #2]
 8003c30:	f107 030b 	add.w	r3, r7, #11
 8003c34:	2259      	movs	r2, #89	@ 0x59
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd65 	bl	8004708 <memset>
	for(int i = 0; i < 3; ++i){
 8003c3e:	2300      	movs	r3, #0
 8003c40:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c42:	e092      	b.n	8003d6a <state_machine_alert+0x152>
		if(numbers[i*16] == 0) continue;
 8003c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	4a4e      	ldr	r2, [pc, #312]	@ (8003d84 <state_machine_alert+0x16c>)
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8088 	beq.w	8003d62 <state_machine_alert+0x14a>
		strcpy(data,"AT+COPS?\r\n");
 8003c52:	463b      	mov	r3, r7
 8003c54:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <state_machine_alert+0x168>)
 8003c56:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c58:	c303      	stmia	r3!, {r0, r1}
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	0c12      	lsrs	r2, r2, #16
 8003c60:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
 8003c62:	4b49      	ldr	r3, [pc, #292]	@ (8003d88 <state_machine_alert+0x170>)
 8003c64:	681c      	ldr	r4, [r3, #0]
 8003c66:	463b      	mov	r3, r7
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fac3 	bl	80001f4 <strlen>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	4639      	mov	r1, r7
 8003c74:	2364      	movs	r3, #100	@ 0x64
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7fe fdad 	bl	80027d6 <HAL_UART_Transmit>
		HAL_Delay(50);
 8003c7c:	2032      	movs	r0, #50	@ 0x32
 8003c7e:	f7fd f91b 	bl	8000eb8 <HAL_Delay>

		strcpy(data, "AT+OK\r\n");
 8003c82:	463b      	mov	r3, r7
 8003c84:	4a41      	ldr	r2, [pc, #260]	@ (8003d8c <state_machine_alert+0x174>)
 8003c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c8a:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <state_machine_alert+0x170>)
 8003c90:	681c      	ldr	r4, [r3, #0]
 8003c92:	463b      	mov	r3, r7
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fc faad 	bl	80001f4 <strlen>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4639      	mov	r1, r7
 8003ca0:	2364      	movs	r3, #100	@ 0x64
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fe fd97 	bl	80027d6 <HAL_UART_Transmit>
		HAL_Delay(50);
 8003ca8:	2032      	movs	r0, #50	@ 0x32
 8003caa:	f7fd f905 	bl	8000eb8 <HAL_Delay>
		strcpy(data, "AT+CMGF=1\r\n");
 8003cae:	463b      	mov	r3, r7
 8003cb0:	4a37      	ldr	r2, [pc, #220]	@ (8003d90 <state_machine_alert+0x178>)
 8003cb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
 8003cb8:	4b33      	ldr	r3, [pc, #204]	@ (8003d88 <state_machine_alert+0x170>)
 8003cba:	681c      	ldr	r4, [r3, #0]
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fa98 	bl	80001f4 <strlen>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	4639      	mov	r1, r7
 8003cca:	2364      	movs	r3, #100	@ 0x64
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7fe fd82 	bl	80027d6 <HAL_UART_Transmit>
		HAL_Delay(50);
 8003cd2:	2032      	movs	r0, #50	@ 0x32
 8003cd4:	f7fd f8f0 	bl	8000eb8 <HAL_Delay>
		snprintf(data,100,"AT+CMGS=\"+48%s\"\r\n",numbers + 16*i);
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <state_machine_alert+0x16c>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d94 <state_machine_alert+0x17c>)
 8003ce6:	2164      	movs	r1, #100	@ 0x64
 8003ce8:	f000 fc02 	bl	80044f0 <sniprintf>
		HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
 8003cec:	4b26      	ldr	r3, [pc, #152]	@ (8003d88 <state_machine_alert+0x170>)
 8003cee:	681c      	ldr	r4, [r3, #0]
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fa7e 	bl	80001f4 <strlen>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4639      	mov	r1, r7
 8003cfe:	2364      	movs	r3, #100	@ 0x64
 8003d00:	4620      	mov	r0, r4
 8003d02:	f7fe fd68 	bl	80027d6 <HAL_UART_Transmit>
		HAL_Delay(50);
 8003d06:	2032      	movs	r0, #50	@ 0x32
 8003d08:	f7fd f8d6 	bl	8000eb8 <HAL_Delay>

		strcpy(data, "ALARM!!!\r");
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <state_machine_alert+0x180>)
 8003d10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d12:	c303      	stmia	r3!, {r0, r1}
 8003d14:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
 8003d16:	4b1c      	ldr	r3, [pc, #112]	@ (8003d88 <state_machine_alert+0x170>)
 8003d18:	681c      	ldr	r4, [r3, #0]
 8003d1a:	463b      	mov	r3, r7
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fa69 	bl	80001f4 <strlen>
 8003d22:	4603      	mov	r3, r0
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	4639      	mov	r1, r7
 8003d28:	2364      	movs	r3, #100	@ 0x64
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f7fe fd53 	bl	80027d6 <HAL_UART_Transmit>
		HAL_Delay(50);
 8003d30:	2032      	movs	r0, #50	@ 0x32
 8003d32:	f7fd f8c1 	bl	8000eb8 <HAL_Delay>

		data[0] = 0x1A; data[1] = 0;
 8003d36:	231a      	movs	r3, #26
 8003d38:	703b      	strb	r3, [r7, #0]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	707b      	strb	r3, [r7, #1]
		HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
 8003d3e:	4b12      	ldr	r3, [pc, #72]	@ (8003d88 <state_machine_alert+0x170>)
 8003d40:	681c      	ldr	r4, [r3, #0]
 8003d42:	463b      	mov	r3, r7
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fa55 	bl	80001f4 <strlen>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	4639      	mov	r1, r7
 8003d50:	2364      	movs	r3, #100	@ 0x64
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7fe fd3f 	bl	80027d6 <HAL_UART_Transmit>
		HAL_Delay(5000);
 8003d58:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003d5c:	f7fd f8ac 	bl	8000eb8 <HAL_Delay>
 8003d60:	e000      	b.n	8003d64 <state_machine_alert+0x14c>
		if(numbers[i*16] == 0) continue;
 8003d62:	bf00      	nop
	for(int i = 0; i < 3; ++i){
 8003d64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d66:	3301      	adds	r3, #1
 8003d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	f77f af69 	ble.w	8003c44 <state_machine_alert+0x2c>
	}
	change_state(ARMED);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7ff fc2c 	bl	80035d0 <change_state>
}
 8003d78:	bf00      	nop
 8003d7a:	376c      	adds	r7, #108	@ 0x6c
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}
 8003d80:	080053ac 	.word	0x080053ac
 8003d84:	20000274 	.word	0x20000274
 8003d88:	20000258 	.word	0x20000258
 8003d8c:	080053b8 	.word	0x080053b8
 8003d90:	080053c0 	.word	0x080053c0
 8003d94:	080053cc 	.word	0x080053cc
 8003d98:	080053e0 	.word	0x080053e0

08003d9c <state_machine_set_alert_time>:

void state_machine_set_alert_time(void){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	if(changed == true){
 8003da0:	4b25      	ldr	r3, [pc, #148]	@ (8003e38 <state_machine_set_alert_time+0x9c>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d045      	beq.n	8003e34 <state_machine_set_alert_time+0x98>
		if(len == 0 && changed){
 8003da8:	4b24      	ldr	r3, [pc, #144]	@ (8003e3c <state_machine_set_alert_time+0xa0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d110      	bne.n	8003dd2 <state_machine_set_alert_time+0x36>
 8003db0:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <state_machine_set_alert_time+0x9c>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <state_machine_set_alert_time+0x36>
			changed = false;
 8003db8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e38 <state_machine_set_alert_time+0x9c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003dbe:	f7ff fb79 	bl	80034b4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7ff fb89 	bl	80034dc <lcd_put_cur>
			lcd_send_string ("TIME(S),#=SAVE");
 8003dca:	481d      	ldr	r0, [pc, #116]	@ (8003e40 <state_machine_set_alert_time+0xa4>)
 8003dcc:	f7ff fb5c 	bl	8003488 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 8003dd0:	e030      	b.n	8003e34 <state_machine_set_alert_time+0x98>
		else if(len != 0){
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <state_machine_set_alert_time+0xa0>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d02c      	beq.n	8003e34 <state_machine_set_alert_time+0x98>
			lcd_put_cur(1, 0);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	2001      	movs	r0, #1
 8003dde:	f7ff fb7d 	bl	80034dc <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 8003de2:	4b16      	ldr	r3, [pc, #88]	@ (8003e3c <state_machine_set_alert_time+0xa0>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4a16      	ldr	r2, [pc, #88]	@ (8003e44 <state_machine_set_alert_time+0xa8>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dee:	d003      	beq.n	8003df8 <state_machine_set_alert_time+0x5c>
 8003df0:	4b12      	ldr	r3, [pc, #72]	@ (8003e3c <state_machine_set_alert_time+0xa0>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b09      	cmp	r3, #9
 8003df6:	d902      	bls.n	8003dfe <state_machine_set_alert_time+0x62>
				change_state(DISARMED);
 8003df8:	2003      	movs	r0, #3
 8003dfa:	f7ff fbe9 	bl	80035d0 <change_state>
			lcd_send_string(str);
 8003dfe:	4811      	ldr	r0, [pc, #68]	@ (8003e44 <state_machine_set_alert_time+0xa8>)
 8003e00:	f7ff fb42 	bl	8003488 <lcd_send_string>
			if(str[len - 1] == '#'){
 8003e04:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <state_machine_set_alert_time+0xa0>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e44 <state_machine_set_alert_time+0xa8>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	2b23      	cmp	r3, #35	@ 0x23
 8003e10:	d110      	bne.n	8003e34 <state_machine_set_alert_time+0x98>
				countdown_delay = s_to_ms(strtol(str, NULL, 10));
 8003e12:	220a      	movs	r2, #10
 8003e14:	2100      	movs	r1, #0
 8003e16:	480b      	ldr	r0, [pc, #44]	@ (8003e44 <state_machine_set_alert_time+0xa8>)
 8003e18:	f000 fa40 	bl	800429c <strtol>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fbf6 	bl	8003610 <s_to_ms>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4a08      	ldr	r2, [pc, #32]	@ (8003e48 <state_machine_set_alert_time+0xac>)
 8003e28:	6013      	str	r3, [r2, #0]
				save_new_state();
 8003e2a:	f7ff fb77 	bl	800351c <save_new_state>
				change_state(DISARMED);
 8003e2e:	2003      	movs	r0, #3
 8003e30:	f7ff fbce 	bl	80035d0 <change_state>
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	2000000d 	.word	0x2000000d
 8003e3c:	20000256 	.word	0x20000256
 8003e40:	080053ec 	.word	0x080053ec
 8003e44:	20000248 	.word	0x20000248
 8003e48:	200002a4 	.word	0x200002a4

08003e4c <state_machine_set_new_pin>:

void state_machine_set_new_pin(void){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
	if(changed == true){
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <state_machine_set_new_pin+0x9c>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d045      	beq.n	8003ee4 <state_machine_set_new_pin+0x98>
		if(len == 0 && changed){
 8003e58:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <state_machine_set_new_pin+0xa0>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d110      	bne.n	8003e82 <state_machine_set_new_pin+0x36>
 8003e60:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <state_machine_set_new_pin+0x9c>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00c      	beq.n	8003e82 <state_machine_set_new_pin+0x36>
			changed = false;
 8003e68:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee8 <state_machine_set_new_pin+0x9c>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003e6e:	f7ff fb21 	bl	80034b4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003e72:	2100      	movs	r1, #0
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7ff fb31 	bl	80034dc <lcd_put_cur>
			lcd_send_string ("SET PIN,#=SAVE");
 8003e7a:	481d      	ldr	r0, [pc, #116]	@ (8003ef0 <state_machine_set_new_pin+0xa4>)
 8003e7c:	f7ff fb04 	bl	8003488 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 8003e80:	e030      	b.n	8003ee4 <state_machine_set_new_pin+0x98>
		else if(len != 0){
 8003e82:	4b1a      	ldr	r3, [pc, #104]	@ (8003eec <state_machine_set_new_pin+0xa0>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d02c      	beq.n	8003ee4 <state_machine_set_new_pin+0x98>
			lcd_put_cur(1, 0);
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f7ff fb25 	bl	80034dc <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 8003e92:	4b16      	ldr	r3, [pc, #88]	@ (8003eec <state_machine_set_new_pin+0xa0>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <state_machine_set_new_pin+0xa8>)
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e9e:	d003      	beq.n	8003ea8 <state_machine_set_new_pin+0x5c>
 8003ea0:	4b12      	ldr	r3, [pc, #72]	@ (8003eec <state_machine_set_new_pin+0xa0>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b09      	cmp	r3, #9
 8003ea6:	d902      	bls.n	8003eae <state_machine_set_new_pin+0x62>
				change_state(DISARMED);
 8003ea8:	2003      	movs	r0, #3
 8003eaa:	f7ff fb91 	bl	80035d0 <change_state>
			lcd_send_string(str);
 8003eae:	4811      	ldr	r0, [pc, #68]	@ (8003ef4 <state_machine_set_new_pin+0xa8>)
 8003eb0:	f7ff faea 	bl	8003488 <lcd_send_string>
			if(str[len - 1] == '#'){
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003eec <state_machine_set_new_pin+0xa0>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef4 <state_machine_set_new_pin+0xa8>)
 8003ebc:	5cd3      	ldrb	r3, [r2, r3]
 8003ebe:	2b23      	cmp	r3, #35	@ 0x23
 8003ec0:	d110      	bne.n	8003ee4 <state_machine_set_new_pin+0x98>
				memset(pin, 0, 9);
 8003ec2:	2209      	movs	r2, #9
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	480c      	ldr	r0, [pc, #48]	@ (8003ef8 <state_machine_set_new_pin+0xac>)
 8003ec8:	f000 fc1e 	bl	8004708 <memset>
				memcpy(pin,str,len);
 8003ecc:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <state_machine_set_new_pin+0xa0>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4908      	ldr	r1, [pc, #32]	@ (8003ef4 <state_machine_set_new_pin+0xa8>)
 8003ed4:	4808      	ldr	r0, [pc, #32]	@ (8003ef8 <state_machine_set_new_pin+0xac>)
 8003ed6:	f000 fc92 	bl	80047fe <memcpy>
				save_new_state();
 8003eda:	f7ff fb1f 	bl	800351c <save_new_state>
				change_state(DISARMED);
 8003ede:	2003      	movs	r0, #3
 8003ee0:	f7ff fb76 	bl	80035d0 <change_state>
}
 8003ee4:	bf00      	nop
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	2000000d 	.word	0x2000000d
 8003eec:	20000256 	.word	0x20000256
 8003ef0:	080053fc 	.word	0x080053fc
 8003ef4:	20000248 	.word	0x20000248
 8003ef8:	20000268 	.word	0x20000268

08003efc <state_machine_menage_number>:

void state_machine_menage_number(void){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
	static char code[4] = "";
	bool code_add = false;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]
	if(changed == true){
 8003f06:	4b6e      	ldr	r3, [pc, #440]	@ (80040c0 <state_machine_menage_number+0x1c4>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80d3 	beq.w	80040b6 <state_machine_menage_number+0x1ba>
		changed = false;
 8003f10:	4b6b      	ldr	r3, [pc, #428]	@ (80040c0 <state_machine_menage_number+0x1c4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
		if(!*str) id = 0;
 8003f16:	4b6b      	ldr	r3, [pc, #428]	@ (80040c4 <state_machine_menage_number+0x1c8>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <state_machine_menage_number+0x2a>
 8003f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	e061      	b.n	8003fea <state_machine_menage_number+0xee>
		else if(*str == '8') id = (id + 1) % 3;
 8003f26:	4b67      	ldr	r3, [pc, #412]	@ (80040c4 <state_machine_menage_number+0x1c8>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b38      	cmp	r3, #56	@ 0x38
 8003f2c:	d10f      	bne.n	8003f4e <state_machine_menage_number+0x52>
 8003f2e:	4b66      	ldr	r3, [pc, #408]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	4b65      	ldr	r3, [pc, #404]	@ (80040cc <state_machine_menage_number+0x1d0>)
 8003f36:	fb83 3102 	smull	r3, r1, r3, r2
 8003f3a:	17d3      	asrs	r3, r2, #31
 8003f3c:	1ac9      	subs	r1, r1, r3
 8003f3e:	460b      	mov	r3, r1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	440b      	add	r3, r1
 8003f44:	1ad1      	subs	r1, r2, r3
 8003f46:	b2ca      	uxtb	r2, r1
 8003f48:	4b5f      	ldr	r3, [pc, #380]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e04d      	b.n	8003fea <state_machine_menage_number+0xee>
		else if(*str == '2' && id > 0) id = id - 1;
 8003f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80040c4 <state_machine_menage_number+0x1c8>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b32      	cmp	r3, #50	@ 0x32
 8003f54:	d10a      	bne.n	8003f6c <state_machine_menage_number+0x70>
 8003f56:	4b5c      	ldr	r3, [pc, #368]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <state_machine_menage_number+0x70>
 8003f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b58      	ldr	r3, [pc, #352]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e03e      	b.n	8003fea <state_machine_menage_number+0xee>
		else if(*str == '2') id = 2;
 8003f6c:	4b55      	ldr	r3, [pc, #340]	@ (80040c4 <state_machine_menage_number+0x1c8>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b32      	cmp	r3, #50	@ 0x32
 8003f72:	d103      	bne.n	8003f7c <state_machine_menage_number+0x80>
 8003f74:	4b54      	ldr	r3, [pc, #336]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003f76:	2202      	movs	r2, #2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e036      	b.n	8003fea <state_machine_menage_number+0xee>
		else if(*str == '*') change_state(DISARMED);
 8003f7c:	4b51      	ldr	r3, [pc, #324]	@ (80040c4 <state_machine_menage_number+0x1c8>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f82:	d103      	bne.n	8003f8c <state_machine_menage_number+0x90>
 8003f84:	2003      	movs	r0, #3
 8003f86:	f7ff fb23 	bl	80035d0 <change_state>
 8003f8a:	e02e      	b.n	8003fea <state_machine_menage_number+0xee>
		else{
			code[strlen(code)] = *str;
 8003f8c:	4850      	ldr	r0, [pc, #320]	@ (80040d0 <state_machine_menage_number+0x1d4>)
 8003f8e:	f7fc f931 	bl	80001f4 <strlen>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a4b      	ldr	r2, [pc, #300]	@ (80040c4 <state_machine_menage_number+0x1c8>)
 8003f96:	7811      	ldrb	r1, [r2, #0]
 8003f98:	4a4d      	ldr	r2, [pc, #308]	@ (80040d0 <state_machine_menage_number+0x1d4>)
 8003f9a:	54d1      	strb	r1, [r2, r3]
			code_add = true;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75fb      	strb	r3, [r7, #23]
			if(strcmp(code, "7777") == 0)//REPLACE
 8003fa0:	494c      	ldr	r1, [pc, #304]	@ (80040d4 <state_machine_menage_number+0x1d8>)
 8003fa2:	484b      	ldr	r0, [pc, #300]	@ (80040d0 <state_machine_menage_number+0x1d4>)
 8003fa4:	f7fc f91c 	bl	80001e0 <strcmp>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <state_machine_menage_number+0xba>
				change_state(REPLACE_NUMBER);
 8003fae:	2006      	movs	r0, #6
 8003fb0:	f7ff fb0e 	bl	80035d0 <change_state>
 8003fb4:	e019      	b.n	8003fea <state_machine_menage_number+0xee>
			else if(strcmp(code,"3333") == 0)//DELETE
 8003fb6:	4948      	ldr	r1, [pc, #288]	@ (80040d8 <state_machine_menage_number+0x1dc>)
 8003fb8:	4845      	ldr	r0, [pc, #276]	@ (80040d0 <state_machine_menage_number+0x1d4>)
 8003fba:	f7fc f911 	bl	80001e0 <strcmp>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d112      	bne.n	8003fea <state_machine_menage_number+0xee>
			{
				for(int i = 0; i < 16; ++i){
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	e00a      	b.n	8003fe0 <state_machine_menage_number+0xe4>
					numbers[id*16 + i] = '\0';
 8003fca:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	011a      	lsls	r2, r3, #4
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4a41      	ldr	r2, [pc, #260]	@ (80040dc <state_machine_menage_number+0x1e0>)
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < 16; ++i){
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	ddf1      	ble.n	8003fca <state_machine_menage_number+0xce>
				}
				save_new_state();
 8003fe6:	f7ff fa99 	bl	800351c <save_new_state>
			}
		}
		*str = '\0';
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <state_machine_menage_number+0x1c8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
		len = 0;
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80040e0 <state_machine_menage_number+0x1e4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
		if(!code_add) memset(code,0,4);
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <state_machine_menage_number+0x110>
 8004002:	2204      	movs	r2, #4
 8004004:	2100      	movs	r1, #0
 8004006:	4832      	ldr	r0, [pc, #200]	@ (80040d0 <state_machine_menage_number+0x1d4>)
 8004008:	f000 fb7e 	bl	8004708 <memset>

		char line[14] = "";
 800400c:	2300      	movs	r3, #0
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	811a      	strh	r2, [r3, #8]
		snprintf(line, 14, "->%d.", id + 1);
 800401a:	4b2b      	ldr	r3, [pc, #172]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	4638      	mov	r0, r7
 8004022:	4a30      	ldr	r2, [pc, #192]	@ (80040e4 <state_machine_menage_number+0x1e8>)
 8004024:	210e      	movs	r1, #14
 8004026:	f000 fa63 	bl	80044f0 <sniprintf>
		memcpy(line+4, numbers + 16*id, 9);
 800402a:	463b      	mov	r3, r7
 800402c:	3304      	adds	r3, #4
 800402e:	4a26      	ldr	r2, [pc, #152]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8004030:	7812      	ldrb	r2, [r2, #0]
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	4611      	mov	r1, r2
 8004036:	4a29      	ldr	r2, [pc, #164]	@ (80040dc <state_machine_menage_number+0x1e0>)
 8004038:	4411      	add	r1, r2
 800403a:	2209      	movs	r2, #9
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fbde 	bl	80047fe <memcpy>
		lcd_clear();
 8004042:	f7ff fa37 	bl	80034b4 <lcd_clear>
		lcd_put_cur(0, 0);
 8004046:	2100      	movs	r1, #0
 8004048:	2000      	movs	r0, #0
 800404a:	f7ff fa47 	bl	80034dc <lcd_put_cur>
		lcd_send_string(line);
 800404e:	463b      	mov	r3, r7
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff fa19 	bl	8003488 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004056:	2100      	movs	r1, #0
 8004058:	2001      	movs	r0, #1
 800405a:	f7ff fa3f 	bl	80034dc <lcd_put_cur>
		snprintf(line, 14, "  %d.", (id + 1)%3 + 1);
 800405e:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	4b19      	ldr	r3, [pc, #100]	@ (80040cc <state_machine_menage_number+0x1d0>)
 8004066:	fb83 3201 	smull	r3, r2, r3, r1
 800406a:	17cb      	asrs	r3, r1, #31
 800406c:	1ad2      	subs	r2, r2, r3
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	1aca      	subs	r2, r1, r3
 8004076:	1c53      	adds	r3, r2, #1
 8004078:	4638      	mov	r0, r7
 800407a:	4a1b      	ldr	r2, [pc, #108]	@ (80040e8 <state_machine_menage_number+0x1ec>)
 800407c:	210e      	movs	r1, #14
 800407e:	f000 fa37 	bl	80044f0 <sniprintf>
		memcpy(line + 4, numbers + 16*((id+1)%3), 9);
 8004082:	4638      	mov	r0, r7
 8004084:	3004      	adds	r0, #4
 8004086:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <state_machine_menage_number+0x1cc>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	1c59      	adds	r1, r3, #1
 800408c:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <state_machine_menage_number+0x1d0>)
 800408e:	fb83 3201 	smull	r3, r2, r3, r1
 8004092:	17cb      	asrs	r3, r1, #31
 8004094:	1ad2      	subs	r2, r2, r3
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	1aca      	subs	r2, r1, r3
 800409e:	0113      	lsls	r3, r2, #4
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <state_machine_menage_number+0x1e0>)
 80040a4:	4413      	add	r3, r2
 80040a6:	2209      	movs	r2, #9
 80040a8:	4619      	mov	r1, r3
 80040aa:	f000 fba8 	bl	80047fe <memcpy>
		lcd_send_string(line);
 80040ae:	463b      	mov	r3, r7
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff f9e9 	bl	8003488 <lcd_send_string>
	}
}
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	2000000d 	.word	0x2000000d
 80040c4:	20000248 	.word	0x20000248
 80040c8:	20000257 	.word	0x20000257
 80040cc:	55555556 	.word	0x55555556
 80040d0:	200002a8 	.word	0x200002a8
 80040d4:	0800540c 	.word	0x0800540c
 80040d8:	08005414 	.word	0x08005414
 80040dc:	20000274 	.word	0x20000274
 80040e0:	20000256 	.word	0x20000256
 80040e4:	0800541c 	.word	0x0800541c
 80040e8:	08005424 	.word	0x08005424

080040ec <state_machine_replace_number>:

void state_machine_replace_number(void){
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
	if(changed == true){
 80040f0:	4b27      	ldr	r3, [pc, #156]	@ (8004190 <state_machine_replace_number+0xa4>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d049      	beq.n	800418c <state_machine_replace_number+0xa0>
		changed = false;
 80040f8:	4b25      	ldr	r3, [pc, #148]	@ (8004190 <state_machine_replace_number+0xa4>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80040fe:	f7ff f9d9 	bl	80034b4 <lcd_clear>
		lcd_put_cur(0, 0);
 8004102:	2100      	movs	r1, #0
 8004104:	2000      	movs	r0, #0
 8004106:	f7ff f9e9 	bl	80034dc <lcd_put_cur>
		lcd_send_string("ADD NUMBER #-save");
 800410a:	4822      	ldr	r0, [pc, #136]	@ (8004194 <state_machine_replace_number+0xa8>)
 800410c:	f7ff f9bc 	bl	8003488 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004110:	2100      	movs	r1, #0
 8004112:	2001      	movs	r0, #1
 8004114:	f7ff f9e2 	bl	80034dc <lcd_put_cur>
		str[len] = '\0';
 8004118:	4b1f      	ldr	r3, [pc, #124]	@ (8004198 <state_machine_replace_number+0xac>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	4b1f      	ldr	r3, [pc, #124]	@ (800419c <state_machine_replace_number+0xb0>)
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]
		lcd_send_string(str);
 8004124:	481d      	ldr	r0, [pc, #116]	@ (800419c <state_machine_replace_number+0xb0>)
 8004126:	f7ff f9af 	bl	8003488 <lcd_send_string>

		if(str[len - 1] == '*' || len > 10 || (len != 10 && str[len - 1] == '#')) change_state(MENAGE_NUMBER);
 800412a:	4b1b      	ldr	r3, [pc, #108]	@ (8004198 <state_machine_replace_number+0xac>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	3b01      	subs	r3, #1
 8004130:	4a1a      	ldr	r2, [pc, #104]	@ (800419c <state_machine_replace_number+0xb0>)
 8004132:	5cd3      	ldrb	r3, [r2, r3]
 8004134:	2b2a      	cmp	r3, #42	@ 0x2a
 8004136:	d00e      	beq.n	8004156 <state_machine_replace_number+0x6a>
 8004138:	4b17      	ldr	r3, [pc, #92]	@ (8004198 <state_machine_replace_number+0xac>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b0a      	cmp	r3, #10
 800413e:	d80a      	bhi.n	8004156 <state_machine_replace_number+0x6a>
 8004140:	4b15      	ldr	r3, [pc, #84]	@ (8004198 <state_machine_replace_number+0xac>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b0a      	cmp	r3, #10
 8004146:	d00a      	beq.n	800415e <state_machine_replace_number+0x72>
 8004148:	4b13      	ldr	r3, [pc, #76]	@ (8004198 <state_machine_replace_number+0xac>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a13      	ldr	r2, [pc, #76]	@ (800419c <state_machine_replace_number+0xb0>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	2b23      	cmp	r3, #35	@ 0x23
 8004154:	d103      	bne.n	800415e <state_machine_replace_number+0x72>
 8004156:	2005      	movs	r0, #5
 8004158:	f7ff fa3a 	bl	80035d0 <change_state>
			memcpy(numbers + id * 16, str, 9);
			save_new_state();
			change_state(MENAGE_NUMBER);
		}
	}
}
 800415c:	e016      	b.n	800418c <state_machine_replace_number+0xa0>
		else if(str[len - 1] == '#'){
 800415e:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <state_machine_replace_number+0xac>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	4a0d      	ldr	r2, [pc, #52]	@ (800419c <state_machine_replace_number+0xb0>)
 8004166:	5cd3      	ldrb	r3, [r2, r3]
 8004168:	2b23      	cmp	r3, #35	@ 0x23
 800416a:	d10f      	bne.n	800418c <state_machine_replace_number+0xa0>
			memcpy(numbers + id * 16, str, 9);
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <state_machine_replace_number+0xb4>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	461a      	mov	r2, r3
 8004174:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <state_machine_replace_number+0xb8>)
 8004176:	4413      	add	r3, r2
 8004178:	2209      	movs	r2, #9
 800417a:	4908      	ldr	r1, [pc, #32]	@ (800419c <state_machine_replace_number+0xb0>)
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fb3e 	bl	80047fe <memcpy>
			save_new_state();
 8004182:	f7ff f9cb 	bl	800351c <save_new_state>
			change_state(MENAGE_NUMBER);
 8004186:	2005      	movs	r0, #5
 8004188:	f7ff fa22 	bl	80035d0 <change_state>
}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}
 8004190:	2000000d 	.word	0x2000000d
 8004194:	0800542c 	.word	0x0800542c
 8004198:	20000256 	.word	0x20000256
 800419c:	20000248 	.word	0x20000248
 80041a0:	20000257 	.word	0x20000257
 80041a4:	20000274 	.word	0x20000274

080041a8 <_strtol_l.constprop.0>:
 80041a8:	2b24      	cmp	r3, #36	@ 0x24
 80041aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ae:	4686      	mov	lr, r0
 80041b0:	4690      	mov	r8, r2
 80041b2:	d801      	bhi.n	80041b8 <_strtol_l.constprop.0+0x10>
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <_strtol_l.constprop.0+0x1e>
 80041b8:	f000 faf4 	bl	80047a4 <__errno>
 80041bc:	2316      	movs	r3, #22
 80041be:	6003      	str	r3, [r0, #0]
 80041c0:	2000      	movs	r0, #0
 80041c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c6:	4834      	ldr	r0, [pc, #208]	@ (8004298 <_strtol_l.constprop.0+0xf0>)
 80041c8:	460d      	mov	r5, r1
 80041ca:	462a      	mov	r2, r5
 80041cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041d0:	5d06      	ldrb	r6, [r0, r4]
 80041d2:	f016 0608 	ands.w	r6, r6, #8
 80041d6:	d1f8      	bne.n	80041ca <_strtol_l.constprop.0+0x22>
 80041d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80041da:	d12d      	bne.n	8004238 <_strtol_l.constprop.0+0x90>
 80041dc:	782c      	ldrb	r4, [r5, #0]
 80041de:	2601      	movs	r6, #1
 80041e0:	1c95      	adds	r5, r2, #2
 80041e2:	f033 0210 	bics.w	r2, r3, #16
 80041e6:	d109      	bne.n	80041fc <_strtol_l.constprop.0+0x54>
 80041e8:	2c30      	cmp	r4, #48	@ 0x30
 80041ea:	d12a      	bne.n	8004242 <_strtol_l.constprop.0+0x9a>
 80041ec:	782a      	ldrb	r2, [r5, #0]
 80041ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80041f2:	2a58      	cmp	r2, #88	@ 0x58
 80041f4:	d125      	bne.n	8004242 <_strtol_l.constprop.0+0x9a>
 80041f6:	786c      	ldrb	r4, [r5, #1]
 80041f8:	2310      	movs	r3, #16
 80041fa:	3502      	adds	r5, #2
 80041fc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004200:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004204:	2200      	movs	r2, #0
 8004206:	fbbc f9f3 	udiv	r9, ip, r3
 800420a:	4610      	mov	r0, r2
 800420c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004210:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004214:	2f09      	cmp	r7, #9
 8004216:	d81b      	bhi.n	8004250 <_strtol_l.constprop.0+0xa8>
 8004218:	463c      	mov	r4, r7
 800421a:	42a3      	cmp	r3, r4
 800421c:	dd27      	ble.n	800426e <_strtol_l.constprop.0+0xc6>
 800421e:	1c57      	adds	r7, r2, #1
 8004220:	d007      	beq.n	8004232 <_strtol_l.constprop.0+0x8a>
 8004222:	4581      	cmp	r9, r0
 8004224:	d320      	bcc.n	8004268 <_strtol_l.constprop.0+0xc0>
 8004226:	d101      	bne.n	800422c <_strtol_l.constprop.0+0x84>
 8004228:	45a2      	cmp	sl, r4
 800422a:	db1d      	blt.n	8004268 <_strtol_l.constprop.0+0xc0>
 800422c:	fb00 4003 	mla	r0, r0, r3, r4
 8004230:	2201      	movs	r2, #1
 8004232:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004236:	e7eb      	b.n	8004210 <_strtol_l.constprop.0+0x68>
 8004238:	2c2b      	cmp	r4, #43	@ 0x2b
 800423a:	bf04      	itt	eq
 800423c:	782c      	ldrbeq	r4, [r5, #0]
 800423e:	1c95      	addeq	r5, r2, #2
 8004240:	e7cf      	b.n	80041e2 <_strtol_l.constprop.0+0x3a>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1da      	bne.n	80041fc <_strtol_l.constprop.0+0x54>
 8004246:	2c30      	cmp	r4, #48	@ 0x30
 8004248:	bf0c      	ite	eq
 800424a:	2308      	moveq	r3, #8
 800424c:	230a      	movne	r3, #10
 800424e:	e7d5      	b.n	80041fc <_strtol_l.constprop.0+0x54>
 8004250:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004254:	2f19      	cmp	r7, #25
 8004256:	d801      	bhi.n	800425c <_strtol_l.constprop.0+0xb4>
 8004258:	3c37      	subs	r4, #55	@ 0x37
 800425a:	e7de      	b.n	800421a <_strtol_l.constprop.0+0x72>
 800425c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004260:	2f19      	cmp	r7, #25
 8004262:	d804      	bhi.n	800426e <_strtol_l.constprop.0+0xc6>
 8004264:	3c57      	subs	r4, #87	@ 0x57
 8004266:	e7d8      	b.n	800421a <_strtol_l.constprop.0+0x72>
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	e7e1      	b.n	8004232 <_strtol_l.constprop.0+0x8a>
 800426e:	1c53      	adds	r3, r2, #1
 8004270:	d108      	bne.n	8004284 <_strtol_l.constprop.0+0xdc>
 8004272:	2322      	movs	r3, #34	@ 0x22
 8004274:	f8ce 3000 	str.w	r3, [lr]
 8004278:	4660      	mov	r0, ip
 800427a:	f1b8 0f00 	cmp.w	r8, #0
 800427e:	d0a0      	beq.n	80041c2 <_strtol_l.constprop.0+0x1a>
 8004280:	1e69      	subs	r1, r5, #1
 8004282:	e006      	b.n	8004292 <_strtol_l.constprop.0+0xea>
 8004284:	b106      	cbz	r6, 8004288 <_strtol_l.constprop.0+0xe0>
 8004286:	4240      	negs	r0, r0
 8004288:	f1b8 0f00 	cmp.w	r8, #0
 800428c:	d099      	beq.n	80041c2 <_strtol_l.constprop.0+0x1a>
 800428e:	2a00      	cmp	r2, #0
 8004290:	d1f6      	bne.n	8004280 <_strtol_l.constprop.0+0xd8>
 8004292:	f8c8 1000 	str.w	r1, [r8]
 8004296:	e794      	b.n	80041c2 <_strtol_l.constprop.0+0x1a>
 8004298:	08005459 	.word	0x08005459

0800429c <strtol>:
 800429c:	4613      	mov	r3, r2
 800429e:	460a      	mov	r2, r1
 80042a0:	4601      	mov	r1, r0
 80042a2:	4802      	ldr	r0, [pc, #8]	@ (80042ac <strtol+0x10>)
 80042a4:	6800      	ldr	r0, [r0, #0]
 80042a6:	f7ff bf7f 	b.w	80041a8 <_strtol_l.constprop.0>
 80042aa:	bf00      	nop
 80042ac:	20000048 	.word	0x20000048

080042b0 <std>:
 80042b0:	2300      	movs	r3, #0
 80042b2:	b510      	push	{r4, lr}
 80042b4:	4604      	mov	r4, r0
 80042b6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042be:	6083      	str	r3, [r0, #8]
 80042c0:	8181      	strh	r1, [r0, #12]
 80042c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80042c4:	81c2      	strh	r2, [r0, #14]
 80042c6:	6183      	str	r3, [r0, #24]
 80042c8:	4619      	mov	r1, r3
 80042ca:	2208      	movs	r2, #8
 80042cc:	305c      	adds	r0, #92	@ 0x5c
 80042ce:	f000 fa1b 	bl	8004708 <memset>
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <std+0x58>)
 80042d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <std+0x5c>)
 80042d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042da:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <std+0x60>)
 80042dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <std+0x64>)
 80042e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80042e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004318 <std+0x68>)
 80042e4:	6224      	str	r4, [r4, #32]
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d006      	beq.n	80042f8 <std+0x48>
 80042ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042ee:	4294      	cmp	r4, r2
 80042f0:	d002      	beq.n	80042f8 <std+0x48>
 80042f2:	33d0      	adds	r3, #208	@ 0xd0
 80042f4:	429c      	cmp	r4, r3
 80042f6:	d105      	bne.n	8004304 <std+0x54>
 80042f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004300:	f000 ba7a 	b.w	80047f8 <__retarget_lock_init_recursive>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	bf00      	nop
 8004308:	08004559 	.word	0x08004559
 800430c:	0800457b 	.word	0x0800457b
 8004310:	080045b3 	.word	0x080045b3
 8004314:	080045d7 	.word	0x080045d7
 8004318:	200002ac 	.word	0x200002ac

0800431c <stdio_exit_handler>:
 800431c:	4a02      	ldr	r2, [pc, #8]	@ (8004328 <stdio_exit_handler+0xc>)
 800431e:	4903      	ldr	r1, [pc, #12]	@ (800432c <stdio_exit_handler+0x10>)
 8004320:	4803      	ldr	r0, [pc, #12]	@ (8004330 <stdio_exit_handler+0x14>)
 8004322:	f000 b869 	b.w	80043f8 <_fwalk_sglue>
 8004326:	bf00      	nop
 8004328:	2000003c 	.word	0x2000003c
 800432c:	080050e1 	.word	0x080050e1
 8004330:	2000004c 	.word	0x2000004c

08004334 <cleanup_stdio>:
 8004334:	6841      	ldr	r1, [r0, #4]
 8004336:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <cleanup_stdio+0x34>)
 8004338:	4299      	cmp	r1, r3
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
 800433e:	d001      	beq.n	8004344 <cleanup_stdio+0x10>
 8004340:	f000 fece 	bl	80050e0 <_fflush_r>
 8004344:	68a1      	ldr	r1, [r4, #8]
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <cleanup_stdio+0x38>)
 8004348:	4299      	cmp	r1, r3
 800434a:	d002      	beq.n	8004352 <cleanup_stdio+0x1e>
 800434c:	4620      	mov	r0, r4
 800434e:	f000 fec7 	bl	80050e0 <_fflush_r>
 8004352:	68e1      	ldr	r1, [r4, #12]
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <cleanup_stdio+0x3c>)
 8004356:	4299      	cmp	r1, r3
 8004358:	d004      	beq.n	8004364 <cleanup_stdio+0x30>
 800435a:	4620      	mov	r0, r4
 800435c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004360:	f000 bebe 	b.w	80050e0 <_fflush_r>
 8004364:	bd10      	pop	{r4, pc}
 8004366:	bf00      	nop
 8004368:	200002ac 	.word	0x200002ac
 800436c:	20000314 	.word	0x20000314
 8004370:	2000037c 	.word	0x2000037c

08004374 <global_stdio_init.part.0>:
 8004374:	b510      	push	{r4, lr}
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <global_stdio_init.part.0+0x30>)
 8004378:	4c0b      	ldr	r4, [pc, #44]	@ (80043a8 <global_stdio_init.part.0+0x34>)
 800437a:	4a0c      	ldr	r2, [pc, #48]	@ (80043ac <global_stdio_init.part.0+0x38>)
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	4620      	mov	r0, r4
 8004380:	2200      	movs	r2, #0
 8004382:	2104      	movs	r1, #4
 8004384:	f7ff ff94 	bl	80042b0 <std>
 8004388:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800438c:	2201      	movs	r2, #1
 800438e:	2109      	movs	r1, #9
 8004390:	f7ff ff8e 	bl	80042b0 <std>
 8004394:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004398:	2202      	movs	r2, #2
 800439a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800439e:	2112      	movs	r1, #18
 80043a0:	f7ff bf86 	b.w	80042b0 <std>
 80043a4:	200003e4 	.word	0x200003e4
 80043a8:	200002ac 	.word	0x200002ac
 80043ac:	0800431d 	.word	0x0800431d

080043b0 <__sfp_lock_acquire>:
 80043b0:	4801      	ldr	r0, [pc, #4]	@ (80043b8 <__sfp_lock_acquire+0x8>)
 80043b2:	f000 ba22 	b.w	80047fa <__retarget_lock_acquire_recursive>
 80043b6:	bf00      	nop
 80043b8:	200003ed 	.word	0x200003ed

080043bc <__sfp_lock_release>:
 80043bc:	4801      	ldr	r0, [pc, #4]	@ (80043c4 <__sfp_lock_release+0x8>)
 80043be:	f000 ba1d 	b.w	80047fc <__retarget_lock_release_recursive>
 80043c2:	bf00      	nop
 80043c4:	200003ed 	.word	0x200003ed

080043c8 <__sinit>:
 80043c8:	b510      	push	{r4, lr}
 80043ca:	4604      	mov	r4, r0
 80043cc:	f7ff fff0 	bl	80043b0 <__sfp_lock_acquire>
 80043d0:	6a23      	ldr	r3, [r4, #32]
 80043d2:	b11b      	cbz	r3, 80043dc <__sinit+0x14>
 80043d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d8:	f7ff bff0 	b.w	80043bc <__sfp_lock_release>
 80043dc:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <__sinit+0x28>)
 80043de:	6223      	str	r3, [r4, #32]
 80043e0:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <__sinit+0x2c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f5      	bne.n	80043d4 <__sinit+0xc>
 80043e8:	f7ff ffc4 	bl	8004374 <global_stdio_init.part.0>
 80043ec:	e7f2      	b.n	80043d4 <__sinit+0xc>
 80043ee:	bf00      	nop
 80043f0:	08004335 	.word	0x08004335
 80043f4:	200003e4 	.word	0x200003e4

080043f8 <_fwalk_sglue>:
 80043f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043fc:	4607      	mov	r7, r0
 80043fe:	4688      	mov	r8, r1
 8004400:	4614      	mov	r4, r2
 8004402:	2600      	movs	r6, #0
 8004404:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004408:	f1b9 0901 	subs.w	r9, r9, #1
 800440c:	d505      	bpl.n	800441a <_fwalk_sglue+0x22>
 800440e:	6824      	ldr	r4, [r4, #0]
 8004410:	2c00      	cmp	r4, #0
 8004412:	d1f7      	bne.n	8004404 <_fwalk_sglue+0xc>
 8004414:	4630      	mov	r0, r6
 8004416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441a:	89ab      	ldrh	r3, [r5, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d907      	bls.n	8004430 <_fwalk_sglue+0x38>
 8004420:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004424:	3301      	adds	r3, #1
 8004426:	d003      	beq.n	8004430 <_fwalk_sglue+0x38>
 8004428:	4629      	mov	r1, r5
 800442a:	4638      	mov	r0, r7
 800442c:	47c0      	blx	r8
 800442e:	4306      	orrs	r6, r0
 8004430:	3568      	adds	r5, #104	@ 0x68
 8004432:	e7e9      	b.n	8004408 <_fwalk_sglue+0x10>

08004434 <_puts_r>:
 8004434:	6a03      	ldr	r3, [r0, #32]
 8004436:	b570      	push	{r4, r5, r6, lr}
 8004438:	6884      	ldr	r4, [r0, #8]
 800443a:	4605      	mov	r5, r0
 800443c:	460e      	mov	r6, r1
 800443e:	b90b      	cbnz	r3, 8004444 <_puts_r+0x10>
 8004440:	f7ff ffc2 	bl	80043c8 <__sinit>
 8004444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004446:	07db      	lsls	r3, r3, #31
 8004448:	d405      	bmi.n	8004456 <_puts_r+0x22>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	0598      	lsls	r0, r3, #22
 800444e:	d402      	bmi.n	8004456 <_puts_r+0x22>
 8004450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004452:	f000 f9d2 	bl	80047fa <__retarget_lock_acquire_recursive>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	0719      	lsls	r1, r3, #28
 800445a:	d502      	bpl.n	8004462 <_puts_r+0x2e>
 800445c:	6923      	ldr	r3, [r4, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d135      	bne.n	80044ce <_puts_r+0x9a>
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f8f9 	bl	800465c <__swsetup_r>
 800446a:	b380      	cbz	r0, 80044ce <_puts_r+0x9a>
 800446c:	f04f 35ff 	mov.w	r5, #4294967295
 8004470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004472:	07da      	lsls	r2, r3, #31
 8004474:	d405      	bmi.n	8004482 <_puts_r+0x4e>
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	059b      	lsls	r3, r3, #22
 800447a:	d402      	bmi.n	8004482 <_puts_r+0x4e>
 800447c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800447e:	f000 f9bd 	bl	80047fc <__retarget_lock_release_recursive>
 8004482:	4628      	mov	r0, r5
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	2b00      	cmp	r3, #0
 8004488:	da04      	bge.n	8004494 <_puts_r+0x60>
 800448a:	69a2      	ldr	r2, [r4, #24]
 800448c:	429a      	cmp	r2, r3
 800448e:	dc17      	bgt.n	80044c0 <_puts_r+0x8c>
 8004490:	290a      	cmp	r1, #10
 8004492:	d015      	beq.n	80044c0 <_puts_r+0x8c>
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	6022      	str	r2, [r4, #0]
 800449a:	7019      	strb	r1, [r3, #0]
 800449c:	68a3      	ldr	r3, [r4, #8]
 800449e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044a2:	3b01      	subs	r3, #1
 80044a4:	60a3      	str	r3, [r4, #8]
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d1ed      	bne.n	8004486 <_puts_r+0x52>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da11      	bge.n	80044d2 <_puts_r+0x9e>
 80044ae:	4622      	mov	r2, r4
 80044b0:	210a      	movs	r1, #10
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 f893 	bl	80045de <__swbuf_r>
 80044b8:	3001      	adds	r0, #1
 80044ba:	d0d7      	beq.n	800446c <_puts_r+0x38>
 80044bc:	250a      	movs	r5, #10
 80044be:	e7d7      	b.n	8004470 <_puts_r+0x3c>
 80044c0:	4622      	mov	r2, r4
 80044c2:	4628      	mov	r0, r5
 80044c4:	f000 f88b 	bl	80045de <__swbuf_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	d1e7      	bne.n	800449c <_puts_r+0x68>
 80044cc:	e7ce      	b.n	800446c <_puts_r+0x38>
 80044ce:	3e01      	subs	r6, #1
 80044d0:	e7e4      	b.n	800449c <_puts_r+0x68>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	6022      	str	r2, [r4, #0]
 80044d8:	220a      	movs	r2, #10
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e7ee      	b.n	80044bc <_puts_r+0x88>
	...

080044e0 <puts>:
 80044e0:	4b02      	ldr	r3, [pc, #8]	@ (80044ec <puts+0xc>)
 80044e2:	4601      	mov	r1, r0
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	f7ff bfa5 	b.w	8004434 <_puts_r>
 80044ea:	bf00      	nop
 80044ec:	20000048 	.word	0x20000048

080044f0 <sniprintf>:
 80044f0:	b40c      	push	{r2, r3}
 80044f2:	b530      	push	{r4, r5, lr}
 80044f4:	4b17      	ldr	r3, [pc, #92]	@ (8004554 <sniprintf+0x64>)
 80044f6:	1e0c      	subs	r4, r1, #0
 80044f8:	681d      	ldr	r5, [r3, #0]
 80044fa:	b09d      	sub	sp, #116	@ 0x74
 80044fc:	da08      	bge.n	8004510 <sniprintf+0x20>
 80044fe:	238b      	movs	r3, #139	@ 0x8b
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	f04f 30ff 	mov.w	r0, #4294967295
 8004506:	b01d      	add	sp, #116	@ 0x74
 8004508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800450c:	b002      	add	sp, #8
 800450e:	4770      	bx	lr
 8004510:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004514:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004518:	bf14      	ite	ne
 800451a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800451e:	4623      	moveq	r3, r4
 8004520:	9304      	str	r3, [sp, #16]
 8004522:	9307      	str	r3, [sp, #28]
 8004524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004528:	9002      	str	r0, [sp, #8]
 800452a:	9006      	str	r0, [sp, #24]
 800452c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004530:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004532:	ab21      	add	r3, sp, #132	@ 0x84
 8004534:	a902      	add	r1, sp, #8
 8004536:	4628      	mov	r0, r5
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	f000 fac3 	bl	8004ac4 <_svfiprintf_r>
 800453e:	1c43      	adds	r3, r0, #1
 8004540:	bfbc      	itt	lt
 8004542:	238b      	movlt	r3, #139	@ 0x8b
 8004544:	602b      	strlt	r3, [r5, #0]
 8004546:	2c00      	cmp	r4, #0
 8004548:	d0dd      	beq.n	8004506 <sniprintf+0x16>
 800454a:	9b02      	ldr	r3, [sp, #8]
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e7d9      	b.n	8004506 <sniprintf+0x16>
 8004552:	bf00      	nop
 8004554:	20000048 	.word	0x20000048

08004558 <__sread>:
 8004558:	b510      	push	{r4, lr}
 800455a:	460c      	mov	r4, r1
 800455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004560:	f000 f8fc 	bl	800475c <_read_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	bfab      	itete	ge
 8004568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800456a:	89a3      	ldrhlt	r3, [r4, #12]
 800456c:	181b      	addge	r3, r3, r0
 800456e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004572:	bfac      	ite	ge
 8004574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004576:	81a3      	strhlt	r3, [r4, #12]
 8004578:	bd10      	pop	{r4, pc}

0800457a <__swrite>:
 800457a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457e:	461f      	mov	r7, r3
 8004580:	898b      	ldrh	r3, [r1, #12]
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	4605      	mov	r5, r0
 8004586:	460c      	mov	r4, r1
 8004588:	4616      	mov	r6, r2
 800458a:	d505      	bpl.n	8004598 <__swrite+0x1e>
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	2302      	movs	r3, #2
 8004592:	2200      	movs	r2, #0
 8004594:	f000 f8d0 	bl	8004738 <_lseek_r>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	4632      	mov	r2, r6
 80045a6:	463b      	mov	r3, r7
 80045a8:	4628      	mov	r0, r5
 80045aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	f000 b8e7 	b.w	8004780 <_write_r>

080045b2 <__sseek>:
 80045b2:	b510      	push	{r4, lr}
 80045b4:	460c      	mov	r4, r1
 80045b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ba:	f000 f8bd 	bl	8004738 <_lseek_r>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	bf15      	itete	ne
 80045c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045ce:	81a3      	strheq	r3, [r4, #12]
 80045d0:	bf18      	it	ne
 80045d2:	81a3      	strhne	r3, [r4, #12]
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <__sclose>:
 80045d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045da:	f000 b89d 	b.w	8004718 <_close_r>

080045de <__swbuf_r>:
 80045de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e0:	460e      	mov	r6, r1
 80045e2:	4614      	mov	r4, r2
 80045e4:	4605      	mov	r5, r0
 80045e6:	b118      	cbz	r0, 80045f0 <__swbuf_r+0x12>
 80045e8:	6a03      	ldr	r3, [r0, #32]
 80045ea:	b90b      	cbnz	r3, 80045f0 <__swbuf_r+0x12>
 80045ec:	f7ff feec 	bl	80043c8 <__sinit>
 80045f0:	69a3      	ldr	r3, [r4, #24]
 80045f2:	60a3      	str	r3, [r4, #8]
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	071a      	lsls	r2, r3, #28
 80045f8:	d501      	bpl.n	80045fe <__swbuf_r+0x20>
 80045fa:	6923      	ldr	r3, [r4, #16]
 80045fc:	b943      	cbnz	r3, 8004610 <__swbuf_r+0x32>
 80045fe:	4621      	mov	r1, r4
 8004600:	4628      	mov	r0, r5
 8004602:	f000 f82b 	bl	800465c <__swsetup_r>
 8004606:	b118      	cbz	r0, 8004610 <__swbuf_r+0x32>
 8004608:	f04f 37ff 	mov.w	r7, #4294967295
 800460c:	4638      	mov	r0, r7
 800460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	6922      	ldr	r2, [r4, #16]
 8004614:	1a98      	subs	r0, r3, r2
 8004616:	6963      	ldr	r3, [r4, #20]
 8004618:	b2f6      	uxtb	r6, r6
 800461a:	4283      	cmp	r3, r0
 800461c:	4637      	mov	r7, r6
 800461e:	dc05      	bgt.n	800462c <__swbuf_r+0x4e>
 8004620:	4621      	mov	r1, r4
 8004622:	4628      	mov	r0, r5
 8004624:	f000 fd5c 	bl	80050e0 <_fflush_r>
 8004628:	2800      	cmp	r0, #0
 800462a:	d1ed      	bne.n	8004608 <__swbuf_r+0x2a>
 800462c:	68a3      	ldr	r3, [r4, #8]
 800462e:	3b01      	subs	r3, #1
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	6022      	str	r2, [r4, #0]
 8004638:	701e      	strb	r6, [r3, #0]
 800463a:	6962      	ldr	r2, [r4, #20]
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	429a      	cmp	r2, r3
 8004640:	d004      	beq.n	800464c <__swbuf_r+0x6e>
 8004642:	89a3      	ldrh	r3, [r4, #12]
 8004644:	07db      	lsls	r3, r3, #31
 8004646:	d5e1      	bpl.n	800460c <__swbuf_r+0x2e>
 8004648:	2e0a      	cmp	r6, #10
 800464a:	d1df      	bne.n	800460c <__swbuf_r+0x2e>
 800464c:	4621      	mov	r1, r4
 800464e:	4628      	mov	r0, r5
 8004650:	f000 fd46 	bl	80050e0 <_fflush_r>
 8004654:	2800      	cmp	r0, #0
 8004656:	d0d9      	beq.n	800460c <__swbuf_r+0x2e>
 8004658:	e7d6      	b.n	8004608 <__swbuf_r+0x2a>
	...

0800465c <__swsetup_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	4b29      	ldr	r3, [pc, #164]	@ (8004704 <__swsetup_r+0xa8>)
 8004660:	4605      	mov	r5, r0
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	460c      	mov	r4, r1
 8004666:	b118      	cbz	r0, 8004670 <__swsetup_r+0x14>
 8004668:	6a03      	ldr	r3, [r0, #32]
 800466a:	b90b      	cbnz	r3, 8004670 <__swsetup_r+0x14>
 800466c:	f7ff feac 	bl	80043c8 <__sinit>
 8004670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004674:	0719      	lsls	r1, r3, #28
 8004676:	d422      	bmi.n	80046be <__swsetup_r+0x62>
 8004678:	06da      	lsls	r2, r3, #27
 800467a:	d407      	bmi.n	800468c <__swsetup_r+0x30>
 800467c:	2209      	movs	r2, #9
 800467e:	602a      	str	r2, [r5, #0]
 8004680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	f04f 30ff 	mov.w	r0, #4294967295
 800468a:	e033      	b.n	80046f4 <__swsetup_r+0x98>
 800468c:	0758      	lsls	r0, r3, #29
 800468e:	d512      	bpl.n	80046b6 <__swsetup_r+0x5a>
 8004690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004692:	b141      	cbz	r1, 80046a6 <__swsetup_r+0x4a>
 8004694:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004698:	4299      	cmp	r1, r3
 800469a:	d002      	beq.n	80046a2 <__swsetup_r+0x46>
 800469c:	4628      	mov	r0, r5
 800469e:	f000 f8bd 	bl	800481c <_free_r>
 80046a2:	2300      	movs	r3, #0
 80046a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6063      	str	r3, [r4, #4]
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f043 0308 	orr.w	r3, r3, #8
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	b94b      	cbnz	r3, 80046d6 <__swsetup_r+0x7a>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046cc:	d003      	beq.n	80046d6 <__swsetup_r+0x7a>
 80046ce:	4621      	mov	r1, r4
 80046d0:	4628      	mov	r0, r5
 80046d2:	f000 fd53 	bl	800517c <__smakebuf_r>
 80046d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046da:	f013 0201 	ands.w	r2, r3, #1
 80046de:	d00a      	beq.n	80046f6 <__swsetup_r+0x9a>
 80046e0:	2200      	movs	r2, #0
 80046e2:	60a2      	str	r2, [r4, #8]
 80046e4:	6962      	ldr	r2, [r4, #20]
 80046e6:	4252      	negs	r2, r2
 80046e8:	61a2      	str	r2, [r4, #24]
 80046ea:	6922      	ldr	r2, [r4, #16]
 80046ec:	b942      	cbnz	r2, 8004700 <__swsetup_r+0xa4>
 80046ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046f2:	d1c5      	bne.n	8004680 <__swsetup_r+0x24>
 80046f4:	bd38      	pop	{r3, r4, r5, pc}
 80046f6:	0799      	lsls	r1, r3, #30
 80046f8:	bf58      	it	pl
 80046fa:	6962      	ldrpl	r2, [r4, #20]
 80046fc:	60a2      	str	r2, [r4, #8]
 80046fe:	e7f4      	b.n	80046ea <__swsetup_r+0x8e>
 8004700:	2000      	movs	r0, #0
 8004702:	e7f7      	b.n	80046f4 <__swsetup_r+0x98>
 8004704:	20000048 	.word	0x20000048

08004708 <memset>:
 8004708:	4402      	add	r2, r0
 800470a:	4603      	mov	r3, r0
 800470c:	4293      	cmp	r3, r2
 800470e:	d100      	bne.n	8004712 <memset+0xa>
 8004710:	4770      	bx	lr
 8004712:	f803 1b01 	strb.w	r1, [r3], #1
 8004716:	e7f9      	b.n	800470c <memset+0x4>

08004718 <_close_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	4d06      	ldr	r5, [pc, #24]	@ (8004734 <_close_r+0x1c>)
 800471c:	2300      	movs	r3, #0
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	f7fc fab0 	bl	8000c88 <_close>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_close_r+0x1a>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_close_r+0x1a>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	200003e8 	.word	0x200003e8

08004738 <_lseek_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4d07      	ldr	r5, [pc, #28]	@ (8004758 <_lseek_r+0x20>)
 800473c:	4604      	mov	r4, r0
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	2200      	movs	r2, #0
 8004744:	602a      	str	r2, [r5, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	f7fc fac5 	bl	8000cd6 <_lseek>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_lseek_r+0x1e>
 8004750:	682b      	ldr	r3, [r5, #0]
 8004752:	b103      	cbz	r3, 8004756 <_lseek_r+0x1e>
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	200003e8 	.word	0x200003e8

0800475c <_read_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4d07      	ldr	r5, [pc, #28]	@ (800477c <_read_r+0x20>)
 8004760:	4604      	mov	r4, r0
 8004762:	4608      	mov	r0, r1
 8004764:	4611      	mov	r1, r2
 8004766:	2200      	movs	r2, #0
 8004768:	602a      	str	r2, [r5, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	f7fc fa6f 	bl	8000c4e <_read>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d102      	bne.n	800477a <_read_r+0x1e>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	b103      	cbz	r3, 800477a <_read_r+0x1e>
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	bd38      	pop	{r3, r4, r5, pc}
 800477c:	200003e8 	.word	0x200003e8

08004780 <_write_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4d07      	ldr	r5, [pc, #28]	@ (80047a0 <_write_r+0x20>)
 8004784:	4604      	mov	r4, r0
 8004786:	4608      	mov	r0, r1
 8004788:	4611      	mov	r1, r2
 800478a:	2200      	movs	r2, #0
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc f90c 	bl	80009ac <_write>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_write_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_write_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	200003e8 	.word	0x200003e8

080047a4 <__errno>:
 80047a4:	4b01      	ldr	r3, [pc, #4]	@ (80047ac <__errno+0x8>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000048 	.word	0x20000048

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4d0d      	ldr	r5, [pc, #52]	@ (80047e8 <__libc_init_array+0x38>)
 80047b4:	4c0d      	ldr	r4, [pc, #52]	@ (80047ec <__libc_init_array+0x3c>)
 80047b6:	1b64      	subs	r4, r4, r5
 80047b8:	10a4      	asrs	r4, r4, #2
 80047ba:	2600      	movs	r6, #0
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	4d0b      	ldr	r5, [pc, #44]	@ (80047f0 <__libc_init_array+0x40>)
 80047c2:	4c0c      	ldr	r4, [pc, #48]	@ (80047f4 <__libc_init_array+0x44>)
 80047c4:	f000 fd98 	bl	80052f8 <_init>
 80047c8:	1b64      	subs	r4, r4, r5
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	2600      	movs	r6, #0
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	08005594 	.word	0x08005594
 80047ec:	08005594 	.word	0x08005594
 80047f0:	08005594 	.word	0x08005594
 80047f4:	08005598 	.word	0x08005598

080047f8 <__retarget_lock_init_recursive>:
 80047f8:	4770      	bx	lr

080047fa <__retarget_lock_acquire_recursive>:
 80047fa:	4770      	bx	lr

080047fc <__retarget_lock_release_recursive>:
 80047fc:	4770      	bx	lr

080047fe <memcpy>:
 80047fe:	440a      	add	r2, r1
 8004800:	4291      	cmp	r1, r2
 8004802:	f100 33ff 	add.w	r3, r0, #4294967295
 8004806:	d100      	bne.n	800480a <memcpy+0xc>
 8004808:	4770      	bx	lr
 800480a:	b510      	push	{r4, lr}
 800480c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004814:	4291      	cmp	r1, r2
 8004816:	d1f9      	bne.n	800480c <memcpy+0xe>
 8004818:	bd10      	pop	{r4, pc}
	...

0800481c <_free_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4605      	mov	r5, r0
 8004820:	2900      	cmp	r1, #0
 8004822:	d041      	beq.n	80048a8 <_free_r+0x8c>
 8004824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004828:	1f0c      	subs	r4, r1, #4
 800482a:	2b00      	cmp	r3, #0
 800482c:	bfb8      	it	lt
 800482e:	18e4      	addlt	r4, r4, r3
 8004830:	f000 f8e0 	bl	80049f4 <__malloc_lock>
 8004834:	4a1d      	ldr	r2, [pc, #116]	@ (80048ac <_free_r+0x90>)
 8004836:	6813      	ldr	r3, [r2, #0]
 8004838:	b933      	cbnz	r3, 8004848 <_free_r+0x2c>
 800483a:	6063      	str	r3, [r4, #4]
 800483c:	6014      	str	r4, [r2, #0]
 800483e:	4628      	mov	r0, r5
 8004840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004844:	f000 b8dc 	b.w	8004a00 <__malloc_unlock>
 8004848:	42a3      	cmp	r3, r4
 800484a:	d908      	bls.n	800485e <_free_r+0x42>
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	1821      	adds	r1, r4, r0
 8004850:	428b      	cmp	r3, r1
 8004852:	bf01      	itttt	eq
 8004854:	6819      	ldreq	r1, [r3, #0]
 8004856:	685b      	ldreq	r3, [r3, #4]
 8004858:	1809      	addeq	r1, r1, r0
 800485a:	6021      	streq	r1, [r4, #0]
 800485c:	e7ed      	b.n	800483a <_free_r+0x1e>
 800485e:	461a      	mov	r2, r3
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b10b      	cbz	r3, 8004868 <_free_r+0x4c>
 8004864:	42a3      	cmp	r3, r4
 8004866:	d9fa      	bls.n	800485e <_free_r+0x42>
 8004868:	6811      	ldr	r1, [r2, #0]
 800486a:	1850      	adds	r0, r2, r1
 800486c:	42a0      	cmp	r0, r4
 800486e:	d10b      	bne.n	8004888 <_free_r+0x6c>
 8004870:	6820      	ldr	r0, [r4, #0]
 8004872:	4401      	add	r1, r0
 8004874:	1850      	adds	r0, r2, r1
 8004876:	4283      	cmp	r3, r0
 8004878:	6011      	str	r1, [r2, #0]
 800487a:	d1e0      	bne.n	800483e <_free_r+0x22>
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	6053      	str	r3, [r2, #4]
 8004882:	4408      	add	r0, r1
 8004884:	6010      	str	r0, [r2, #0]
 8004886:	e7da      	b.n	800483e <_free_r+0x22>
 8004888:	d902      	bls.n	8004890 <_free_r+0x74>
 800488a:	230c      	movs	r3, #12
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	e7d6      	b.n	800483e <_free_r+0x22>
 8004890:	6820      	ldr	r0, [r4, #0]
 8004892:	1821      	adds	r1, r4, r0
 8004894:	428b      	cmp	r3, r1
 8004896:	bf04      	itt	eq
 8004898:	6819      	ldreq	r1, [r3, #0]
 800489a:	685b      	ldreq	r3, [r3, #4]
 800489c:	6063      	str	r3, [r4, #4]
 800489e:	bf04      	itt	eq
 80048a0:	1809      	addeq	r1, r1, r0
 80048a2:	6021      	streq	r1, [r4, #0]
 80048a4:	6054      	str	r4, [r2, #4]
 80048a6:	e7ca      	b.n	800483e <_free_r+0x22>
 80048a8:	bd38      	pop	{r3, r4, r5, pc}
 80048aa:	bf00      	nop
 80048ac:	200003f4 	.word	0x200003f4

080048b0 <sbrk_aligned>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	4e0f      	ldr	r6, [pc, #60]	@ (80048f0 <sbrk_aligned+0x40>)
 80048b4:	460c      	mov	r4, r1
 80048b6:	6831      	ldr	r1, [r6, #0]
 80048b8:	4605      	mov	r5, r0
 80048ba:	b911      	cbnz	r1, 80048c2 <sbrk_aligned+0x12>
 80048bc:	f000 fcd6 	bl	800526c <_sbrk_r>
 80048c0:	6030      	str	r0, [r6, #0]
 80048c2:	4621      	mov	r1, r4
 80048c4:	4628      	mov	r0, r5
 80048c6:	f000 fcd1 	bl	800526c <_sbrk_r>
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	d103      	bne.n	80048d6 <sbrk_aligned+0x26>
 80048ce:	f04f 34ff 	mov.w	r4, #4294967295
 80048d2:	4620      	mov	r0, r4
 80048d4:	bd70      	pop	{r4, r5, r6, pc}
 80048d6:	1cc4      	adds	r4, r0, #3
 80048d8:	f024 0403 	bic.w	r4, r4, #3
 80048dc:	42a0      	cmp	r0, r4
 80048de:	d0f8      	beq.n	80048d2 <sbrk_aligned+0x22>
 80048e0:	1a21      	subs	r1, r4, r0
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 fcc2 	bl	800526c <_sbrk_r>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d1f2      	bne.n	80048d2 <sbrk_aligned+0x22>
 80048ec:	e7ef      	b.n	80048ce <sbrk_aligned+0x1e>
 80048ee:	bf00      	nop
 80048f0:	200003f0 	.word	0x200003f0

080048f4 <_malloc_r>:
 80048f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f8:	1ccd      	adds	r5, r1, #3
 80048fa:	f025 0503 	bic.w	r5, r5, #3
 80048fe:	3508      	adds	r5, #8
 8004900:	2d0c      	cmp	r5, #12
 8004902:	bf38      	it	cc
 8004904:	250c      	movcc	r5, #12
 8004906:	2d00      	cmp	r5, #0
 8004908:	4606      	mov	r6, r0
 800490a:	db01      	blt.n	8004910 <_malloc_r+0x1c>
 800490c:	42a9      	cmp	r1, r5
 800490e:	d904      	bls.n	800491a <_malloc_r+0x26>
 8004910:	230c      	movs	r3, #12
 8004912:	6033      	str	r3, [r6, #0]
 8004914:	2000      	movs	r0, #0
 8004916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049f0 <_malloc_r+0xfc>
 800491e:	f000 f869 	bl	80049f4 <__malloc_lock>
 8004922:	f8d8 3000 	ldr.w	r3, [r8]
 8004926:	461c      	mov	r4, r3
 8004928:	bb44      	cbnz	r4, 800497c <_malloc_r+0x88>
 800492a:	4629      	mov	r1, r5
 800492c:	4630      	mov	r0, r6
 800492e:	f7ff ffbf 	bl	80048b0 <sbrk_aligned>
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	4604      	mov	r4, r0
 8004936:	d158      	bne.n	80049ea <_malloc_r+0xf6>
 8004938:	f8d8 4000 	ldr.w	r4, [r8]
 800493c:	4627      	mov	r7, r4
 800493e:	2f00      	cmp	r7, #0
 8004940:	d143      	bne.n	80049ca <_malloc_r+0xd6>
 8004942:	2c00      	cmp	r4, #0
 8004944:	d04b      	beq.n	80049de <_malloc_r+0xea>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	4639      	mov	r1, r7
 800494a:	4630      	mov	r0, r6
 800494c:	eb04 0903 	add.w	r9, r4, r3
 8004950:	f000 fc8c 	bl	800526c <_sbrk_r>
 8004954:	4581      	cmp	r9, r0
 8004956:	d142      	bne.n	80049de <_malloc_r+0xea>
 8004958:	6821      	ldr	r1, [r4, #0]
 800495a:	1a6d      	subs	r5, r5, r1
 800495c:	4629      	mov	r1, r5
 800495e:	4630      	mov	r0, r6
 8004960:	f7ff ffa6 	bl	80048b0 <sbrk_aligned>
 8004964:	3001      	adds	r0, #1
 8004966:	d03a      	beq.n	80049de <_malloc_r+0xea>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	442b      	add	r3, r5
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	f8d8 3000 	ldr.w	r3, [r8]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	bb62      	cbnz	r2, 80049d0 <_malloc_r+0xdc>
 8004976:	f8c8 7000 	str.w	r7, [r8]
 800497a:	e00f      	b.n	800499c <_malloc_r+0xa8>
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	1b52      	subs	r2, r2, r5
 8004980:	d420      	bmi.n	80049c4 <_malloc_r+0xd0>
 8004982:	2a0b      	cmp	r2, #11
 8004984:	d917      	bls.n	80049b6 <_malloc_r+0xc2>
 8004986:	1961      	adds	r1, r4, r5
 8004988:	42a3      	cmp	r3, r4
 800498a:	6025      	str	r5, [r4, #0]
 800498c:	bf18      	it	ne
 800498e:	6059      	strne	r1, [r3, #4]
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	bf08      	it	eq
 8004994:	f8c8 1000 	streq.w	r1, [r8]
 8004998:	5162      	str	r2, [r4, r5]
 800499a:	604b      	str	r3, [r1, #4]
 800499c:	4630      	mov	r0, r6
 800499e:	f000 f82f 	bl	8004a00 <__malloc_unlock>
 80049a2:	f104 000b 	add.w	r0, r4, #11
 80049a6:	1d23      	adds	r3, r4, #4
 80049a8:	f020 0007 	bic.w	r0, r0, #7
 80049ac:	1ac2      	subs	r2, r0, r3
 80049ae:	bf1c      	itt	ne
 80049b0:	1a1b      	subne	r3, r3, r0
 80049b2:	50a3      	strne	r3, [r4, r2]
 80049b4:	e7af      	b.n	8004916 <_malloc_r+0x22>
 80049b6:	6862      	ldr	r2, [r4, #4]
 80049b8:	42a3      	cmp	r3, r4
 80049ba:	bf0c      	ite	eq
 80049bc:	f8c8 2000 	streq.w	r2, [r8]
 80049c0:	605a      	strne	r2, [r3, #4]
 80049c2:	e7eb      	b.n	800499c <_malloc_r+0xa8>
 80049c4:	4623      	mov	r3, r4
 80049c6:	6864      	ldr	r4, [r4, #4]
 80049c8:	e7ae      	b.n	8004928 <_malloc_r+0x34>
 80049ca:	463c      	mov	r4, r7
 80049cc:	687f      	ldr	r7, [r7, #4]
 80049ce:	e7b6      	b.n	800493e <_malloc_r+0x4a>
 80049d0:	461a      	mov	r2, r3
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	42a3      	cmp	r3, r4
 80049d6:	d1fb      	bne.n	80049d0 <_malloc_r+0xdc>
 80049d8:	2300      	movs	r3, #0
 80049da:	6053      	str	r3, [r2, #4]
 80049dc:	e7de      	b.n	800499c <_malloc_r+0xa8>
 80049de:	230c      	movs	r3, #12
 80049e0:	6033      	str	r3, [r6, #0]
 80049e2:	4630      	mov	r0, r6
 80049e4:	f000 f80c 	bl	8004a00 <__malloc_unlock>
 80049e8:	e794      	b.n	8004914 <_malloc_r+0x20>
 80049ea:	6005      	str	r5, [r0, #0]
 80049ec:	e7d6      	b.n	800499c <_malloc_r+0xa8>
 80049ee:	bf00      	nop
 80049f0:	200003f4 	.word	0x200003f4

080049f4 <__malloc_lock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	@ (80049fc <__malloc_lock+0x8>)
 80049f6:	f7ff bf00 	b.w	80047fa <__retarget_lock_acquire_recursive>
 80049fa:	bf00      	nop
 80049fc:	200003ec 	.word	0x200003ec

08004a00 <__malloc_unlock>:
 8004a00:	4801      	ldr	r0, [pc, #4]	@ (8004a08 <__malloc_unlock+0x8>)
 8004a02:	f7ff befb 	b.w	80047fc <__retarget_lock_release_recursive>
 8004a06:	bf00      	nop
 8004a08:	200003ec 	.word	0x200003ec

08004a0c <__ssputs_r>:
 8004a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a10:	688e      	ldr	r6, [r1, #8]
 8004a12:	461f      	mov	r7, r3
 8004a14:	42be      	cmp	r6, r7
 8004a16:	680b      	ldr	r3, [r1, #0]
 8004a18:	4682      	mov	sl, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4690      	mov	r8, r2
 8004a1e:	d82d      	bhi.n	8004a7c <__ssputs_r+0x70>
 8004a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a28:	d026      	beq.n	8004a78 <__ssputs_r+0x6c>
 8004a2a:	6965      	ldr	r5, [r4, #20]
 8004a2c:	6909      	ldr	r1, [r1, #16]
 8004a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a32:	eba3 0901 	sub.w	r9, r3, r1
 8004a36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a3a:	1c7b      	adds	r3, r7, #1
 8004a3c:	444b      	add	r3, r9
 8004a3e:	106d      	asrs	r5, r5, #1
 8004a40:	429d      	cmp	r5, r3
 8004a42:	bf38      	it	cc
 8004a44:	461d      	movcc	r5, r3
 8004a46:	0553      	lsls	r3, r2, #21
 8004a48:	d527      	bpl.n	8004a9a <__ssputs_r+0x8e>
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	f7ff ff52 	bl	80048f4 <_malloc_r>
 8004a50:	4606      	mov	r6, r0
 8004a52:	b360      	cbz	r0, 8004aae <__ssputs_r+0xa2>
 8004a54:	6921      	ldr	r1, [r4, #16]
 8004a56:	464a      	mov	r2, r9
 8004a58:	f7ff fed1 	bl	80047fe <memcpy>
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a66:	81a3      	strh	r3, [r4, #12]
 8004a68:	6126      	str	r6, [r4, #16]
 8004a6a:	6165      	str	r5, [r4, #20]
 8004a6c:	444e      	add	r6, r9
 8004a6e:	eba5 0509 	sub.w	r5, r5, r9
 8004a72:	6026      	str	r6, [r4, #0]
 8004a74:	60a5      	str	r5, [r4, #8]
 8004a76:	463e      	mov	r6, r7
 8004a78:	42be      	cmp	r6, r7
 8004a7a:	d900      	bls.n	8004a7e <__ssputs_r+0x72>
 8004a7c:	463e      	mov	r6, r7
 8004a7e:	6820      	ldr	r0, [r4, #0]
 8004a80:	4632      	mov	r2, r6
 8004a82:	4641      	mov	r1, r8
 8004a84:	f000 fbb6 	bl	80051f4 <memmove>
 8004a88:	68a3      	ldr	r3, [r4, #8]
 8004a8a:	1b9b      	subs	r3, r3, r6
 8004a8c:	60a3      	str	r3, [r4, #8]
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	4433      	add	r3, r6
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	2000      	movs	r0, #0
 8004a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	f000 fbf6 	bl	800528c <_realloc_r>
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d1e0      	bne.n	8004a68 <__ssputs_r+0x5c>
 8004aa6:	6921      	ldr	r1, [r4, #16]
 8004aa8:	4650      	mov	r0, sl
 8004aaa:	f7ff feb7 	bl	800481c <_free_r>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	f8ca 3000 	str.w	r3, [sl]
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e7e9      	b.n	8004a96 <__ssputs_r+0x8a>
	...

08004ac4 <_svfiprintf_r>:
 8004ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	4698      	mov	r8, r3
 8004aca:	898b      	ldrh	r3, [r1, #12]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	b09d      	sub	sp, #116	@ 0x74
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	460d      	mov	r5, r1
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	d510      	bpl.n	8004afa <_svfiprintf_r+0x36>
 8004ad8:	690b      	ldr	r3, [r1, #16]
 8004ada:	b973      	cbnz	r3, 8004afa <_svfiprintf_r+0x36>
 8004adc:	2140      	movs	r1, #64	@ 0x40
 8004ade:	f7ff ff09 	bl	80048f4 <_malloc_r>
 8004ae2:	6028      	str	r0, [r5, #0]
 8004ae4:	6128      	str	r0, [r5, #16]
 8004ae6:	b930      	cbnz	r0, 8004af6 <_svfiprintf_r+0x32>
 8004ae8:	230c      	movs	r3, #12
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	b01d      	add	sp, #116	@ 0x74
 8004af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af6:	2340      	movs	r3, #64	@ 0x40
 8004af8:	616b      	str	r3, [r5, #20]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004afe:	2320      	movs	r3, #32
 8004b00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b08:	2330      	movs	r3, #48	@ 0x30
 8004b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ca8 <_svfiprintf_r+0x1e4>
 8004b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b12:	f04f 0901 	mov.w	r9, #1
 8004b16:	4623      	mov	r3, r4
 8004b18:	469a      	mov	sl, r3
 8004b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b1e:	b10a      	cbz	r2, 8004b24 <_svfiprintf_r+0x60>
 8004b20:	2a25      	cmp	r2, #37	@ 0x25
 8004b22:	d1f9      	bne.n	8004b18 <_svfiprintf_r+0x54>
 8004b24:	ebba 0b04 	subs.w	fp, sl, r4
 8004b28:	d00b      	beq.n	8004b42 <_svfiprintf_r+0x7e>
 8004b2a:	465b      	mov	r3, fp
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	4629      	mov	r1, r5
 8004b30:	4638      	mov	r0, r7
 8004b32:	f7ff ff6b 	bl	8004a0c <__ssputs_r>
 8004b36:	3001      	adds	r0, #1
 8004b38:	f000 80a7 	beq.w	8004c8a <_svfiprintf_r+0x1c6>
 8004b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b3e:	445a      	add	r2, fp
 8004b40:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b42:	f89a 3000 	ldrb.w	r3, [sl]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 809f 	beq.w	8004c8a <_svfiprintf_r+0x1c6>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b56:	f10a 0a01 	add.w	sl, sl, #1
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	9307      	str	r3, [sp, #28]
 8004b5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b62:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b64:	4654      	mov	r4, sl
 8004b66:	2205      	movs	r2, #5
 8004b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b6c:	484e      	ldr	r0, [pc, #312]	@ (8004ca8 <_svfiprintf_r+0x1e4>)
 8004b6e:	f7fb fb4f 	bl	8000210 <memchr>
 8004b72:	9a04      	ldr	r2, [sp, #16]
 8004b74:	b9d8      	cbnz	r0, 8004bae <_svfiprintf_r+0xea>
 8004b76:	06d0      	lsls	r0, r2, #27
 8004b78:	bf44      	itt	mi
 8004b7a:	2320      	movmi	r3, #32
 8004b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b80:	0711      	lsls	r1, r2, #28
 8004b82:	bf44      	itt	mi
 8004b84:	232b      	movmi	r3, #43	@ 0x2b
 8004b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b90:	d015      	beq.n	8004bbe <_svfiprintf_r+0xfa>
 8004b92:	9a07      	ldr	r2, [sp, #28]
 8004b94:	4654      	mov	r4, sl
 8004b96:	2000      	movs	r0, #0
 8004b98:	f04f 0c0a 	mov.w	ip, #10
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ba2:	3b30      	subs	r3, #48	@ 0x30
 8004ba4:	2b09      	cmp	r3, #9
 8004ba6:	d94b      	bls.n	8004c40 <_svfiprintf_r+0x17c>
 8004ba8:	b1b0      	cbz	r0, 8004bd8 <_svfiprintf_r+0x114>
 8004baa:	9207      	str	r2, [sp, #28]
 8004bac:	e014      	b.n	8004bd8 <_svfiprintf_r+0x114>
 8004bae:	eba0 0308 	sub.w	r3, r0, r8
 8004bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	46a2      	mov	sl, r4
 8004bbc:	e7d2      	b.n	8004b64 <_svfiprintf_r+0xa0>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	1d19      	adds	r1, r3, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	9103      	str	r1, [sp, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bfbb      	ittet	lt
 8004bca:	425b      	neglt	r3, r3
 8004bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8004bd0:	9307      	strge	r3, [sp, #28]
 8004bd2:	9307      	strlt	r3, [sp, #28]
 8004bd4:	bfb8      	it	lt
 8004bd6:	9204      	strlt	r2, [sp, #16]
 8004bd8:	7823      	ldrb	r3, [r4, #0]
 8004bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bdc:	d10a      	bne.n	8004bf4 <_svfiprintf_r+0x130>
 8004bde:	7863      	ldrb	r3, [r4, #1]
 8004be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004be2:	d132      	bne.n	8004c4a <_svfiprintf_r+0x186>
 8004be4:	9b03      	ldr	r3, [sp, #12]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	9203      	str	r2, [sp, #12]
 8004bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bf0:	3402      	adds	r4, #2
 8004bf2:	9305      	str	r3, [sp, #20]
 8004bf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004cb8 <_svfiprintf_r+0x1f4>
 8004bf8:	7821      	ldrb	r1, [r4, #0]
 8004bfa:	2203      	movs	r2, #3
 8004bfc:	4650      	mov	r0, sl
 8004bfe:	f7fb fb07 	bl	8000210 <memchr>
 8004c02:	b138      	cbz	r0, 8004c14 <_svfiprintf_r+0x150>
 8004c04:	9b04      	ldr	r3, [sp, #16]
 8004c06:	eba0 000a 	sub.w	r0, r0, sl
 8004c0a:	2240      	movs	r2, #64	@ 0x40
 8004c0c:	4082      	lsls	r2, r0
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	3401      	adds	r4, #1
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c18:	4824      	ldr	r0, [pc, #144]	@ (8004cac <_svfiprintf_r+0x1e8>)
 8004c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c1e:	2206      	movs	r2, #6
 8004c20:	f7fb faf6 	bl	8000210 <memchr>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d036      	beq.n	8004c96 <_svfiprintf_r+0x1d2>
 8004c28:	4b21      	ldr	r3, [pc, #132]	@ (8004cb0 <_svfiprintf_r+0x1ec>)
 8004c2a:	bb1b      	cbnz	r3, 8004c74 <_svfiprintf_r+0x1b0>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	3307      	adds	r3, #7
 8004c30:	f023 0307 	bic.w	r3, r3, #7
 8004c34:	3308      	adds	r3, #8
 8004c36:	9303      	str	r3, [sp, #12]
 8004c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c3a:	4433      	add	r3, r6
 8004c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c3e:	e76a      	b.n	8004b16 <_svfiprintf_r+0x52>
 8004c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c44:	460c      	mov	r4, r1
 8004c46:	2001      	movs	r0, #1
 8004c48:	e7a8      	b.n	8004b9c <_svfiprintf_r+0xd8>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	3401      	adds	r4, #1
 8004c4e:	9305      	str	r3, [sp, #20]
 8004c50:	4619      	mov	r1, r3
 8004c52:	f04f 0c0a 	mov.w	ip, #10
 8004c56:	4620      	mov	r0, r4
 8004c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c5c:	3a30      	subs	r2, #48	@ 0x30
 8004c5e:	2a09      	cmp	r2, #9
 8004c60:	d903      	bls.n	8004c6a <_svfiprintf_r+0x1a6>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0c6      	beq.n	8004bf4 <_svfiprintf_r+0x130>
 8004c66:	9105      	str	r1, [sp, #20]
 8004c68:	e7c4      	b.n	8004bf4 <_svfiprintf_r+0x130>
 8004c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c6e:	4604      	mov	r4, r0
 8004c70:	2301      	movs	r3, #1
 8004c72:	e7f0      	b.n	8004c56 <_svfiprintf_r+0x192>
 8004c74:	ab03      	add	r3, sp, #12
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	462a      	mov	r2, r5
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <_svfiprintf_r+0x1f0>)
 8004c7c:	a904      	add	r1, sp, #16
 8004c7e:	4638      	mov	r0, r7
 8004c80:	f3af 8000 	nop.w
 8004c84:	1c42      	adds	r2, r0, #1
 8004c86:	4606      	mov	r6, r0
 8004c88:	d1d6      	bne.n	8004c38 <_svfiprintf_r+0x174>
 8004c8a:	89ab      	ldrh	r3, [r5, #12]
 8004c8c:	065b      	lsls	r3, r3, #25
 8004c8e:	f53f af2d 	bmi.w	8004aec <_svfiprintf_r+0x28>
 8004c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c94:	e72c      	b.n	8004af0 <_svfiprintf_r+0x2c>
 8004c96:	ab03      	add	r3, sp, #12
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	462a      	mov	r2, r5
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <_svfiprintf_r+0x1f0>)
 8004c9e:	a904      	add	r1, sp, #16
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f000 f879 	bl	8004d98 <_printf_i>
 8004ca6:	e7ed      	b.n	8004c84 <_svfiprintf_r+0x1c0>
 8004ca8:	08005559 	.word	0x08005559
 8004cac:	08005563 	.word	0x08005563
 8004cb0:	00000000 	.word	0x00000000
 8004cb4:	08004a0d 	.word	0x08004a0d
 8004cb8:	0800555f 	.word	0x0800555f

08004cbc <_printf_common>:
 8004cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	4698      	mov	r8, r3
 8004cc4:	688a      	ldr	r2, [r1, #8]
 8004cc6:	690b      	ldr	r3, [r1, #16]
 8004cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	bfb8      	it	lt
 8004cd0:	4613      	movlt	r3, r2
 8004cd2:	6033      	str	r3, [r6, #0]
 8004cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cd8:	4607      	mov	r7, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	b10a      	cbz	r2, 8004ce2 <_printf_common+0x26>
 8004cde:	3301      	adds	r3, #1
 8004ce0:	6033      	str	r3, [r6, #0]
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	0699      	lsls	r1, r3, #26
 8004ce6:	bf42      	ittt	mi
 8004ce8:	6833      	ldrmi	r3, [r6, #0]
 8004cea:	3302      	addmi	r3, #2
 8004cec:	6033      	strmi	r3, [r6, #0]
 8004cee:	6825      	ldr	r5, [r4, #0]
 8004cf0:	f015 0506 	ands.w	r5, r5, #6
 8004cf4:	d106      	bne.n	8004d04 <_printf_common+0x48>
 8004cf6:	f104 0a19 	add.w	sl, r4, #25
 8004cfa:	68e3      	ldr	r3, [r4, #12]
 8004cfc:	6832      	ldr	r2, [r6, #0]
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	42ab      	cmp	r3, r5
 8004d02:	dc26      	bgt.n	8004d52 <_printf_common+0x96>
 8004d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	3b00      	subs	r3, #0
 8004d0c:	bf18      	it	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	0692      	lsls	r2, r2, #26
 8004d12:	d42b      	bmi.n	8004d6c <_printf_common+0xb0>
 8004d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d18:	4641      	mov	r1, r8
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	47c8      	blx	r9
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d01e      	beq.n	8004d60 <_printf_common+0xa4>
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	6922      	ldr	r2, [r4, #16]
 8004d26:	f003 0306 	and.w	r3, r3, #6
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	bf02      	ittt	eq
 8004d2e:	68e5      	ldreq	r5, [r4, #12]
 8004d30:	6833      	ldreq	r3, [r6, #0]
 8004d32:	1aed      	subeq	r5, r5, r3
 8004d34:	68a3      	ldr	r3, [r4, #8]
 8004d36:	bf0c      	ite	eq
 8004d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d3c:	2500      	movne	r5, #0
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	bfc4      	itt	gt
 8004d42:	1a9b      	subgt	r3, r3, r2
 8004d44:	18ed      	addgt	r5, r5, r3
 8004d46:	2600      	movs	r6, #0
 8004d48:	341a      	adds	r4, #26
 8004d4a:	42b5      	cmp	r5, r6
 8004d4c:	d11a      	bne.n	8004d84 <_printf_common+0xc8>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e008      	b.n	8004d64 <_printf_common+0xa8>
 8004d52:	2301      	movs	r3, #1
 8004d54:	4652      	mov	r2, sl
 8004d56:	4641      	mov	r1, r8
 8004d58:	4638      	mov	r0, r7
 8004d5a:	47c8      	blx	r9
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d103      	bne.n	8004d68 <_printf_common+0xac>
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295
 8004d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d68:	3501      	adds	r5, #1
 8004d6a:	e7c6      	b.n	8004cfa <_printf_common+0x3e>
 8004d6c:	18e1      	adds	r1, r4, r3
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	2030      	movs	r0, #48	@ 0x30
 8004d72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d76:	4422      	add	r2, r4
 8004d78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d80:	3302      	adds	r3, #2
 8004d82:	e7c7      	b.n	8004d14 <_printf_common+0x58>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4622      	mov	r2, r4
 8004d88:	4641      	mov	r1, r8
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	47c8      	blx	r9
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d0e6      	beq.n	8004d60 <_printf_common+0xa4>
 8004d92:	3601      	adds	r6, #1
 8004d94:	e7d9      	b.n	8004d4a <_printf_common+0x8e>
	...

08004d98 <_printf_i>:
 8004d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	7e0f      	ldrb	r7, [r1, #24]
 8004d9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004da0:	2f78      	cmp	r7, #120	@ 0x78
 8004da2:	4691      	mov	r9, r2
 8004da4:	4680      	mov	r8, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	469a      	mov	sl, r3
 8004daa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dae:	d807      	bhi.n	8004dc0 <_printf_i+0x28>
 8004db0:	2f62      	cmp	r7, #98	@ 0x62
 8004db2:	d80a      	bhi.n	8004dca <_printf_i+0x32>
 8004db4:	2f00      	cmp	r7, #0
 8004db6:	f000 80d2 	beq.w	8004f5e <_printf_i+0x1c6>
 8004dba:	2f58      	cmp	r7, #88	@ 0x58
 8004dbc:	f000 80b9 	beq.w	8004f32 <_printf_i+0x19a>
 8004dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dc8:	e03a      	b.n	8004e40 <_printf_i+0xa8>
 8004dca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dce:	2b15      	cmp	r3, #21
 8004dd0:	d8f6      	bhi.n	8004dc0 <_printf_i+0x28>
 8004dd2:	a101      	add	r1, pc, #4	@ (adr r1, 8004dd8 <_printf_i+0x40>)
 8004dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e45 	.word	0x08004e45
 8004de0:	08004dc1 	.word	0x08004dc1
 8004de4:	08004dc1 	.word	0x08004dc1
 8004de8:	08004dc1 	.word	0x08004dc1
 8004dec:	08004dc1 	.word	0x08004dc1
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004dc1 	.word	0x08004dc1
 8004df8:	08004dc1 	.word	0x08004dc1
 8004dfc:	08004dc1 	.word	0x08004dc1
 8004e00:	08004dc1 	.word	0x08004dc1
 8004e04:	08004f45 	.word	0x08004f45
 8004e08:	08004e6f 	.word	0x08004e6f
 8004e0c:	08004eff 	.word	0x08004eff
 8004e10:	08004dc1 	.word	0x08004dc1
 8004e14:	08004dc1 	.word	0x08004dc1
 8004e18:	08004f67 	.word	0x08004f67
 8004e1c:	08004dc1 	.word	0x08004dc1
 8004e20:	08004e6f 	.word	0x08004e6f
 8004e24:	08004dc1 	.word	0x08004dc1
 8004e28:	08004dc1 	.word	0x08004dc1
 8004e2c:	08004f07 	.word	0x08004f07
 8004e30:	6833      	ldr	r3, [r6, #0]
 8004e32:	1d1a      	adds	r2, r3, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6032      	str	r2, [r6, #0]
 8004e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e40:	2301      	movs	r3, #1
 8004e42:	e09d      	b.n	8004f80 <_printf_i+0x1e8>
 8004e44:	6833      	ldr	r3, [r6, #0]
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	1d19      	adds	r1, r3, #4
 8004e4a:	6031      	str	r1, [r6, #0]
 8004e4c:	0606      	lsls	r6, r0, #24
 8004e4e:	d501      	bpl.n	8004e54 <_printf_i+0xbc>
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	e003      	b.n	8004e5c <_printf_i+0xc4>
 8004e54:	0645      	lsls	r5, r0, #25
 8004e56:	d5fb      	bpl.n	8004e50 <_printf_i+0xb8>
 8004e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	da03      	bge.n	8004e68 <_printf_i+0xd0>
 8004e60:	232d      	movs	r3, #45	@ 0x2d
 8004e62:	426d      	negs	r5, r5
 8004e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e68:	4859      	ldr	r0, [pc, #356]	@ (8004fd0 <_printf_i+0x238>)
 8004e6a:	230a      	movs	r3, #10
 8004e6c:	e011      	b.n	8004e92 <_printf_i+0xfa>
 8004e6e:	6821      	ldr	r1, [r4, #0]
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	0608      	lsls	r0, r1, #24
 8004e74:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e78:	d402      	bmi.n	8004e80 <_printf_i+0xe8>
 8004e7a:	0649      	lsls	r1, r1, #25
 8004e7c:	bf48      	it	mi
 8004e7e:	b2ad      	uxthmi	r5, r5
 8004e80:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e82:	4853      	ldr	r0, [pc, #332]	@ (8004fd0 <_printf_i+0x238>)
 8004e84:	6033      	str	r3, [r6, #0]
 8004e86:	bf14      	ite	ne
 8004e88:	230a      	movne	r3, #10
 8004e8a:	2308      	moveq	r3, #8
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e92:	6866      	ldr	r6, [r4, #4]
 8004e94:	60a6      	str	r6, [r4, #8]
 8004e96:	2e00      	cmp	r6, #0
 8004e98:	bfa2      	ittt	ge
 8004e9a:	6821      	ldrge	r1, [r4, #0]
 8004e9c:	f021 0104 	bicge.w	r1, r1, #4
 8004ea0:	6021      	strge	r1, [r4, #0]
 8004ea2:	b90d      	cbnz	r5, 8004ea8 <_printf_i+0x110>
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	d04b      	beq.n	8004f40 <_printf_i+0x1a8>
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004eae:	fb03 5711 	mls	r7, r3, r1, r5
 8004eb2:	5dc7      	ldrb	r7, [r0, r7]
 8004eb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eb8:	462f      	mov	r7, r5
 8004eba:	42bb      	cmp	r3, r7
 8004ebc:	460d      	mov	r5, r1
 8004ebe:	d9f4      	bls.n	8004eaa <_printf_i+0x112>
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d10b      	bne.n	8004edc <_printf_i+0x144>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	07df      	lsls	r7, r3, #31
 8004ec8:	d508      	bpl.n	8004edc <_printf_i+0x144>
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	6861      	ldr	r1, [r4, #4]
 8004ece:	4299      	cmp	r1, r3
 8004ed0:	bfde      	ittt	le
 8004ed2:	2330      	movle	r3, #48	@ 0x30
 8004ed4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ed8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004edc:	1b92      	subs	r2, r2, r6
 8004ede:	6122      	str	r2, [r4, #16]
 8004ee0:	f8cd a000 	str.w	sl, [sp]
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	aa03      	add	r2, sp, #12
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4640      	mov	r0, r8
 8004eec:	f7ff fee6 	bl	8004cbc <_printf_common>
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d14a      	bne.n	8004f8a <_printf_i+0x1f2>
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	b004      	add	sp, #16
 8004efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	f043 0320 	orr.w	r3, r3, #32
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	4833      	ldr	r0, [pc, #204]	@ (8004fd4 <_printf_i+0x23c>)
 8004f08:	2778      	movs	r7, #120	@ 0x78
 8004f0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	6831      	ldr	r1, [r6, #0]
 8004f12:	061f      	lsls	r7, r3, #24
 8004f14:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f18:	d402      	bmi.n	8004f20 <_printf_i+0x188>
 8004f1a:	065f      	lsls	r7, r3, #25
 8004f1c:	bf48      	it	mi
 8004f1e:	b2ad      	uxthmi	r5, r5
 8004f20:	6031      	str	r1, [r6, #0]
 8004f22:	07d9      	lsls	r1, r3, #31
 8004f24:	bf44      	itt	mi
 8004f26:	f043 0320 	orrmi.w	r3, r3, #32
 8004f2a:	6023      	strmi	r3, [r4, #0]
 8004f2c:	b11d      	cbz	r5, 8004f36 <_printf_i+0x19e>
 8004f2e:	2310      	movs	r3, #16
 8004f30:	e7ac      	b.n	8004e8c <_printf_i+0xf4>
 8004f32:	4827      	ldr	r0, [pc, #156]	@ (8004fd0 <_printf_i+0x238>)
 8004f34:	e7e9      	b.n	8004f0a <_printf_i+0x172>
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	f023 0320 	bic.w	r3, r3, #32
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	e7f6      	b.n	8004f2e <_printf_i+0x196>
 8004f40:	4616      	mov	r6, r2
 8004f42:	e7bd      	b.n	8004ec0 <_printf_i+0x128>
 8004f44:	6833      	ldr	r3, [r6, #0]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	6961      	ldr	r1, [r4, #20]
 8004f4a:	1d18      	adds	r0, r3, #4
 8004f4c:	6030      	str	r0, [r6, #0]
 8004f4e:	062e      	lsls	r6, r5, #24
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	d501      	bpl.n	8004f58 <_printf_i+0x1c0>
 8004f54:	6019      	str	r1, [r3, #0]
 8004f56:	e002      	b.n	8004f5e <_printf_i+0x1c6>
 8004f58:	0668      	lsls	r0, r5, #25
 8004f5a:	d5fb      	bpl.n	8004f54 <_printf_i+0x1bc>
 8004f5c:	8019      	strh	r1, [r3, #0]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	4616      	mov	r6, r2
 8004f64:	e7bc      	b.n	8004ee0 <_printf_i+0x148>
 8004f66:	6833      	ldr	r3, [r6, #0]
 8004f68:	1d1a      	adds	r2, r3, #4
 8004f6a:	6032      	str	r2, [r6, #0]
 8004f6c:	681e      	ldr	r6, [r3, #0]
 8004f6e:	6862      	ldr	r2, [r4, #4]
 8004f70:	2100      	movs	r1, #0
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7fb f94c 	bl	8000210 <memchr>
 8004f78:	b108      	cbz	r0, 8004f7e <_printf_i+0x1e6>
 8004f7a:	1b80      	subs	r0, r0, r6
 8004f7c:	6060      	str	r0, [r4, #4]
 8004f7e:	6863      	ldr	r3, [r4, #4]
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	2300      	movs	r3, #0
 8004f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f88:	e7aa      	b.n	8004ee0 <_printf_i+0x148>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	47d0      	blx	sl
 8004f94:	3001      	adds	r0, #1
 8004f96:	d0ad      	beq.n	8004ef4 <_printf_i+0x15c>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	079b      	lsls	r3, r3, #30
 8004f9c:	d413      	bmi.n	8004fc6 <_printf_i+0x22e>
 8004f9e:	68e0      	ldr	r0, [r4, #12]
 8004fa0:	9b03      	ldr	r3, [sp, #12]
 8004fa2:	4298      	cmp	r0, r3
 8004fa4:	bfb8      	it	lt
 8004fa6:	4618      	movlt	r0, r3
 8004fa8:	e7a6      	b.n	8004ef8 <_printf_i+0x160>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4632      	mov	r2, r6
 8004fae:	4649      	mov	r1, r9
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	47d0      	blx	sl
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d09d      	beq.n	8004ef4 <_printf_i+0x15c>
 8004fb8:	3501      	adds	r5, #1
 8004fba:	68e3      	ldr	r3, [r4, #12]
 8004fbc:	9903      	ldr	r1, [sp, #12]
 8004fbe:	1a5b      	subs	r3, r3, r1
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	dcf2      	bgt.n	8004faa <_printf_i+0x212>
 8004fc4:	e7eb      	b.n	8004f9e <_printf_i+0x206>
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	f104 0619 	add.w	r6, r4, #25
 8004fcc:	e7f5      	b.n	8004fba <_printf_i+0x222>
 8004fce:	bf00      	nop
 8004fd0:	0800556a 	.word	0x0800556a
 8004fd4:	0800557b 	.word	0x0800557b

08004fd8 <__sflush_r>:
 8004fd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe0:	0716      	lsls	r6, r2, #28
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	d454      	bmi.n	8005092 <__sflush_r+0xba>
 8004fe8:	684b      	ldr	r3, [r1, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dc02      	bgt.n	8004ff4 <__sflush_r+0x1c>
 8004fee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	dd48      	ble.n	8005086 <__sflush_r+0xae>
 8004ff4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	d045      	beq.n	8005086 <__sflush_r+0xae>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005000:	682f      	ldr	r7, [r5, #0]
 8005002:	6a21      	ldr	r1, [r4, #32]
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	d030      	beq.n	800506a <__sflush_r+0x92>
 8005008:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	0759      	lsls	r1, r3, #29
 800500e:	d505      	bpl.n	800501c <__sflush_r+0x44>
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005016:	b10b      	cbz	r3, 800501c <__sflush_r+0x44>
 8005018:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005020:	6a21      	ldr	r1, [r4, #32]
 8005022:	4628      	mov	r0, r5
 8005024:	47b0      	blx	r6
 8005026:	1c43      	adds	r3, r0, #1
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	d106      	bne.n	800503a <__sflush_r+0x62>
 800502c:	6829      	ldr	r1, [r5, #0]
 800502e:	291d      	cmp	r1, #29
 8005030:	d82b      	bhi.n	800508a <__sflush_r+0xb2>
 8005032:	4a2a      	ldr	r2, [pc, #168]	@ (80050dc <__sflush_r+0x104>)
 8005034:	410a      	asrs	r2, r1
 8005036:	07d6      	lsls	r6, r2, #31
 8005038:	d427      	bmi.n	800508a <__sflush_r+0xb2>
 800503a:	2200      	movs	r2, #0
 800503c:	6062      	str	r2, [r4, #4]
 800503e:	04d9      	lsls	r1, r3, #19
 8005040:	6922      	ldr	r2, [r4, #16]
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	d504      	bpl.n	8005050 <__sflush_r+0x78>
 8005046:	1c42      	adds	r2, r0, #1
 8005048:	d101      	bne.n	800504e <__sflush_r+0x76>
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	b903      	cbnz	r3, 8005050 <__sflush_r+0x78>
 800504e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005052:	602f      	str	r7, [r5, #0]
 8005054:	b1b9      	cbz	r1, 8005086 <__sflush_r+0xae>
 8005056:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800505a:	4299      	cmp	r1, r3
 800505c:	d002      	beq.n	8005064 <__sflush_r+0x8c>
 800505e:	4628      	mov	r0, r5
 8005060:	f7ff fbdc 	bl	800481c <_free_r>
 8005064:	2300      	movs	r3, #0
 8005066:	6363      	str	r3, [r4, #52]	@ 0x34
 8005068:	e00d      	b.n	8005086 <__sflush_r+0xae>
 800506a:	2301      	movs	r3, #1
 800506c:	4628      	mov	r0, r5
 800506e:	47b0      	blx	r6
 8005070:	4602      	mov	r2, r0
 8005072:	1c50      	adds	r0, r2, #1
 8005074:	d1c9      	bne.n	800500a <__sflush_r+0x32>
 8005076:	682b      	ldr	r3, [r5, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0c6      	beq.n	800500a <__sflush_r+0x32>
 800507c:	2b1d      	cmp	r3, #29
 800507e:	d001      	beq.n	8005084 <__sflush_r+0xac>
 8005080:	2b16      	cmp	r3, #22
 8005082:	d11e      	bne.n	80050c2 <__sflush_r+0xea>
 8005084:	602f      	str	r7, [r5, #0]
 8005086:	2000      	movs	r0, #0
 8005088:	e022      	b.n	80050d0 <__sflush_r+0xf8>
 800508a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800508e:	b21b      	sxth	r3, r3
 8005090:	e01b      	b.n	80050ca <__sflush_r+0xf2>
 8005092:	690f      	ldr	r7, [r1, #16]
 8005094:	2f00      	cmp	r7, #0
 8005096:	d0f6      	beq.n	8005086 <__sflush_r+0xae>
 8005098:	0793      	lsls	r3, r2, #30
 800509a:	680e      	ldr	r6, [r1, #0]
 800509c:	bf08      	it	eq
 800509e:	694b      	ldreq	r3, [r1, #20]
 80050a0:	600f      	str	r7, [r1, #0]
 80050a2:	bf18      	it	ne
 80050a4:	2300      	movne	r3, #0
 80050a6:	eba6 0807 	sub.w	r8, r6, r7
 80050aa:	608b      	str	r3, [r1, #8]
 80050ac:	f1b8 0f00 	cmp.w	r8, #0
 80050b0:	dde9      	ble.n	8005086 <__sflush_r+0xae>
 80050b2:	6a21      	ldr	r1, [r4, #32]
 80050b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80050b6:	4643      	mov	r3, r8
 80050b8:	463a      	mov	r2, r7
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b0      	blx	r6
 80050be:	2800      	cmp	r0, #0
 80050c0:	dc08      	bgt.n	80050d4 <__sflush_r+0xfc>
 80050c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ca:	81a3      	strh	r3, [r4, #12]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050d4:	4407      	add	r7, r0
 80050d6:	eba8 0800 	sub.w	r8, r8, r0
 80050da:	e7e7      	b.n	80050ac <__sflush_r+0xd4>
 80050dc:	dfbffffe 	.word	0xdfbffffe

080050e0 <_fflush_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	4605      	mov	r5, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	b913      	cbnz	r3, 80050f0 <_fflush_r+0x10>
 80050ea:	2500      	movs	r5, #0
 80050ec:	4628      	mov	r0, r5
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	b118      	cbz	r0, 80050fa <_fflush_r+0x1a>
 80050f2:	6a03      	ldr	r3, [r0, #32]
 80050f4:	b90b      	cbnz	r3, 80050fa <_fflush_r+0x1a>
 80050f6:	f7ff f967 	bl	80043c8 <__sinit>
 80050fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f3      	beq.n	80050ea <_fflush_r+0xa>
 8005102:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005104:	07d0      	lsls	r0, r2, #31
 8005106:	d404      	bmi.n	8005112 <_fflush_r+0x32>
 8005108:	0599      	lsls	r1, r3, #22
 800510a:	d402      	bmi.n	8005112 <_fflush_r+0x32>
 800510c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800510e:	f7ff fb74 	bl	80047fa <__retarget_lock_acquire_recursive>
 8005112:	4628      	mov	r0, r5
 8005114:	4621      	mov	r1, r4
 8005116:	f7ff ff5f 	bl	8004fd8 <__sflush_r>
 800511a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800511c:	07da      	lsls	r2, r3, #31
 800511e:	4605      	mov	r5, r0
 8005120:	d4e4      	bmi.n	80050ec <_fflush_r+0xc>
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	059b      	lsls	r3, r3, #22
 8005126:	d4e1      	bmi.n	80050ec <_fflush_r+0xc>
 8005128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800512a:	f7ff fb67 	bl	80047fc <__retarget_lock_release_recursive>
 800512e:	e7dd      	b.n	80050ec <_fflush_r+0xc>

08005130 <__swhatbuf_r>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	460c      	mov	r4, r1
 8005134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005138:	2900      	cmp	r1, #0
 800513a:	b096      	sub	sp, #88	@ 0x58
 800513c:	4615      	mov	r5, r2
 800513e:	461e      	mov	r6, r3
 8005140:	da0d      	bge.n	800515e <__swhatbuf_r+0x2e>
 8005142:	89a3      	ldrh	r3, [r4, #12]
 8005144:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	bf14      	ite	ne
 800514e:	2340      	movne	r3, #64	@ 0x40
 8005150:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005154:	2000      	movs	r0, #0
 8005156:	6031      	str	r1, [r6, #0]
 8005158:	602b      	str	r3, [r5, #0]
 800515a:	b016      	add	sp, #88	@ 0x58
 800515c:	bd70      	pop	{r4, r5, r6, pc}
 800515e:	466a      	mov	r2, sp
 8005160:	f000 f862 	bl	8005228 <_fstat_r>
 8005164:	2800      	cmp	r0, #0
 8005166:	dbec      	blt.n	8005142 <__swhatbuf_r+0x12>
 8005168:	9901      	ldr	r1, [sp, #4]
 800516a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800516e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005172:	4259      	negs	r1, r3
 8005174:	4159      	adcs	r1, r3
 8005176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800517a:	e7eb      	b.n	8005154 <__swhatbuf_r+0x24>

0800517c <__smakebuf_r>:
 800517c:	898b      	ldrh	r3, [r1, #12]
 800517e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005180:	079d      	lsls	r5, r3, #30
 8005182:	4606      	mov	r6, r0
 8005184:	460c      	mov	r4, r1
 8005186:	d507      	bpl.n	8005198 <__smakebuf_r+0x1c>
 8005188:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	2301      	movs	r3, #1
 8005192:	6163      	str	r3, [r4, #20]
 8005194:	b003      	add	sp, #12
 8005196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005198:	ab01      	add	r3, sp, #4
 800519a:	466a      	mov	r2, sp
 800519c:	f7ff ffc8 	bl	8005130 <__swhatbuf_r>
 80051a0:	9f00      	ldr	r7, [sp, #0]
 80051a2:	4605      	mov	r5, r0
 80051a4:	4639      	mov	r1, r7
 80051a6:	4630      	mov	r0, r6
 80051a8:	f7ff fba4 	bl	80048f4 <_malloc_r>
 80051ac:	b948      	cbnz	r0, 80051c2 <__smakebuf_r+0x46>
 80051ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b2:	059a      	lsls	r2, r3, #22
 80051b4:	d4ee      	bmi.n	8005194 <__smakebuf_r+0x18>
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	f043 0302 	orr.w	r3, r3, #2
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	e7e2      	b.n	8005188 <__smakebuf_r+0xc>
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	6020      	str	r0, [r4, #0]
 80051c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	9b01      	ldr	r3, [sp, #4]
 80051ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80051d2:	b15b      	cbz	r3, 80051ec <__smakebuf_r+0x70>
 80051d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051d8:	4630      	mov	r0, r6
 80051da:	f000 f837 	bl	800524c <_isatty_r>
 80051de:	b128      	cbz	r0, 80051ec <__smakebuf_r+0x70>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	431d      	orrs	r5, r3
 80051f0:	81a5      	strh	r5, [r4, #12]
 80051f2:	e7cf      	b.n	8005194 <__smakebuf_r+0x18>

080051f4 <memmove>:
 80051f4:	4288      	cmp	r0, r1
 80051f6:	b510      	push	{r4, lr}
 80051f8:	eb01 0402 	add.w	r4, r1, r2
 80051fc:	d902      	bls.n	8005204 <memmove+0x10>
 80051fe:	4284      	cmp	r4, r0
 8005200:	4623      	mov	r3, r4
 8005202:	d807      	bhi.n	8005214 <memmove+0x20>
 8005204:	1e43      	subs	r3, r0, #1
 8005206:	42a1      	cmp	r1, r4
 8005208:	d008      	beq.n	800521c <memmove+0x28>
 800520a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800520e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005212:	e7f8      	b.n	8005206 <memmove+0x12>
 8005214:	4402      	add	r2, r0
 8005216:	4601      	mov	r1, r0
 8005218:	428a      	cmp	r2, r1
 800521a:	d100      	bne.n	800521e <memmove+0x2a>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005226:	e7f7      	b.n	8005218 <memmove+0x24>

08005228 <_fstat_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	@ (8005248 <_fstat_r+0x20>)
 800522c:	2300      	movs	r3, #0
 800522e:	4604      	mov	r4, r0
 8005230:	4608      	mov	r0, r1
 8005232:	4611      	mov	r1, r2
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	f7fb fd33 	bl	8000ca0 <_fstat>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	d102      	bne.n	8005244 <_fstat_r+0x1c>
 800523e:	682b      	ldr	r3, [r5, #0]
 8005240:	b103      	cbz	r3, 8005244 <_fstat_r+0x1c>
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	bd38      	pop	{r3, r4, r5, pc}
 8005246:	bf00      	nop
 8005248:	200003e8 	.word	0x200003e8

0800524c <_isatty_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	@ (8005268 <_isatty_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fb fd32 	bl	8000cc0 <_isatty>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_isatty_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_isatty_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	200003e8 	.word	0x200003e8

0800526c <_sbrk_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4d06      	ldr	r5, [pc, #24]	@ (8005288 <_sbrk_r+0x1c>)
 8005270:	2300      	movs	r3, #0
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	602b      	str	r3, [r5, #0]
 8005278:	f7fb fd3a 	bl	8000cf0 <_sbrk>
 800527c:	1c43      	adds	r3, r0, #1
 800527e:	d102      	bne.n	8005286 <_sbrk_r+0x1a>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	b103      	cbz	r3, 8005286 <_sbrk_r+0x1a>
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	200003e8 	.word	0x200003e8

0800528c <_realloc_r>:
 800528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005290:	4680      	mov	r8, r0
 8005292:	4615      	mov	r5, r2
 8005294:	460c      	mov	r4, r1
 8005296:	b921      	cbnz	r1, 80052a2 <_realloc_r+0x16>
 8005298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529c:	4611      	mov	r1, r2
 800529e:	f7ff bb29 	b.w	80048f4 <_malloc_r>
 80052a2:	b92a      	cbnz	r2, 80052b0 <_realloc_r+0x24>
 80052a4:	f7ff faba 	bl	800481c <_free_r>
 80052a8:	2400      	movs	r4, #0
 80052aa:	4620      	mov	r0, r4
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	f000 f81a 	bl	80052e8 <_malloc_usable_size_r>
 80052b4:	4285      	cmp	r5, r0
 80052b6:	4606      	mov	r6, r0
 80052b8:	d802      	bhi.n	80052c0 <_realloc_r+0x34>
 80052ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80052be:	d8f4      	bhi.n	80052aa <_realloc_r+0x1e>
 80052c0:	4629      	mov	r1, r5
 80052c2:	4640      	mov	r0, r8
 80052c4:	f7ff fb16 	bl	80048f4 <_malloc_r>
 80052c8:	4607      	mov	r7, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d0ec      	beq.n	80052a8 <_realloc_r+0x1c>
 80052ce:	42b5      	cmp	r5, r6
 80052d0:	462a      	mov	r2, r5
 80052d2:	4621      	mov	r1, r4
 80052d4:	bf28      	it	cs
 80052d6:	4632      	movcs	r2, r6
 80052d8:	f7ff fa91 	bl	80047fe <memcpy>
 80052dc:	4621      	mov	r1, r4
 80052de:	4640      	mov	r0, r8
 80052e0:	f7ff fa9c 	bl	800481c <_free_r>
 80052e4:	463c      	mov	r4, r7
 80052e6:	e7e0      	b.n	80052aa <_realloc_r+0x1e>

080052e8 <_malloc_usable_size_r>:
 80052e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ec:	1f18      	subs	r0, r3, #4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bfbc      	itt	lt
 80052f2:	580b      	ldrlt	r3, [r1, r0]
 80052f4:	18c0      	addlt	r0, r0, r3
 80052f6:	4770      	bx	lr

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

<<<<<<< HEAD
08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
>>>>>>> 0207771 (switch changed to function array)
=======
08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
>>>>>>> c1d5507 (packet_list and sim800L alert)
