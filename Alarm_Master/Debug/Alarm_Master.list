
Alarm_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000620c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080063ac  080063ac  000073ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800663c  0800663c  0000809c  2**0
                  CONTENTS
  4 .ARM          00000008  0800663c  0800663c  0000763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006644  08006644  0000809c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  0800664c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000009c  080066e8  0000809c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  080066e8  0000847c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edd8  00000000  00000000  000080cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f8  00000000  00000000  00016ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000196a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a65  00000000  00000000  0001a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753e  00000000  00000000  0001ae65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ec6  00000000  00000000  000323a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa1b  00000000  00000000  00045269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfc84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c64  00000000  00000000  000cfcc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d392c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006394 	.word	0x08006394

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08006394 	.word	0x08006394

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b092      	sub	sp, #72	@ 0x48
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fb8d 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f855 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f94b 	bl	8000848 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b2:	f000 f8bb 	bl	800072c <MX_I2C1_Init>
  MX_SPI2_Init();
 80005b6:	f000 f8e7 	bl	8000788 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f91b 	bl	80007f4 <MX_USART1_UART_Init>
//  flash_write_multiple_word(0x08060000, (uint32_t *)data_in, 16);

  //READOUT
  {
	char data_out[72];
	flash_read_multiple_words(0x08060000, (uint32_t *)data_out, 18);
 80005be:	463b      	mov	r3, r7
 80005c0:	2212      	movs	r2, #18
 80005c2:	4619      	mov	r1, r3
 80005c4:	4820      	ldr	r0, [pc, #128]	@ (8000648 <main+0xa8>)
 80005c6:	f003 fec9 	bl	800435c <flash_read_multiple_words>
	//PARSING TO VARIABLES
	state_machine_init(data_out);
 80005ca:	463b      	mov	r3, r7
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 fba1 	bl	8004d14 <state_machine_init>
	lcd_init(&hi2c1);
 80005d2:	481e      	ldr	r0, [pc, #120]	@ (800064c <main+0xac>)
 80005d4:	f004 f860 	bl	8004698 <lcd_init>
	gsm_init(&huart1);
 80005d8:	481d      	ldr	r0, [pc, #116]	@ (8000650 <main+0xb0>)
 80005da:	f004 f8eb 	bl	80047b4 <gsm_init>
	mcp_init(&hi2c1);
 80005de:	481b      	ldr	r0, [pc, #108]	@ (800064c <main+0xac>)
 80005e0:	f003 fd98 	bl	8004114 <mcp_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static char x;
	  x = check_keyboard();
 80005e4:	f003 ff80 	bl	80044e8 <check_keyboard>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <main+0xb4>)
 80005ee:	701a      	strb	r2, [r3, #0]
	  if(x){
 80005f0:	4b18      	ldr	r3, [pc, #96]	@ (8000654 <main+0xb4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d021      	beq.n	800063c <main+0x9c>
		  if(x < 10) x += '0';
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <main+0xb4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	d806      	bhi.n	800060e <main+0x6e>
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <main+0xb4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	3330      	adds	r3, #48	@ 0x30
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <main+0xb4>)
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e016      	b.n	800063c <main+0x9c>
		  else if(x == 10) x = '*';
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <main+0xb4>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b0a      	cmp	r3, #10
 8000614:	d103      	bne.n	800061e <main+0x7e>
 8000616:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <main+0xb4>)
 8000618:	222a      	movs	r2, #42	@ 0x2a
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	e00e      	b.n	800063c <main+0x9c>
		  else if(x == 11) x = '0';
 800061e:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <main+0xb4>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b0b      	cmp	r3, #11
 8000624:	d103      	bne.n	800062e <main+0x8e>
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <main+0xb4>)
 8000628:	2230      	movs	r2, #48	@ 0x30
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e006      	b.n	800063c <main+0x9c>
		  else if(x == 12) x = '#';
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <main+0xb4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b0c      	cmp	r3, #12
 8000634:	d102      	bne.n	800063c <main+0x9c>
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <main+0xb4>)
 8000638:	2223      	movs	r2, #35	@ 0x23
 800063a:	701a      	strb	r2, [r3, #0]
	  }
	  state_machine_run(x);
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <main+0xb4>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fbe1 	bl	8004e08 <state_machine_run>
  {
 8000646:	e7cd      	b.n	80005e4 <main+0x44>
 8000648:	08060000 	.word	0x08060000
 800064c:	200000b8 	.word	0x200000b8
 8000650:	20000164 	.word	0x20000164
 8000654:	200001ac 	.word	0x200001ac

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 f9fe 	bl	8005a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	@ (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80006cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d2:	2304      	movs	r3, #4
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f884 	bl	80027ec <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ea:	f000 f931 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2103      	movs	r1, #3
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fae6 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 f91b 	bl	8000950 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	@ (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	@ (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_I2C1_Init+0x50>)
 800076a:	f000 fe9b 	bl	80014a4 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f8ec 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000b8 	.word	0x200000b8
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_SPI2_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	@ (80007f0 <MX_SPI2_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_SPI2_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_SPI2_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007bc:	2210      	movs	r2, #16
 80007be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_SPI2_Init+0x64>)
 80007da:	f002 fc5f 	bl	800309c <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f8b4 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000010c 	.word	0x2000010c
 80007f0:	40003800 	.word	0x40003800

080007f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	@ (8000844 <MX_USART1_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USART1_UART_Init+0x4c>)
 800082c:	f002 fcbf 	bl	80031ae <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f88b 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000164 	.word	0x20000164
 8000844:	40011000 	.word	0x40011000

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b38      	ldr	r3, [pc, #224]	@ (8000944 <MX_GPIO_Init+0xfc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a37      	ldr	r2, [pc, #220]	@ (8000944 <MX_GPIO_Init+0xfc>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b35      	ldr	r3, [pc, #212]	@ (8000944 <MX_GPIO_Init+0xfc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <MX_GPIO_Init+0xfc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a30      	ldr	r2, [pc, #192]	@ (8000944 <MX_GPIO_Init+0xfc>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b2e      	ldr	r3, [pc, #184]	@ (8000944 <MX_GPIO_Init+0xfc>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_GPIO_Init+0xfc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a29      	ldr	r2, [pc, #164]	@ (8000944 <MX_GPIO_Init+0xfc>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MX_GPIO_Init+0xfc>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f640 0154 	movw	r1, #2132	@ 0x854
 80008b8:	4823      	ldr	r0, [pc, #140]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008ba:	f000 fdd9 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c4:	4821      	ldr	r0, [pc, #132]	@ (800094c <MX_GPIO_Init+0x104>)
 80008c6:	f000 fdd3 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin
                           Alarm_Signal_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin
 80008ca:	f248 032b 	movw	r3, #32811	@ 0x802b
 80008ce:	60fb      	str	r3, [r7, #12]
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	481a      	ldr	r0, [pc, #104]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008e0:	f000 fc2a 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin SPI_SW_CSN_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin;
 80008e4:	f640 0354 	movw	r3, #2132	@ 0x854
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4812      	ldr	r0, [pc, #72]	@ (8000948 <MX_GPIO_Init+0x100>)
 80008fe:	f000 fc1b 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SW_CE_Pin */
  GPIO_InitStruct.Pin = SPI_SW_CE_Pin;
 8000902:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_SW_CE_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_GPIO_Init+0x104>)
 800091c:	f000 fc0c 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 8000920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_GPIO_Init+0x100>)
 8000936:	f000 fbff 	bl	8001138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093a:	bf00      	nop
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000970:	6453      	str	r3, [r2, #68]	@ 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <HAL_I2C_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12b      	bne.n	8000a26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ea:	23c0      	movs	r3, #192	@ 0xc0
 80009ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ee:	2312      	movs	r3, #18
 80009f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fa:	2304      	movs	r3, #4
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <HAL_I2C_MspInit+0x8c>)
 8000a06:	f000 fb97 	bl	8001138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	@ 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <HAL_SPI_MspInit+0x84>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12c      	bne.n	8000ab8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_SPI_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a96:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_SPI_MspInit+0x8c>)
 8000ab4:	f000 fb40 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	@ 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40003800 	.word	0x40003800
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <HAL_UART_MspInit+0x94>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d134      	bne.n	8000b58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_UART_MspInit+0x98>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <HAL_UART_MspInit+0x98>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_UART_MspInit+0x98>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_UART_MspInit+0x98>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <HAL_UART_MspInit+0x98>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_UART_MspInit+0x98>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b38:	2307      	movs	r3, #7
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <HAL_UART_MspInit+0x9c>)
 8000b44:	f000 faf8 	bl	8001138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2025      	movs	r0, #37	@ 0x25
 8000b4e:	f000 fa2a 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b52:	2025      	movs	r0, #37	@ 0x25
 8000b54:	f000 fa43 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	@ 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40011000 	.word	0x40011000
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f8d1 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f002 fb97 	bl	8003304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000164 	.word	0x20000164

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f004 ff48 	bl	8005aa4 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20020000 	.word	0x20020000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	200001b0 	.word	0x200001b0
 8000c48:	20000480 	.word	0x20000480

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	@ (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ca8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c74:	f7ff ffea 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f004 ff07 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc7d 	bl	80005a0 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000cb4:	0800664c 	.word	0x0800664c
  ldr r2, =_sbss
 8000cb8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000cbc:	2000047c 	.word	0x2000047c

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	@ (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f94f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fe30 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f967 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f92f 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	200001b4 	.word	0x200001b4

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200001b4 	.word	0x200001b4

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000000c 	.word	0x2000000c

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	@ (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff feb6 	bl	8000d90 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d008      	beq.n	8001044 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2280      	movs	r2, #128	@ 0x80
 8001036:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e052      	b.n	80010ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0216 	bic.w	r2, r2, #22
 8001052:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001062:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <HAL_DMA_Abort+0x62>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0208 	bic.w	r2, r2, #8
 8001082:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001094:	e013      	b.n	80010be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001096:	f7ff fe7b 	bl	8000d90 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d90c      	bls.n	80010be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e015      	b.n	80010ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e4      	bne.n	8001096 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d0:	223f      	movs	r2, #63	@ 0x3f
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d004      	beq.n	8001110 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2280      	movs	r2, #128	@ 0x80
 800110a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00c      	b.n	800112a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2205      	movs	r2, #5
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	e159      	b.n	8001408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001154:	2201      	movs	r2, #1
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8148 	bne.w	8001402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d005      	beq.n	800118a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001186:	2b02      	cmp	r3, #2
 8001188:	d130      	bne.n	80011ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	69b9      	ldr	r1, [r7, #24]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a2 	beq.w	8001402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b57      	ldr	r3, [pc, #348]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	4a56      	ldr	r2, [pc, #344]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ce:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <HAL_GPIO_Init+0x2e8>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012da:	4a52      	ldr	r2, [pc, #328]	@ (8001424 <HAL_GPIO_Init+0x2ec>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a49      	ldr	r2, [pc, #292]	@ (8001428 <HAL_GPIO_Init+0x2f0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x202>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	@ (800142c <HAL_GPIO_Init+0x2f4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x1fe>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a47      	ldr	r2, [pc, #284]	@ (8001430 <HAL_GPIO_Init+0x2f8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x1fa>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a46      	ldr	r2, [pc, #280]	@ (8001434 <HAL_GPIO_Init+0x2fc>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x1f6>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a45      	ldr	r2, [pc, #276]	@ (8001438 <HAL_GPIO_Init+0x300>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x1f2>
 8001326:	2304      	movs	r3, #4
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x204>
 800132a:	2307      	movs	r3, #7
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x204>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x204>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x204>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x204>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	@ (8001424 <HAL_GPIO_Init+0x2ec>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <HAL_GPIO_Init+0x304>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a2f      	ldr	r2, [pc, #188]	@ (800143c <HAL_GPIO_Init+0x304>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <HAL_GPIO_Init+0x304>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a24      	ldr	r2, [pc, #144]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ae:	4b23      	ldr	r3, [pc, #140]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d2:	4a1a      	ldr	r2, [pc, #104]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f aea2 	bls.w	8001154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e001      	b.n	8001462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e12b      	b.n	800170e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fa6e 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2224      	movs	r2, #36	@ 0x24
 80014d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001508:	f001 fda0 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 800150c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4a81      	ldr	r2, [pc, #516]	@ (8001718 <HAL_I2C_Init+0x274>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d807      	bhi.n	8001528 <HAL_I2C_Init+0x84>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a80      	ldr	r2, [pc, #512]	@ (800171c <HAL_I2C_Init+0x278>)
 800151c:	4293      	cmp	r3, r2
 800151e:	bf94      	ite	ls
 8001520:	2301      	movls	r3, #1
 8001522:	2300      	movhi	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	e006      	b.n	8001536 <HAL_I2C_Init+0x92>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4a7d      	ldr	r2, [pc, #500]	@ (8001720 <HAL_I2C_Init+0x27c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	bf94      	ite	ls
 8001530:	2301      	movls	r3, #1
 8001532:	2300      	movhi	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e0e7      	b.n	800170e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4a78      	ldr	r2, [pc, #480]	@ (8001724 <HAL_I2C_Init+0x280>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9b      	lsrs	r3, r3, #18
 8001548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a6a      	ldr	r2, [pc, #424]	@ (8001718 <HAL_I2C_Init+0x274>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d802      	bhi.n	8001578 <HAL_I2C_Init+0xd4>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	e009      	b.n	800158c <HAL_I2C_Init+0xe8>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	4a69      	ldr	r2, [pc, #420]	@ (8001728 <HAL_I2C_Init+0x284>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	3301      	adds	r3, #1
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	430b      	orrs	r3, r1
 8001592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800159e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	495c      	ldr	r1, [pc, #368]	@ (8001718 <HAL_I2C_Init+0x274>)
 80015a8:	428b      	cmp	r3, r1
 80015aa:	d819      	bhi.n	80015e0 <HAL_I2C_Init+0x13c>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1e59      	subs	r1, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ba:	1c59      	adds	r1, r3, #1
 80015bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015c0:	400b      	ands	r3, r1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00a      	beq.n	80015dc <HAL_I2C_Init+0x138>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e59      	subs	r1, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015da:	e051      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 80015dc:	2304      	movs	r3, #4
 80015de:	e04f      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_I2C_Init+0x168>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	440b      	add	r3, r1
 80015f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001600:	2b00      	cmp	r3, #0
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	e012      	b.n	8001632 <HAL_I2C_Init+0x18e>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1e58      	subs	r0, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6859      	ldr	r1, [r3, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	0099      	lsls	r1, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001622:	3301      	adds	r3, #1
 8001624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_I2C_Init+0x196>
 8001636:	2301      	movs	r3, #1
 8001638:	e022      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10e      	bne.n	8001660 <HAL_I2C_Init+0x1bc>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1e58      	subs	r0, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	440b      	add	r3, r1
 8001650:	fbb0 f3f3 	udiv	r3, r0, r3
 8001654:	3301      	adds	r3, #1
 8001656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800165e:	e00f      	b.n	8001680 <HAL_I2C_Init+0x1dc>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e58      	subs	r0, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	0099      	lsls	r1, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	fbb0 f3f3 	udiv	r3, r0, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	6809      	ldr	r1, [r1, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69da      	ldr	r2, [r3, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6911      	ldr	r1, [r2, #16]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68d2      	ldr	r2, [r2, #12]
 80016ba:	4311      	orrs	r1, r2
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	000186a0 	.word	0x000186a0
 800171c:	001e847f 	.word	0x001e847f
 8001720:	003d08ff 	.word	0x003d08ff
 8001724:	431bde83 	.word	0x431bde83
 8001728:	10624dd3 	.word	0x10624dd3

0800172c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	460b      	mov	r3, r1
 800173a:	817b      	strh	r3, [r7, #10]
 800173c:	4613      	mov	r3, r2
 800173e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fb26 	bl	8000d90 <HAL_GetTick>
 8001744:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b20      	cmp	r3, #32
 8001750:	f040 80e0 	bne.w	8001914 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2319      	movs	r3, #25
 800175a:	2201      	movs	r2, #1
 800175c:	4970      	ldr	r1, [pc, #448]	@ (8001920 <HAL_I2C_Master_Transmit+0x1f4>)
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 fe0e 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
 800176c:	e0d3      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_I2C_Master_Transmit+0x50>
 8001778:	2302      	movs	r3, #2
 800177a:	e0cc      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b01      	cmp	r3, #1
 8001790:	d007      	beq.n	80017a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2221      	movs	r2, #33	@ 0x21
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2210      	movs	r2, #16
 80017be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	893a      	ldrh	r2, [r7, #8]
 80017d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a50      	ldr	r2, [pc, #320]	@ (8001924 <HAL_I2C_Master_Transmit+0x1f8>)
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017e4:	8979      	ldrh	r1, [r7, #10]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	6a3a      	ldr	r2, [r7, #32]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fbc8 	bl	8001f80 <I2C_MasterRequestWrite>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e08d      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001810:	e066      	b.n	80018e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	6a39      	ldr	r1, [r7, #32]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fecc 	bl	80025b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	2b04      	cmp	r3, #4
 8001828:	d107      	bne.n	800183a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001842:	781a      	ldrb	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b04      	cmp	r3, #4
 800187a:	d11b      	bne.n	80018b4 <HAL_I2C_Master_Transmit+0x188>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001880:	2b00      	cmp	r3, #0
 8001882:	d017      	beq.n	80018b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001888:	781a      	ldrb	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189e:	b29b      	uxth	r3, r3
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	6a39      	ldr	r1, [r7, #32]
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fec3 	bl	8002644 <I2C_WaitOnBTFFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00d      	beq.n	80018e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d107      	bne.n	80018dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e01a      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d194      	bne.n	8001812 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001914:	2302      	movs	r3, #2
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	00100002 	.word	0x00100002
 8001924:	ffff0000 	.word	0xffff0000

08001928 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	817b      	strh	r3, [r7, #10]
 800193a:	460b      	mov	r3, r1
 800193c:	813b      	strh	r3, [r7, #8]
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001942:	f7ff fa25 	bl	8000d90 <HAL_GetTick>
 8001946:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b20      	cmp	r3, #32
 8001952:	f040 80d9 	bne.w	8001b08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2319      	movs	r3, #25
 800195c:	2201      	movs	r2, #1
 800195e:	496d      	ldr	r1, [pc, #436]	@ (8001b14 <HAL_I2C_Mem_Write+0x1ec>)
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 fd0d 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800196c:	2302      	movs	r3, #2
 800196e:	e0cc      	b.n	8001b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_I2C_Mem_Write+0x56>
 800197a:	2302      	movs	r3, #2
 800197c:	e0c5      	b.n	8001b0a <HAL_I2C_Mem_Write+0x1e2>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d007      	beq.n	80019a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2221      	movs	r2, #33	@ 0x21
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	@ 0x40
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4a4d      	ldr	r2, [pc, #308]	@ (8001b18 <HAL_I2C_Mem_Write+0x1f0>)
 80019e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019e6:	88f8      	ldrh	r0, [r7, #6]
 80019e8:	893a      	ldrh	r2, [r7, #8]
 80019ea:	8979      	ldrh	r1, [r7, #10]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4603      	mov	r3, r0
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb44 	bl	8002084 <I2C_RequestMemoryWrite>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d052      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e081      	b.n	8001b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fdd2 	bl	80025b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00d      	beq.n	8001a32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d107      	bne.n	8001a2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06b      	b.n	8001b0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	781a      	ldrb	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d11b      	bne.n	8001aa8 <HAL_I2C_Mem_Write+0x180>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d017      	beq.n	8001aa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1aa      	bne.n	8001a06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fdc5 	bl	8002644 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00d      	beq.n	8001adc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d107      	bne.n	8001ad8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ad6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e016      	b.n	8001b0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	00100002 	.word	0x00100002
 8001b18:	ffff0000 	.word	0xffff0000

08001b1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	@ 0x30
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	817b      	strh	r3, [r7, #10]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	813b      	strh	r3, [r7, #8]
 8001b32:	4613      	mov	r3, r2
 8001b34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b36:	f7ff f92b 	bl	8000d90 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	f040 8214 	bne.w	8001f72 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2319      	movs	r3, #25
 8001b50:	2201      	movs	r2, #1
 8001b52:	497b      	ldr	r1, [pc, #492]	@ (8001d40 <HAL_I2C_Mem_Read+0x224>)
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 fc13 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
 8001b62:	e207      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2C_Mem_Read+0x56>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e200      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d007      	beq.n	8001b98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2222      	movs	r2, #34	@ 0x22
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2240      	movs	r2, #64	@ 0x40
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d44 <HAL_I2C_Mem_Read+0x228>)
 8001bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bda:	88f8      	ldrh	r0, [r7, #6]
 8001bdc:	893a      	ldrh	r2, [r7, #8]
 8001bde:	8979      	ldrh	r1, [r7, #10]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4603      	mov	r3, r0
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fae0 	bl	80021b0 <I2C_RequestMemoryRead>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1bc      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d113      	bne.n	8001c2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	623b      	str	r3, [r7, #32]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	623b      	str	r3, [r7, #32]
 8001c16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e190      	b.n	8001f4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d11b      	bne.n	8001c6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e170      	b.n	8001f4c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d11b      	bne.n	8001caa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	e150      	b.n	8001f4c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001cc0:	e144      	b.n	8001f4c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	f200 80f1 	bhi.w	8001eae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d123      	bne.n	8001d1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 fcfb 	bl	80026d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e145      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d1a:	e117      	b.n	8001f4c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d14e      	bne.n	8001dc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4906      	ldr	r1, [pc, #24]	@ (8001d48 <HAL_I2C_Mem_Read+0x22c>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fb26 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e11a      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
 8001d3e:	bf00      	nop
 8001d40:	00100002 	.word	0x00100002
 8001d44:	ffff0000 	.word	0xffff0000
 8001d48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691a      	ldr	r2, [r3, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dc0:	e0c4      	b.n	8001f4c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc8:	2200      	movs	r2, #0
 8001dca:	496c      	ldr	r1, [pc, #432]	@ (8001f7c <HAL_I2C_Mem_Read+0x460>)
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fad7 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0cb      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e24:	2200      	movs	r2, #0
 8001e26:	4955      	ldr	r1, [pc, #340]	@ (8001f7c <HAL_I2C_Mem_Read+0x460>)
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 faa9 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e09d      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001eac:	e04e      	b.n	8001f4c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fc0e 	bl	80026d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e058      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d124      	bne.n	8001f4c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d107      	bne.n	8001f1a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f18:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f47f aeb6 	bne.w	8001cc2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
  }
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3728      	adds	r7, #40	@ 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	00010004 	.word	0x00010004

08001f80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af02      	add	r7, sp, #8
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d006      	beq.n	8001faa <I2C_MasterRequestWrite+0x2a>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d003      	beq.n	8001faa <I2C_MasterRequestWrite+0x2a>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fa8:	d108      	bne.n	8001fbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e00b      	b.n	8001fd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	2b12      	cmp	r3, #18
 8001fc2:	d107      	bne.n	8001fd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f9cd 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ffa:	d103      	bne.n	8002004 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e035      	b.n	8002074 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002010:	d108      	bne.n	8002024 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002020:	611a      	str	r2, [r3, #16]
 8002022:	e01b      	b.n	800205c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002024:	897b      	ldrh	r3, [r7, #10]
 8002026:	11db      	asrs	r3, r3, #7
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f003 0306 	and.w	r3, r3, #6
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f063 030f 	orn	r3, r3, #15
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	490e      	ldr	r1, [pc, #56]	@ (800207c <I2C_MasterRequestWrite+0xfc>)
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fa16 	bl	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e010      	b.n	8002074 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002052:	897b      	ldrh	r3, [r7, #10]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4907      	ldr	r1, [pc, #28]	@ (8002080 <I2C_MasterRequestWrite+0x100>)
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fa06 	bl	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	00010008 	.word	0x00010008
 8002080:	00010002 	.word	0x00010002

08002084 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	817b      	strh	r3, [r7, #10]
 8002096:	460b      	mov	r3, r1
 8002098:	813b      	strh	r3, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f960 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020d4:	d103      	bne.n	80020de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e05f      	b.n	80021a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	492d      	ldr	r1, [pc, #180]	@ (80021ac <I2C_RequestMemoryWrite+0x128>)
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f9bb 	bl	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e04c      	b.n	80021a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800211e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fa46 	bl	80025b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2b04      	cmp	r3, #4
 8002134:	d107      	bne.n	8002146 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002144:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e02b      	b.n	80021a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d105      	bne.n	800215c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	611a      	str	r2, [r3, #16]
 800215a:	e021      	b.n	80021a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800215c:	893b      	ldrh	r3, [r7, #8]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	b29b      	uxth	r3, r3
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800216a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216c:	6a39      	ldr	r1, [r7, #32]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 fa20 	bl	80025b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	2b04      	cmp	r3, #4
 8002180:	d107      	bne.n	8002192 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002190:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e005      	b.n	80021a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002196:	893b      	ldrh	r3, [r7, #8]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	00010002 	.word	0x00010002

080021b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	817b      	strh	r3, [r7, #10]
 80021c2:	460b      	mov	r3, r1
 80021c4:	813b      	strh	r3, [r7, #8]
 80021c6:	4613      	mov	r3, r2
 80021c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f8c2 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002210:	d103      	bne.n	800221a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002218:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0aa      	b.n	8002374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800222c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	6a3a      	ldr	r2, [r7, #32]
 8002232:	4952      	ldr	r1, [pc, #328]	@ (800237c <I2C_RequestMemoryRead+0x1cc>)
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 f91d 	bl	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e097      	b.n	8002374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f9a8 	bl	80025b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00d      	beq.n	8002286 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	2b04      	cmp	r3, #4
 8002270:	d107      	bne.n	8002282 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e076      	b.n	8002374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800228c:	893b      	ldrh	r3, [r7, #8]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	e021      	b.n	80022dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002298:	893b      	ldrh	r3, [r7, #8]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a8:	6a39      	ldr	r1, [r7, #32]
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f982 	bl	80025b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00d      	beq.n	80022d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d107      	bne.n	80022ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e050      	b.n	8002374 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022d2:	893b      	ldrh	r3, [r7, #8]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022de:	6a39      	ldr	r1, [r7, #32]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f967 	bl	80025b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00d      	beq.n	8002308 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d107      	bne.n	8002304 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002302:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e035      	b.n	8002374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002316:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	2200      	movs	r2, #0
 8002320:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f82b 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800233e:	d103      	bne.n	8002348 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e013      	b.n	8002374 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800234c:	897b      	ldrh	r3, [r7, #10]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	6a3a      	ldr	r2, [r7, #32]
 8002360:	4906      	ldr	r1, [pc, #24]	@ (800237c <I2C_RequestMemoryRead+0x1cc>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f886 	bl	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	00010002 	.word	0x00010002

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e048      	b.n	8002424 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d044      	beq.n	8002424 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7fe fcf9 	bl	8000d90 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d302      	bcc.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d139      	bne.n	8002424 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10d      	bne.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	43da      	mvns	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4013      	ands	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	e00c      	b.n	80023f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	43da      	mvns	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d116      	bne.n	8002424 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	f043 0220 	orr.w	r2, r3, #32
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e023      	b.n	800246c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	0c1b      	lsrs	r3, r3, #16
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10d      	bne.n	800244a <I2C_WaitOnFlagUntilTimeout+0xca>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	43da      	mvns	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4013      	ands	r3, r2
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	e00c      	b.n	8002464 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	429a      	cmp	r2, r3
 8002468:	d093      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002482:	e071      	b.n	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002492:	d123      	bne.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2220      	movs	r2, #32
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0204 	orr.w	r2, r3, #4
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e067      	b.n	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d041      	beq.n	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e4:	f7fe fc54 	bl	8000d90 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d302      	bcc.n	80024fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d136      	bne.n	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10c      	bne.n	800251e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	43da      	mvns	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4013      	ands	r3, r2
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	e00b      	b.n	8002536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	43da      	mvns	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e021      	b.n	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10c      	bne.n	800258c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	43da      	mvns	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	e00b      	b.n	80025a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4013      	ands	r3, r2
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	bf14      	ite	ne
 800259e:	2301      	movne	r3, #1
 80025a0:	2300      	moveq	r3, #0
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f47f af6d 	bne.w	8002484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025c0:	e034      	b.n	800262c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f8e3 	bl	800278e <I2C_IsAcknowledgeFailed>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e034      	b.n	800263c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d028      	beq.n	800262c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025da:	f7fe fbd9 	bl	8000d90 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d302      	bcc.n	80025f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11d      	bne.n	800262c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fa:	2b80      	cmp	r3, #128	@ 0x80
 80025fc:	d016      	beq.n	800262c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e007      	b.n	800263c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b80      	cmp	r3, #128	@ 0x80
 8002638:	d1c3      	bne.n	80025c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002650:	e034      	b.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f89b 	bl	800278e <I2C_IsAcknowledgeFailed>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e034      	b.n	80026cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d028      	beq.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266a:	f7fe fb91 	bl	8000d90 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	d302      	bcc.n	8002680 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11d      	bne.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b04      	cmp	r3, #4
 800268c:	d016      	beq.n	80026bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e007      	b.n	80026cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d1c3      	bne.n	8002652 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026e0:	e049      	b.n	8002776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d119      	bne.n	8002724 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0210 	mvn.w	r2, #16
 80026f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e030      	b.n	8002786 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002724:	f7fe fb34 	bl	8000d90 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d302      	bcc.n	800273a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d11d      	bne.n	8002776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002744:	2b40      	cmp	r3, #64	@ 0x40
 8002746:	d016      	beq.n	8002776 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f043 0220 	orr.w	r2, r3, #32
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e007      	b.n	8002786 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	2b40      	cmp	r3, #64	@ 0x40
 8002782:	d1ae      	bne.n	80026e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027a4:	d11b      	bne.n	80027de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f043 0204 	orr.w	r2, r3, #4
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e267      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800280a:	4b88      	ldr	r3, [pc, #544]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d00c      	beq.n	8002830 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b85      	ldr	r3, [pc, #532]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800281e:	2b08      	cmp	r3, #8
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b82      	ldr	r3, [pc, #520]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b7e      	ldr	r3, [pc, #504]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d157      	bne.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e242      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x74>
 8002852:	4b76      	ldr	r3, [pc, #472]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b70      	ldr	r3, [pc, #448]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6f      	ldr	r2, [pc, #444]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6d      	ldr	r3, [pc, #436]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002884:	4b69      	ldr	r3, [pc, #420]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a68      	ldr	r2, [pc, #416]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b66      	ldr	r3, [pc, #408]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a65      	ldr	r2, [pc, #404]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe fa74 	bl	8000d90 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe fa70 	bl	8000d90 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	@ 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e207      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b5b      	ldr	r3, [pc, #364]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xc0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fa60 	bl	8000d90 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fa5c 	bl	8000d90 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1f3      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b51      	ldr	r3, [pc, #324]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002902:	4b4a      	ldr	r3, [pc, #296]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b44      	ldr	r3, [pc, #272]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1c7      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4937      	ldr	r1, [pc, #220]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b34      	ldr	r3, [pc, #208]	@ (8002a30 <HAL_RCC_OscConfig+0x244>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7fe fa15 	bl	8000d90 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe fa11 	bl	8000d90 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1a8      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b28      	ldr	r3, [pc, #160]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4925      	ldr	r1, [pc, #148]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b24      	ldr	r3, [pc, #144]	@ (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe f9f4 	bl	8000d90 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe f9f0 	bl	8000d90 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e187      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d036      	beq.n	8002a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_RCC_OscConfig+0x248>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe f9d4 	bl	8000d90 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe f9d0 	bl	8000d90 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e167      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x200>
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <HAL_RCC_OscConfig+0x248>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7fe f9bd 	bl	8000d90 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e00e      	b.n	8002a38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7fe f9b9 	bl	8000d90 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d907      	bls.n	8002a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e150      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	42470000 	.word	0x42470000
 8002a34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b88      	ldr	r3, [pc, #544]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ea      	bne.n	8002a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8097 	beq.w	8002b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b81      	ldr	r3, [pc, #516]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b7d      	ldr	r3, [pc, #500]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a72:	4b7a      	ldr	r3, [pc, #488]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b77      	ldr	r3, [pc, #476]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b74      	ldr	r3, [pc, #464]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a73      	ldr	r2, [pc, #460]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe f979 	bl	8000d90 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7fe f975 	bl	8000d90 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e10c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2ea>
 8002ac8:	4b64      	ldr	r3, [pc, #400]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	4a63      	ldr	r2, [pc, #396]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x30c>
 8002ade:	4b5f      	ldr	r3, [pc, #380]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aea:	4b5c      	ldr	r3, [pc, #368]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a5b      	ldr	r2, [pc, #364]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002af8:	4b58      	ldr	r3, [pc, #352]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afc:	4a57      	ldr	r2, [pc, #348]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b04:	4b55      	ldr	r3, [pc, #340]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	4a54      	ldr	r2, [pc, #336]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe f93a 	bl	8000d90 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe f936 	bl	8000d90 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0cb      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	4b49      	ldr	r3, [pc, #292]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ee      	beq.n	8002b20 <HAL_RCC_OscConfig+0x334>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7fe f924 	bl	8000d90 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7fe f920 	bl	8000d90 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0b5      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	4b3e      	ldr	r3, [pc, #248]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ee      	bne.n	8002b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b39      	ldr	r3, [pc, #228]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	4a38      	ldr	r2, [pc, #224]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a1 	beq.w	8002ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8a:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d05c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d141      	bne.n	8002c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe f8f4 	bl	8000d90 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe f8f0 	bl	8000d90 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e087      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b27      	ldr	r3, [pc, #156]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	491b      	ldr	r1, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe f8c9 	bl	8000d90 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe f8c5 	bl	8000d90 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e05c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x416>
 8002c20:	e054      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe f8b2 	bl	8000d90 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe f8ae 	bl	8000d90 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e045      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x444>
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e038      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cc      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b68      	ldr	r3, [pc, #416]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3b      	ldr	r3, [pc, #236]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b37      	ldr	r3, [pc, #220]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4934      	ldr	r1, [pc, #208]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fd ffe0 	bl	8000d90 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fd ffdc 	bl	8000d90 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20c      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f821 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	@ (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd ff40 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	080064f0 	.word	0x080064f0
 8002ea0:	20000004 	.word	0x20000004
 8002ea4:	20000008 	.word	0x20000008

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b090      	sub	sp, #64	@ 0x40
 8002eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	f200 80a1 	bhi.w	8003014 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eda:	e09b      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_GetSysClockFreq+0x184>)
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee0:	e09b      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee6:	e098      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef2:	4b4d      	ldr	r3, [pc, #308]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d028      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b4a      	ldr	r3, [pc, #296]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	2200      	movs	r2, #0
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f10:	2100      	movs	r1, #0
 8002f12:	4b47      	ldr	r3, [pc, #284]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f14:	fb03 f201 	mul.w	r2, r3, r1
 8002f18:	2300      	movs	r3, #0
 8002f1a:	fb00 f303 	mul.w	r3, r0, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	4a43      	ldr	r2, [pc, #268]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f22:	fba0 1202 	umull	r1, r2, r0, r2
 8002f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f28:	460a      	mov	r2, r1
 8002f2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f2e:	4413      	add	r3, r2
 8002f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f34:	2200      	movs	r2, #0
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	61fa      	str	r2, [r7, #28]
 8002f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f42:	f7fd f9b5 	bl	80002b0 <__aeabi_uldivmod>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4e:	e053      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	617a      	str	r2, [r7, #20]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f62:	f04f 0b00 	mov.w	fp, #0
 8002f66:	4652      	mov	r2, sl
 8002f68:	465b      	mov	r3, fp
 8002f6a:	f04f 0000 	mov.w	r0, #0
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	0159      	lsls	r1, r3, #5
 8002f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f78:	0150      	lsls	r0, r2, #5
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002f82:	eb63 090b 	sbc.w	r9, r3, fp
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002f9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	00eb      	lsls	r3, r5, #3
 8002fac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb0:	00e2      	lsls	r2, r4, #3
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	eb14 030a 	adds.w	r3, r4, sl
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	eb45 030b 	adc.w	r3, r5, fp
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fce:	4629      	mov	r1, r5
 8002fd0:	028b      	lsls	r3, r1, #10
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd8:	4621      	mov	r1, r4
 8002fda:	028a      	lsls	r2, r1, #10
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	60fa      	str	r2, [r7, #12]
 8002fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fec:	f7fd f960 	bl	80002b0 <__aeabi_uldivmod>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003012:	e002      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCC_GetSysClockFreq+0x184>)
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800301c:	4618      	mov	r0, r3
 800301e:	3740      	adds	r7, #64	@ 0x40
 8003020:	46bd      	mov	sp, r7
 8003022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	00f42400 	.word	0x00f42400
 8003030:	017d7840 	.word	0x017d7840

08003034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003038:	4b03      	ldr	r3, [pc, #12]	@ (8003048 <HAL_RCC_GetHCLKFreq+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003050:	f7ff fff0 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	0a9b      	lsrs	r3, r3, #10
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	4903      	ldr	r1, [pc, #12]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	08006500 	.word	0x08006500

08003074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003078:	f7ff ffdc 	bl	8003034 <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b05      	ldr	r3, [pc, #20]	@ (8003094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0b5b      	lsrs	r3, r3, #13
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	08006500 	.word	0x08006500

0800309c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07b      	b.n	80031a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030be:	d009      	beq.n	80030d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]
 80030c6:	e005      	b.n	80030d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fca4 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800310a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003158:	ea42 0103 	orr.w	r1, r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0104 	and.w	r1, r3, #4
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	f003 0210 	and.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e042      	b.n	8003246 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd fc79 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2224      	movs	r2, #36	@ 0x24
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fd1a 	bl	8003c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003206:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003216:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003226:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	4613      	mov	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b20      	cmp	r3, #32
 8003266:	d121      	bne.n	80032ac <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_UART_Transmit_IT+0x26>
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e01a      	b.n	80032ae <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2221      	movs	r2, #33	@ 0x21
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032a6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	4613      	mov	r3, r2
 80032c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d112      	bne.n	80032fa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_UART_Receive_IT+0x26>
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e00b      	b.n	80032fc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fac7 	bl	8003884 <UART_Start_Receive_IT>
 80032f6:	4603      	mov	r3, r0
 80032f8:	e000      	b.n	80032fc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
  }
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b0ba      	sub	sp, #232	@ 0xe8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fba4 	bl	8003ab0 <UART_Receive_IT>
      return;
 8003368:	e273      	b.n	8003852 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800336a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80de 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003384:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80d1 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
 800339a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
 80033be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
 80033e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	f043 0204 	orr.w	r2, r3, #4
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
 8003406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f043 0208 	orr.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 820a 	beq.w	8003848 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb2f 	bl	8003ab0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345c:	2b40      	cmp	r3, #64	@ 0x40
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_UART_IRQHandler+0x17a>
 8003476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04f      	beq.n	800351e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fa3a 	bl	80038f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d141      	bne.n	8003516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1d9      	bne.n	8003492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ea:	4a8a      	ldr	r2, [pc, #552]	@ (8003714 <HAL_UART_IRQHandler+0x410>)
 80034ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fdfd 	bl	80010f2 <HAL_DMA_Abort_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00e      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9a2 	bl	8003858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00a      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f99e 	bl	8003858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e006      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f99a 	bl	8003858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800352a:	e18d      	b.n	8003848 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	bf00      	nop
    return;
 800352e:	e18b      	b.n	8003848 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 8167 	bne.w	8003808 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8160 	beq.w	8003808 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8159 	beq.w	8003808 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003576:	2b40      	cmp	r3, #64	@ 0x40
 8003578:	f040 80ce 	bne.w	8003718 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a9 	beq.w	80036e4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800359a:	429a      	cmp	r2, r3
 800359c:	f080 80a2 	bcs.w	80036e4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b2:	f000 8088 	beq.w	80036c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1d9      	bne.n	80035b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3314      	adds	r3, #20
 8003608:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003626:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800362a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800362e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e1      	bne.n	8003602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800364e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003662:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003664:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003668:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e3      	bne.n	800363e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003696:	f023 0310 	bic.w	r3, r3, #16
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e3      	bne.n	8003684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fca6 	bl	8001012 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8c5 	bl	800386c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80036e2:	e0b3      	b.n	800384c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f040 80ad 	bne.w	800384c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fc:	f040 80a6 	bne.w	800384c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8ad 	bl	800386c <HAL_UARTEx_RxEventCallback>
      return;
 8003712:	e09b      	b.n	800384c <HAL_UART_IRQHandler+0x548>
 8003714:	080039bf 	.word	0x080039bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003720:	b29b      	uxth	r3, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 808e 	beq.w	8003850 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8089 	beq.w	8003850 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003762:	647a      	str	r2, [r7, #68]	@ 0x44
 8003764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e3      	bne.n	800373e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	623b      	str	r3, [r7, #32]
   return(result);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800379a:	633a      	str	r2, [r7, #48]	@ 0x30
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e3      	bne.n	8003776 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0310 	bic.w	r3, r3, #16
 80037d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	617b      	str	r3, [r7, #20]
   return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e3      	bne.n	80037bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f833 	bl	800386c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003806:	e023      	b.n	8003850 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_UART_IRQHandler+0x524>
 8003814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8dd 	bl	80039e0 <UART_Transmit_IT>
    return;
 8003826:	e014      	b.n	8003852 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <HAL_UART_IRQHandler+0x54e>
 8003834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f91d 	bl	8003a80 <UART_EndTransmit_IT>
    return;
 8003846:	e004      	b.n	8003852 <HAL_UART_IRQHandler+0x54e>
    return;
 8003848:	bf00      	nop
 800384a:	e002      	b.n	8003852 <HAL_UART_IRQHandler+0x54e>
      return;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_UART_IRQHandler+0x54e>
      return;
 8003850:	bf00      	nop
  }
}
 8003852:	37e8      	adds	r7, #232	@ 0xe8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2222      	movs	r2, #34	@ 0x22
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0220 	orr.w	r2, r2, #32
 80038e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b095      	sub	sp, #84	@ 0x54
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003920:	643a      	str	r2, [r7, #64]	@ 0x40
 8003922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e5      	bne.n	8003900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	61fb      	str	r3, [r7, #28]
   return(result);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800395a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e5      	bne.n	8003934 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	2b01      	cmp	r3, #1
 800396e:	d119      	bne.n	80039a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f023 0310 	bic.w	r3, r3, #16
 8003986:	647b      	str	r3, [r7, #68]	@ 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003990:	61ba      	str	r2, [r7, #24]
 8003992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	6979      	ldr	r1, [r7, #20]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	613b      	str	r3, [r7, #16]
   return(result);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e5      	bne.n	8003970 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039b2:	bf00      	nop
 80039b4:	3754      	adds	r7, #84	@ 0x54
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff ff40 	bl	8003858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b21      	cmp	r3, #33	@ 0x21
 80039f2:	d13e      	bne.n	8003a72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fc:	d114      	bne.n	8003a28 <UART_Transmit_IT+0x48>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d110      	bne.n	8003a28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	621a      	str	r2, [r3, #32]
 8003a26:	e008      	b.n	8003a3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	1c59      	adds	r1, r3, #1
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6211      	str	r1, [r2, #32]
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4619      	mov	r1, r3
 8003a48:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10f      	bne.n	8003a6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 ff4d 	bl	8004940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	@ 0x30
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b22      	cmp	r3, #34	@ 0x22
 8003aca:	f040 80aa 	bne.w	8003c22 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad6:	d115      	bne.n	8003b04 <UART_Receive_IT+0x54>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d111      	bne.n	8003b04 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afc:	1c9a      	adds	r2, r3, #2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b02:	e024      	b.n	8003b4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b12:	d007      	beq.n	8003b24 <UART_Receive_IT+0x74>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <UART_Receive_IT+0x82>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e008      	b.n	8003b44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d15d      	bne.n	8003c1e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0220 	bic.w	r2, r2, #32
 8003b70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d135      	bne.n	8003c14 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f023 0310 	bic.w	r3, r3, #16
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bce:	623a      	str	r2, [r7, #32]
 8003bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	69f9      	ldr	r1, [r7, #28]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d10a      	bne.n	8003c06 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fe2d 	bl	800386c <HAL_UARTEx_RxEventCallback>
 8003c12:	e002      	b.n	8003c1a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fec1 	bl	800499c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e002      	b.n	8003c24 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e000      	b.n	8003c24 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c22:	2302      	movs	r3, #2
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3730      	adds	r7, #48	@ 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b0c0      	sub	sp, #256	@ 0x100
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	68d9      	ldr	r1, [r3, #12]
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	ea40 0301 	orr.w	r3, r0, r1
 8003c54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c84:	f021 010c 	bic.w	r1, r1, #12
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c92:	430b      	orrs	r3, r1
 8003c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca6:	6999      	ldr	r1, [r3, #24]
 8003ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	ea40 0301 	orr.w	r3, r0, r1
 8003cb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d005      	beq.n	8003ccc <UART_SetConfig+0xa0>
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b8d      	ldr	r3, [pc, #564]	@ (8003efc <UART_SetConfig+0x2d0>)
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d104      	bne.n	8003cd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ccc:	f7ff f9d2 	bl	8003074 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cd4:	e003      	b.n	8003cde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cd6:	f7ff f9b9 	bl	800304c <HAL_RCC_GetPCLK1Freq>
 8003cda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce8:	f040 810c 	bne.w	8003f04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cf6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cfe:	4622      	mov	r2, r4
 8003d00:	462b      	mov	r3, r5
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d06:	415b      	adcs	r3, r3
 8003d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d0e:	4621      	mov	r1, r4
 8003d10:	eb12 0801 	adds.w	r8, r2, r1
 8003d14:	4629      	mov	r1, r5
 8003d16:	eb43 0901 	adc.w	r9, r3, r1
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d2e:	4690      	mov	r8, r2
 8003d30:	4699      	mov	r9, r3
 8003d32:	4623      	mov	r3, r4
 8003d34:	eb18 0303 	adds.w	r3, r8, r3
 8003d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d3c:	462b      	mov	r3, r5
 8003d3e:	eb49 0303 	adc.w	r3, r9, r3
 8003d42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	18db      	adds	r3, r3, r3
 8003d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d60:	4613      	mov	r3, r2
 8003d62:	eb42 0303 	adc.w	r3, r2, r3
 8003d66:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d70:	f7fc fa9e 	bl	80002b0 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4b61      	ldr	r3, [pc, #388]	@ (8003f00 <UART_SetConfig+0x2d4>)
 8003d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	011c      	lsls	r4, r3, #4
 8003d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	1891      	adds	r1, r2, r2
 8003d9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d9c:	415b      	adcs	r3, r3
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003da4:	4641      	mov	r1, r8
 8003da6:	eb12 0a01 	adds.w	sl, r2, r1
 8003daa:	4649      	mov	r1, r9
 8003dac:	eb43 0b01 	adc.w	fp, r3, r1
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc4:	4692      	mov	sl, r2
 8003dc6:	469b      	mov	fp, r3
 8003dc8:	4643      	mov	r3, r8
 8003dca:	eb1a 0303 	adds.w	r3, sl, r3
 8003dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8003dd8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003de8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003dec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003df0:	460b      	mov	r3, r1
 8003df2:	18db      	adds	r3, r3, r3
 8003df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df6:	4613      	mov	r3, r2
 8003df8:	eb42 0303 	adc.w	r3, r2, r3
 8003dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e06:	f7fc fa53 	bl	80002b0 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <UART_SetConfig+0x2d4>)
 8003e12:	fba3 2301 	umull	r2, r3, r3, r1
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2264      	movs	r2, #100	@ 0x64
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	1acb      	subs	r3, r1, r3
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e26:	4b36      	ldr	r3, [pc, #216]	@ (8003f00 <UART_SetConfig+0x2d4>)
 8003e28:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e34:	441c      	add	r4, r3
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	1891      	adds	r1, r2, r2
 8003e4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e50:	415b      	adcs	r3, r3
 8003e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e58:	4641      	mov	r1, r8
 8003e5a:	1851      	adds	r1, r2, r1
 8003e5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e5e:	4649      	mov	r1, r9
 8003e60:	414b      	adcs	r3, r1
 8003e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e70:	4659      	mov	r1, fp
 8003e72:	00cb      	lsls	r3, r1, #3
 8003e74:	4651      	mov	r1, sl
 8003e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	00ca      	lsls	r2, r1, #3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	4619      	mov	r1, r3
 8003e82:	4603      	mov	r3, r0
 8003e84:	4642      	mov	r2, r8
 8003e86:	189b      	adds	r3, r3, r2
 8003e88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	460a      	mov	r2, r1
 8003e90:	eb42 0303 	adc.w	r3, r2, r3
 8003e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ea4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ea8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003eac:	460b      	mov	r3, r1
 8003eae:	18db      	adds	r3, r3, r3
 8003eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	eb42 0303 	adc.w	r3, r2, r3
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ebe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ec2:	f7fc f9f5 	bl	80002b0 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <UART_SetConfig+0x2d4>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	@ 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	3332      	adds	r3, #50	@ 0x32
 8003ede:	4a08      	ldr	r2, [pc, #32]	@ (8003f00 <UART_SetConfig+0x2d4>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 0207 	and.w	r2, r3, #7
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4422      	add	r2, r4
 8003ef2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ef4:	e106      	b.n	8004104 <UART_SetConfig+0x4d8>
 8003ef6:	bf00      	nop
 8003ef8:	40011000 	.word	0x40011000
 8003efc:	40011400 	.word	0x40011400
 8003f00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f16:	4642      	mov	r2, r8
 8003f18:	464b      	mov	r3, r9
 8003f1a:	1891      	adds	r1, r2, r2
 8003f1c:	6239      	str	r1, [r7, #32]
 8003f1e:	415b      	adcs	r3, r3
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f26:	4641      	mov	r1, r8
 8003f28:	1854      	adds	r4, r2, r1
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	eb43 0501 	adc.w	r5, r3, r1
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	00eb      	lsls	r3, r5, #3
 8003f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f3e:	00e2      	lsls	r2, r4, #3
 8003f40:	4614      	mov	r4, r2
 8003f42:	461d      	mov	r5, r3
 8003f44:	4643      	mov	r3, r8
 8003f46:	18e3      	adds	r3, r4, r3
 8003f48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	eb45 0303 	adc.w	r3, r5, r3
 8003f52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f72:	4629      	mov	r1, r5
 8003f74:	008b      	lsls	r3, r1, #2
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	008a      	lsls	r2, r1, #2
 8003f80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f84:	f7fc f994 	bl	80002b0 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4b60      	ldr	r3, [pc, #384]	@ (8004110 <UART_SetConfig+0x4e4>)
 8003f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	011c      	lsls	r4, r3, #4
 8003f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fa8:	4642      	mov	r2, r8
 8003faa:	464b      	mov	r3, r9
 8003fac:	1891      	adds	r1, r2, r2
 8003fae:	61b9      	str	r1, [r7, #24]
 8003fb0:	415b      	adcs	r3, r3
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb8:	4641      	mov	r1, r8
 8003fba:	1851      	adds	r1, r2, r1
 8003fbc:	6139      	str	r1, [r7, #16]
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	414b      	adcs	r3, r1
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	00cb      	lsls	r3, r1, #3
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fda:	4651      	mov	r1, sl
 8003fdc:	00ca      	lsls	r2, r1, #3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fec:	464b      	mov	r3, r9
 8003fee:	460a      	mov	r2, r1
 8003ff0:	eb42 0303 	adc.w	r3, r2, r3
 8003ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004002:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004010:	4649      	mov	r1, r9
 8004012:	008b      	lsls	r3, r1, #2
 8004014:	4641      	mov	r1, r8
 8004016:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800401a:	4641      	mov	r1, r8
 800401c:	008a      	lsls	r2, r1, #2
 800401e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004022:	f7fc f945 	bl	80002b0 <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4611      	mov	r1, r2
 800402c:	4b38      	ldr	r3, [pc, #224]	@ (8004110 <UART_SetConfig+0x4e4>)
 800402e:	fba3 2301 	umull	r2, r3, r3, r1
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2264      	movs	r2, #100	@ 0x64
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	1acb      	subs	r3, r1, r3
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	3332      	adds	r3, #50	@ 0x32
 8004040:	4a33      	ldr	r2, [pc, #204]	@ (8004110 <UART_SetConfig+0x4e4>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800404c:	441c      	add	r4, r3
 800404e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004052:	2200      	movs	r2, #0
 8004054:	673b      	str	r3, [r7, #112]	@ 0x70
 8004056:	677a      	str	r2, [r7, #116]	@ 0x74
 8004058:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	1891      	adds	r1, r2, r2
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	415b      	adcs	r3, r3
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800406c:	4641      	mov	r1, r8
 800406e:	1851      	adds	r1, r2, r1
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	4649      	mov	r1, r9
 8004074:	414b      	adcs	r3, r1
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004084:	4659      	mov	r1, fp
 8004086:	00cb      	lsls	r3, r1, #3
 8004088:	4651      	mov	r1, sl
 800408a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800408e:	4651      	mov	r1, sl
 8004090:	00ca      	lsls	r2, r1, #3
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	4603      	mov	r3, r0
 8004098:	4642      	mov	r2, r8
 800409a:	189b      	adds	r3, r3, r2
 800409c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800409e:	464b      	mov	r3, r9
 80040a0:	460a      	mov	r2, r1
 80040a2:	eb42 0303 	adc.w	r3, r2, r3
 80040a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80040b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040c0:	4649      	mov	r1, r9
 80040c2:	008b      	lsls	r3, r1, #2
 80040c4:	4641      	mov	r1, r8
 80040c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ca:	4641      	mov	r1, r8
 80040cc:	008a      	lsls	r2, r1, #2
 80040ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040d2:	f7fc f8ed 	bl	80002b0 <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <UART_SetConfig+0x4e4>)
 80040dc:	fba3 1302 	umull	r1, r3, r3, r2
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	2164      	movs	r1, #100	@ 0x64
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	3332      	adds	r3, #50	@ 0x32
 80040ee:	4a08      	ldr	r2, [pc, #32]	@ (8004110 <UART_SetConfig+0x4e4>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	f003 020f 	and.w	r2, r3, #15
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4422      	add	r2, r4
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800410a:	46bd      	mov	sp, r7
 800410c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004110:	51eb851f 	.word	0x51eb851f

08004114 <mcp_init>:
 */

#include "expander.h"
static I2C_HandleTypeDef *i2c_mcp;

void mcp_init (I2C_HandleTypeDef *i2c){
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	i2c_mcp = i2c;
 800411c:	4a0b      	ldr	r2, [pc, #44]	@ (800414c <mcp_init+0x38>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
	mcp_write_reg(0x00, 0xFF);
 8004122:	21ff      	movs	r1, #255	@ 0xff
 8004124:	2000      	movs	r0, #0
 8004126:	f000 f82d 	bl	8004184 <mcp_write_reg>
	mcp_write_reg(0x0C, 0xFF);
 800412a:	21ff      	movs	r1, #255	@ 0xff
 800412c:	200c      	movs	r0, #12
 800412e:	f000 f829 	bl	8004184 <mcp_write_reg>
	mcp_write_reg(0x01, 0xFF);
 8004132:	21ff      	movs	r1, #255	@ 0xff
 8004134:	2001      	movs	r0, #1
 8004136:	f000 f825 	bl	8004184 <mcp_write_reg>
	mcp_write_reg(0x0D, 0xFF);
 800413a:	21ff      	movs	r1, #255	@ 0xff
 800413c:	200d      	movs	r0, #13
 800413e:	f000 f821 	bl	8004184 <mcp_write_reg>
}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	200001b8 	.word	0x200001b8

08004150 <read_expander>:


bool read_expander(void){
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
	uint8_t o1, o2;
	mcp_read_reg(0x13,  &o1);
 8004156:	1dfb      	adds	r3, r7, #7
 8004158:	4619      	mov	r1, r3
 800415a:	2013      	movs	r0, #19
 800415c:	f000 f830 	bl	80041c0 <mcp_read_reg>
	mcp_read_reg(0x12,  &o2);
 8004160:	1dbb      	adds	r3, r7, #6
 8004162:	4619      	mov	r1, r3
 8004164:	2012      	movs	r0, #18
 8004166:	f000 f82b 	bl	80041c0 <mcp_read_reg>
	return (o1 != 255) | (o2 != 255); //no branching!
 800416a:	79fa      	ldrb	r2, [r7, #7]
 800416c:	79bb      	ldrb	r3, [r7, #6]
 800416e:	4013      	ands	r3, r2
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2bff      	cmp	r3, #255	@ 0xff
 8004174:	bf14      	ite	ne
 8004176:	2301      	movne	r3, #1
 8004178:	2300      	moveq	r3, #0
 800417a:	b2db      	uxtb	r3, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <mcp_write_reg>:

void mcp_write_reg (uint8_t reg_addr, uint8_t mess){
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af04      	add	r7, sp, #16
 800418a:	4603      	mov	r3, r0
 800418c:	460a      	mov	r2, r1
 800418e:	71fb      	strb	r3, [r7, #7]
 8004190:	4613      	mov	r3, r2
 8004192:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(i2c_mcp, SLAVE_ADDRESS_MCP << 1, reg_addr, 1, &mess, 1, HAL_MAX_DELAY);
 8004194:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <mcp_write_reg+0x38>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	b29a      	uxth	r2, r3
 800419c:	f04f 33ff 	mov.w	r3, #4294967295
 80041a0:	9302      	str	r3, [sp, #8]
 80041a2:	2301      	movs	r3, #1
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	1dbb      	adds	r3, r7, #6
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	2301      	movs	r3, #1
 80041ac:	2140      	movs	r1, #64	@ 0x40
 80041ae:	f7fd fbbb 	bl	8001928 <HAL_I2C_Mem_Write>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200001b8 	.word	0x200001b8

080041c0 <mcp_read_reg>:

void mcp_read_reg (uint8_t reg_addr, uint8_t* mess){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af04      	add	r7, sp, #16
 80041c6:	4603      	mov	r3, r0
 80041c8:	6039      	str	r1, [r7, #0]
 80041ca:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_mcp, SLAVE_ADDRESS_MCP<<1, reg_addr, 1, mess, 1, HAL_MAX_DELAY);
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <mcp_read_reg+0x34>)
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	9302      	str	r3, [sp, #8]
 80041da:	2301      	movs	r3, #1
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2301      	movs	r3, #1
 80041e4:	2140      	movs	r1, #64	@ 0x40
 80041e6:	f7fd fc99 	bl	8001b1c <HAL_I2C_Mem_Read>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200001b8 	.word	0x200001b8

080041f8 <flash_write_erase_sector7>:

#include "flash_interface.h"



void flash_write_erase_sector7(){
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY) ;
 80041fc:	bf00      	nop
 80041fe:	4b23      	ldr	r3, [pc, #140]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f9      	bne.n	80041fe <flash_write_erase_sector7+0x6>
  __ASM volatile ("cpsid i" : : : "memory");
 800420a:	b672      	cpsid	i
}
 800420c:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 800420e:	4b1f      	ldr	r3, [pc, #124]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004210:	4a1f      	ldr	r2, [pc, #124]	@ (8004290 <flash_write_erase_sector7+0x98>)
 8004212:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8004214:	4b1d      	ldr	r3, [pc, #116]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004216:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <flash_write_erase_sector7+0x9c>)
 8004218:	605a      	str	r2, [r3, #4]

	//SECTOR 7 ERASE
	FLASH->CR |= FLASH_CR_SER;
 800421a:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <flash_write_erase_sector7+0x94>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	4a1b      	ldr	r2, [pc, #108]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004220:	f043 0302 	orr.w	r3, r3, #2
 8004224:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2;
 8004226:	4b19      	ldr	r3, [pc, #100]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4a18      	ldr	r2, [pc, #96]	@ (800428c <flash_write_erase_sector7+0x94>)
 800422c:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004230:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;
 8004232:	4b16      	ldr	r3, [pc, #88]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	4a15      	ldr	r2, [pc, #84]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423c:	6113      	str	r3, [r2, #16]

	while(FLASH->SR & FLASH_SR_BSY) ;
 800423e:	bf00      	nop
 8004240:	4b12      	ldr	r3, [pc, #72]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f9      	bne.n	8004240 <flash_write_erase_sector7+0x48>
	//RETURN TO INIT STATE
	FLASH->CR &= ~FLASH_CR_STRT;
 800424c:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <flash_write_erase_sector7+0x94>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	4a0e      	ldr	r2, [pc, #56]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004256:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2);
 8004258:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <flash_write_erase_sector7+0x94>)
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	4a0b      	ldr	r2, [pc, #44]	@ (800428c <flash_write_erase_sector7+0x94>)
 800425e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004262:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_SER;
 8004264:	4b09      	ldr	r3, [pc, #36]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	4a08      	ldr	r2, [pc, #32]	@ (800428c <flash_write_erase_sector7+0x94>)
 800426a:	f023 0302 	bic.w	r3, r3, #2
 800426e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 8004270:	4b06      	ldr	r3, [pc, #24]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	4a05      	ldr	r2, [pc, #20]	@ (800428c <flash_write_erase_sector7+0x94>)
 8004276:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800427a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 800427c:	b662      	cpsie	i
}
 800427e:	bf00      	nop

	__enable_irq();
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40023c00 	.word	0x40023c00
 8004290:	45670123 	.word	0x45670123
 8004294:	cdef89ab 	.word	0xcdef89ab

08004298 <flash_write_multiple_word>:



void flash_write_multiple_word(uint32_t addr, uint32_t* data, size_t num){
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	//CHECK IF BUSY
	while(FLASH->SR & FLASH_SR_BSY) ;
 80042a4:	bf00      	nop
 80042a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f9      	bne.n	80042a6 <flash_write_multiple_word+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 80042b2:	b672      	cpsid	i
}
 80042b4:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 80042b6:	4b26      	ldr	r3, [pc, #152]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042b8:	4a26      	ldr	r2, [pc, #152]	@ (8004354 <flash_write_multiple_word+0xbc>)
 80042ba:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 80042bc:	4b24      	ldr	r3, [pc, #144]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042be:	4a26      	ldr	r2, [pc, #152]	@ (8004358 <flash_write_multiple_word+0xc0>)
 80042c0:	605a      	str	r2, [r3, #4]

	//PICK DOUBLE WORD WRITING
	FLASH->CR |= FLASH_CR_PSIZE_1;
 80042c2:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	4a22      	ldr	r2, [pc, #136]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042cc:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_0;
 80042ce:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042d8:	6113      	str	r3, [r2, #16]

	//ENABLE PROGRAMMING MODE
	FLASH->CR |= FLASH_CR_PG;
 80042da:	4b1d      	ldr	r3, [pc, #116]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	4a1c      	ldr	r2, [pc, #112]	@ (8004350 <flash_write_multiple_word+0xb8>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6113      	str	r3, [r2, #16]

	for(size_t i = 0; i < num; ++i){
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e00c      	b.n	8004306 <flash_write_multiple_word+0x6e>
		*((uint32_t *)addr + i) = *(data + i);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	4413      	add	r3, r2
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	0091      	lsls	r1, r2, #2
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	440a      	add	r2, r1
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < num; ++i){
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3301      	adds	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d3ee      	bcc.n	80042ec <flash_write_multiple_word+0x54>
	}

	//WAIT TILL COMPLETES
	while(FLASH->SR & FLASH_SR_BSY) ;
 800430e:	bf00      	nop
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <flash_write_multiple_word+0xb8>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f9      	bne.n	8004310 <flash_write_multiple_word+0x78>
	//TURN OFF PROGRAMMING MODE
	FLASH->CR &= ~FLASH_CR_PG;
 800431c:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <flash_write_multiple_word+0xb8>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	4a0b      	ldr	r2, [pc, #44]	@ (8004350 <flash_write_multiple_word+0xb8>)
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_1;
 8004328:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <flash_write_multiple_word+0xb8>)
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <flash_write_multiple_word+0xb8>)
 800432e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004332:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_LOCK;
 8004334:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <flash_write_multiple_word+0xb8>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	4a05      	ldr	r2, [pc, #20]	@ (8004350 <flash_write_multiple_word+0xb8>)
 800433a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800433e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8004340:	b662      	cpsie	i
}
 8004342:	bf00      	nop
	__enable_irq();
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40023c00 	.word	0x40023c00
 8004354:	45670123 	.word	0x45670123
 8004358:	cdef89ab 	.word	0xcdef89ab

0800435c <flash_read_multiple_words>:




void flash_read_multiple_words(uint32_t addr, uint32_t* data, size_t n){
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
	for(size_t i = 0; i < n; ++i){
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e00d      	b.n	800438a <flash_read_multiple_words+0x2e>
		*(data + i) = *((uint32_t*)addr + i);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	009a      	lsls	r2, r3, #2
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	4619      	mov	r1, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	4413      	add	r3, r2
 8004380:	680a      	ldr	r2, [r1, #0]
 8004382:	601a      	str	r2, [r3, #0]
	for(size_t i = 0; i < n; ++i){
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3301      	adds	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	429a      	cmp	r2, r3
 8004390:	d3ed      	bcc.n	800436e <flash_read_multiple_words+0x12>
	}
}
 8004392:	bf00      	nop
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <set_column>:
static char x;
static uint32_t i = 0;
static uint32_t lastDebounceTime[12];
static bool keyState[12] = {};

void set_column(uint8_t col, GPIO_PinState state){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	460a      	mov	r2, r1
 80043aa:	71fb      	strb	r3, [r7, #7]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71bb      	strb	r3, [r7, #6]
	switch(col){
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d014      	beq.n	80043e0 <set_column+0x40>
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	dc19      	bgt.n	80043ee <set_column+0x4e>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <set_column+0x24>
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d007      	beq.n	80043d2 <set_column+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
		break;
	}
}
 80043c2:	e014      	b.n	80043ee <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col1_Pin, state);
 80043c4:	79bb      	ldrb	r3, [r7, #6]
 80043c6:	461a      	mov	r2, r3
 80043c8:	2110      	movs	r1, #16
 80043ca:	480b      	ldr	r0, [pc, #44]	@ (80043f8 <set_column+0x58>)
 80043cc:	f7fd f850 	bl	8001470 <HAL_GPIO_WritePin>
		break;
 80043d0:	e00d      	b.n	80043ee <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col2_Pin, state);
 80043d2:	79bb      	ldrb	r3, [r7, #6]
 80043d4:	461a      	mov	r2, r3
 80043d6:	2140      	movs	r1, #64	@ 0x40
 80043d8:	4807      	ldr	r0, [pc, #28]	@ (80043f8 <set_column+0x58>)
 80043da:	f7fd f849 	bl	8001470 <HAL_GPIO_WritePin>
		break;
 80043de:	e006      	b.n	80043ee <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
 80043e0:	79bb      	ldrb	r3, [r7, #6]
 80043e2:	461a      	mov	r2, r3
 80043e4:	2104      	movs	r1, #4
 80043e6:	4804      	ldr	r0, [pc, #16]	@ (80043f8 <set_column+0x58>)
 80043e8:	f7fd f842 	bl	8001470 <HAL_GPIO_WritePin>
		break;
 80043ec:	bf00      	nop
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40020000 	.word	0x40020000

080043fc <handle_key_press>:
void handle_key_press(uint8_t col, uint8_t row){
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	460a      	mov	r2, r1
 8004406:	71fb      	strb	r3, [r7, #7]
 8004408:	4613      	mov	r3, r2
 800440a:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 1;
 800440c:	79ba      	ldrb	r2, [r7, #6]
 800440e:	4613      	mov	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	441a      	add	r2, r3
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	4413      	add	r3, r2
 8004418:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <handle_key_press+0x48>)
 800441a:	2101      	movs	r1, #1
 800441c:	54d1      	strb	r1, [r2, r3]
	x = (row) * 3 + col + 1;
 800441e:	79bb      	ldrb	r3, [r7, #6]
 8004420:	461a      	mov	r2, r3
 8004422:	0052      	lsls	r2, r2, #1
 8004424:	4413      	add	r3, r2
 8004426:	b2da      	uxtb	r2, r3
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	4413      	add	r3, r2
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3301      	adds	r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <handle_key_press+0x4c>)
 8004434:	701a      	strb	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	200001f4 	.word	0x200001f4
 8004448:	200001bc 	.word	0x200001bc

0800444c <handle_key_reset>:
void handle_key_reset(uint8_t col, uint8_t row){
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	460a      	mov	r2, r1
 8004456:	71fb      	strb	r3, [r7, #7]
 8004458:	4613      	mov	r3, r2
 800445a:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 0;
 800445c:	79ba      	ldrb	r2, [r7, #6]
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	441a      	add	r2, r3
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	4413      	add	r3, r2
 8004468:	4a04      	ldr	r2, [pc, #16]	@ (800447c <handle_key_reset+0x30>)
 800446a:	2100      	movs	r1, #0
 800446c:	54d1      	strb	r1, [r2, r3]
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	200001f4 	.word	0x200001f4

08004480 <read_row>:

GPIO_PinState read_row(uint8_t row){
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
	switch(row){
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d823      	bhi.n	80044d8 <read_row+0x58>
 8004490:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <read_row+0x18>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044b5 	.word	0x080044b5
 80044a0:	080044c1 	.word	0x080044c1
 80044a4:	080044cd 	.word	0x080044cd
		case 0:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row1_Pin);
 80044a8:	2120      	movs	r1, #32
 80044aa:	480e      	ldr	r0, [pc, #56]	@ (80044e4 <read_row+0x64>)
 80044ac:	f7fc ffc8 	bl	8001440 <HAL_GPIO_ReadPin>
 80044b0:	4603      	mov	r3, r0
 80044b2:	e012      	b.n	80044da <read_row+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row2_Pin);
 80044b4:	2101      	movs	r1, #1
 80044b6:	480b      	ldr	r0, [pc, #44]	@ (80044e4 <read_row+0x64>)
 80044b8:	f7fc ffc2 	bl	8001440 <HAL_GPIO_ReadPin>
 80044bc:	4603      	mov	r3, r0
 80044be:	e00c      	b.n	80044da <read_row+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row3_Pin);
 80044c0:	2102      	movs	r1, #2
 80044c2:	4808      	ldr	r0, [pc, #32]	@ (80044e4 <read_row+0x64>)
 80044c4:	f7fc ffbc 	bl	8001440 <HAL_GPIO_ReadPin>
 80044c8:	4603      	mov	r3, r0
 80044ca:	e006      	b.n	80044da <read_row+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row4_Pin);
 80044cc:	2108      	movs	r1, #8
 80044ce:	4805      	ldr	r0, [pc, #20]	@ (80044e4 <read_row+0x64>)
 80044d0:	f7fc ffb6 	bl	8001440 <HAL_GPIO_ReadPin>
 80044d4:	4603      	mov	r3, r0
 80044d6:	e000      	b.n	80044da <read_row+0x5a>
			break;
	}
	return 1;
 80044d8:	2301      	movs	r3, #1
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40020000 	.word	0x40020000

080044e8 <check_keyboard>:
char check_keyboard(void){
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
	x = 0;
 80044ee:	4b36      	ldr	r3, [pc, #216]	@ (80045c8 <check_keyboard+0xe0>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
	i = 0;
 80044f4:	4b35      	ldr	r3, [pc, #212]	@ (80045cc <check_keyboard+0xe4>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
	for (int col = 0; col < 3; col++) {
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e059      	b.n	80045b4 <check_keyboard+0xcc>
	    set_column(col, GPIO_PIN_RESET);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff4a 	bl	80043a0 <set_column>
	    for (int row = 0; row < 4; row++) {
 800450c:	2300      	movs	r3, #0
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e044      	b.n	800459c <check_keyboard+0xb4>
	    	uint32_t t = HAL_GetTick();
 8004512:	f7fc fc3d 	bl	8000d90 <HAL_GetTick>
 8004516:	6078      	str	r0, [r7, #4]
	    	if(t - lastDebounceTime[(row) * 3 + col] > DEBOUNCE_TIME){
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	441a      	add	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	4a2a      	ldr	r2, [pc, #168]	@ (80045d0 <check_keyboard+0xe8>)
 8004526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b0f      	cmp	r3, #15
 8004530:	d931      	bls.n	8004596 <check_keyboard+0xae>
				if (read_row(row) == GPIO_PIN_RESET) {
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ffa2 	bl	8004480 <read_row>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d121      	bne.n	8004586 <check_keyboard+0x9e>
					if(!keyState[(row) * 3 + col])
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	4613      	mov	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	441a      	add	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	4a21      	ldr	r2, [pc, #132]	@ (80045d4 <check_keyboard+0xec>)
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	f083 0301 	eor.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <check_keyboard+0x84>
						handle_key_press(col, row);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ff48 	bl	80043fc <handle_key_press>
					lastDebounceTime[(row) * 3 + col] = HAL_GetTick();
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	4613      	mov	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	18d4      	adds	r4, r2, r3
 8004578:	f7fc fc0a 	bl	8000d90 <HAL_GetTick>
 800457c:	4603      	mov	r3, r0
 800457e:	4a14      	ldr	r2, [pc, #80]	@ (80045d0 <check_keyboard+0xe8>)
 8004580:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004584:	e007      	b.n	8004596 <check_keyboard+0xae>
				}
				else{
					handle_key_reset(col, row);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff5b 	bl	800444c <handle_key_reset>
	    for (int row = 0; row < 4; row++) {
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	ddb7      	ble.n	8004512 <check_keyboard+0x2a>
				}
	    	}
	    }
	    set_column(col, GPIO_PIN_SET);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2101      	movs	r1, #1
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fef9 	bl	80043a0 <set_column>
	for (int col = 0; col < 3; col++) {
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3301      	adds	r3, #1
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	dda2      	ble.n	8004500 <check_keyboard+0x18>
	}
	return x;
 80045ba:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <check_keyboard+0xe0>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd90      	pop	{r4, r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200001bc 	.word	0x200001bc
 80045cc:	200001c0 	.word	0x200001c0
 80045d0:	200001c4 	.word	0x200001c4
 80045d4:	200001f4 	.word	0x200001f4

080045d8 <lcd_send_cmd>:
 */
#include "lcd_driver.h"
static I2C_HandleTypeDef* hi2c1;

void lcd_send_cmd (char cmd)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af02      	add	r7, sp, #8
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	f023 030f 	bic.w	r3, r3, #15
 80045e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	f043 030c 	orr.w	r3, r3, #12
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	f043 0308 	orr.w	r3, r3, #8
 8004600:	b2db      	uxtb	r3, r3
 8004602:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8004604:	7bbb      	ldrb	r3, [r7, #14]
 8004606:	f043 030c 	orr.w	r3, r3, #12
 800460a:	b2db      	uxtb	r3, r3
 800460c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800460e:	7bbb      	ldrb	r3, [r7, #14]
 8004610:	f043 0308 	orr.w	r3, r3, #8
 8004614:	b2db      	uxtb	r3, r3
 8004616:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004618:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <lcd_send_cmd+0x5c>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	f107 0208 	add.w	r2, r7, #8
 8004620:	2364      	movs	r3, #100	@ 0x64
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2304      	movs	r3, #4
 8004626:	214e      	movs	r1, #78	@ 0x4e
 8004628:	f7fd f880 	bl	800172c <HAL_I2C_Master_Transmit>
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20000200 	.word	0x20000200

08004638 <lcd_send_data>:

void lcd_send_data (char data)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af02      	add	r7, sp, #8
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	f023 030f 	bic.w	r3, r3, #15
 8004648:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	f043 030d 	orr.w	r3, r3, #13
 8004656:	b2db      	uxtb	r3, r3
 8004658:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	f043 0309 	orr.w	r3, r3, #9
 8004660:	b2db      	uxtb	r3, r3
 8004662:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8004664:	7bbb      	ldrb	r3, [r7, #14]
 8004666:	f043 030d 	orr.w	r3, r3, #13
 800466a:	b2db      	uxtb	r3, r3
 800466c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 800466e:	7bbb      	ldrb	r3, [r7, #14]
 8004670:	f043 0309 	orr.w	r3, r3, #9
 8004674:	b2db      	uxtb	r3, r3
 8004676:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8004678:	4b06      	ldr	r3, [pc, #24]	@ (8004694 <lcd_send_data+0x5c>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	f107 0208 	add.w	r2, r7, #8
 8004680:	2364      	movs	r3, #100	@ 0x64
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	2304      	movs	r3, #4
 8004686:	214e      	movs	r1, #78	@ 0x4e
 8004688:	f7fd f850 	bl	800172c <HAL_I2C_Master_Transmit>
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	20000200 	.word	0x20000200

08004698 <lcd_init>:

void lcd_init (I2C_HandleTypeDef* i2c)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	hi2c1 = i2c;
 80046a0:	4a1e      	ldr	r2, [pc, #120]	@ (800471c <lcd_init+0x84>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80046a6:	2032      	movs	r0, #50	@ 0x32
 80046a8:	f7fc fb7e 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80046ac:	2030      	movs	r0, #48	@ 0x30
 80046ae:	f7ff ff93 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80046b2:	2005      	movs	r0, #5
 80046b4:	f7fc fb78 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80046b8:	2030      	movs	r0, #48	@ 0x30
 80046ba:	f7ff ff8d 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80046be:	2001      	movs	r0, #1
 80046c0:	f7fc fb72 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80046c4:	2030      	movs	r0, #48	@ 0x30
 80046c6:	f7ff ff87 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(10);
 80046ca:	200a      	movs	r0, #10
 80046cc:	f7fc fb6c 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80046d0:	2020      	movs	r0, #32
 80046d2:	f7ff ff81 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(10);
 80046d6:	200a      	movs	r0, #10
 80046d8:	f7fc fb66 	bl	8000da8 <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80046dc:	2028      	movs	r0, #40	@ 0x28
 80046de:	f7ff ff7b 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(1);
 80046e2:	2001      	movs	r0, #1
 80046e4:	f7fc fb60 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80046e8:	2008      	movs	r0, #8
 80046ea:	f7ff ff75 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(1);
 80046ee:	2001      	movs	r0, #1
 80046f0:	f7fc fb5a 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80046f4:	2001      	movs	r0, #1
 80046f6:	f7ff ff6f 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(2);
 80046fa:	2002      	movs	r0, #2
 80046fc:	f7fc fb54 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8004700:	2006      	movs	r0, #6
 8004702:	f7ff ff69 	bl	80045d8 <lcd_send_cmd>
	HAL_Delay(1);
 8004706:	2001      	movs	r0, #1
 8004708:	f7fc fb4e 	bl	8000da8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800470c:	200c      	movs	r0, #12
 800470e:	f7ff ff63 	bl	80045d8 <lcd_send_cmd>
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000200 	.word	0x20000200

08004720 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8004728:	e006      	b.n	8004738 <lcd_send_string+0x18>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ff80 	bl	8004638 <lcd_send_data>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f4      	bne.n	800472a <lcd_send_string+0xa>
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <lcd_clear>:

void lcd_clear(void){
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 8004750:	2100      	movs	r1, #0
 8004752:	2000      	movs	r0, #0
 8004754:	f000 f80e 	bl	8004774 <lcd_put_cur>
	  lcd_send_string ("                ");
 8004758:	4805      	ldr	r0, [pc, #20]	@ (8004770 <lcd_clear+0x24>)
 800475a:	f7ff ffe1 	bl	8004720 <lcd_send_string>
	  lcd_put_cur(1, 0);
 800475e:	2100      	movs	r1, #0
 8004760:	2001      	movs	r0, #1
 8004762:	f000 f807 	bl	8004774 <lcd_put_cur>
	  lcd_send_string ("                ");
 8004766:	4802      	ldr	r0, [pc, #8]	@ (8004770 <lcd_clear+0x24>)
 8004768:	f7ff ffda 	bl	8004720 <lcd_send_string>
}
 800476c:	bf00      	nop
 800476e:	bd80      	pop	{r7, pc}
 8004770:	080063ac 	.word	0x080063ac

08004774 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
	switch (row)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <lcd_put_cur+0x18>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d005      	beq.n	8004796 <lcd_put_cur+0x22>
 800478a:	e009      	b.n	80047a0 <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004792:	603b      	str	r3, [r7, #0]
			break;
 8004794:	e004      	b.n	80047a0 <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800479c:	603b      	str	r3, [r7, #0]
			break;
 800479e:	bf00      	nop
	}
	lcd_send_cmd (col);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff ff17 	bl	80045d8 <lcd_send_cmd>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <gsm_init>:
// 3: ">" received, message body "ALARM!!!\r" is being/has been transmitted. TxCpltCallback for this will trigger sending CTRL+Z.
// 4: CTRL+Z sent. Waiting for final "+CMGS: xx" and/or "OK" response.
static uint8_t msg_num = 0;


void gsm_init(UART_HandleTypeDef* uart){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	SIM800L_uart = uart;
 80047bc:	4a06      	ldr	r2, [pc, #24]	@ (80047d8 <gsm_init+0x24>)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
 80047c2:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <gsm_init+0x24>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2201      	movs	r2, #1
 80047c8:	4904      	ldr	r1, [pc, #16]	@ (80047dc <gsm_init+0x28>)
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fd75 	bl	80032ba <HAL_UART_Receive_IT>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000204 	.word	0x20000204
 80047dc:	20000244 	.word	0x20000244

080047e0 <advance_queue_and_proceed>:

// Helper function to advance the queue and start next message or stop
static void advance_queue_and_proceed() {
 80047e0:	b598      	push	{r3, r4, r7, lr}
 80047e2:	af00      	add	r7, sp, #0
    queue_len--;
 80047e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004858 <advance_queue_and_proceed+0x78>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <advance_queue_and_proceed+0x78>)
 80047ee:	701a      	strb	r2, [r3, #0]
    queue_id = (queue_id + 1) % 6;
 80047f0:	4b1a      	ldr	r3, [pc, #104]	@ (800485c <advance_queue_and_proceed+0x7c>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004860 <advance_queue_and_proceed+0x80>)
 80047f8:	fb83 3102 	smull	r3, r1, r3, r2
 80047fc:	17d3      	asrs	r3, r2, #31
 80047fe:	1ac9      	subs	r1, r1, r3
 8004800:	460b      	mov	r3, r1
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	440b      	add	r3, r1
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	1ad1      	subs	r1, r2, r3
 800480a:	b2ca      	uxtb	r2, r1
 800480c:	4b13      	ldr	r3, [pc, #76]	@ (800485c <advance_queue_and_proceed+0x7c>)
 800480e:	701a      	strb	r2, [r3, #0]

    if (queue_len > 0) { // If there are more messages in the queue
 8004810:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <advance_queue_and_proceed+0x78>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d017      	beq.n	8004848 <advance_queue_and_proceed+0x68>
        msg_num = 0; // Reset state for the next message
 8004818:	4b12      	ldr	r3, [pc, #72]	@ (8004864 <advance_queue_and_proceed+0x84>)
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
        strcpy(send_buf, "AT+COPS?\r\n"); // Start sequence for next SMS
 800481e:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <advance_queue_and_proceed+0x88>)
 8004820:	4a12      	ldr	r2, [pc, #72]	@ (800486c <advance_queue_and_proceed+0x8c>)
 8004822:	ca07      	ldmia	r2, {r0, r1, r2}
 8004824:	c303      	stmia	r3!, {r0, r1}
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	3302      	adds	r3, #2
 800482a:	0c12      	lsrs	r2, r2, #16
 800482c:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 800482e:	4b10      	ldr	r3, [pc, #64]	@ (8004870 <advance_queue_and_proceed+0x90>)
 8004830:	681c      	ldr	r4, [r3, #0]
 8004832:	480d      	ldr	r0, [pc, #52]	@ (8004868 <advance_queue_and_proceed+0x88>)
 8004834:	f7fb fcde 	bl	80001f4 <strlen>
 8004838:	4603      	mov	r3, r0
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	490a      	ldr	r1, [pc, #40]	@ (8004868 <advance_queue_and_proceed+0x88>)
 8004840:	4620      	mov	r0, r4
 8004842:	f7fe fd04 	bl	800324e <HAL_UART_Transmit_IT>
    } else { // Queue is empty
        msg_sending = false;
        msg_num = 0; // Reset state
    }
}
 8004846:	e005      	b.n	8004854 <advance_queue_and_proceed+0x74>
        msg_sending = false;
 8004848:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <advance_queue_and_proceed+0x94>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
        msg_num = 0; // Reset state
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <advance_queue_and_proceed+0x84>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	bd98      	pop	{r3, r4, r7, pc}
 8004858:	20000260 	.word	0x20000260
 800485c:	20000261 	.word	0x20000261
 8004860:	2aaaaaab 	.word	0x2aaaaaab
 8004864:	20000262 	.word	0x20000262
 8004868:	20000208 	.word	0x20000208
 800486c:	080063c0 	.word	0x080063c0
 8004870:	20000204 	.word	0x20000204
 8004874:	20000245 	.word	0x20000245

08004878 <gsm_sms_queue>:

void gsm_sms_queue(char * number){
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	if (number == NULL || *number == '\0') return;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d043      	beq.n	800490e <gsm_sms_queue+0x96>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03f      	beq.n	800490e <gsm_sms_queue+0x96>

	if(queue_len < 6) { // Check if queue has space
 800488e:	4b23      	ldr	r3, [pc, #140]	@ (800491c <gsm_sms_queue+0xa4>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b05      	cmp	r3, #5
 8004894:	d83d      	bhi.n	8004912 <gsm_sms_queue+0x9a>
		queue[(queue_id + queue_len) % 6] = (uint8_t*)number;
 8004896:	4b22      	ldr	r3, [pc, #136]	@ (8004920 <gsm_sms_queue+0xa8>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	4b1f      	ldr	r3, [pc, #124]	@ (800491c <gsm_sms_queue+0xa4>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	18d1      	adds	r1, r2, r3
 80048a2:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <gsm_sms_queue+0xac>)
 80048a4:	fb83 3201 	smull	r3, r2, r3, r1
 80048a8:	17cb      	asrs	r3, r1, #31
 80048aa:	1ad2      	subs	r2, r2, r3
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	1aca      	subs	r2, r1, r3
 80048b6:	491c      	ldr	r1, [pc, #112]	@ (8004928 <gsm_sms_queue+0xb0>)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		queue_len++;
 80048be:	4b17      	ldr	r3, [pc, #92]	@ (800491c <gsm_sms_queue+0xa4>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4b15      	ldr	r3, [pc, #84]	@ (800491c <gsm_sms_queue+0xa4>)
 80048c8:	701a      	strb	r2, [r3, #0]
	} else {
		// Queue is full, new number is not added.
		return;
	}

	if(!msg_sending)  { // If not already sending a message, start the process
 80048ca:	4b18      	ldr	r3, [pc, #96]	@ (800492c <gsm_sms_queue+0xb4>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	f083 0301 	eor.w	r3, r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01d      	beq.n	8004914 <gsm_sms_queue+0x9c>
		msg_sending = true;
 80048d8:	4b14      	ldr	r3, [pc, #80]	@ (800492c <gsm_sms_queue+0xb4>)
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
		msg_num = 0;
 80048de:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <gsm_sms_queue+0xb8>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
		strcpy(send_buf, "AT+COPS?\r\n");
 80048e4:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <gsm_sms_queue+0xbc>)
 80048e6:	4a14      	ldr	r2, [pc, #80]	@ (8004938 <gsm_sms_queue+0xc0>)
 80048e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80048ea:	c303      	stmia	r3!, {r0, r1}
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	3302      	adds	r3, #2
 80048f0:	0c12      	lsrs	r2, r2, #16
 80048f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 80048f4:	4b11      	ldr	r3, [pc, #68]	@ (800493c <gsm_sms_queue+0xc4>)
 80048f6:	681c      	ldr	r4, [r3, #0]
 80048f8:	480e      	ldr	r0, [pc, #56]	@ (8004934 <gsm_sms_queue+0xbc>)
 80048fa:	f7fb fc7b 	bl	80001f4 <strlen>
 80048fe:	4603      	mov	r3, r0
 8004900:	b29b      	uxth	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	490b      	ldr	r1, [pc, #44]	@ (8004934 <gsm_sms_queue+0xbc>)
 8004906:	4620      	mov	r0, r4
 8004908:	f7fe fca1 	bl	800324e <HAL_UART_Transmit_IT>
 800490c:	e002      	b.n	8004914 <gsm_sms_queue+0x9c>
	if (number == NULL || *number == '\0') return;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <gsm_sms_queue+0x9c>
		return;
 8004912:	bf00      	nop
	}
}
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bd90      	pop	{r4, r7, pc}
 800491a:	bf00      	nop
 800491c:	20000260 	.word	0x20000260
 8004920:	20000261 	.word	0x20000261
 8004924:	2aaaaaab 	.word	0x2aaaaaab
 8004928:	20000248 	.word	0x20000248
 800492c:	20000245 	.word	0x20000245
 8004930:	20000262 	.word	0x20000262
 8004934:	20000208 	.word	0x20000208
 8004938:	080063c0 	.word	0x080063c0
 800493c:	20000204 	.word	0x20000204

08004940 <HAL_UART_TxCpltCallback>:
	HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, 1, 100);
}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	if (huart->Instance != SIM800L_uart->Instance) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b0f      	ldr	r3, [pc, #60]	@ (800498c <HAL_UART_TxCpltCallback+0x4c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d115      	bne.n	8004982 <HAL_UART_TxCpltCallback+0x42>
		return;
	}

	if (msg_sending) {
 8004956:	4b0e      	ldr	r3, [pc, #56]	@ (8004990 <HAL_UART_TxCpltCallback+0x50>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d012      	beq.n	8004984 <HAL_UART_TxCpltCallback+0x44>
		// This callback signifies that the previous HAL_UART_Transmit_IT has finished.
		// It's primarily used here to send CTRL+Z immediately after the SMS body.
		if (msg_num == 3) { // Message body "ALARM!!!\r" has just finished transmitting
 800495e:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <HAL_UART_TxCpltCallback+0x54>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d10e      	bne.n	8004984 <HAL_UART_TxCpltCallback+0x44>
			msg_num = 4;      // Next state: CTRL+Z is about to be sent.
 8004966:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_UART_TxCpltCallback+0x54>)
 8004968:	2204      	movs	r2, #4
 800496a:	701a      	strb	r2, [r3, #0]
			send_buf[0] = 0x1A; // CTRL+Z character
 800496c:	4b0a      	ldr	r3, [pc, #40]	@ (8004998 <HAL_UART_TxCpltCallback+0x58>)
 800496e:	221a      	movs	r2, #26
 8004970:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, 1);
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <HAL_UART_TxCpltCallback+0x4c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	4907      	ldr	r1, [pc, #28]	@ (8004998 <HAL_UART_TxCpltCallback+0x58>)
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fc67 	bl	800324e <HAL_UART_Transmit_IT>
 8004980:	e000      	b.n	8004984 <HAL_UART_TxCpltCallback+0x44>
		return;
 8004982:	bf00      	nop
		}
	}
}
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000204 	.word	0x20000204
 8004990:	20000245 	.word	0x20000245
 8004994:	20000262 	.word	0x20000262
 8004998:	20000208 	.word	0x20000208

0800499c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	static char buf[100];    // Buffer for received line
	static uint8_t len = 0;  // Current length of data in buf

	if (huart->Instance != SIM800L_uart->Instance) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ba4 <HAL_UART_RxCpltCallback+0x208>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d005      	beq.n	80049be <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(huart, &new_char, 1);
 80049b2:	2201      	movs	r2, #1
 80049b4:	497c      	ldr	r1, [pc, #496]	@ (8004ba8 <HAL_UART_RxCpltCallback+0x20c>)
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fe fc7f 	bl	80032ba <HAL_UART_Receive_IT>
		return;
 80049bc:	e0ef      	b.n	8004b9e <HAL_UART_RxCpltCallback+0x202>
	}

	// Accumulate character if it's not a CR. LF will be the primary line delimiter.
	if (new_char != '\r') {
 80049be:	4b7a      	ldr	r3, [pc, #488]	@ (8004ba8 <HAL_UART_RxCpltCallback+0x20c>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b0d      	cmp	r3, #13
 80049c4:	d01d      	beq.n	8004a02 <HAL_UART_RxCpltCallback+0x66>
		if (len < (sizeof(buf) - 1)) {
 80049c6:	4b79      	ldr	r3, [pc, #484]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b62      	cmp	r3, #98	@ 0x62
 80049cc:	d811      	bhi.n	80049f2 <HAL_UART_RxCpltCallback+0x56>
			buf[len++] = new_char;
 80049ce:	4b77      	ldr	r3, [pc, #476]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	b2d1      	uxtb	r1, r2
 80049d6:	4a75      	ldr	r2, [pc, #468]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 80049d8:	7011      	strb	r1, [r2, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	4b72      	ldr	r3, [pc, #456]	@ (8004ba8 <HAL_UART_RxCpltCallback+0x20c>)
 80049de:	7819      	ldrb	r1, [r3, #0]
 80049e0:	4b73      	ldr	r3, [pc, #460]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 80049e2:	5499      	strb	r1, [r3, r2]
			buf[len] = '\0'; // Keep null-terminated
 80049e4:	4b71      	ldr	r3, [pc, #452]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b71      	ldr	r3, [pc, #452]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 80049ec:	2100      	movs	r1, #0
 80049ee:	5499      	strb	r1, [r3, r2]
 80049f0:	e007      	b.n	8004a02 <HAL_UART_RxCpltCallback+0x66>
		} else {
			// Buffer overflow, reset to be safe.
			len = 0;
 80049f2:	4b6e      	ldr	r3, [pc, #440]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
			memset(buf, 0, sizeof(buf));
 80049f8:	2264      	movs	r2, #100	@ 0x64
 80049fa:	2100      	movs	r1, #0
 80049fc:	486c      	ldr	r0, [pc, #432]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 80049fe:	f001 f833 	bl	8005a68 <memset>
		}
	}

	// Check for "> " prompt specifically when waiting for it (state 2)
	if (msg_sending && msg_num == 2) {
 8004a02:	4b6c      	ldr	r3, [pc, #432]	@ (8004bb4 <HAL_UART_RxCpltCallback+0x218>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d039      	beq.n	8004a7e <HAL_UART_RxCpltCallback+0xe2>
 8004a0a:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb8 <HAL_UART_RxCpltCallback+0x21c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d135      	bne.n	8004a7e <HAL_UART_RxCpltCallback+0xe2>
		if (len >= 2 && buf[len-2] == '>' && buf[len-1] == ' ') {
 8004a12:	4b66      	ldr	r3, [pc, #408]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d931      	bls.n	8004a7e <HAL_UART_RxCpltCallback+0xe2>
 8004a1a:	4b64      	ldr	r3, [pc, #400]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	3b02      	subs	r3, #2
 8004a20:	4a63      	ldr	r2, [pc, #396]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004a22:	5cd3      	ldrb	r3, [r2, r3]
 8004a24:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a26:	d12a      	bne.n	8004a7e <HAL_UART_RxCpltCallback+0xe2>
 8004a28:	4b60      	ldr	r3, [pc, #384]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4a60      	ldr	r2, [pc, #384]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004a30:	5cd3      	ldrb	r3, [r2, r3]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d123      	bne.n	8004a7e <HAL_UART_RxCpltCallback+0xe2>
			// Prompt detected
			msg_num = 3;
 8004a36:	4b60      	ldr	r3, [pc, #384]	@ (8004bb8 <HAL_UART_RxCpltCallback+0x21c>)
 8004a38:	2203      	movs	r2, #3
 8004a3a:	701a      	strb	r2, [r3, #0]
			strcpy(send_buf, "ALARM!!!\r"); // SMS content
 8004a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004a3e:	4a60      	ldr	r2, [pc, #384]	@ (8004bc0 <HAL_UART_RxCpltCallback+0x224>)
 8004a40:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a42:	c303      	stmia	r3!, {r0, r1}
 8004a44:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8004a46:	4b57      	ldr	r3, [pc, #348]	@ (8004ba4 <HAL_UART_RxCpltCallback+0x208>)
 8004a48:	681c      	ldr	r4, [r3, #0]
 8004a4a:	485c      	ldr	r0, [pc, #368]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004a4c:	f7fb fbd2 	bl	80001f4 <strlen>
 8004a50:	4603      	mov	r3, r0
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	4959      	ldr	r1, [pc, #356]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7fe fbf8 	bl	800324e <HAL_UART_Transmit_IT>
			// TxCpltCallback will handle sending CTRL+Z after this.

			len = 0; // Reset buffer as the prompt has been consumed
 8004a5e:	4b53      	ldr	r3, [pc, #332]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
			memset(buf, 0, sizeof(buf));
 8004a64:	2264      	movs	r2, #100	@ 0x64
 8004a66:	2100      	movs	r1, #0
 8004a68:	4851      	ldr	r0, [pc, #324]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004a6a:	f000 fffd 	bl	8005a68 <memset>
			HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
 8004a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba4 <HAL_UART_RxCpltCallback+0x208>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	494c      	ldr	r1, [pc, #304]	@ (8004ba8 <HAL_UART_RxCpltCallback+0x20c>)
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fc1f 	bl	80032ba <HAL_UART_Receive_IT>
			return; // Exit after handling the prompt
 8004a7c:	e08f      	b.n	8004b9e <HAL_UART_RxCpltCallback+0x202>
		}
	}

	// Process full lines on encountering a Newline character
	if (new_char == '\n') {
 8004a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba8 <HAL_UART_RxCpltCallback+0x20c>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b0a      	cmp	r3, #10
 8004a84:	f040 8084 	bne.w	8004b90 <HAL_UART_RxCpltCallback+0x1f4>
		if (len > 0) { // Process if buffer has content
 8004a88:	4b48      	ldr	r3, [pc, #288]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d077      	beq.n	8004b80 <HAL_UART_RxCpltCallback+0x1e4>
			if (msg_sending) {
 8004a90:	4b48      	ldr	r3, [pc, #288]	@ (8004bb4 <HAL_UART_RxCpltCallback+0x218>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d073      	beq.n	8004b80 <HAL_UART_RxCpltCallback+0x1e4>
				// Optional: Print received line for debugging
				// printf("SIM RX Line (State %d): %s", msg_num, buf);

				if (strstr(buf, "ERROR") != NULL) {
 8004a98:	494a      	ldr	r1, [pc, #296]	@ (8004bc4 <HAL_UART_RxCpltCallback+0x228>)
 8004a9a:	4845      	ldr	r0, [pc, #276]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004a9c:	f000 ffec 	bl	8005a78 <strstr>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_UART_RxCpltCallback+0x110>
					// Handle error: Skip current message and try the next.
					advance_queue_and_proceed();
 8004aa6:	f7ff fe9b 	bl	80047e0 <advance_queue_and_proceed>
 8004aaa:	e069      	b.n	8004b80 <HAL_UART_RxCpltCallback+0x1e4>
				} else {
					// Handle "OK" and other expected full-line responses based on current state
					switch (msg_num) {
 8004aac:	4b42      	ldr	r3, [pc, #264]	@ (8004bb8 <HAL_UART_RxCpltCallback+0x21c>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d865      	bhi.n	8004b80 <HAL_UART_RxCpltCallback+0x1e4>
 8004ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <HAL_UART_RxCpltCallback+0x120>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004ad1 	.word	0x08004ad1
 8004ac0:	08004b09 	.word	0x08004b09
 8004ac4:	08004b81 	.word	0x08004b81
 8004ac8:	08004b81 	.word	0x08004b81
 8004acc:	08004b5d 	.word	0x08004b5d
						case 0: // Waiting for "OK" after AT+COPS?
							if (strstr(buf, "OK") != NULL) {
 8004ad0:	493d      	ldr	r1, [pc, #244]	@ (8004bc8 <HAL_UART_RxCpltCallback+0x22c>)
 8004ad2:	4837      	ldr	r0, [pc, #220]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004ad4:	f000 ffd0 	bl	8005a78 <strstr>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04d      	beq.n	8004b7a <HAL_UART_RxCpltCallback+0x1de>
								msg_num = 1;
 8004ade:	4b36      	ldr	r3, [pc, #216]	@ (8004bb8 <HAL_UART_RxCpltCallback+0x21c>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
								strcpy(send_buf, "AT+CMGF=1\r\n");
 8004ae4:	4b35      	ldr	r3, [pc, #212]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004ae6:	4a39      	ldr	r2, [pc, #228]	@ (8004bcc <HAL_UART_RxCpltCallback+0x230>)
 8004ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8004aee:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba4 <HAL_UART_RxCpltCallback+0x208>)
 8004af0:	681c      	ldr	r4, [r3, #0]
 8004af2:	4832      	ldr	r0, [pc, #200]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004af4:	f7fb fb7e 	bl	80001f4 <strlen>
 8004af8:	4603      	mov	r3, r0
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	492f      	ldr	r1, [pc, #188]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004b00:	4620      	mov	r0, r4
 8004b02:	f7fe fba4 	bl	800324e <HAL_UART_Transmit_IT>
							}
							break;
 8004b06:	e038      	b.n	8004b7a <HAL_UART_RxCpltCallback+0x1de>
						case 1: // Waiting for "OK" after AT+CMGF=1
							if (strstr(buf, "OK") != NULL) {
 8004b08:	492f      	ldr	r1, [pc, #188]	@ (8004bc8 <HAL_UART_RxCpltCallback+0x22c>)
 8004b0a:	4829      	ldr	r0, [pc, #164]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004b0c:	f000 ffb4 	bl	8005a78 <strstr>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d033      	beq.n	8004b7e <HAL_UART_RxCpltCallback+0x1e2>
								msg_num = 2;
 8004b16:	4b28      	ldr	r3, [pc, #160]	@ (8004bb8 <HAL_UART_RxCpltCallback+0x21c>)
 8004b18:	2202      	movs	r2, #2
 8004b1a:	701a      	strb	r2, [r3, #0]
								if (queue_len > 0) {
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd0 <HAL_UART_RxCpltCallback+0x234>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d017      	beq.n	8004b54 <HAL_UART_RxCpltCallback+0x1b8>
									snprintf(send_buf, sizeof(send_buf), "AT+CMGS=\"+48%s\"\r\n", (char*)queue[queue_id]);
 8004b24:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd4 <HAL_UART_RxCpltCallback+0x238>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd8 <HAL_UART_RxCpltCallback+0x23c>)
 8004b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b30:	4a2a      	ldr	r2, [pc, #168]	@ (8004bdc <HAL_UART_RxCpltCallback+0x240>)
 8004b32:	213c      	movs	r1, #60	@ 0x3c
 8004b34:	4821      	ldr	r0, [pc, #132]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004b36:	f000 ff63 	bl	8005a00 <sniprintf>
									HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba4 <HAL_UART_RxCpltCallback+0x208>)
 8004b3c:	681c      	ldr	r4, [r3, #0]
 8004b3e:	481f      	ldr	r0, [pc, #124]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004b40:	f7fb fb58 	bl	80001f4 <strlen>
 8004b44:	4603      	mov	r3, r0
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	491c      	ldr	r1, [pc, #112]	@ (8004bbc <HAL_UART_RxCpltCallback+0x220>)
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7fe fb7e 	bl	800324e <HAL_UART_Transmit_IT>
								} else {
									msg_sending = false; // Safety stop
								}
							}
							break;
 8004b52:	e014      	b.n	8004b7e <HAL_UART_RxCpltCallback+0x1e2>
									msg_sending = false; // Safety stop
 8004b54:	4b17      	ldr	r3, [pc, #92]	@ (8004bb4 <HAL_UART_RxCpltCallback+0x218>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
							break;
 8004b5a:	e010      	b.n	8004b7e <HAL_UART_RxCpltCallback+0x1e2>
						case 3:
							// In state 3, message body is being sent. Waiting for TxCpltCallback to send CTRL+Z.
							// Ignore echoes or unsolicited messages unless it's an "ERROR".
							break;
						case 4: // Waiting for response after CTRL+Z (expecting "+CMGS: xx" then "OK")
							if (strstr(buf, "OK") != NULL) { // Final confirmation
 8004b5c:	491a      	ldr	r1, [pc, #104]	@ (8004bc8 <HAL_UART_RxCpltCallback+0x22c>)
 8004b5e:	4814      	ldr	r0, [pc, #80]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004b60:	f000 ff8a 	bl	8005a78 <strstr>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_UART_RxCpltCallback+0x1d4>
								advance_queue_and_proceed();
 8004b6a:	f7ff fe39 	bl	80047e0 <advance_queue_and_proceed>
							} else if (strstr(buf, "+CMGS:") != NULL) {
								// Intermediate response, wait for final "OK".
							}
							break;
 8004b6e:	e007      	b.n	8004b80 <HAL_UART_RxCpltCallback+0x1e4>
							} else if (strstr(buf, "+CMGS:") != NULL) {
 8004b70:	491b      	ldr	r1, [pc, #108]	@ (8004be0 <HAL_UART_RxCpltCallback+0x244>)
 8004b72:	480f      	ldr	r0, [pc, #60]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004b74:	f000 ff80 	bl	8005a78 <strstr>
							break;
 8004b78:	e002      	b.n	8004b80 <HAL_UART_RxCpltCallback+0x1e4>
							break;
 8004b7a:	bf00      	nop
 8004b7c:	e000      	b.n	8004b80 <HAL_UART_RxCpltCallback+0x1e4>
							break;
 8004b7e:	bf00      	nop
					}
				}
			}
		}
		// Reset buffer for the next line
		len = 0;
 8004b80:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <HAL_UART_RxCpltCallback+0x210>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		memset(buf, 0, sizeof(buf));
 8004b86:	2264      	movs	r2, #100	@ 0x64
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4809      	ldr	r0, [pc, #36]	@ (8004bb0 <HAL_UART_RxCpltCallback+0x214>)
 8004b8c:	f000 ff6c 	bl	8005a68 <memset>
	}

	HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <HAL_UART_RxCpltCallback+0x208>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2201      	movs	r2, #1
 8004b96:	4904      	ldr	r1, [pc, #16]	@ (8004ba8 <HAL_UART_RxCpltCallback+0x20c>)
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe fb8e 	bl	80032ba <HAL_UART_Receive_IT>
}
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd90      	pop	{r4, r7, pc}
 8004ba4:	20000204 	.word	0x20000204
 8004ba8:	20000244 	.word	0x20000244
 8004bac:	20000263 	.word	0x20000263
 8004bb0:	20000264 	.word	0x20000264
 8004bb4:	20000245 	.word	0x20000245
 8004bb8:	20000262 	.word	0x20000262
 8004bbc:	20000208 	.word	0x20000208
 8004bc0:	080063ec 	.word	0x080063ec
 8004bc4:	080063f8 	.word	0x080063f8
 8004bc8:	08006400 	.word	0x08006400
 8004bcc:	080063cc 	.word	0x080063cc
 8004bd0:	20000260 	.word	0x20000260
 8004bd4:	20000261 	.word	0x20000261
 8004bd8:	20000248 	.word	0x20000248
 8004bdc:	080063d8 	.word	0x080063d8
 8004be0:	08006404 	.word	0x08006404

08004be4 <save_new_state>:
static char pin[9] = "";
static char numbers[48];

static uint32_t countdown_delay;
//HELPER FUNCTIONS
void save_new_state(void){
 8004be4:	b5b0      	push	{r4, r5, r7, lr}
 8004be6:	b094      	sub	sp, #80	@ 0x50
 8004be8:	af00      	add	r7, sp, #0
	char to_save[72];
	memset(to_save, 0, 66);
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	2242      	movs	r2, #66	@ 0x42
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 ff39 	bl	8005a68 <memset>
	memcpy(to_save, numbers, 48);
 8004bf6:	4b28      	ldr	r3, [pc, #160]	@ (8004c98 <save_new_state+0xb4>)
 8004bf8:	1d3c      	adds	r4, r7, #4
 8004bfa:	461d      	mov	r5, r3
 8004bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(to_save + 48, pin, 8);
 8004c0c:	1d3b      	adds	r3, r7, #4
 8004c0e:	3330      	adds	r3, #48	@ 0x30
 8004c10:	2208      	movs	r2, #8
 8004c12:	4922      	ldr	r1, [pc, #136]	@ (8004c9c <save_new_state+0xb8>)
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 ff71 	bl	8005afc <memcpy>
	snprintf(to_save + 56, 8, "%ld", countdown_delay/1000);
 8004c1a:	1d38      	adds	r0, r7, #4
 8004c1c:	3038      	adds	r0, #56	@ 0x38
 8004c1e:	4b20      	ldr	r3, [pc, #128]	@ (8004ca0 <save_new_state+0xbc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a20      	ldr	r2, [pc, #128]	@ (8004ca4 <save_new_state+0xc0>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	099b      	lsrs	r3, r3, #6
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <save_new_state+0xc4>)
 8004c2c:	2108      	movs	r1, #8
 8004c2e:	f000 fee7 	bl	8005a00 <sniprintf>
	snprintf(to_save + 64, 8, "%ld", arming_time/1000);
 8004c32:	1d38      	adds	r0, r7, #4
 8004c34:	3040      	adds	r0, #64	@ 0x40
 8004c36:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <save_new_state+0xc8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca4 <save_new_state+0xc0>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	4a19      	ldr	r2, [pc, #100]	@ (8004ca8 <save_new_state+0xc4>)
 8004c44:	2108      	movs	r1, #8
 8004c46:	f000 fedb 	bl	8005a00 <sniprintf>
	for(size_t i = 0; i < 64; ++i)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c4e:	e013      	b.n	8004c78 <save_new_state+0x94>
		if(to_save[i] == '\0' || to_save[i] == '#') to_save[i] = '*';
 8004c50:	1d3a      	adds	r2, r7, #4
 8004c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c54:	4413      	add	r3, r2
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <save_new_state+0x84>
 8004c5c:	1d3a      	adds	r2, r7, #4
 8004c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c60:	4413      	add	r3, r2
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b23      	cmp	r3, #35	@ 0x23
 8004c66:	d104      	bne.n	8004c72 <save_new_state+0x8e>
 8004c68:	1d3a      	adds	r2, r7, #4
 8004c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c6c:	4413      	add	r3, r2
 8004c6e:	222a      	movs	r2, #42	@ 0x2a
 8004c70:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8004c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c74:	3301      	adds	r3, #1
 8004c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c7c:	d9e8      	bls.n	8004c50 <save_new_state+0x6c>
	flash_write_erase_sector7();
 8004c7e:	f7ff fabb 	bl	80041f8 <flash_write_erase_sector7>
	flash_write_multiple_word(0x08060000, (uint32_t *)to_save, 18);
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	2212      	movs	r2, #18
 8004c86:	4619      	mov	r1, r3
 8004c88:	4809      	ldr	r0, [pc, #36]	@ (8004cb0 <save_new_state+0xcc>)
 8004c8a:	f7ff fb05 	bl	8004298 <flash_write_multiple_word>

}
 8004c8e:	bf00      	nop
 8004c90:	3750      	adds	r7, #80	@ 0x50
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bdb0      	pop	{r4, r5, r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200002f4 	.word	0x200002f4
 8004c9c:	200002e8 	.word	0x200002e8
 8004ca0:	20000324 	.word	0x20000324
 8004ca4:	10624dd3 	.word	0x10624dd3
 8004ca8:	0800642c 	.word	0x0800642c
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	08060000 	.word	0x08060000

08004cb4 <change_state>:

static inline void change_state(alarm_state new_state){
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
	state = new_state;
 8004cbe:	4a09      	ldr	r2, [pc, #36]	@ (8004ce4 <change_state+0x30>)
 8004cc0:	79fb      	ldrb	r3, [r7, #7]
 8004cc2:	7013      	strb	r3, [r2, #0]
	memset(str,0,14);
 8004cc4:	220e      	movs	r2, #14
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4807      	ldr	r0, [pc, #28]	@ (8004ce8 <change_state+0x34>)
 8004cca:	f000 fecd 	bl	8005a68 <memset>
	len = 0;
 8004cce:	4b07      	ldr	r3, [pc, #28]	@ (8004cec <change_state+0x38>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
	changed = true;
 8004cd4:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <change_state+0x3c>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	701a      	strb	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	200002c8 	.word	0x200002c8
 8004cec:	200002d6 	.word	0x200002d6
 8004cf0:	2000000d 	.word	0x2000000d

08004cf4 <s_to_ms>:

uint32_t s_to_ms(uint32_t s){return s*1000UL;}
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <state_machine_init>:

//IMPLEMENTATIONS
void state_machine_init(char data_blob[64]){
 8004d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	char temp[8];
	for(size_t i = 0; i < 64; ++i)
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e00d      	b.n	8004d3e <state_machine_init+0x2a>
		if(data_blob[i] == '*') data_blob[i] = '\0';
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	4413      	add	r3, r2
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d2c:	d104      	bne.n	8004d38 <state_machine_init+0x24>
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d42:	d9ee      	bls.n	8004d22 <state_machine_init+0xe>
	memcpy(numbers, data_blob, 48);
 8004d44:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <state_machine_init+0xe4>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	461c      	mov	r4, r3
 8004d4a:	4616      	mov	r6, r2
 8004d4c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8004d50:	4635      	mov	r5, r6
 8004d52:	4623      	mov	r3, r4
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d5e:	3410      	adds	r4, #16
 8004d60:	3610      	adds	r6, #16
 8004d62:	4564      	cmp	r4, ip
 8004d64:	d1f4      	bne.n	8004d50 <state_machine_init+0x3c>
	memcpy(pin, data_blob + 48, 8);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3330      	adds	r3, #48	@ 0x30
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4823      	ldr	r0, [pc, #140]	@ (8004dfc <state_machine_init+0xe8>)
 8004d70:	f000 fec4 	bl	8005afc <memcpy>
	pin[strlen(pin)] = '#';
 8004d74:	4821      	ldr	r0, [pc, #132]	@ (8004dfc <state_machine_init+0xe8>)
 8004d76:	f7fb fa3d 	bl	80001f4 <strlen>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dfc <state_machine_init+0xe8>)
 8004d7e:	2123      	movs	r1, #35	@ 0x23
 8004d80:	54d1      	strb	r1, [r2, r3]

	memcpy(temp, data_blob + 56, 8);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004d88:	f107 030c 	add.w	r3, r7, #12
 8004d8c:	6810      	ldr	r0, [r2, #0]
 8004d8e:	6851      	ldr	r1, [r2, #4]
 8004d90:	c303      	stmia	r3!, {r0, r1}
	countdown_delay = strtol(temp, NULL, 10);
 8004d92:	f107 030c 	add.w	r3, r7, #12
 8004d96:	220a      	movs	r2, #10
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fe26 	bl	80059ec <strtol>
 8004da0:	4603      	mov	r3, r0
 8004da2:	461a      	mov	r2, r3
 8004da4:	4b16      	ldr	r3, [pc, #88]	@ (8004e00 <state_machine_init+0xec>)
 8004da6:	601a      	str	r2, [r3, #0]
	countdown_delay = s_to_ms(countdown_delay);
 8004da8:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <state_machine_init+0xec>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ffa1 	bl	8004cf4 <s_to_ms>
 8004db2:	4603      	mov	r3, r0
 8004db4:	4a12      	ldr	r2, [pc, #72]	@ (8004e00 <state_machine_init+0xec>)
 8004db6:	6013      	str	r3, [r2, #0]
	memcpy(temp, data_blob + 64, 8);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004dbe:	f107 030c 	add.w	r3, r7, #12
 8004dc2:	6810      	ldr	r0, [r2, #0]
 8004dc4:	6851      	ldr	r1, [r2, #4]
 8004dc6:	c303      	stmia	r3!, {r0, r1}
	arming_time = strtol(temp, NULL, 10);
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	220a      	movs	r2, #10
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fe0b 	bl	80059ec <strtol>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b0a      	ldr	r3, [pc, #40]	@ (8004e04 <state_machine_init+0xf0>)
 8004ddc:	601a      	str	r2, [r3, #0]
	arming_time = s_to_ms(arming_time);
 8004dde:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <state_machine_init+0xf0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff ff86 	bl	8004cf4 <s_to_ms>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a06      	ldr	r2, [pc, #24]	@ (8004e04 <state_machine_init+0xf0>)
 8004dec:	6013      	str	r3, [r2, #0]

}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	200002f4 	.word	0x200002f4
 8004dfc:	200002e8 	.word	0x200002e8
 8004e00:	20000324 	.word	0x20000324
 8004e04:	20000010 	.word	0x20000010

08004e08 <state_machine_run>:

void state_machine_run(char input){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
	if(input){
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <state_machine_run+0x2a>
		changed = true;
 8004e18:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <state_machine_run+0x40>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
		str[len++] = input;
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <state_machine_run+0x44>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	b2d1      	uxtb	r1, r2
 8004e26:	4a09      	ldr	r2, [pc, #36]	@ (8004e4c <state_machine_run+0x44>)
 8004e28:	7011      	strb	r1, [r2, #0]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4a08      	ldr	r2, [pc, #32]	@ (8004e50 <state_machine_run+0x48>)
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	5453      	strb	r3, [r2, r1]
	}
	static void(*state_functions[10])(void) = {state_machine_armed, state_machine_countdown, state_machine_alert,
			state_machine_disarmed, state_machine_set_new_pin, state_machine_menage_number,
			state_machine_replace_number, state_machine_set_alert_time,state_machine_arming,state_machine_set_arming_time};
	state_functions[state]();
 8004e32:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <state_machine_run+0x4c>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b07      	ldr	r3, [pc, #28]	@ (8004e58 <state_machine_run+0x50>)
 8004e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3e:	4798      	blx	r3
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	2000000d 	.word	0x2000000d
 8004e4c:	200002d6 	.word	0x200002d6
 8004e50:	200002c8 	.word	0x200002c8
 8004e54:	20000000 	.word	0x20000000
 8004e58:	20000024 	.word	0x20000024

08004e5c <state_machine_armed>:

void state_machine_armed(void){
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
	static bool open;
	static uint32_t ms;
	if(HAL_GetTick() - ms > 100){
 8004e60:	f7fb ff96 	bl	8000d90 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	4b53      	ldr	r3, [pc, #332]	@ (8004fb4 <state_machine_armed+0x158>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b64      	cmp	r3, #100	@ 0x64
 8004e6e:	d90a      	bls.n	8004e86 <state_machine_armed+0x2a>
		open = read_expander();
 8004e70:	f7ff f96e 	bl	8004150 <read_expander>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb8 <state_machine_armed+0x15c>)
 8004e7a:	701a      	strb	r2, [r3, #0]
		ms = HAL_GetTick();
 8004e7c:	f7fb ff88 	bl	8000d90 <HAL_GetTick>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4a4c      	ldr	r2, [pc, #304]	@ (8004fb4 <state_machine_armed+0x158>)
 8004e84:	6013      	str	r3, [r2, #0]
	}
	if(changed == true || open || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8004e86:	4b4d      	ldr	r3, [pc, #308]	@ (8004fbc <state_machine_armed+0x160>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <state_machine_armed+0x4e>
 8004e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb8 <state_machine_armed+0x15c>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <state_machine_armed+0x4e>
 8004e96:	f7fb ff7b 	bl	8000d90 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b48      	ldr	r3, [pc, #288]	@ (8004fc0 <state_machine_armed+0x164>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004ea6:	f240 8082 	bls.w	8004fae <state_machine_armed+0x152>
		if(len == 0 && changed){
 8004eaa:	4b46      	ldr	r3, [pc, #280]	@ (8004fc4 <state_machine_armed+0x168>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d117      	bne.n	8004ee2 <state_machine_armed+0x86>
 8004eb2:	4b42      	ldr	r3, [pc, #264]	@ (8004fbc <state_machine_armed+0x160>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <state_machine_armed+0x86>
			changed = false;
 8004eba:	4b40      	ldr	r3, [pc, #256]	@ (8004fbc <state_machine_armed+0x160>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8004ec0:	f7ff fc44 	bl	800474c <lcd_clear>
			lcd_put_cur(0, 0);
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f7ff fc54 	bl	8004774 <lcd_put_cur>
			lcd_send_string ("ARMED");
 8004ecc:	483e      	ldr	r0, [pc, #248]	@ (8004fc8 <state_machine_armed+0x16c>)
 8004ece:	f7ff fc27 	bl	8004720 <lcd_send_string>
			lcd_put_cur(1, 0);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	f7ff fc4d 	bl	8004774 <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8004eda:	483c      	ldr	r0, [pc, #240]	@ (8004fcc <state_machine_armed+0x170>)
 8004edc:	f7ff fc20 	bl	8004720 <lcd_send_string>
 8004ee0:	e065      	b.n	8004fae <state_machine_armed+0x152>
		}
		else if(open){
 8004ee2:	4b35      	ldr	r3, [pc, #212]	@ (8004fb8 <state_machine_armed+0x15c>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <state_machine_armed+0xa0>
			change_state(ARMED_COUNTDOWN);
 8004eea:	2001      	movs	r0, #1
 8004eec:	f7ff fee2 	bl	8004cb4 <change_state>
			countdown_start = HAL_GetTick();
 8004ef0:	f7fb ff4e 	bl	8000d90 <HAL_GetTick>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	4a36      	ldr	r2, [pc, #216]	@ (8004fd0 <state_machine_armed+0x174>)
 8004ef8:	6013      	str	r3, [r2, #0]
			}

		}

	}
}
 8004efa:	e058      	b.n	8004fae <state_machine_armed+0x152>
		else if(len != 0){
 8004efc:	4b31      	ldr	r3, [pc, #196]	@ (8004fc4 <state_machine_armed+0x168>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d054      	beq.n	8004fae <state_machine_armed+0x152>
			lcd_clear();
 8004f04:	f7ff fc22 	bl	800474c <lcd_clear>
			lcd_put_cur(0, 0);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7ff fc32 	bl	8004774 <lcd_put_cur>
			lcd_send_string("DISARM");
 8004f10:	4830      	ldr	r0, [pc, #192]	@ (8004fd4 <state_machine_armed+0x178>)
 8004f12:	f7ff fc05 	bl	8004720 <lcd_send_string>
			lcd_put_cur(1, 0);
 8004f16:	2100      	movs	r1, #0
 8004f18:	2001      	movs	r0, #1
 8004f1a:	f7ff fc2b 	bl	8004774 <lcd_put_cur>
			str[len] = '\0';
 8004f1e:	4b29      	ldr	r3, [pc, #164]	@ (8004fc4 <state_machine_armed+0x168>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd8 <state_machine_armed+0x17c>)
 8004f26:	2100      	movs	r1, #0
 8004f28:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 8004f2a:	482b      	ldr	r0, [pc, #172]	@ (8004fd8 <state_machine_armed+0x17c>)
 8004f2c:	f7ff fbf8 	bl	8004720 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8004f30:	492a      	ldr	r1, [pc, #168]	@ (8004fdc <state_machine_armed+0x180>)
 8004f32:	4829      	ldr	r0, [pc, #164]	@ (8004fd8 <state_machine_armed+0x17c>)
 8004f34:	f7fb f954 	bl	80001e0 <strcmp>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <state_machine_armed+0xea>
				change_state(DISARMED);
 8004f3e:	2003      	movs	r0, #3
 8004f40:	f7ff feb8 	bl	8004cb4 <change_state>
}
 8004f44:	e033      	b.n	8004fae <state_machine_armed+0x152>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8004f46:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc4 <state_machine_armed+0x168>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	4a22      	ldr	r2, [pc, #136]	@ (8004fd8 <state_machine_armed+0x17c>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	2b23      	cmp	r3, #35	@ 0x23
 8004f52:	d00a      	beq.n	8004f6a <state_machine_armed+0x10e>
 8004f54:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc4 <state_machine_armed+0x168>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b0e      	cmp	r3, #14
 8004f5a:	d006      	beq.n	8004f6a <state_machine_armed+0x10e>
 8004f5c:	4b17      	ldr	r3, [pc, #92]	@ (8004fbc <state_machine_armed+0x160>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	f083 0301 	eor.w	r3, r3, #1
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d018      	beq.n	8004f9c <state_machine_armed+0x140>
				lcd_clear();
 8004f6a:	f7ff fbef 	bl	800474c <lcd_clear>
				lcd_put_cur(0, 0);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	2000      	movs	r0, #0
 8004f72:	f7ff fbff 	bl	8004774 <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8004f76:	481a      	ldr	r0, [pc, #104]	@ (8004fe0 <state_machine_armed+0x184>)
 8004f78:	f7ff fbd2 	bl	8004720 <lcd_send_string>
				memset(str,0,14);
 8004f7c:	220e      	movs	r2, #14
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4815      	ldr	r0, [pc, #84]	@ (8004fd8 <state_machine_armed+0x17c>)
 8004f82:	f000 fd71 	bl	8005a68 <memset>
				len = 0;
 8004f86:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <state_machine_armed+0x168>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
				changed = true;
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <state_machine_armed+0x160>)
 8004f8e:	2201      	movs	r2, #1
 8004f90:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8004f92:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004f96:	f7fb ff07 	bl	8000da8 <HAL_Delay>
 8004f9a:	e008      	b.n	8004fae <state_machine_armed+0x152>
				timestamp = HAL_GetTick();
 8004f9c:	f7fb fef8 	bl	8000d90 <HAL_GetTick>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4a07      	ldr	r2, [pc, #28]	@ (8004fc0 <state_machine_armed+0x164>)
 8004fa4:	6013      	str	r3, [r2, #0]
				changed = false;
 8004fa6:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <state_machine_armed+0x160>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
}
 8004fac:	e7ff      	b.n	8004fae <state_machine_armed+0x152>
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000328 	.word	0x20000328
 8004fb8:	2000032c 	.word	0x2000032c
 8004fbc:	2000000d 	.word	0x2000000d
 8004fc0:	200002d8 	.word	0x200002d8
 8004fc4:	200002d6 	.word	0x200002d6
 8004fc8:	08006430 	.word	0x08006430
 8004fcc:	08006438 	.word	0x08006438
 8004fd0:	200002e0 	.word	0x200002e0
 8004fd4:	08006448 	.word	0x08006448
 8004fd8:	200002c8 	.word	0x200002c8
 8004fdc:	200002e8 	.word	0x200002e8
 8004fe0:	08006450 	.word	0x08006450

08004fe4 <state_machine_disarmed>:

void state_machine_disarmed(void){
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8004fe8:	4b5f      	ldr	r3, [pc, #380]	@ (8005168 <state_machine_disarmed+0x184>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <state_machine_disarmed+0x20>
 8004ff0:	f7fb fece 	bl	8000d90 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800516c <state_machine_disarmed+0x188>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005000:	f240 80af 	bls.w	8005162 <state_machine_disarmed+0x17e>
	  if(len == 0 && changed){
 8005004:	4b5a      	ldr	r3, [pc, #360]	@ (8005170 <state_machine_disarmed+0x18c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d117      	bne.n	800503c <state_machine_disarmed+0x58>
 800500c:	4b56      	ldr	r3, [pc, #344]	@ (8005168 <state_machine_disarmed+0x184>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d013      	beq.n	800503c <state_machine_disarmed+0x58>
		  changed = false;
 8005014:	4b54      	ldr	r3, [pc, #336]	@ (8005168 <state_machine_disarmed+0x184>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
		  lcd_clear();
 800501a:	f7ff fb97 	bl	800474c <lcd_clear>
		  lcd_put_cur(0, 0);
 800501e:	2100      	movs	r1, #0
 8005020:	2000      	movs	r0, #0
 8005022:	f7ff fba7 	bl	8004774 <lcd_put_cur>
		  lcd_send_string ("DISARMED");
 8005026:	4853      	ldr	r0, [pc, #332]	@ (8005174 <state_machine_disarmed+0x190>)
 8005028:	f7ff fb7a 	bl	8004720 <lcd_send_string>
		  lcd_put_cur(1, 0);
 800502c:	2100      	movs	r1, #0
 800502e:	2001      	movs	r0, #1
 8005030:	f7ff fba0 	bl	8004774 <lcd_put_cur>
		  lcd_send_string("PIN TO ARM");
 8005034:	4850      	ldr	r0, [pc, #320]	@ (8005178 <state_machine_disarmed+0x194>)
 8005036:	f7ff fb73 	bl	8004720 <lcd_send_string>
 800503a:	e092      	b.n	8005162 <state_machine_disarmed+0x17e>
	  }
	  else if(len != 0){
 800503c:	4b4c      	ldr	r3, [pc, #304]	@ (8005170 <state_machine_disarmed+0x18c>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 808e 	beq.w	8005162 <state_machine_disarmed+0x17e>
		  lcd_clear();
 8005046:	f7ff fb81 	bl	800474c <lcd_clear>
		  lcd_put_cur(0, 0);
 800504a:	2100      	movs	r1, #0
 800504c:	2000      	movs	r0, #0
 800504e:	f7ff fb91 	bl	8004774 <lcd_put_cur>
		  lcd_send_string("DISARMED PIN");
 8005052:	484a      	ldr	r0, [pc, #296]	@ (800517c <state_machine_disarmed+0x198>)
 8005054:	f7ff fb64 	bl	8004720 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8005058:	2100      	movs	r1, #0
 800505a:	2001      	movs	r0, #1
 800505c:	f7ff fb8a 	bl	8004774 <lcd_put_cur>
		  str[len] = '\0';
 8005060:	4b43      	ldr	r3, [pc, #268]	@ (8005170 <state_machine_disarmed+0x18c>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	4b46      	ldr	r3, [pc, #280]	@ (8005180 <state_machine_disarmed+0x19c>)
 8005068:	2100      	movs	r1, #0
 800506a:	5499      	strb	r1, [r3, r2]
		  lcd_send_string(str);
 800506c:	4844      	ldr	r0, [pc, #272]	@ (8005180 <state_machine_disarmed+0x19c>)
 800506e:	f7ff fb57 	bl	8004720 <lcd_send_string>
		  if(strcmp(str,pin) == 0){
 8005072:	4944      	ldr	r1, [pc, #272]	@ (8005184 <state_machine_disarmed+0x1a0>)
 8005074:	4842      	ldr	r0, [pc, #264]	@ (8005180 <state_machine_disarmed+0x19c>)
 8005076:	f7fb f8b3 	bl	80001e0 <strcmp>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d108      	bne.n	8005092 <state_machine_disarmed+0xae>
			  arming_ms = HAL_GetTick();
 8005080:	f7fb fe86 	bl	8000d90 <HAL_GetTick>
 8005084:	4603      	mov	r3, r0
 8005086:	4a40      	ldr	r2, [pc, #256]	@ (8005188 <state_machine_disarmed+0x1a4>)
 8005088:	6013      	str	r3, [r2, #0]
			  change_state(ARMING);
 800508a:	2008      	movs	r0, #8
 800508c:	f7ff fe12 	bl	8004cb4 <change_state>
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}
 8005090:	e067      	b.n	8005162 <state_machine_disarmed+0x17e>
		  else if(strcmp(str,set_new_pin) == 0){
 8005092:	4b3e      	ldr	r3, [pc, #248]	@ (800518c <state_machine_disarmed+0x1a8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	4839      	ldr	r0, [pc, #228]	@ (8005180 <state_machine_disarmed+0x19c>)
 800509a:	f7fb f8a1 	bl	80001e0 <strcmp>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <state_machine_disarmed+0xc8>
			  change_state(SET_NEW_PIN);
 80050a4:	2004      	movs	r0, #4
 80050a6:	f7ff fe05 	bl	8004cb4 <change_state>
}
 80050aa:	e05a      	b.n	8005162 <state_machine_disarmed+0x17e>
		  else if(strcmp(str,set_alert_time) == 0){
 80050ac:	4b38      	ldr	r3, [pc, #224]	@ (8005190 <state_machine_disarmed+0x1ac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	4833      	ldr	r0, [pc, #204]	@ (8005180 <state_machine_disarmed+0x19c>)
 80050b4:	f7fb f894 	bl	80001e0 <strcmp>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <state_machine_disarmed+0xe2>
			  change_state(SET_ALERT_TIME);
 80050be:	2007      	movs	r0, #7
 80050c0:	f7ff fdf8 	bl	8004cb4 <change_state>
}
 80050c4:	e04d      	b.n	8005162 <state_machine_disarmed+0x17e>
		  else if(strcmp(str,menage_number) == 0){
 80050c6:	4b33      	ldr	r3, [pc, #204]	@ (8005194 <state_machine_disarmed+0x1b0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4619      	mov	r1, r3
 80050cc:	482c      	ldr	r0, [pc, #176]	@ (8005180 <state_machine_disarmed+0x19c>)
 80050ce:	f7fb f887 	bl	80001e0 <strcmp>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <state_machine_disarmed+0xfc>
			  change_state(MENAGE_NUMBER);
 80050d8:	2005      	movs	r0, #5
 80050da:	f7ff fdeb 	bl	8004cb4 <change_state>
}
 80050de:	e040      	b.n	8005162 <state_machine_disarmed+0x17e>
		  else if(strcmp(str,set_alarming) == 0){
 80050e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005198 <state_machine_disarmed+0x1b4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	4826      	ldr	r0, [pc, #152]	@ (8005180 <state_machine_disarmed+0x19c>)
 80050e8:	f7fb f87a 	bl	80001e0 <strcmp>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d103      	bne.n	80050fa <state_machine_disarmed+0x116>
			  change_state(SET_ALARMING);
 80050f2:	2009      	movs	r0, #9
 80050f4:	f7ff fdde 	bl	8004cb4 <change_state>
}
 80050f8:	e033      	b.n	8005162 <state_machine_disarmed+0x17e>
		  else if(str[len - 1] == '#' || len == 14 || !changed){
 80050fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <state_machine_disarmed+0x18c>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a1f      	ldr	r2, [pc, #124]	@ (8005180 <state_machine_disarmed+0x19c>)
 8005102:	5cd3      	ldrb	r3, [r2, r3]
 8005104:	2b23      	cmp	r3, #35	@ 0x23
 8005106:	d00a      	beq.n	800511e <state_machine_disarmed+0x13a>
 8005108:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <state_machine_disarmed+0x18c>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b0e      	cmp	r3, #14
 800510e:	d006      	beq.n	800511e <state_machine_disarmed+0x13a>
 8005110:	4b15      	ldr	r3, [pc, #84]	@ (8005168 <state_machine_disarmed+0x184>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f083 0301 	eor.w	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d018      	beq.n	8005150 <state_machine_disarmed+0x16c>
			  lcd_clear();
 800511e:	f7ff fb15 	bl	800474c <lcd_clear>
			  lcd_put_cur(0, 0);
 8005122:	2100      	movs	r1, #0
 8005124:	2000      	movs	r0, #0
 8005126:	f7ff fb25 	bl	8004774 <lcd_put_cur>
			  lcd_send_string ("WRONG PIN");
 800512a:	481c      	ldr	r0, [pc, #112]	@ (800519c <state_machine_disarmed+0x1b8>)
 800512c:	f7ff faf8 	bl	8004720 <lcd_send_string>
			  memset(str,0,14);
 8005130:	220e      	movs	r2, #14
 8005132:	2100      	movs	r1, #0
 8005134:	4812      	ldr	r0, [pc, #72]	@ (8005180 <state_machine_disarmed+0x19c>)
 8005136:	f000 fc97 	bl	8005a68 <memset>
			  len = 0;
 800513a:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <state_machine_disarmed+0x18c>)
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8005140:	4b09      	ldr	r3, [pc, #36]	@ (8005168 <state_machine_disarmed+0x184>)
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(3000);
 8005146:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800514a:	f7fb fe2d 	bl	8000da8 <HAL_Delay>
 800514e:	e008      	b.n	8005162 <state_machine_disarmed+0x17e>
			  timestamp = HAL_GetTick();
 8005150:	f7fb fe1e 	bl	8000d90 <HAL_GetTick>
 8005154:	4603      	mov	r3, r0
 8005156:	4a05      	ldr	r2, [pc, #20]	@ (800516c <state_machine_disarmed+0x188>)
 8005158:	6013      	str	r3, [r2, #0]
			  changed = false;
 800515a:	4b03      	ldr	r3, [pc, #12]	@ (8005168 <state_machine_disarmed+0x184>)
 800515c:	2200      	movs	r2, #0
 800515e:	701a      	strb	r2, [r3, #0]
}
 8005160:	e7ff      	b.n	8005162 <state_machine_disarmed+0x17e>
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	2000000d 	.word	0x2000000d
 800516c:	200002d8 	.word	0x200002d8
 8005170:	200002d6 	.word	0x200002d6
 8005174:	0800645c 	.word	0x0800645c
 8005178:	08006468 	.word	0x08006468
 800517c:	08006474 	.word	0x08006474
 8005180:	200002c8 	.word	0x200002c8
 8005184:	200002e8 	.word	0x200002e8
 8005188:	200002e4 	.word	0x200002e4
 800518c:	20000018 	.word	0x20000018
 8005190:	20000014 	.word	0x20000014
 8005194:	2000001c 	.word	0x2000001c
 8005198:	20000020 	.word	0x20000020
 800519c:	08006450 	.word	0x08006450

080051a0 <state_machine_countdown>:

void state_machine_countdown(void){
 80051a0:	b590      	push	{r4, r7, lr}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - countdown_start > countdown_delay){
 80051a6:	f7fb fdf3 	bl	8000d90 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	4b65      	ldr	r3, [pc, #404]	@ (8005344 <state_machine_countdown+0x1a4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	4b65      	ldr	r3, [pc, #404]	@ (8005348 <state_machine_countdown+0x1a8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d902      	bls.n	80051c0 <state_machine_countdown+0x20>
		change_state(ALERT_SMS);
 80051ba:	2002      	movs	r0, #2
 80051bc:	f7ff fd7a 	bl	8004cb4 <change_state>
	}
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL || HAL_GetTick() - timestamp_display_s > 1000){
 80051c0:	4b62      	ldr	r3, [pc, #392]	@ (800534c <state_machine_countdown+0x1ac>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d112      	bne.n	80051ee <state_machine_countdown+0x4e>
 80051c8:	f7fb fde2 	bl	8000d90 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b60      	ldr	r3, [pc, #384]	@ (8005350 <state_machine_countdown+0x1b0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80051d8:	d809      	bhi.n	80051ee <state_machine_countdown+0x4e>
 80051da:	f7fb fdd9 	bl	8000d90 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005354 <state_machine_countdown+0x1b4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051ea:	f240 80a7 	bls.w	800533c <state_machine_countdown+0x19c>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 80051ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005358 <state_machine_countdown+0x1b8>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d13c      	bne.n	8005270 <state_machine_countdown+0xd0>
 80051f6:	4b55      	ldr	r3, [pc, #340]	@ (800534c <state_machine_countdown+0x1ac>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <state_machine_countdown+0x70>
 80051fe:	f7fb fdc7 	bl	8000d90 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	4b53      	ldr	r3, [pc, #332]	@ (8005354 <state_machine_countdown+0x1b4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800520e:	d92f      	bls.n	8005270 <state_machine_countdown+0xd0>
			timestamp_display_s = HAL_GetTick();
 8005210:	f7fb fdbe 	bl	8000d90 <HAL_GetTick>
 8005214:	4603      	mov	r3, r0
 8005216:	4a4f      	ldr	r2, [pc, #316]	@ (8005354 <state_machine_countdown+0x1b4>)
 8005218:	6013      	str	r3, [r2, #0]
			changed = false;
 800521a:	4b4c      	ldr	r3, [pc, #304]	@ (800534c <state_machine_countdown+0x1ac>)
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005220:	f7ff fa94 	bl	800474c <lcd_clear>
			lcd_put_cur(0, 0);
 8005224:	2100      	movs	r1, #0
 8005226:	2000      	movs	r0, #0
 8005228:	f7ff faa4 	bl	8004774 <lcd_put_cur>
			char buf[14];
			snprintf(buf, 14 ,"COUNTDOWN %lu s",(uint32_t)(countdown_delay/1000 - (HAL_GetTick() - countdown_start)/1000));
 800522c:	4b46      	ldr	r3, [pc, #280]	@ (8005348 <state_machine_countdown+0x1a8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a4a      	ldr	r2, [pc, #296]	@ (800535c <state_machine_countdown+0x1bc>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	099c      	lsrs	r4, r3, #6
 8005238:	f7fb fdaa 	bl	8000d90 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	4b41      	ldr	r3, [pc, #260]	@ (8005344 <state_machine_countdown+0x1a4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	4a45      	ldr	r2, [pc, #276]	@ (800535c <state_machine_countdown+0x1bc>)
 8005246:	fba2 2303 	umull	r2, r3, r2, r3
 800524a:	099b      	lsrs	r3, r3, #6
 800524c:	1ae3      	subs	r3, r4, r3
 800524e:	4638      	mov	r0, r7
 8005250:	4a43      	ldr	r2, [pc, #268]	@ (8005360 <state_machine_countdown+0x1c0>)
 8005252:	210e      	movs	r1, #14
 8005254:	f000 fbd4 	bl	8005a00 <sniprintf>
			lcd_send_string (buf);
 8005258:	463b      	mov	r3, r7
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fa60 	bl	8004720 <lcd_send_string>
			lcd_put_cur(1, 0);
 8005260:	2100      	movs	r1, #0
 8005262:	2001      	movs	r0, #1
 8005264:	f7ff fa86 	bl	8004774 <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8005268:	483e      	ldr	r0, [pc, #248]	@ (8005364 <state_machine_countdown+0x1c4>)
 800526a:	f7ff fa59 	bl	8004720 <lcd_send_string>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 800526e:	e065      	b.n	800533c <state_machine_countdown+0x19c>
		}
		else if(len != 0 && (HAL_GetTick() - timestamp > TIME_PER_SYMBOL || changed)){
 8005270:	4b39      	ldr	r3, [pc, #228]	@ (8005358 <state_machine_countdown+0x1b8>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d061      	beq.n	800533c <state_machine_countdown+0x19c>
 8005278:	f7fb fd8a 	bl	8000d90 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <state_machine_countdown+0x1b0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005288:	d803      	bhi.n	8005292 <state_machine_countdown+0xf2>
 800528a:	4b30      	ldr	r3, [pc, #192]	@ (800534c <state_machine_countdown+0x1ac>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d054      	beq.n	800533c <state_machine_countdown+0x19c>
			lcd_clear();
 8005292:	f7ff fa5b 	bl	800474c <lcd_clear>
			lcd_put_cur(0, 0);
 8005296:	2100      	movs	r1, #0
 8005298:	2000      	movs	r0, #0
 800529a:	f7ff fa6b 	bl	8004774 <lcd_put_cur>
			lcd_send_string("DISARM");
 800529e:	4832      	ldr	r0, [pc, #200]	@ (8005368 <state_machine_countdown+0x1c8>)
 80052a0:	f7ff fa3e 	bl	8004720 <lcd_send_string>
			lcd_put_cur(1, 0);
 80052a4:	2100      	movs	r1, #0
 80052a6:	2001      	movs	r0, #1
 80052a8:	f7ff fa64 	bl	8004774 <lcd_put_cur>
			str[len] = '\0';
 80052ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005358 <state_machine_countdown+0x1b8>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b2e      	ldr	r3, [pc, #184]	@ (800536c <state_machine_countdown+0x1cc>)
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 80052b8:	482c      	ldr	r0, [pc, #176]	@ (800536c <state_machine_countdown+0x1cc>)
 80052ba:	f7ff fa31 	bl	8004720 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 80052be:	492c      	ldr	r1, [pc, #176]	@ (8005370 <state_machine_countdown+0x1d0>)
 80052c0:	482a      	ldr	r0, [pc, #168]	@ (800536c <state_machine_countdown+0x1cc>)
 80052c2:	f7fa ff8d 	bl	80001e0 <strcmp>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <state_machine_countdown+0x134>
				change_state(DISARMED);
 80052cc:	2003      	movs	r0, #3
 80052ce:	f7ff fcf1 	bl	8004cb4 <change_state>
				changed = false;
			}
		}
	}

}
 80052d2:	e033      	b.n	800533c <state_machine_countdown+0x19c>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 80052d4:	4b20      	ldr	r3, [pc, #128]	@ (8005358 <state_machine_countdown+0x1b8>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	3b01      	subs	r3, #1
 80052da:	4a24      	ldr	r2, [pc, #144]	@ (800536c <state_machine_countdown+0x1cc>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
 80052de:	2b23      	cmp	r3, #35	@ 0x23
 80052e0:	d00a      	beq.n	80052f8 <state_machine_countdown+0x158>
 80052e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <state_machine_countdown+0x1b8>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b0e      	cmp	r3, #14
 80052e8:	d006      	beq.n	80052f8 <state_machine_countdown+0x158>
 80052ea:	4b18      	ldr	r3, [pc, #96]	@ (800534c <state_machine_countdown+0x1ac>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f083 0301 	eor.w	r3, r3, #1
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d018      	beq.n	800532a <state_machine_countdown+0x18a>
				lcd_clear();
 80052f8:	f7ff fa28 	bl	800474c <lcd_clear>
				lcd_put_cur(0, 0);
 80052fc:	2100      	movs	r1, #0
 80052fe:	2000      	movs	r0, #0
 8005300:	f7ff fa38 	bl	8004774 <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8005304:	481b      	ldr	r0, [pc, #108]	@ (8005374 <state_machine_countdown+0x1d4>)
 8005306:	f7ff fa0b 	bl	8004720 <lcd_send_string>
				memset(str,0,14);
 800530a:	220e      	movs	r2, #14
 800530c:	2100      	movs	r1, #0
 800530e:	4817      	ldr	r0, [pc, #92]	@ (800536c <state_machine_countdown+0x1cc>)
 8005310:	f000 fbaa 	bl	8005a68 <memset>
				len = 0;
 8005314:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <state_machine_countdown+0x1b8>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
				changed = true;
 800531a:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <state_machine_countdown+0x1ac>)
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8005320:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8005324:	f7fb fd40 	bl	8000da8 <HAL_Delay>
 8005328:	e008      	b.n	800533c <state_machine_countdown+0x19c>
				timestamp = HAL_GetTick();
 800532a:	f7fb fd31 	bl	8000d90 <HAL_GetTick>
 800532e:	4603      	mov	r3, r0
 8005330:	4a07      	ldr	r2, [pc, #28]	@ (8005350 <state_machine_countdown+0x1b0>)
 8005332:	6013      	str	r3, [r2, #0]
				changed = false;
 8005334:	4b05      	ldr	r3, [pc, #20]	@ (800534c <state_machine_countdown+0x1ac>)
 8005336:	2200      	movs	r2, #0
 8005338:	701a      	strb	r2, [r3, #0]
}
 800533a:	e7ff      	b.n	800533c <state_machine_countdown+0x19c>
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bd90      	pop	{r4, r7, pc}
 8005344:	200002e0 	.word	0x200002e0
 8005348:	20000324 	.word	0x20000324
 800534c:	2000000d 	.word	0x2000000d
 8005350:	200002d8 	.word	0x200002d8
 8005354:	200002dc 	.word	0x200002dc
 8005358:	200002d6 	.word	0x200002d6
 800535c:	10624dd3 	.word	0x10624dd3
 8005360:	08006484 	.word	0x08006484
 8005364:	08006438 	.word	0x08006438
 8005368:	08006448 	.word	0x08006448
 800536c:	200002c8 	.word	0x200002c8
 8005370:	200002e8 	.word	0x200002e8
 8005374:	08006450 	.word	0x08006450

08005378 <state_machine_alert>:

void state_machine_alert(void){
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; ++i){
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	e00a      	b.n	800539a <state_machine_alert+0x22>
		gsm_sms_queue(numbers + i*16);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	461a      	mov	r2, r3
 800538a:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <state_machine_alert+0x40>)
 800538c:	4413      	add	r3, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fa72 	bl	8004878 <gsm_sms_queue>
	for(int i = 0; i < 3; ++i){
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3301      	adds	r3, #1
 8005398:	607b      	str	r3, [r7, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b02      	cmp	r3, #2
 800539e:	ddf1      	ble.n	8005384 <state_machine_alert+0xc>
	}
	HAL_Delay(1000);
 80053a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053a4:	f7fb fd00 	bl	8000da8 <HAL_Delay>
	change_state(ARMED);
 80053a8:	2000      	movs	r0, #0
 80053aa:	f7ff fc83 	bl	8004cb4 <change_state>
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	200002f4 	.word	0x200002f4

080053bc <state_machine_set_alert_time>:

void state_machine_set_alert_time(void){
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
	if(changed == true){
 80053c0:	4b25      	ldr	r3, [pc, #148]	@ (8005458 <state_machine_set_alert_time+0x9c>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d045      	beq.n	8005454 <state_machine_set_alert_time+0x98>
		if(len == 0 && changed){
 80053c8:	4b24      	ldr	r3, [pc, #144]	@ (800545c <state_machine_set_alert_time+0xa0>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d110      	bne.n	80053f2 <state_machine_set_alert_time+0x36>
 80053d0:	4b21      	ldr	r3, [pc, #132]	@ (8005458 <state_machine_set_alert_time+0x9c>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <state_machine_set_alert_time+0x36>
			changed = false;
 80053d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005458 <state_machine_set_alert_time+0x9c>)
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80053de:	f7ff f9b5 	bl	800474c <lcd_clear>
			lcd_put_cur(0, 0);
 80053e2:	2100      	movs	r1, #0
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7ff f9c5 	bl	8004774 <lcd_put_cur>
			lcd_send_string ("TIME(S),#=SAVE");
 80053ea:	481d      	ldr	r0, [pc, #116]	@ (8005460 <state_machine_set_alert_time+0xa4>)
 80053ec:	f7ff f998 	bl	8004720 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 80053f0:	e030      	b.n	8005454 <state_machine_set_alert_time+0x98>
		else if(len != 0){
 80053f2:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <state_machine_set_alert_time+0xa0>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02c      	beq.n	8005454 <state_machine_set_alert_time+0x98>
			lcd_put_cur(1, 0);
 80053fa:	2100      	movs	r1, #0
 80053fc:	2001      	movs	r0, #1
 80053fe:	f7ff f9b9 	bl	8004774 <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 8005402:	4b16      	ldr	r3, [pc, #88]	@ (800545c <state_machine_set_alert_time+0xa0>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	3b01      	subs	r3, #1
 8005408:	4a16      	ldr	r2, [pc, #88]	@ (8005464 <state_machine_set_alert_time+0xa8>)
 800540a:	5cd3      	ldrb	r3, [r2, r3]
 800540c:	2b2a      	cmp	r3, #42	@ 0x2a
 800540e:	d003      	beq.n	8005418 <state_machine_set_alert_time+0x5c>
 8005410:	4b12      	ldr	r3, [pc, #72]	@ (800545c <state_machine_set_alert_time+0xa0>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b09      	cmp	r3, #9
 8005416:	d902      	bls.n	800541e <state_machine_set_alert_time+0x62>
				change_state(DISARMED);
 8005418:	2003      	movs	r0, #3
 800541a:	f7ff fc4b 	bl	8004cb4 <change_state>
			lcd_send_string(str);
 800541e:	4811      	ldr	r0, [pc, #68]	@ (8005464 <state_machine_set_alert_time+0xa8>)
 8005420:	f7ff f97e 	bl	8004720 <lcd_send_string>
			if(str[len - 1] == '#'){
 8005424:	4b0d      	ldr	r3, [pc, #52]	@ (800545c <state_machine_set_alert_time+0xa0>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	3b01      	subs	r3, #1
 800542a:	4a0e      	ldr	r2, [pc, #56]	@ (8005464 <state_machine_set_alert_time+0xa8>)
 800542c:	5cd3      	ldrb	r3, [r2, r3]
 800542e:	2b23      	cmp	r3, #35	@ 0x23
 8005430:	d110      	bne.n	8005454 <state_machine_set_alert_time+0x98>
				countdown_delay = s_to_ms(strtol(str, NULL, 10));
 8005432:	220a      	movs	r2, #10
 8005434:	2100      	movs	r1, #0
 8005436:	480b      	ldr	r0, [pc, #44]	@ (8005464 <state_machine_set_alert_time+0xa8>)
 8005438:	f000 fad8 	bl	80059ec <strtol>
 800543c:	4603      	mov	r3, r0
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fc58 	bl	8004cf4 <s_to_ms>
 8005444:	4603      	mov	r3, r0
 8005446:	4a08      	ldr	r2, [pc, #32]	@ (8005468 <state_machine_set_alert_time+0xac>)
 8005448:	6013      	str	r3, [r2, #0]
				save_new_state();
 800544a:	f7ff fbcb 	bl	8004be4 <save_new_state>
				change_state(DISARMED);
 800544e:	2003      	movs	r0, #3
 8005450:	f7ff fc30 	bl	8004cb4 <change_state>
}
 8005454:	bf00      	nop
 8005456:	bd80      	pop	{r7, pc}
 8005458:	2000000d 	.word	0x2000000d
 800545c:	200002d6 	.word	0x200002d6
 8005460:	08006494 	.word	0x08006494
 8005464:	200002c8 	.word	0x200002c8
 8005468:	20000324 	.word	0x20000324

0800546c <state_machine_set_new_pin>:

void state_machine_set_new_pin(void){
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
	if(changed == true){
 8005470:	4b25      	ldr	r3, [pc, #148]	@ (8005508 <state_machine_set_new_pin+0x9c>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d045      	beq.n	8005504 <state_machine_set_new_pin+0x98>
		if(len == 0 && changed){
 8005478:	4b24      	ldr	r3, [pc, #144]	@ (800550c <state_machine_set_new_pin+0xa0>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d110      	bne.n	80054a2 <state_machine_set_new_pin+0x36>
 8005480:	4b21      	ldr	r3, [pc, #132]	@ (8005508 <state_machine_set_new_pin+0x9c>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00c      	beq.n	80054a2 <state_machine_set_new_pin+0x36>
			changed = false;
 8005488:	4b1f      	ldr	r3, [pc, #124]	@ (8005508 <state_machine_set_new_pin+0x9c>)
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800548e:	f7ff f95d 	bl	800474c <lcd_clear>
			lcd_put_cur(0, 0);
 8005492:	2100      	movs	r1, #0
 8005494:	2000      	movs	r0, #0
 8005496:	f7ff f96d 	bl	8004774 <lcd_put_cur>
			lcd_send_string ("SET PIN,#=SAVE");
 800549a:	481d      	ldr	r0, [pc, #116]	@ (8005510 <state_machine_set_new_pin+0xa4>)
 800549c:	f7ff f940 	bl	8004720 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 80054a0:	e030      	b.n	8005504 <state_machine_set_new_pin+0x98>
		else if(len != 0){
 80054a2:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <state_machine_set_new_pin+0xa0>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02c      	beq.n	8005504 <state_machine_set_new_pin+0x98>
			lcd_put_cur(1, 0);
 80054aa:	2100      	movs	r1, #0
 80054ac:	2001      	movs	r0, #1
 80054ae:	f7ff f961 	bl	8004774 <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <state_machine_set_new_pin+0xa0>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	4a16      	ldr	r2, [pc, #88]	@ (8005514 <state_machine_set_new_pin+0xa8>)
 80054ba:	5cd3      	ldrb	r3, [r2, r3]
 80054bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80054be:	d003      	beq.n	80054c8 <state_machine_set_new_pin+0x5c>
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <state_machine_set_new_pin+0xa0>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b09      	cmp	r3, #9
 80054c6:	d902      	bls.n	80054ce <state_machine_set_new_pin+0x62>
				change_state(DISARMED);
 80054c8:	2003      	movs	r0, #3
 80054ca:	f7ff fbf3 	bl	8004cb4 <change_state>
			lcd_send_string(str);
 80054ce:	4811      	ldr	r0, [pc, #68]	@ (8005514 <state_machine_set_new_pin+0xa8>)
 80054d0:	f7ff f926 	bl	8004720 <lcd_send_string>
			if(str[len - 1] == '#'){
 80054d4:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <state_machine_set_new_pin+0xa0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	3b01      	subs	r3, #1
 80054da:	4a0e      	ldr	r2, [pc, #56]	@ (8005514 <state_machine_set_new_pin+0xa8>)
 80054dc:	5cd3      	ldrb	r3, [r2, r3]
 80054de:	2b23      	cmp	r3, #35	@ 0x23
 80054e0:	d110      	bne.n	8005504 <state_machine_set_new_pin+0x98>
				memset(pin, 0, 9);
 80054e2:	2209      	movs	r2, #9
 80054e4:	2100      	movs	r1, #0
 80054e6:	480c      	ldr	r0, [pc, #48]	@ (8005518 <state_machine_set_new_pin+0xac>)
 80054e8:	f000 fabe 	bl	8005a68 <memset>
				memcpy(pin,str,len);
 80054ec:	4b07      	ldr	r3, [pc, #28]	@ (800550c <state_machine_set_new_pin+0xa0>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4908      	ldr	r1, [pc, #32]	@ (8005514 <state_machine_set_new_pin+0xa8>)
 80054f4:	4808      	ldr	r0, [pc, #32]	@ (8005518 <state_machine_set_new_pin+0xac>)
 80054f6:	f000 fb01 	bl	8005afc <memcpy>
				save_new_state();
 80054fa:	f7ff fb73 	bl	8004be4 <save_new_state>
				change_state(DISARMED);
 80054fe:	2003      	movs	r0, #3
 8005500:	f7ff fbd8 	bl	8004cb4 <change_state>
}
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}
 8005508:	2000000d 	.word	0x2000000d
 800550c:	200002d6 	.word	0x200002d6
 8005510:	080064a4 	.word	0x080064a4
 8005514:	200002c8 	.word	0x200002c8
 8005518:	200002e8 	.word	0x200002e8

0800551c <state_machine_menage_number>:

void state_machine_menage_number(void){
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
	static char code[4] = "";
	bool code_add = false;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
	if(changed == true){
 8005526:	4b6e      	ldr	r3, [pc, #440]	@ (80056e0 <state_machine_menage_number+0x1c4>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80d3 	beq.w	80056d6 <state_machine_menage_number+0x1ba>
		changed = false;
 8005530:	4b6b      	ldr	r3, [pc, #428]	@ (80056e0 <state_machine_menage_number+0x1c4>)
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
		if(!*str) id = 0;
 8005536:	4b6b      	ldr	r3, [pc, #428]	@ (80056e4 <state_machine_menage_number+0x1c8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <state_machine_menage_number+0x2a>
 800553e:	4b6a      	ldr	r3, [pc, #424]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	e061      	b.n	800560a <state_machine_menage_number+0xee>
		else if(*str == '8') id = (id + 1) % 3;
 8005546:	4b67      	ldr	r3, [pc, #412]	@ (80056e4 <state_machine_menage_number+0x1c8>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b38      	cmp	r3, #56	@ 0x38
 800554c:	d10f      	bne.n	800556e <state_machine_menage_number+0x52>
 800554e:	4b66      	ldr	r3, [pc, #408]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	4b65      	ldr	r3, [pc, #404]	@ (80056ec <state_machine_menage_number+0x1d0>)
 8005556:	fb83 3102 	smull	r3, r1, r3, r2
 800555a:	17d3      	asrs	r3, r2, #31
 800555c:	1ac9      	subs	r1, r1, r3
 800555e:	460b      	mov	r3, r1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	440b      	add	r3, r1
 8005564:	1ad1      	subs	r1, r2, r3
 8005566:	b2ca      	uxtb	r2, r1
 8005568:	4b5f      	ldr	r3, [pc, #380]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	e04d      	b.n	800560a <state_machine_menage_number+0xee>
		else if(*str == '2' && id > 0) id = id - 1;
 800556e:	4b5d      	ldr	r3, [pc, #372]	@ (80056e4 <state_machine_menage_number+0x1c8>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b32      	cmp	r3, #50	@ 0x32
 8005574:	d10a      	bne.n	800558c <state_machine_menage_number+0x70>
 8005576:	4b5c      	ldr	r3, [pc, #368]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <state_machine_menage_number+0x70>
 800557e:	4b5a      	ldr	r3, [pc, #360]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	3b01      	subs	r3, #1
 8005584:	b2da      	uxtb	r2, r3
 8005586:	4b58      	ldr	r3, [pc, #352]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e03e      	b.n	800560a <state_machine_menage_number+0xee>
		else if(*str == '2') id = 2;
 800558c:	4b55      	ldr	r3, [pc, #340]	@ (80056e4 <state_machine_menage_number+0x1c8>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b32      	cmp	r3, #50	@ 0x32
 8005592:	d103      	bne.n	800559c <state_machine_menage_number+0x80>
 8005594:	4b54      	ldr	r3, [pc, #336]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e036      	b.n	800560a <state_machine_menage_number+0xee>
		else if(*str == '*') change_state(DISARMED);
 800559c:	4b51      	ldr	r3, [pc, #324]	@ (80056e4 <state_machine_menage_number+0x1c8>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80055a2:	d103      	bne.n	80055ac <state_machine_menage_number+0x90>
 80055a4:	2003      	movs	r0, #3
 80055a6:	f7ff fb85 	bl	8004cb4 <change_state>
 80055aa:	e02e      	b.n	800560a <state_machine_menage_number+0xee>
		else{
			code[strlen(code)] = *str;
 80055ac:	4850      	ldr	r0, [pc, #320]	@ (80056f0 <state_machine_menage_number+0x1d4>)
 80055ae:	f7fa fe21 	bl	80001f4 <strlen>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4a4b      	ldr	r2, [pc, #300]	@ (80056e4 <state_machine_menage_number+0x1c8>)
 80055b6:	7811      	ldrb	r1, [r2, #0]
 80055b8:	4a4d      	ldr	r2, [pc, #308]	@ (80056f0 <state_machine_menage_number+0x1d4>)
 80055ba:	54d1      	strb	r1, [r2, r3]
			code_add = true;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
			if(strcmp(code, "7777") == 0)//REPLACE
 80055c0:	494c      	ldr	r1, [pc, #304]	@ (80056f4 <state_machine_menage_number+0x1d8>)
 80055c2:	484b      	ldr	r0, [pc, #300]	@ (80056f0 <state_machine_menage_number+0x1d4>)
 80055c4:	f7fa fe0c 	bl	80001e0 <strcmp>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <state_machine_menage_number+0xba>
				change_state(REPLACE_NUMBER);
 80055ce:	2006      	movs	r0, #6
 80055d0:	f7ff fb70 	bl	8004cb4 <change_state>
 80055d4:	e019      	b.n	800560a <state_machine_menage_number+0xee>
			else if(strcmp(code,"3333") == 0)//DELETE
 80055d6:	4948      	ldr	r1, [pc, #288]	@ (80056f8 <state_machine_menage_number+0x1dc>)
 80055d8:	4845      	ldr	r0, [pc, #276]	@ (80056f0 <state_machine_menage_number+0x1d4>)
 80055da:	f7fa fe01 	bl	80001e0 <strcmp>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d112      	bne.n	800560a <state_machine_menage_number+0xee>
			{
				for(int i = 0; i < 16; ++i){
 80055e4:	2300      	movs	r3, #0
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	e00a      	b.n	8005600 <state_machine_menage_number+0xe4>
					numbers[id*16 + i] = '\0';
 80055ea:	4b3f      	ldr	r3, [pc, #252]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	011a      	lsls	r2, r3, #4
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	4a41      	ldr	r2, [pc, #260]	@ (80056fc <state_machine_menage_number+0x1e0>)
 80055f6:	2100      	movs	r1, #0
 80055f8:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < 16; ++i){
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	3301      	adds	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b0f      	cmp	r3, #15
 8005604:	ddf1      	ble.n	80055ea <state_machine_menage_number+0xce>
				}
				save_new_state();
 8005606:	f7ff faed 	bl	8004be4 <save_new_state>
			}
		}
		*str = '\0';
 800560a:	4b36      	ldr	r3, [pc, #216]	@ (80056e4 <state_machine_menage_number+0x1c8>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
		len = 0;
 8005610:	4b3b      	ldr	r3, [pc, #236]	@ (8005700 <state_machine_menage_number+0x1e4>)
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
		if(!code_add) memset(code,0,4);
 8005616:	7dfb      	ldrb	r3, [r7, #23]
 8005618:	f083 0301 	eor.w	r3, r3, #1
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <state_machine_menage_number+0x110>
 8005622:	2204      	movs	r2, #4
 8005624:	2100      	movs	r1, #0
 8005626:	4832      	ldr	r0, [pc, #200]	@ (80056f0 <state_machine_menage_number+0x1d4>)
 8005628:	f000 fa1e 	bl	8005a68 <memset>

		char line[14] = "";
 800562c:	2300      	movs	r3, #0
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	811a      	strh	r2, [r3, #8]
		snprintf(line, 14, "->%d.", id + 1);
 800563a:	4b2b      	ldr	r3, [pc, #172]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4638      	mov	r0, r7
 8005642:	4a30      	ldr	r2, [pc, #192]	@ (8005704 <state_machine_menage_number+0x1e8>)
 8005644:	210e      	movs	r1, #14
 8005646:	f000 f9db 	bl	8005a00 <sniprintf>
		memcpy(line+4, numbers + 16*id, 9);
 800564a:	463b      	mov	r3, r7
 800564c:	3304      	adds	r3, #4
 800564e:	4a26      	ldr	r2, [pc, #152]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005650:	7812      	ldrb	r2, [r2, #0]
 8005652:	0112      	lsls	r2, r2, #4
 8005654:	4611      	mov	r1, r2
 8005656:	4a29      	ldr	r2, [pc, #164]	@ (80056fc <state_machine_menage_number+0x1e0>)
 8005658:	4411      	add	r1, r2
 800565a:	2209      	movs	r2, #9
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fa4d 	bl	8005afc <memcpy>
		lcd_clear();
 8005662:	f7ff f873 	bl	800474c <lcd_clear>
		lcd_put_cur(0, 0);
 8005666:	2100      	movs	r1, #0
 8005668:	2000      	movs	r0, #0
 800566a:	f7ff f883 	bl	8004774 <lcd_put_cur>
		lcd_send_string(line);
 800566e:	463b      	mov	r3, r7
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff f855 	bl	8004720 <lcd_send_string>
		lcd_put_cur(1, 0);
 8005676:	2100      	movs	r1, #0
 8005678:	2001      	movs	r0, #1
 800567a:	f7ff f87b 	bl	8004774 <lcd_put_cur>
		snprintf(line, 14, "  %d.", (id + 1)%3 + 1);
 800567e:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	4b19      	ldr	r3, [pc, #100]	@ (80056ec <state_machine_menage_number+0x1d0>)
 8005686:	fb83 3201 	smull	r3, r2, r3, r1
 800568a:	17cb      	asrs	r3, r1, #31
 800568c:	1ad2      	subs	r2, r2, r3
 800568e:	4613      	mov	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4413      	add	r3, r2
 8005694:	1aca      	subs	r2, r1, r3
 8005696:	1c53      	adds	r3, r2, #1
 8005698:	4638      	mov	r0, r7
 800569a:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <state_machine_menage_number+0x1ec>)
 800569c:	210e      	movs	r1, #14
 800569e:	f000 f9af 	bl	8005a00 <sniprintf>
		memcpy(line + 4, numbers + 16*((id+1)%3), 9);
 80056a2:	4638      	mov	r0, r7
 80056a4:	3004      	adds	r0, #4
 80056a6:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <state_machine_menage_number+0x1cc>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	1c59      	adds	r1, r3, #1
 80056ac:	4b0f      	ldr	r3, [pc, #60]	@ (80056ec <state_machine_menage_number+0x1d0>)
 80056ae:	fb83 3201 	smull	r3, r2, r3, r1
 80056b2:	17cb      	asrs	r3, r1, #31
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	1aca      	subs	r2, r1, r3
 80056be:	0113      	lsls	r3, r2, #4
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b0e      	ldr	r3, [pc, #56]	@ (80056fc <state_machine_menage_number+0x1e0>)
 80056c4:	4413      	add	r3, r2
 80056c6:	2209      	movs	r2, #9
 80056c8:	4619      	mov	r1, r3
 80056ca:	f000 fa17 	bl	8005afc <memcpy>
		lcd_send_string(line);
 80056ce:	463b      	mov	r3, r7
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff f825 	bl	8004720 <lcd_send_string>
	}
}
 80056d6:	bf00      	nop
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	2000000d 	.word	0x2000000d
 80056e4:	200002c8 	.word	0x200002c8
 80056e8:	200002d7 	.word	0x200002d7
 80056ec:	55555556 	.word	0x55555556
 80056f0:	20000330 	.word	0x20000330
 80056f4:	080064b4 	.word	0x080064b4
 80056f8:	080064bc 	.word	0x080064bc
 80056fc:	200002f4 	.word	0x200002f4
 8005700:	200002d6 	.word	0x200002d6
 8005704:	080064c4 	.word	0x080064c4
 8005708:	080064cc 	.word	0x080064cc

0800570c <state_machine_replace_number>:

void state_machine_replace_number(void){
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
	if(changed == true){
 8005710:	4b27      	ldr	r3, [pc, #156]	@ (80057b0 <state_machine_replace_number+0xa4>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d049      	beq.n	80057ac <state_machine_replace_number+0xa0>
		changed = false;
 8005718:	4b25      	ldr	r3, [pc, #148]	@ (80057b0 <state_machine_replace_number+0xa4>)
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 800571e:	f7ff f815 	bl	800474c <lcd_clear>
		lcd_put_cur(0, 0);
 8005722:	2100      	movs	r1, #0
 8005724:	2000      	movs	r0, #0
 8005726:	f7ff f825 	bl	8004774 <lcd_put_cur>
		lcd_send_string("ADD NUMBER #-save");
 800572a:	4822      	ldr	r0, [pc, #136]	@ (80057b4 <state_machine_replace_number+0xa8>)
 800572c:	f7fe fff8 	bl	8004720 <lcd_send_string>
		lcd_put_cur(1, 0);
 8005730:	2100      	movs	r1, #0
 8005732:	2001      	movs	r0, #1
 8005734:	f7ff f81e 	bl	8004774 <lcd_put_cur>
		str[len] = '\0';
 8005738:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <state_machine_replace_number+0xac>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	4b1f      	ldr	r3, [pc, #124]	@ (80057bc <state_machine_replace_number+0xb0>)
 8005740:	2100      	movs	r1, #0
 8005742:	5499      	strb	r1, [r3, r2]
		lcd_send_string(str);
 8005744:	481d      	ldr	r0, [pc, #116]	@ (80057bc <state_machine_replace_number+0xb0>)
 8005746:	f7fe ffeb 	bl	8004720 <lcd_send_string>

		if(str[len - 1] == '*' || len > 10 || (len != 10 && str[len - 1] == '#')) change_state(MENAGE_NUMBER);
 800574a:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <state_machine_replace_number+0xac>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	3b01      	subs	r3, #1
 8005750:	4a1a      	ldr	r2, [pc, #104]	@ (80057bc <state_machine_replace_number+0xb0>)
 8005752:	5cd3      	ldrb	r3, [r2, r3]
 8005754:	2b2a      	cmp	r3, #42	@ 0x2a
 8005756:	d00e      	beq.n	8005776 <state_machine_replace_number+0x6a>
 8005758:	4b17      	ldr	r3, [pc, #92]	@ (80057b8 <state_machine_replace_number+0xac>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b0a      	cmp	r3, #10
 800575e:	d80a      	bhi.n	8005776 <state_machine_replace_number+0x6a>
 8005760:	4b15      	ldr	r3, [pc, #84]	@ (80057b8 <state_machine_replace_number+0xac>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b0a      	cmp	r3, #10
 8005766:	d00a      	beq.n	800577e <state_machine_replace_number+0x72>
 8005768:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <state_machine_replace_number+0xac>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	4a13      	ldr	r2, [pc, #76]	@ (80057bc <state_machine_replace_number+0xb0>)
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	2b23      	cmp	r3, #35	@ 0x23
 8005774:	d103      	bne.n	800577e <state_machine_replace_number+0x72>
 8005776:	2005      	movs	r0, #5
 8005778:	f7ff fa9c 	bl	8004cb4 <change_state>
			memcpy(numbers + id * 16, str, 9);
			save_new_state();
			change_state(MENAGE_NUMBER);
		}
	}
}
 800577c:	e016      	b.n	80057ac <state_machine_replace_number+0xa0>
		else if(str[len - 1] == '#'){
 800577e:	4b0e      	ldr	r3, [pc, #56]	@ (80057b8 <state_machine_replace_number+0xac>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	4a0d      	ldr	r2, [pc, #52]	@ (80057bc <state_machine_replace_number+0xb0>)
 8005786:	5cd3      	ldrb	r3, [r2, r3]
 8005788:	2b23      	cmp	r3, #35	@ 0x23
 800578a:	d10f      	bne.n	80057ac <state_machine_replace_number+0xa0>
			memcpy(numbers + id * 16, str, 9);
 800578c:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <state_machine_replace_number+0xb4>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	461a      	mov	r2, r3
 8005794:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <state_machine_replace_number+0xb8>)
 8005796:	4413      	add	r3, r2
 8005798:	2209      	movs	r2, #9
 800579a:	4908      	ldr	r1, [pc, #32]	@ (80057bc <state_machine_replace_number+0xb0>)
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f9ad 	bl	8005afc <memcpy>
			save_new_state();
 80057a2:	f7ff fa1f 	bl	8004be4 <save_new_state>
			change_state(MENAGE_NUMBER);
 80057a6:	2005      	movs	r0, #5
 80057a8:	f7ff fa84 	bl	8004cb4 <change_state>
}
 80057ac:	bf00      	nop
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	2000000d 	.word	0x2000000d
 80057b4:	080064d4 	.word	0x080064d4
 80057b8:	200002d6 	.word	0x200002d6
 80057bc:	200002c8 	.word	0x200002c8
 80057c0:	200002d7 	.word	0x200002d7
 80057c4:	200002f4 	.word	0x200002f4

080057c8 <state_machine_arming>:

void state_machine_arming(void){
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
	if(len == 1 && str[len - 1] == '#') change_state(DISARMED);
 80057cc:	4b19      	ldr	r3, [pc, #100]	@ (8005834 <state_machine_arming+0x6c>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10a      	bne.n	80057ea <state_machine_arming+0x22>
 80057d4:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <state_machine_arming+0x6c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	4a17      	ldr	r2, [pc, #92]	@ (8005838 <state_machine_arming+0x70>)
 80057dc:	5cd3      	ldrb	r3, [r2, r3]
 80057de:	2b23      	cmp	r3, #35	@ 0x23
 80057e0:	d103      	bne.n	80057ea <state_machine_arming+0x22>
 80057e2:	2003      	movs	r0, #3
 80057e4:	f7ff fa66 	bl	8004cb4 <change_state>
		HAL_Delay(100);
	}
	else if(HAL_GetTick() - arming_ms > arming_time){
		change_state(ARMED);
	}
}
 80057e8:	e021      	b.n	800582e <state_machine_arming+0x66>
	else if (HAL_GetTick() - arming_ms < 50){
 80057ea:	f7fb fad1 	bl	8000d90 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	4b12      	ldr	r3, [pc, #72]	@ (800583c <state_machine_arming+0x74>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b31      	cmp	r3, #49	@ 0x31
 80057f8:	d80c      	bhi.n	8005814 <state_machine_arming+0x4c>
		lcd_clear();
 80057fa:	f7fe ffa7 	bl	800474c <lcd_clear>
		lcd_put_cur(0,0);
 80057fe:	2100      	movs	r1, #0
 8005800:	2000      	movs	r0, #0
 8005802:	f7fe ffb7 	bl	8004774 <lcd_put_cur>
		lcd_send_string("Arming");
 8005806:	480e      	ldr	r0, [pc, #56]	@ (8005840 <state_machine_arming+0x78>)
 8005808:	f7fe ff8a 	bl	8004720 <lcd_send_string>
		HAL_Delay(100);
 800580c:	2064      	movs	r0, #100	@ 0x64
 800580e:	f7fb facb 	bl	8000da8 <HAL_Delay>
}
 8005812:	e00c      	b.n	800582e <state_machine_arming+0x66>
	else if(HAL_GetTick() - arming_ms > arming_time){
 8005814:	f7fb fabc 	bl	8000d90 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	4b08      	ldr	r3, [pc, #32]	@ (800583c <state_machine_arming+0x74>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <state_machine_arming+0x7c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d902      	bls.n	800582e <state_machine_arming+0x66>
		change_state(ARMED);
 8005828:	2000      	movs	r0, #0
 800582a:	f7ff fa43 	bl	8004cb4 <change_state>
}
 800582e:	bf00      	nop
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	200002d6 	.word	0x200002d6
 8005838:	200002c8 	.word	0x200002c8
 800583c:	200002e4 	.word	0x200002e4
 8005840:	080064e8 	.word	0x080064e8
 8005844:	20000010 	.word	0x20000010

08005848 <state_machine_set_arming_time>:


void state_machine_set_arming_time(void){
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
	if(changed == true){
 800584c:	4b25      	ldr	r3, [pc, #148]	@ (80058e4 <state_machine_set_arming_time+0x9c>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d045      	beq.n	80058e0 <state_machine_set_arming_time+0x98>
		if(len == 0 && changed){
 8005854:	4b24      	ldr	r3, [pc, #144]	@ (80058e8 <state_machine_set_arming_time+0xa0>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d110      	bne.n	800587e <state_machine_set_arming_time+0x36>
 800585c:	4b21      	ldr	r3, [pc, #132]	@ (80058e4 <state_machine_set_arming_time+0x9c>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00c      	beq.n	800587e <state_machine_set_arming_time+0x36>
			changed = false;
 8005864:	4b1f      	ldr	r3, [pc, #124]	@ (80058e4 <state_machine_set_arming_time+0x9c>)
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800586a:	f7fe ff6f 	bl	800474c <lcd_clear>
			lcd_put_cur(0, 0);
 800586e:	2100      	movs	r1, #0
 8005870:	2000      	movs	r0, #0
 8005872:	f7fe ff7f 	bl	8004774 <lcd_put_cur>
			lcd_send_string ("TIME(S),#=SAVE");
 8005876:	481d      	ldr	r0, [pc, #116]	@ (80058ec <state_machine_set_arming_time+0xa4>)
 8005878:	f7fe ff52 	bl	8004720 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 800587c:	e030      	b.n	80058e0 <state_machine_set_arming_time+0x98>
		else if(len != 0){
 800587e:	4b1a      	ldr	r3, [pc, #104]	@ (80058e8 <state_machine_set_arming_time+0xa0>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02c      	beq.n	80058e0 <state_machine_set_arming_time+0x98>
			lcd_put_cur(1, 0);
 8005886:	2100      	movs	r1, #0
 8005888:	2001      	movs	r0, #1
 800588a:	f7fe ff73 	bl	8004774 <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 800588e:	4b16      	ldr	r3, [pc, #88]	@ (80058e8 <state_machine_set_arming_time+0xa0>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	3b01      	subs	r3, #1
 8005894:	4a16      	ldr	r2, [pc, #88]	@ (80058f0 <state_machine_set_arming_time+0xa8>)
 8005896:	5cd3      	ldrb	r3, [r2, r3]
 8005898:	2b2a      	cmp	r3, #42	@ 0x2a
 800589a:	d003      	beq.n	80058a4 <state_machine_set_arming_time+0x5c>
 800589c:	4b12      	ldr	r3, [pc, #72]	@ (80058e8 <state_machine_set_arming_time+0xa0>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b09      	cmp	r3, #9
 80058a2:	d902      	bls.n	80058aa <state_machine_set_arming_time+0x62>
				change_state(DISARMED);
 80058a4:	2003      	movs	r0, #3
 80058a6:	f7ff fa05 	bl	8004cb4 <change_state>
			lcd_send_string(str);
 80058aa:	4811      	ldr	r0, [pc, #68]	@ (80058f0 <state_machine_set_arming_time+0xa8>)
 80058ac:	f7fe ff38 	bl	8004720 <lcd_send_string>
			if(str[len - 1] == '#'){
 80058b0:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <state_machine_set_arming_time+0xa0>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	4a0e      	ldr	r2, [pc, #56]	@ (80058f0 <state_machine_set_arming_time+0xa8>)
 80058b8:	5cd3      	ldrb	r3, [r2, r3]
 80058ba:	2b23      	cmp	r3, #35	@ 0x23
 80058bc:	d110      	bne.n	80058e0 <state_machine_set_arming_time+0x98>
				arming_time = s_to_ms(strtol(str, NULL, 10));
 80058be:	220a      	movs	r2, #10
 80058c0:	2100      	movs	r1, #0
 80058c2:	480b      	ldr	r0, [pc, #44]	@ (80058f0 <state_machine_set_arming_time+0xa8>)
 80058c4:	f000 f892 	bl	80059ec <strtol>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7ff fa12 	bl	8004cf4 <s_to_ms>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4a08      	ldr	r2, [pc, #32]	@ (80058f4 <state_machine_set_arming_time+0xac>)
 80058d4:	6013      	str	r3, [r2, #0]
				save_new_state();
 80058d6:	f7ff f985 	bl	8004be4 <save_new_state>
				change_state(DISARMED);
 80058da:	2003      	movs	r0, #3
 80058dc:	f7ff f9ea 	bl	8004cb4 <change_state>
}
 80058e0:	bf00      	nop
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	2000000d 	.word	0x2000000d
 80058e8:	200002d6 	.word	0x200002d6
 80058ec:	08006494 	.word	0x08006494
 80058f0:	200002c8 	.word	0x200002c8
 80058f4:	20000010 	.word	0x20000010

080058f8 <_strtol_l.constprop.0>:
 80058f8:	2b24      	cmp	r3, #36	@ 0x24
 80058fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058fe:	4686      	mov	lr, r0
 8005900:	4690      	mov	r8, r2
 8005902:	d801      	bhi.n	8005908 <_strtol_l.constprop.0+0x10>
 8005904:	2b01      	cmp	r3, #1
 8005906:	d106      	bne.n	8005916 <_strtol_l.constprop.0+0x1e>
 8005908:	f000 f8cc 	bl	8005aa4 <__errno>
 800590c:	2316      	movs	r3, #22
 800590e:	6003      	str	r3, [r0, #0]
 8005910:	2000      	movs	r0, #0
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	4834      	ldr	r0, [pc, #208]	@ (80059e8 <_strtol_l.constprop.0+0xf0>)
 8005918:	460d      	mov	r5, r1
 800591a:	462a      	mov	r2, r5
 800591c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005920:	5d06      	ldrb	r6, [r0, r4]
 8005922:	f016 0608 	ands.w	r6, r6, #8
 8005926:	d1f8      	bne.n	800591a <_strtol_l.constprop.0+0x22>
 8005928:	2c2d      	cmp	r4, #45	@ 0x2d
 800592a:	d12d      	bne.n	8005988 <_strtol_l.constprop.0+0x90>
 800592c:	782c      	ldrb	r4, [r5, #0]
 800592e:	2601      	movs	r6, #1
 8005930:	1c95      	adds	r5, r2, #2
 8005932:	f033 0210 	bics.w	r2, r3, #16
 8005936:	d109      	bne.n	800594c <_strtol_l.constprop.0+0x54>
 8005938:	2c30      	cmp	r4, #48	@ 0x30
 800593a:	d12a      	bne.n	8005992 <_strtol_l.constprop.0+0x9a>
 800593c:	782a      	ldrb	r2, [r5, #0]
 800593e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005942:	2a58      	cmp	r2, #88	@ 0x58
 8005944:	d125      	bne.n	8005992 <_strtol_l.constprop.0+0x9a>
 8005946:	786c      	ldrb	r4, [r5, #1]
 8005948:	2310      	movs	r3, #16
 800594a:	3502      	adds	r5, #2
 800594c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005950:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005954:	2200      	movs	r2, #0
 8005956:	fbbc f9f3 	udiv	r9, ip, r3
 800595a:	4610      	mov	r0, r2
 800595c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005960:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005964:	2f09      	cmp	r7, #9
 8005966:	d81b      	bhi.n	80059a0 <_strtol_l.constprop.0+0xa8>
 8005968:	463c      	mov	r4, r7
 800596a:	42a3      	cmp	r3, r4
 800596c:	dd27      	ble.n	80059be <_strtol_l.constprop.0+0xc6>
 800596e:	1c57      	adds	r7, r2, #1
 8005970:	d007      	beq.n	8005982 <_strtol_l.constprop.0+0x8a>
 8005972:	4581      	cmp	r9, r0
 8005974:	d320      	bcc.n	80059b8 <_strtol_l.constprop.0+0xc0>
 8005976:	d101      	bne.n	800597c <_strtol_l.constprop.0+0x84>
 8005978:	45a2      	cmp	sl, r4
 800597a:	db1d      	blt.n	80059b8 <_strtol_l.constprop.0+0xc0>
 800597c:	fb00 4003 	mla	r0, r0, r3, r4
 8005980:	2201      	movs	r2, #1
 8005982:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005986:	e7eb      	b.n	8005960 <_strtol_l.constprop.0+0x68>
 8005988:	2c2b      	cmp	r4, #43	@ 0x2b
 800598a:	bf04      	itt	eq
 800598c:	782c      	ldrbeq	r4, [r5, #0]
 800598e:	1c95      	addeq	r5, r2, #2
 8005990:	e7cf      	b.n	8005932 <_strtol_l.constprop.0+0x3a>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1da      	bne.n	800594c <_strtol_l.constprop.0+0x54>
 8005996:	2c30      	cmp	r4, #48	@ 0x30
 8005998:	bf0c      	ite	eq
 800599a:	2308      	moveq	r3, #8
 800599c:	230a      	movne	r3, #10
 800599e:	e7d5      	b.n	800594c <_strtol_l.constprop.0+0x54>
 80059a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80059a4:	2f19      	cmp	r7, #25
 80059a6:	d801      	bhi.n	80059ac <_strtol_l.constprop.0+0xb4>
 80059a8:	3c37      	subs	r4, #55	@ 0x37
 80059aa:	e7de      	b.n	800596a <_strtol_l.constprop.0+0x72>
 80059ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80059b0:	2f19      	cmp	r7, #25
 80059b2:	d804      	bhi.n	80059be <_strtol_l.constprop.0+0xc6>
 80059b4:	3c57      	subs	r4, #87	@ 0x57
 80059b6:	e7d8      	b.n	800596a <_strtol_l.constprop.0+0x72>
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295
 80059bc:	e7e1      	b.n	8005982 <_strtol_l.constprop.0+0x8a>
 80059be:	1c53      	adds	r3, r2, #1
 80059c0:	d108      	bne.n	80059d4 <_strtol_l.constprop.0+0xdc>
 80059c2:	2322      	movs	r3, #34	@ 0x22
 80059c4:	f8ce 3000 	str.w	r3, [lr]
 80059c8:	4660      	mov	r0, ip
 80059ca:	f1b8 0f00 	cmp.w	r8, #0
 80059ce:	d0a0      	beq.n	8005912 <_strtol_l.constprop.0+0x1a>
 80059d0:	1e69      	subs	r1, r5, #1
 80059d2:	e006      	b.n	80059e2 <_strtol_l.constprop.0+0xea>
 80059d4:	b106      	cbz	r6, 80059d8 <_strtol_l.constprop.0+0xe0>
 80059d6:	4240      	negs	r0, r0
 80059d8:	f1b8 0f00 	cmp.w	r8, #0
 80059dc:	d099      	beq.n	8005912 <_strtol_l.constprop.0+0x1a>
 80059de:	2a00      	cmp	r2, #0
 80059e0:	d1f6      	bne.n	80059d0 <_strtol_l.constprop.0+0xd8>
 80059e2:	f8c8 1000 	str.w	r1, [r8]
 80059e6:	e794      	b.n	8005912 <_strtol_l.constprop.0+0x1a>
 80059e8:	08006509 	.word	0x08006509

080059ec <strtol>:
 80059ec:	4613      	mov	r3, r2
 80059ee:	460a      	mov	r2, r1
 80059f0:	4601      	mov	r1, r0
 80059f2:	4802      	ldr	r0, [pc, #8]	@ (80059fc <strtol+0x10>)
 80059f4:	6800      	ldr	r0, [r0, #0]
 80059f6:	f7ff bf7f 	b.w	80058f8 <_strtol_l.constprop.0>
 80059fa:	bf00      	nop
 80059fc:	2000004c 	.word	0x2000004c

08005a00 <sniprintf>:
 8005a00:	b40c      	push	{r2, r3}
 8005a02:	b530      	push	{r4, r5, lr}
 8005a04:	4b17      	ldr	r3, [pc, #92]	@ (8005a64 <sniprintf+0x64>)
 8005a06:	1e0c      	subs	r4, r1, #0
 8005a08:	681d      	ldr	r5, [r3, #0]
 8005a0a:	b09d      	sub	sp, #116	@ 0x74
 8005a0c:	da08      	bge.n	8005a20 <sniprintf+0x20>
 8005a0e:	238b      	movs	r3, #139	@ 0x8b
 8005a10:	602b      	str	r3, [r5, #0]
 8005a12:	f04f 30ff 	mov.w	r0, #4294967295
 8005a16:	b01d      	add	sp, #116	@ 0x74
 8005a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a1c:	b002      	add	sp, #8
 8005a1e:	4770      	bx	lr
 8005a20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a28:	bf14      	ite	ne
 8005a2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a2e:	4623      	moveq	r3, r4
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a38:	9002      	str	r0, [sp, #8]
 8005a3a:	9006      	str	r0, [sp, #24]
 8005a3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a42:	ab21      	add	r3, sp, #132	@ 0x84
 8005a44:	a902      	add	r1, sp, #8
 8005a46:	4628      	mov	r0, r5
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	f000 f9b9 	bl	8005dc0 <_svfiprintf_r>
 8005a4e:	1c43      	adds	r3, r0, #1
 8005a50:	bfbc      	itt	lt
 8005a52:	238b      	movlt	r3, #139	@ 0x8b
 8005a54:	602b      	strlt	r3, [r5, #0]
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	d0dd      	beq.n	8005a16 <sniprintf+0x16>
 8005a5a:	9b02      	ldr	r3, [sp, #8]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e7d9      	b.n	8005a16 <sniprintf+0x16>
 8005a62:	bf00      	nop
 8005a64:	2000004c 	.word	0x2000004c

08005a68 <memset>:
 8005a68:	4402      	add	r2, r0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <memset+0xa>
 8005a70:	4770      	bx	lr
 8005a72:	f803 1b01 	strb.w	r1, [r3], #1
 8005a76:	e7f9      	b.n	8005a6c <memset+0x4>

08005a78 <strstr>:
 8005a78:	780a      	ldrb	r2, [r1, #0]
 8005a7a:	b570      	push	{r4, r5, r6, lr}
 8005a7c:	b96a      	cbnz	r2, 8005a9a <strstr+0x22>
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d109      	bne.n	8005a98 <strstr+0x20>
 8005a84:	460c      	mov	r4, r1
 8005a86:	4605      	mov	r5, r0
 8005a88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0f6      	beq.n	8005a7e <strstr+0x6>
 8005a90:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005a94:	429e      	cmp	r6, r3
 8005a96:	d0f7      	beq.n	8005a88 <strstr+0x10>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	7803      	ldrb	r3, [r0, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1ef      	bne.n	8005a80 <strstr+0x8>
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	e7ec      	b.n	8005a7e <strstr+0x6>

08005aa4 <__errno>:
 8005aa4:	4b01      	ldr	r3, [pc, #4]	@ (8005aac <__errno+0x8>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	2000004c 	.word	0x2000004c

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1b64      	subs	r4, r4, r5
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2600      	movs	r6, #0
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f000 fc66 	bl	8006394 <_init>
 8005ac8:	1b64      	subs	r4, r4, r5
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2600      	movs	r6, #0
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08006644 	.word	0x08006644
 8005aec:	08006644 	.word	0x08006644
 8005af0:	08006644 	.word	0x08006644
 8005af4:	08006648 	.word	0x08006648

08005af8 <__retarget_lock_acquire_recursive>:
 8005af8:	4770      	bx	lr

08005afa <__retarget_lock_release_recursive>:
 8005afa:	4770      	bx	lr

08005afc <memcpy>:
 8005afc:	440a      	add	r2, r1
 8005afe:	4291      	cmp	r1, r2
 8005b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b04:	d100      	bne.n	8005b08 <memcpy+0xc>
 8005b06:	4770      	bx	lr
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b12:	4291      	cmp	r1, r2
 8005b14:	d1f9      	bne.n	8005b0a <memcpy+0xe>
 8005b16:	bd10      	pop	{r4, pc}

08005b18 <_free_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	d041      	beq.n	8005ba4 <_free_r+0x8c>
 8005b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b24:	1f0c      	subs	r4, r1, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bfb8      	it	lt
 8005b2a:	18e4      	addlt	r4, r4, r3
 8005b2c:	f000 f8e0 	bl	8005cf0 <__malloc_lock>
 8005b30:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba8 <_free_r+0x90>)
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	b933      	cbnz	r3, 8005b44 <_free_r+0x2c>
 8005b36:	6063      	str	r3, [r4, #4]
 8005b38:	6014      	str	r4, [r2, #0]
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b40:	f000 b8dc 	b.w	8005cfc <__malloc_unlock>
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d908      	bls.n	8005b5a <_free_r+0x42>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	1821      	adds	r1, r4, r0
 8005b4c:	428b      	cmp	r3, r1
 8005b4e:	bf01      	itttt	eq
 8005b50:	6819      	ldreq	r1, [r3, #0]
 8005b52:	685b      	ldreq	r3, [r3, #4]
 8005b54:	1809      	addeq	r1, r1, r0
 8005b56:	6021      	streq	r1, [r4, #0]
 8005b58:	e7ed      	b.n	8005b36 <_free_r+0x1e>
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	b10b      	cbz	r3, 8005b64 <_free_r+0x4c>
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	d9fa      	bls.n	8005b5a <_free_r+0x42>
 8005b64:	6811      	ldr	r1, [r2, #0]
 8005b66:	1850      	adds	r0, r2, r1
 8005b68:	42a0      	cmp	r0, r4
 8005b6a:	d10b      	bne.n	8005b84 <_free_r+0x6c>
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	4401      	add	r1, r0
 8005b70:	1850      	adds	r0, r2, r1
 8005b72:	4283      	cmp	r3, r0
 8005b74:	6011      	str	r1, [r2, #0]
 8005b76:	d1e0      	bne.n	8005b3a <_free_r+0x22>
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	6053      	str	r3, [r2, #4]
 8005b7e:	4408      	add	r0, r1
 8005b80:	6010      	str	r0, [r2, #0]
 8005b82:	e7da      	b.n	8005b3a <_free_r+0x22>
 8005b84:	d902      	bls.n	8005b8c <_free_r+0x74>
 8005b86:	230c      	movs	r3, #12
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	e7d6      	b.n	8005b3a <_free_r+0x22>
 8005b8c:	6820      	ldr	r0, [r4, #0]
 8005b8e:	1821      	adds	r1, r4, r0
 8005b90:	428b      	cmp	r3, r1
 8005b92:	bf04      	itt	eq
 8005b94:	6819      	ldreq	r1, [r3, #0]
 8005b96:	685b      	ldreq	r3, [r3, #4]
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	bf04      	itt	eq
 8005b9c:	1809      	addeq	r1, r1, r0
 8005b9e:	6021      	streq	r1, [r4, #0]
 8005ba0:	6054      	str	r4, [r2, #4]
 8005ba2:	e7ca      	b.n	8005b3a <_free_r+0x22>
 8005ba4:	bd38      	pop	{r3, r4, r5, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000478 	.word	0x20000478

08005bac <sbrk_aligned>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4e0f      	ldr	r6, [pc, #60]	@ (8005bec <sbrk_aligned+0x40>)
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	6831      	ldr	r1, [r6, #0]
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	b911      	cbnz	r1, 8005bbe <sbrk_aligned+0x12>
 8005bb8:	f000 fba6 	bl	8006308 <_sbrk_r>
 8005bbc:	6030      	str	r0, [r6, #0]
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 fba1 	bl	8006308 <_sbrk_r>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	d103      	bne.n	8005bd2 <sbrk_aligned+0x26>
 8005bca:	f04f 34ff 	mov.w	r4, #4294967295
 8005bce:	4620      	mov	r0, r4
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
 8005bd2:	1cc4      	adds	r4, r0, #3
 8005bd4:	f024 0403 	bic.w	r4, r4, #3
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d0f8      	beq.n	8005bce <sbrk_aligned+0x22>
 8005bdc:	1a21      	subs	r1, r4, r0
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 fb92 	bl	8006308 <_sbrk_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d1f2      	bne.n	8005bce <sbrk_aligned+0x22>
 8005be8:	e7ef      	b.n	8005bca <sbrk_aligned+0x1e>
 8005bea:	bf00      	nop
 8005bec:	20000474 	.word	0x20000474

08005bf0 <_malloc_r>:
 8005bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf4:	1ccd      	adds	r5, r1, #3
 8005bf6:	f025 0503 	bic.w	r5, r5, #3
 8005bfa:	3508      	adds	r5, #8
 8005bfc:	2d0c      	cmp	r5, #12
 8005bfe:	bf38      	it	cc
 8005c00:	250c      	movcc	r5, #12
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	4606      	mov	r6, r0
 8005c06:	db01      	blt.n	8005c0c <_malloc_r+0x1c>
 8005c08:	42a9      	cmp	r1, r5
 8005c0a:	d904      	bls.n	8005c16 <_malloc_r+0x26>
 8005c0c:	230c      	movs	r3, #12
 8005c0e:	6033      	str	r3, [r6, #0]
 8005c10:	2000      	movs	r0, #0
 8005c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cec <_malloc_r+0xfc>
 8005c1a:	f000 f869 	bl	8005cf0 <__malloc_lock>
 8005c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c22:	461c      	mov	r4, r3
 8005c24:	bb44      	cbnz	r4, 8005c78 <_malloc_r+0x88>
 8005c26:	4629      	mov	r1, r5
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f7ff ffbf 	bl	8005bac <sbrk_aligned>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	4604      	mov	r4, r0
 8005c32:	d158      	bne.n	8005ce6 <_malloc_r+0xf6>
 8005c34:	f8d8 4000 	ldr.w	r4, [r8]
 8005c38:	4627      	mov	r7, r4
 8005c3a:	2f00      	cmp	r7, #0
 8005c3c:	d143      	bne.n	8005cc6 <_malloc_r+0xd6>
 8005c3e:	2c00      	cmp	r4, #0
 8005c40:	d04b      	beq.n	8005cda <_malloc_r+0xea>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	4639      	mov	r1, r7
 8005c46:	4630      	mov	r0, r6
 8005c48:	eb04 0903 	add.w	r9, r4, r3
 8005c4c:	f000 fb5c 	bl	8006308 <_sbrk_r>
 8005c50:	4581      	cmp	r9, r0
 8005c52:	d142      	bne.n	8005cda <_malloc_r+0xea>
 8005c54:	6821      	ldr	r1, [r4, #0]
 8005c56:	1a6d      	subs	r5, r5, r1
 8005c58:	4629      	mov	r1, r5
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f7ff ffa6 	bl	8005bac <sbrk_aligned>
 8005c60:	3001      	adds	r0, #1
 8005c62:	d03a      	beq.n	8005cda <_malloc_r+0xea>
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	442b      	add	r3, r5
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	bb62      	cbnz	r2, 8005ccc <_malloc_r+0xdc>
 8005c72:	f8c8 7000 	str.w	r7, [r8]
 8005c76:	e00f      	b.n	8005c98 <_malloc_r+0xa8>
 8005c78:	6822      	ldr	r2, [r4, #0]
 8005c7a:	1b52      	subs	r2, r2, r5
 8005c7c:	d420      	bmi.n	8005cc0 <_malloc_r+0xd0>
 8005c7e:	2a0b      	cmp	r2, #11
 8005c80:	d917      	bls.n	8005cb2 <_malloc_r+0xc2>
 8005c82:	1961      	adds	r1, r4, r5
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	6025      	str	r5, [r4, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	6059      	strne	r1, [r3, #4]
 8005c8c:	6863      	ldr	r3, [r4, #4]
 8005c8e:	bf08      	it	eq
 8005c90:	f8c8 1000 	streq.w	r1, [r8]
 8005c94:	5162      	str	r2, [r4, r5]
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 f82f 	bl	8005cfc <__malloc_unlock>
 8005c9e:	f104 000b 	add.w	r0, r4, #11
 8005ca2:	1d23      	adds	r3, r4, #4
 8005ca4:	f020 0007 	bic.w	r0, r0, #7
 8005ca8:	1ac2      	subs	r2, r0, r3
 8005caa:	bf1c      	itt	ne
 8005cac:	1a1b      	subne	r3, r3, r0
 8005cae:	50a3      	strne	r3, [r4, r2]
 8005cb0:	e7af      	b.n	8005c12 <_malloc_r+0x22>
 8005cb2:	6862      	ldr	r2, [r4, #4]
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	bf0c      	ite	eq
 8005cb8:	f8c8 2000 	streq.w	r2, [r8]
 8005cbc:	605a      	strne	r2, [r3, #4]
 8005cbe:	e7eb      	b.n	8005c98 <_malloc_r+0xa8>
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	6864      	ldr	r4, [r4, #4]
 8005cc4:	e7ae      	b.n	8005c24 <_malloc_r+0x34>
 8005cc6:	463c      	mov	r4, r7
 8005cc8:	687f      	ldr	r7, [r7, #4]
 8005cca:	e7b6      	b.n	8005c3a <_malloc_r+0x4a>
 8005ccc:	461a      	mov	r2, r3
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	d1fb      	bne.n	8005ccc <_malloc_r+0xdc>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6053      	str	r3, [r2, #4]
 8005cd8:	e7de      	b.n	8005c98 <_malloc_r+0xa8>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	6033      	str	r3, [r6, #0]
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f000 f80c 	bl	8005cfc <__malloc_unlock>
 8005ce4:	e794      	b.n	8005c10 <_malloc_r+0x20>
 8005ce6:	6005      	str	r5, [r0, #0]
 8005ce8:	e7d6      	b.n	8005c98 <_malloc_r+0xa8>
 8005cea:	bf00      	nop
 8005cec:	20000478 	.word	0x20000478

08005cf0 <__malloc_lock>:
 8005cf0:	4801      	ldr	r0, [pc, #4]	@ (8005cf8 <__malloc_lock+0x8>)
 8005cf2:	f7ff bf01 	b.w	8005af8 <__retarget_lock_acquire_recursive>
 8005cf6:	bf00      	nop
 8005cf8:	20000470 	.word	0x20000470

08005cfc <__malloc_unlock>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	@ (8005d04 <__malloc_unlock+0x8>)
 8005cfe:	f7ff befc 	b.w	8005afa <__retarget_lock_release_recursive>
 8005d02:	bf00      	nop
 8005d04:	20000470 	.word	0x20000470

08005d08 <__ssputs_r>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	688e      	ldr	r6, [r1, #8]
 8005d0e:	461f      	mov	r7, r3
 8005d10:	42be      	cmp	r6, r7
 8005d12:	680b      	ldr	r3, [r1, #0]
 8005d14:	4682      	mov	sl, r0
 8005d16:	460c      	mov	r4, r1
 8005d18:	4690      	mov	r8, r2
 8005d1a:	d82d      	bhi.n	8005d78 <__ssputs_r+0x70>
 8005d1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d24:	d026      	beq.n	8005d74 <__ssputs_r+0x6c>
 8005d26:	6965      	ldr	r5, [r4, #20]
 8005d28:	6909      	ldr	r1, [r1, #16]
 8005d2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d2e:	eba3 0901 	sub.w	r9, r3, r1
 8005d32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d36:	1c7b      	adds	r3, r7, #1
 8005d38:	444b      	add	r3, r9
 8005d3a:	106d      	asrs	r5, r5, #1
 8005d3c:	429d      	cmp	r5, r3
 8005d3e:	bf38      	it	cc
 8005d40:	461d      	movcc	r5, r3
 8005d42:	0553      	lsls	r3, r2, #21
 8005d44:	d527      	bpl.n	8005d96 <__ssputs_r+0x8e>
 8005d46:	4629      	mov	r1, r5
 8005d48:	f7ff ff52 	bl	8005bf0 <_malloc_r>
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	b360      	cbz	r0, 8005daa <__ssputs_r+0xa2>
 8005d50:	6921      	ldr	r1, [r4, #16]
 8005d52:	464a      	mov	r2, r9
 8005d54:	f7ff fed2 	bl	8005afc <memcpy>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	6126      	str	r6, [r4, #16]
 8005d66:	6165      	str	r5, [r4, #20]
 8005d68:	444e      	add	r6, r9
 8005d6a:	eba5 0509 	sub.w	r5, r5, r9
 8005d6e:	6026      	str	r6, [r4, #0]
 8005d70:	60a5      	str	r5, [r4, #8]
 8005d72:	463e      	mov	r6, r7
 8005d74:	42be      	cmp	r6, r7
 8005d76:	d900      	bls.n	8005d7a <__ssputs_r+0x72>
 8005d78:	463e      	mov	r6, r7
 8005d7a:	6820      	ldr	r0, [r4, #0]
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	4641      	mov	r1, r8
 8005d80:	f000 faa8 	bl	80062d4 <memmove>
 8005d84:	68a3      	ldr	r3, [r4, #8]
 8005d86:	1b9b      	subs	r3, r3, r6
 8005d88:	60a3      	str	r3, [r4, #8]
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	4433      	add	r3, r6
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	2000      	movs	r0, #0
 8005d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d96:	462a      	mov	r2, r5
 8005d98:	f000 fac6 	bl	8006328 <_realloc_r>
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	d1e0      	bne.n	8005d64 <__ssputs_r+0x5c>
 8005da2:	6921      	ldr	r1, [r4, #16]
 8005da4:	4650      	mov	r0, sl
 8005da6:	f7ff feb7 	bl	8005b18 <_free_r>
 8005daa:	230c      	movs	r3, #12
 8005dac:	f8ca 3000 	str.w	r3, [sl]
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dbc:	e7e9      	b.n	8005d92 <__ssputs_r+0x8a>
	...

08005dc0 <_svfiprintf_r>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	4698      	mov	r8, r3
 8005dc6:	898b      	ldrh	r3, [r1, #12]
 8005dc8:	061b      	lsls	r3, r3, #24
 8005dca:	b09d      	sub	sp, #116	@ 0x74
 8005dcc:	4607      	mov	r7, r0
 8005dce:	460d      	mov	r5, r1
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	d510      	bpl.n	8005df6 <_svfiprintf_r+0x36>
 8005dd4:	690b      	ldr	r3, [r1, #16]
 8005dd6:	b973      	cbnz	r3, 8005df6 <_svfiprintf_r+0x36>
 8005dd8:	2140      	movs	r1, #64	@ 0x40
 8005dda:	f7ff ff09 	bl	8005bf0 <_malloc_r>
 8005dde:	6028      	str	r0, [r5, #0]
 8005de0:	6128      	str	r0, [r5, #16]
 8005de2:	b930      	cbnz	r0, 8005df2 <_svfiprintf_r+0x32>
 8005de4:	230c      	movs	r3, #12
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dec:	b01d      	add	sp, #116	@ 0x74
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	2340      	movs	r3, #64	@ 0x40
 8005df4:	616b      	str	r3, [r5, #20]
 8005df6:	2300      	movs	r3, #0
 8005df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dfa:	2320      	movs	r3, #32
 8005dfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e04:	2330      	movs	r3, #48	@ 0x30
 8005e06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fa4 <_svfiprintf_r+0x1e4>
 8005e0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e0e:	f04f 0901 	mov.w	r9, #1
 8005e12:	4623      	mov	r3, r4
 8005e14:	469a      	mov	sl, r3
 8005e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1a:	b10a      	cbz	r2, 8005e20 <_svfiprintf_r+0x60>
 8005e1c:	2a25      	cmp	r2, #37	@ 0x25
 8005e1e:	d1f9      	bne.n	8005e14 <_svfiprintf_r+0x54>
 8005e20:	ebba 0b04 	subs.w	fp, sl, r4
 8005e24:	d00b      	beq.n	8005e3e <_svfiprintf_r+0x7e>
 8005e26:	465b      	mov	r3, fp
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff ff6b 	bl	8005d08 <__ssputs_r>
 8005e32:	3001      	adds	r0, #1
 8005e34:	f000 80a7 	beq.w	8005f86 <_svfiprintf_r+0x1c6>
 8005e38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e3a:	445a      	add	r2, fp
 8005e3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 809f 	beq.w	8005f86 <_svfiprintf_r+0x1c6>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e52:	f10a 0a01 	add.w	sl, sl, #1
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e60:	4654      	mov	r4, sl
 8005e62:	2205      	movs	r2, #5
 8005e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e68:	484e      	ldr	r0, [pc, #312]	@ (8005fa4 <_svfiprintf_r+0x1e4>)
 8005e6a:	f7fa f9d1 	bl	8000210 <memchr>
 8005e6e:	9a04      	ldr	r2, [sp, #16]
 8005e70:	b9d8      	cbnz	r0, 8005eaa <_svfiprintf_r+0xea>
 8005e72:	06d0      	lsls	r0, r2, #27
 8005e74:	bf44      	itt	mi
 8005e76:	2320      	movmi	r3, #32
 8005e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e7c:	0711      	lsls	r1, r2, #28
 8005e7e:	bf44      	itt	mi
 8005e80:	232b      	movmi	r3, #43	@ 0x2b
 8005e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e86:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e8c:	d015      	beq.n	8005eba <_svfiprintf_r+0xfa>
 8005e8e:	9a07      	ldr	r2, [sp, #28]
 8005e90:	4654      	mov	r4, sl
 8005e92:	2000      	movs	r0, #0
 8005e94:	f04f 0c0a 	mov.w	ip, #10
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9e:	3b30      	subs	r3, #48	@ 0x30
 8005ea0:	2b09      	cmp	r3, #9
 8005ea2:	d94b      	bls.n	8005f3c <_svfiprintf_r+0x17c>
 8005ea4:	b1b0      	cbz	r0, 8005ed4 <_svfiprintf_r+0x114>
 8005ea6:	9207      	str	r2, [sp, #28]
 8005ea8:	e014      	b.n	8005ed4 <_svfiprintf_r+0x114>
 8005eaa:	eba0 0308 	sub.w	r3, r0, r8
 8005eae:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	46a2      	mov	sl, r4
 8005eb8:	e7d2      	b.n	8005e60 <_svfiprintf_r+0xa0>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	9103      	str	r1, [sp, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfbb      	ittet	lt
 8005ec6:	425b      	neglt	r3, r3
 8005ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ecc:	9307      	strge	r3, [sp, #28]
 8005ece:	9307      	strlt	r3, [sp, #28]
 8005ed0:	bfb8      	it	lt
 8005ed2:	9204      	strlt	r2, [sp, #16]
 8005ed4:	7823      	ldrb	r3, [r4, #0]
 8005ed6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ed8:	d10a      	bne.n	8005ef0 <_svfiprintf_r+0x130>
 8005eda:	7863      	ldrb	r3, [r4, #1]
 8005edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ede:	d132      	bne.n	8005f46 <_svfiprintf_r+0x186>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	9203      	str	r2, [sp, #12]
 8005ee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eec:	3402      	adds	r4, #2
 8005eee:	9305      	str	r3, [sp, #20]
 8005ef0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fb4 <_svfiprintf_r+0x1f4>
 8005ef4:	7821      	ldrb	r1, [r4, #0]
 8005ef6:	2203      	movs	r2, #3
 8005ef8:	4650      	mov	r0, sl
 8005efa:	f7fa f989 	bl	8000210 <memchr>
 8005efe:	b138      	cbz	r0, 8005f10 <_svfiprintf_r+0x150>
 8005f00:	9b04      	ldr	r3, [sp, #16]
 8005f02:	eba0 000a 	sub.w	r0, r0, sl
 8005f06:	2240      	movs	r2, #64	@ 0x40
 8005f08:	4082      	lsls	r2, r0
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	3401      	adds	r4, #1
 8005f0e:	9304      	str	r3, [sp, #16]
 8005f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f14:	4824      	ldr	r0, [pc, #144]	@ (8005fa8 <_svfiprintf_r+0x1e8>)
 8005f16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f1a:	2206      	movs	r2, #6
 8005f1c:	f7fa f978 	bl	8000210 <memchr>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d036      	beq.n	8005f92 <_svfiprintf_r+0x1d2>
 8005f24:	4b21      	ldr	r3, [pc, #132]	@ (8005fac <_svfiprintf_r+0x1ec>)
 8005f26:	bb1b      	cbnz	r3, 8005f70 <_svfiprintf_r+0x1b0>
 8005f28:	9b03      	ldr	r3, [sp, #12]
 8005f2a:	3307      	adds	r3, #7
 8005f2c:	f023 0307 	bic.w	r3, r3, #7
 8005f30:	3308      	adds	r3, #8
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f36:	4433      	add	r3, r6
 8005f38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f3a:	e76a      	b.n	8005e12 <_svfiprintf_r+0x52>
 8005f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f40:	460c      	mov	r4, r1
 8005f42:	2001      	movs	r0, #1
 8005f44:	e7a8      	b.n	8005e98 <_svfiprintf_r+0xd8>
 8005f46:	2300      	movs	r3, #0
 8005f48:	3401      	adds	r4, #1
 8005f4a:	9305      	str	r3, [sp, #20]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f04f 0c0a 	mov.w	ip, #10
 8005f52:	4620      	mov	r0, r4
 8005f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f58:	3a30      	subs	r2, #48	@ 0x30
 8005f5a:	2a09      	cmp	r2, #9
 8005f5c:	d903      	bls.n	8005f66 <_svfiprintf_r+0x1a6>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0c6      	beq.n	8005ef0 <_svfiprintf_r+0x130>
 8005f62:	9105      	str	r1, [sp, #20]
 8005f64:	e7c4      	b.n	8005ef0 <_svfiprintf_r+0x130>
 8005f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e7f0      	b.n	8005f52 <_svfiprintf_r+0x192>
 8005f70:	ab03      	add	r3, sp, #12
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	462a      	mov	r2, r5
 8005f76:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb0 <_svfiprintf_r+0x1f0>)
 8005f78:	a904      	add	r1, sp, #16
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	f3af 8000 	nop.w
 8005f80:	1c42      	adds	r2, r0, #1
 8005f82:	4606      	mov	r6, r0
 8005f84:	d1d6      	bne.n	8005f34 <_svfiprintf_r+0x174>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	065b      	lsls	r3, r3, #25
 8005f8a:	f53f af2d 	bmi.w	8005de8 <_svfiprintf_r+0x28>
 8005f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f90:	e72c      	b.n	8005dec <_svfiprintf_r+0x2c>
 8005f92:	ab03      	add	r3, sp, #12
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	462a      	mov	r2, r5
 8005f98:	4b05      	ldr	r3, [pc, #20]	@ (8005fb0 <_svfiprintf_r+0x1f0>)
 8005f9a:	a904      	add	r1, sp, #16
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f000 f879 	bl	8006094 <_printf_i>
 8005fa2:	e7ed      	b.n	8005f80 <_svfiprintf_r+0x1c0>
 8005fa4:	08006609 	.word	0x08006609
 8005fa8:	08006613 	.word	0x08006613
 8005fac:	00000000 	.word	0x00000000
 8005fb0:	08005d09 	.word	0x08005d09
 8005fb4:	0800660f 	.word	0x0800660f

08005fb8 <_printf_common>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	4698      	mov	r8, r3
 8005fc0:	688a      	ldr	r2, [r1, #8]
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	bfb8      	it	lt
 8005fcc:	4613      	movlt	r3, r2
 8005fce:	6033      	str	r3, [r6, #0]
 8005fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	b10a      	cbz	r2, 8005fde <_printf_common+0x26>
 8005fda:	3301      	adds	r3, #1
 8005fdc:	6033      	str	r3, [r6, #0]
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	0699      	lsls	r1, r3, #26
 8005fe2:	bf42      	ittt	mi
 8005fe4:	6833      	ldrmi	r3, [r6, #0]
 8005fe6:	3302      	addmi	r3, #2
 8005fe8:	6033      	strmi	r3, [r6, #0]
 8005fea:	6825      	ldr	r5, [r4, #0]
 8005fec:	f015 0506 	ands.w	r5, r5, #6
 8005ff0:	d106      	bne.n	8006000 <_printf_common+0x48>
 8005ff2:	f104 0a19 	add.w	sl, r4, #25
 8005ff6:	68e3      	ldr	r3, [r4, #12]
 8005ff8:	6832      	ldr	r2, [r6, #0]
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	42ab      	cmp	r3, r5
 8005ffe:	dc26      	bgt.n	800604e <_printf_common+0x96>
 8006000:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	3b00      	subs	r3, #0
 8006008:	bf18      	it	ne
 800600a:	2301      	movne	r3, #1
 800600c:	0692      	lsls	r2, r2, #26
 800600e:	d42b      	bmi.n	8006068 <_printf_common+0xb0>
 8006010:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006014:	4641      	mov	r1, r8
 8006016:	4638      	mov	r0, r7
 8006018:	47c8      	blx	r9
 800601a:	3001      	adds	r0, #1
 800601c:	d01e      	beq.n	800605c <_printf_common+0xa4>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	6922      	ldr	r2, [r4, #16]
 8006022:	f003 0306 	and.w	r3, r3, #6
 8006026:	2b04      	cmp	r3, #4
 8006028:	bf02      	ittt	eq
 800602a:	68e5      	ldreq	r5, [r4, #12]
 800602c:	6833      	ldreq	r3, [r6, #0]
 800602e:	1aed      	subeq	r5, r5, r3
 8006030:	68a3      	ldr	r3, [r4, #8]
 8006032:	bf0c      	ite	eq
 8006034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006038:	2500      	movne	r5, #0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfc4      	itt	gt
 800603e:	1a9b      	subgt	r3, r3, r2
 8006040:	18ed      	addgt	r5, r5, r3
 8006042:	2600      	movs	r6, #0
 8006044:	341a      	adds	r4, #26
 8006046:	42b5      	cmp	r5, r6
 8006048:	d11a      	bne.n	8006080 <_printf_common+0xc8>
 800604a:	2000      	movs	r0, #0
 800604c:	e008      	b.n	8006060 <_printf_common+0xa8>
 800604e:	2301      	movs	r3, #1
 8006050:	4652      	mov	r2, sl
 8006052:	4641      	mov	r1, r8
 8006054:	4638      	mov	r0, r7
 8006056:	47c8      	blx	r9
 8006058:	3001      	adds	r0, #1
 800605a:	d103      	bne.n	8006064 <_printf_common+0xac>
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006064:	3501      	adds	r5, #1
 8006066:	e7c6      	b.n	8005ff6 <_printf_common+0x3e>
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	2030      	movs	r0, #48	@ 0x30
 800606e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006072:	4422      	add	r2, r4
 8006074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006078:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800607c:	3302      	adds	r3, #2
 800607e:	e7c7      	b.n	8006010 <_printf_common+0x58>
 8006080:	2301      	movs	r3, #1
 8006082:	4622      	mov	r2, r4
 8006084:	4641      	mov	r1, r8
 8006086:	4638      	mov	r0, r7
 8006088:	47c8      	blx	r9
 800608a:	3001      	adds	r0, #1
 800608c:	d0e6      	beq.n	800605c <_printf_common+0xa4>
 800608e:	3601      	adds	r6, #1
 8006090:	e7d9      	b.n	8006046 <_printf_common+0x8e>
	...

08006094 <_printf_i>:
 8006094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	7e0f      	ldrb	r7, [r1, #24]
 800609a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800609c:	2f78      	cmp	r7, #120	@ 0x78
 800609e:	4691      	mov	r9, r2
 80060a0:	4680      	mov	r8, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	469a      	mov	sl, r3
 80060a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060aa:	d807      	bhi.n	80060bc <_printf_i+0x28>
 80060ac:	2f62      	cmp	r7, #98	@ 0x62
 80060ae:	d80a      	bhi.n	80060c6 <_printf_i+0x32>
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	f000 80d2 	beq.w	800625a <_printf_i+0x1c6>
 80060b6:	2f58      	cmp	r7, #88	@ 0x58
 80060b8:	f000 80b9 	beq.w	800622e <_printf_i+0x19a>
 80060bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c4:	e03a      	b.n	800613c <_printf_i+0xa8>
 80060c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ca:	2b15      	cmp	r3, #21
 80060cc:	d8f6      	bhi.n	80060bc <_printf_i+0x28>
 80060ce:	a101      	add	r1, pc, #4	@ (adr r1, 80060d4 <_printf_i+0x40>)
 80060d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d4:	0800612d 	.word	0x0800612d
 80060d8:	08006141 	.word	0x08006141
 80060dc:	080060bd 	.word	0x080060bd
 80060e0:	080060bd 	.word	0x080060bd
 80060e4:	080060bd 	.word	0x080060bd
 80060e8:	080060bd 	.word	0x080060bd
 80060ec:	08006141 	.word	0x08006141
 80060f0:	080060bd 	.word	0x080060bd
 80060f4:	080060bd 	.word	0x080060bd
 80060f8:	080060bd 	.word	0x080060bd
 80060fc:	080060bd 	.word	0x080060bd
 8006100:	08006241 	.word	0x08006241
 8006104:	0800616b 	.word	0x0800616b
 8006108:	080061fb 	.word	0x080061fb
 800610c:	080060bd 	.word	0x080060bd
 8006110:	080060bd 	.word	0x080060bd
 8006114:	08006263 	.word	0x08006263
 8006118:	080060bd 	.word	0x080060bd
 800611c:	0800616b 	.word	0x0800616b
 8006120:	080060bd 	.word	0x080060bd
 8006124:	080060bd 	.word	0x080060bd
 8006128:	08006203 	.word	0x08006203
 800612c:	6833      	ldr	r3, [r6, #0]
 800612e:	1d1a      	adds	r2, r3, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6032      	str	r2, [r6, #0]
 8006134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800613c:	2301      	movs	r3, #1
 800613e:	e09d      	b.n	800627c <_printf_i+0x1e8>
 8006140:	6833      	ldr	r3, [r6, #0]
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	6031      	str	r1, [r6, #0]
 8006148:	0606      	lsls	r6, r0, #24
 800614a:	d501      	bpl.n	8006150 <_printf_i+0xbc>
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	e003      	b.n	8006158 <_printf_i+0xc4>
 8006150:	0645      	lsls	r5, r0, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0xb8>
 8006154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006158:	2d00      	cmp	r5, #0
 800615a:	da03      	bge.n	8006164 <_printf_i+0xd0>
 800615c:	232d      	movs	r3, #45	@ 0x2d
 800615e:	426d      	negs	r5, r5
 8006160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006164:	4859      	ldr	r0, [pc, #356]	@ (80062cc <_printf_i+0x238>)
 8006166:	230a      	movs	r3, #10
 8006168:	e011      	b.n	800618e <_printf_i+0xfa>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	0608      	lsls	r0, r1, #24
 8006170:	f853 5b04 	ldr.w	r5, [r3], #4
 8006174:	d402      	bmi.n	800617c <_printf_i+0xe8>
 8006176:	0649      	lsls	r1, r1, #25
 8006178:	bf48      	it	mi
 800617a:	b2ad      	uxthmi	r5, r5
 800617c:	2f6f      	cmp	r7, #111	@ 0x6f
 800617e:	4853      	ldr	r0, [pc, #332]	@ (80062cc <_printf_i+0x238>)
 8006180:	6033      	str	r3, [r6, #0]
 8006182:	bf14      	ite	ne
 8006184:	230a      	movne	r3, #10
 8006186:	2308      	moveq	r3, #8
 8006188:	2100      	movs	r1, #0
 800618a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618e:	6866      	ldr	r6, [r4, #4]
 8006190:	60a6      	str	r6, [r4, #8]
 8006192:	2e00      	cmp	r6, #0
 8006194:	bfa2      	ittt	ge
 8006196:	6821      	ldrge	r1, [r4, #0]
 8006198:	f021 0104 	bicge.w	r1, r1, #4
 800619c:	6021      	strge	r1, [r4, #0]
 800619e:	b90d      	cbnz	r5, 80061a4 <_printf_i+0x110>
 80061a0:	2e00      	cmp	r6, #0
 80061a2:	d04b      	beq.n	800623c <_printf_i+0x1a8>
 80061a4:	4616      	mov	r6, r2
 80061a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061aa:	fb03 5711 	mls	r7, r3, r1, r5
 80061ae:	5dc7      	ldrb	r7, [r0, r7]
 80061b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b4:	462f      	mov	r7, r5
 80061b6:	42bb      	cmp	r3, r7
 80061b8:	460d      	mov	r5, r1
 80061ba:	d9f4      	bls.n	80061a6 <_printf_i+0x112>
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d10b      	bne.n	80061d8 <_printf_i+0x144>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	07df      	lsls	r7, r3, #31
 80061c4:	d508      	bpl.n	80061d8 <_printf_i+0x144>
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	6861      	ldr	r1, [r4, #4]
 80061ca:	4299      	cmp	r1, r3
 80061cc:	bfde      	ittt	le
 80061ce:	2330      	movle	r3, #48	@ 0x30
 80061d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d8:	1b92      	subs	r2, r2, r6
 80061da:	6122      	str	r2, [r4, #16]
 80061dc:	f8cd a000 	str.w	sl, [sp]
 80061e0:	464b      	mov	r3, r9
 80061e2:	aa03      	add	r2, sp, #12
 80061e4:	4621      	mov	r1, r4
 80061e6:	4640      	mov	r0, r8
 80061e8:	f7ff fee6 	bl	8005fb8 <_printf_common>
 80061ec:	3001      	adds	r0, #1
 80061ee:	d14a      	bne.n	8006286 <_printf_i+0x1f2>
 80061f0:	f04f 30ff 	mov.w	r0, #4294967295
 80061f4:	b004      	add	sp, #16
 80061f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	f043 0320 	orr.w	r3, r3, #32
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	4833      	ldr	r0, [pc, #204]	@ (80062d0 <_printf_i+0x23c>)
 8006204:	2778      	movs	r7, #120	@ 0x78
 8006206:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	6831      	ldr	r1, [r6, #0]
 800620e:	061f      	lsls	r7, r3, #24
 8006210:	f851 5b04 	ldr.w	r5, [r1], #4
 8006214:	d402      	bmi.n	800621c <_printf_i+0x188>
 8006216:	065f      	lsls	r7, r3, #25
 8006218:	bf48      	it	mi
 800621a:	b2ad      	uxthmi	r5, r5
 800621c:	6031      	str	r1, [r6, #0]
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	bf44      	itt	mi
 8006222:	f043 0320 	orrmi.w	r3, r3, #32
 8006226:	6023      	strmi	r3, [r4, #0]
 8006228:	b11d      	cbz	r5, 8006232 <_printf_i+0x19e>
 800622a:	2310      	movs	r3, #16
 800622c:	e7ac      	b.n	8006188 <_printf_i+0xf4>
 800622e:	4827      	ldr	r0, [pc, #156]	@ (80062cc <_printf_i+0x238>)
 8006230:	e7e9      	b.n	8006206 <_printf_i+0x172>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f023 0320 	bic.w	r3, r3, #32
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	e7f6      	b.n	800622a <_printf_i+0x196>
 800623c:	4616      	mov	r6, r2
 800623e:	e7bd      	b.n	80061bc <_printf_i+0x128>
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6961      	ldr	r1, [r4, #20]
 8006246:	1d18      	adds	r0, r3, #4
 8006248:	6030      	str	r0, [r6, #0]
 800624a:	062e      	lsls	r6, r5, #24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	d501      	bpl.n	8006254 <_printf_i+0x1c0>
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0x1c6>
 8006254:	0668      	lsls	r0, r5, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0x1bc>
 8006258:	8019      	strh	r1, [r3, #0]
 800625a:	2300      	movs	r3, #0
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	4616      	mov	r6, r2
 8006260:	e7bc      	b.n	80061dc <_printf_i+0x148>
 8006262:	6833      	ldr	r3, [r6, #0]
 8006264:	1d1a      	adds	r2, r3, #4
 8006266:	6032      	str	r2, [r6, #0]
 8006268:	681e      	ldr	r6, [r3, #0]
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	2100      	movs	r1, #0
 800626e:	4630      	mov	r0, r6
 8006270:	f7f9 ffce 	bl	8000210 <memchr>
 8006274:	b108      	cbz	r0, 800627a <_printf_i+0x1e6>
 8006276:	1b80      	subs	r0, r0, r6
 8006278:	6060      	str	r0, [r4, #4]
 800627a:	6863      	ldr	r3, [r4, #4]
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	2300      	movs	r3, #0
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006284:	e7aa      	b.n	80061dc <_printf_i+0x148>
 8006286:	6923      	ldr	r3, [r4, #16]
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d0ad      	beq.n	80061f0 <_printf_i+0x15c>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	079b      	lsls	r3, r3, #30
 8006298:	d413      	bmi.n	80062c2 <_printf_i+0x22e>
 800629a:	68e0      	ldr	r0, [r4, #12]
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	4298      	cmp	r0, r3
 80062a0:	bfb8      	it	lt
 80062a2:	4618      	movlt	r0, r3
 80062a4:	e7a6      	b.n	80061f4 <_printf_i+0x160>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d09d      	beq.n	80061f0 <_printf_i+0x15c>
 80062b4:	3501      	adds	r5, #1
 80062b6:	68e3      	ldr	r3, [r4, #12]
 80062b8:	9903      	ldr	r1, [sp, #12]
 80062ba:	1a5b      	subs	r3, r3, r1
 80062bc:	42ab      	cmp	r3, r5
 80062be:	dcf2      	bgt.n	80062a6 <_printf_i+0x212>
 80062c0:	e7eb      	b.n	800629a <_printf_i+0x206>
 80062c2:	2500      	movs	r5, #0
 80062c4:	f104 0619 	add.w	r6, r4, #25
 80062c8:	e7f5      	b.n	80062b6 <_printf_i+0x222>
 80062ca:	bf00      	nop
 80062cc:	0800661a 	.word	0x0800661a
 80062d0:	0800662b 	.word	0x0800662b

080062d4 <memmove>:
 80062d4:	4288      	cmp	r0, r1
 80062d6:	b510      	push	{r4, lr}
 80062d8:	eb01 0402 	add.w	r4, r1, r2
 80062dc:	d902      	bls.n	80062e4 <memmove+0x10>
 80062de:	4284      	cmp	r4, r0
 80062e0:	4623      	mov	r3, r4
 80062e2:	d807      	bhi.n	80062f4 <memmove+0x20>
 80062e4:	1e43      	subs	r3, r0, #1
 80062e6:	42a1      	cmp	r1, r4
 80062e8:	d008      	beq.n	80062fc <memmove+0x28>
 80062ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062f2:	e7f8      	b.n	80062e6 <memmove+0x12>
 80062f4:	4402      	add	r2, r0
 80062f6:	4601      	mov	r1, r0
 80062f8:	428a      	cmp	r2, r1
 80062fa:	d100      	bne.n	80062fe <memmove+0x2a>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006306:	e7f7      	b.n	80062f8 <memmove+0x24>

08006308 <_sbrk_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d06      	ldr	r5, [pc, #24]	@ (8006324 <_sbrk_r+0x1c>)
 800630c:	2300      	movs	r3, #0
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	602b      	str	r3, [r5, #0]
 8006314:	f7fa fc64 	bl	8000be0 <_sbrk>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d102      	bne.n	8006322 <_sbrk_r+0x1a>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	b103      	cbz	r3, 8006322 <_sbrk_r+0x1a>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	2000046c 	.word	0x2000046c

08006328 <_realloc_r>:
 8006328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800632c:	4680      	mov	r8, r0
 800632e:	4615      	mov	r5, r2
 8006330:	460c      	mov	r4, r1
 8006332:	b921      	cbnz	r1, 800633e <_realloc_r+0x16>
 8006334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006338:	4611      	mov	r1, r2
 800633a:	f7ff bc59 	b.w	8005bf0 <_malloc_r>
 800633e:	b92a      	cbnz	r2, 800634c <_realloc_r+0x24>
 8006340:	f7ff fbea 	bl	8005b18 <_free_r>
 8006344:	2400      	movs	r4, #0
 8006346:	4620      	mov	r0, r4
 8006348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634c:	f000 f81a 	bl	8006384 <_malloc_usable_size_r>
 8006350:	4285      	cmp	r5, r0
 8006352:	4606      	mov	r6, r0
 8006354:	d802      	bhi.n	800635c <_realloc_r+0x34>
 8006356:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800635a:	d8f4      	bhi.n	8006346 <_realloc_r+0x1e>
 800635c:	4629      	mov	r1, r5
 800635e:	4640      	mov	r0, r8
 8006360:	f7ff fc46 	bl	8005bf0 <_malloc_r>
 8006364:	4607      	mov	r7, r0
 8006366:	2800      	cmp	r0, #0
 8006368:	d0ec      	beq.n	8006344 <_realloc_r+0x1c>
 800636a:	42b5      	cmp	r5, r6
 800636c:	462a      	mov	r2, r5
 800636e:	4621      	mov	r1, r4
 8006370:	bf28      	it	cs
 8006372:	4632      	movcs	r2, r6
 8006374:	f7ff fbc2 	bl	8005afc <memcpy>
 8006378:	4621      	mov	r1, r4
 800637a:	4640      	mov	r0, r8
 800637c:	f7ff fbcc 	bl	8005b18 <_free_r>
 8006380:	463c      	mov	r4, r7
 8006382:	e7e0      	b.n	8006346 <_realloc_r+0x1e>

08006384 <_malloc_usable_size_r>:
 8006384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006388:	1f18      	subs	r0, r3, #4
 800638a:	2b00      	cmp	r3, #0
 800638c:	bfbc      	itt	lt
 800638e:	580b      	ldrlt	r3, [r1, r0]
 8006390:	18c0      	addlt	r0, r0, r3
 8006392:	4770      	bx	lr

08006394 <_init>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr

080063a0 <_fini>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr
