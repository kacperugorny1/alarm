/*
 * sim800l_driver.c
 *
 * Created on: Jun 3, 2025
 * Author: axeel
 */

#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include "sim800l_driver.h" // Assuming this declares HAL_UART_HandleTypeDef if not included by main.h

static UART_HandleTypeDef * SIM800L_uart;
static char send_buf[60]; // Buffer for AT commands to be sent (increased size slightly for AT+CMGS)
static uint8_t new_char;       // Stores the latest byte received via UART
static bool msg_sending;  // Flag: true if an SMS sending sequence is in progress

// SMS Queue
static uint8_t * queue[6]; // Array to store phone numbers for SMS
static uint8_t queue_len = 0; // Current number of items in the queue
static uint8_t queue_id = 0;  // Index of the current message being processed from the queue

// State variable for AT command sequence
// 0: AT+COPS? sent. Waiting for "OK" response.
// 1: AT+CMGF=1 sent. Waiting for "OK" response.
// 2: AT+CMGS="<num>" sent. Waiting for ">" prompt.
// 3: ">" received, message body "ALARM!!!\r" is being/has been transmitted. TxCpltCallback for this will trigger sending CTRL+Z.
// 4: CTRL+Z sent. Waiting for final "+CMGS: xx" and/or "OK" response.
static uint8_t msg_num = 0;


void gsm_init(UART_HandleTypeDef* uart){
	SIM800L_uart = uart;
	// Start listening for incoming data
	HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
}

// Helper function to advance the queue and start next message or stop
static void advance_queue_and_proceed() {
    queue_len--;
    queue_id = (queue_id + 1) % 6;

    if (queue_len > 0) { // If there are more messages in the queue
        msg_num = 0; // Reset state for the next message
        strcpy(send_buf, "AT+COPS?\r\n"); // Start sequence for next SMS
        HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
    } else { // Queue is empty
        msg_sending = false;
        msg_num = 0; // Reset state
    }
}

void gsm_sms_queue(char * number){
	if (number == NULL || *number == '\0') return; // Ignore empty numbers

	if(queue_len < 6) { // Check if queue has space
		// Add number to the queue (circularly)
		queue[(queue_id + queue_len) % 6] = (uint8_t*)number;
		queue_len++;
	} else {
		// Queue is full, handle error or ignore (e.g., log an error)
		// For now, we'll just not add it.
		return;
	}

	if(!msg_sending)  { // If not already sending a message, start the process
		msg_sending = true;
		msg_num = 0; // Start with the first step of AT command sequence
		strcpy(send_buf, "AT+COPS?\r\n"); // First command
		HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
	}
}

// Blocking SMS send function (provided by user, for reference of AT sequence)
void gsm_sms_send(char * number){
	char data[100] = "AT+COPS?\r\n";
	if(number == NULL || *number == 0) return; // Added NULL check
	strcpy(data,"AT+COPS?\r\n");

	HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
	HAL_Delay(50);

	strcpy(data, "AT+CMGF=1\r\n");
	HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
	HAL_Delay(50);
	snprintf(data,100,"AT+CMGS=\"+48%s\"\r\n",number);
	HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
	HAL_Delay(50);

	strcpy(data, "ALARM!!!\r"); // Message content, \r is often used before CTRL+Z
	HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, strlen(data), 100);
	HAL_Delay(50);

	data[0] = 0x1A; // CTRL+Z
    data[1] = '\0'; // Null terminate for strlen, though only 1 byte is typically needed
	HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, 1, 100); // Send only CTRL+Z
}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart->Instance != SIM800L_uart->Instance) {
		return; // Not our UART
	}

	if (msg_sending) {
		// This callback signifies that the previous HAL_UART_Transmit_IT has finished.
		// The decision to send the *next* command is now primarily in RxCpltCallback,
		// *except* for sending CTRL+Z after the message body.

		if (msg_num == 3) { // Message body "ALARM!!!\r" has just finished transmitting
			msg_num = 4;      // Next state: CTRL+Z is about to be sent / has been sent.
			send_buf[0] = 0x1A; // CTRL+Z character
			HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, 1); // Send only 1 byte (CTRL+Z)
		}
		// For other states (0, 1, 2, 4), the next transmission is triggered by RxCpltCallback
		// after a valid response from the module.
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	static char buf[100];    // Buffer for received line
	static uint8_t len = 0;  // Current length of data in buf

	if (huart->Instance != SIM800L_uart->Instance) {
		HAL_UART_Receive_IT(huart, &new_char, 1); // Re-arm for other UARTs if any
		return;
	}

	// Accumulate character if it's not a CR. LF will be the primary line delimiter for full lines.
	// Keep the buffer null-terminated for string functions.
	if (new_char != '\r') {
		if (len < (sizeof(buf) - 1)) {
			buf[len++] = new_char;
			buf[len] = '\0'; // Keep null-terminated
		} else {
			// Buffer overflow, reset to be safe. This might lose partial data.
			len = 0;
			memset(buf, 0, sizeof(buf));
			// Optionally log this error
		}
	}

	// Check for "> " prompt specifically when waiting for it (state 2)
	// This check happens on every character received (that's not CR).
	if (msg_sending && msg_num == 2) {
		// Check if the buffer currently ends with "> "
		// This means the last char received was ' ' and the one before was '>'
		if (len >= 2 && buf[len-2] == '>' && buf[len-1] == ' ') {
			// Prompt detected
			msg_num = 3; // State: ">" received, message body to be sent
			strcpy(send_buf, "ALARM!!!\r"); // SMS content. \r is good practice before CTRL+Z.
			HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
			// TxCpltCallback for this transmission will set msg_num = 4 and trigger sending CTRL+Z.

			len = 0; // Reset buffer as the prompt has been consumed
			memset(buf, 0, sizeof(buf));
			HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1); // Re-arm for next char
			return; // Important: exit after handling the prompt, don't process as a full line
		}
	}

	// Process full lines on encountering a Newline character
	// This handles responses like "OK", "ERROR", "+CMGS: xx", echoes, etc.
	if (new_char == '\n') {
		// buf now contains the line (possibly including the \n if it fit, but it's null-terminated before it)
		if (len > 0) { // Process if buffer has content (even if it's just the \n that was added)
			// Note: buf[len-1] is '\n' if it was added. strstr usually handles this.
			// For more precise parsing, you might strip trailing \n or \r.

			if (msg_sending) {
				// Optional: Print received data for debugging
				// printf("SIM RX Line (State %d): %s", msg_num, buf); // Use %s as buf is null-terminated

				if (strstr(buf, "ERROR") != NULL) {
					// Handle error: Skip current message and try the next.
					// printf("SIM ERROR (State %d): %s", msg_num, buf);
					advance_queue_and_proceed();
				} else {
					// The switch statement handles "OK" and other expected full-line responses
					switch (msg_num) {
						case 0: // Waiting for "OK" after AT+COPS?
							if (strstr(buf, "OK") != NULL) {
								msg_num = 1;
								strcpy(send_buf, "AT+CMGF=1\r\n");
								HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
							}
							break;
						case 1: // Waiting for "OK" after AT+CMGF=1
							if (strstr(buf, "OK") != NULL) {
								msg_num = 2;
								if (queue_len > 0) {
									snprintf(send_buf, sizeof(send_buf), "AT+CMGS=\"+48%s\"\r\n", (char*)queue[queue_id]);
									HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
								} else {
									// Should not happen if msg_sending is true and queue logic is correct
									msg_sending = false; // Safety stop
								}
							}
							break;
						// case 2 ("Waiting for > prompt") is now primarily handled by the direct "> " check above.
						// If a newline IS received in state 2, it might be an echo of the AT+CMGS command or an unexpected response.
						// An "ERROR" would be caught above. If it's an "OK", something is wrong.
						// For robustness, one might add specific handling here if needed, but the "> " check is the main path.
						case 3:
							// In state 3, message body ("ALARM!!!\r") is being sent.
							// We are waiting for TxCpltCallback to trigger sending CTRL+Z and move to state 4.
							// Any newlines received here are likely echoes or unsolicited. We generally ignore them
							// unless they are an "ERROR" (caught above).
							break;
						case 4: // Waiting for response after CTRL+Z (expecting "+CMGS: xx" then "OK")
							if (strstr(buf, "OK") != NULL) { // Final confirmation for SMS sent
								advance_queue_and_proceed();
							} else if (strstr(buf, "+CMGS:") != NULL) {
								// This is an intermediate response indicating the message reference number.
								// Good to see, but we wait for the final "OK". No state change here.
							}
							// ERROR case is handled by the generic check at the start of the msg_sending block.
							break;
					}
				}
			}
		}
		// Reset buffer for the next line after processing or if it was an empty line (e.g. only CRs then LF)
		len = 0;
		memset(buf, 0, sizeof(buf));
	}

	// Always re-arm the UART receive interrupt for the next byte
	HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
}
