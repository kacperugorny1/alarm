
Alarm_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002910  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002aa8  08002aa8  00003aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b1c  08002b1c  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b1c  08002b1c  00003b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b24  08002b24  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b28  08002b28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002b2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000001c  08002b48  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08002b48  000041a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009243  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab3  00000000  00000000  0000d28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000ed48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000741  00000000  00000000  0000f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016187  00000000  00000000  0000fe01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9d2  00000000  00000000  00025f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008786a  00000000  00000000  0003295a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba1c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c0  00000000  00000000  000ba208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000bc8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a90 	.word	0x08002a90

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08002a90 	.word	0x08002a90

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b095      	sub	sp, #84	@ 0x54
 80004e0:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fa9b 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f845 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f911 	bl	8000710 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ee:	f000 f8ab 	bl	8000648 <MX_I2C1_Init>
  MX_SPI2_Init();
 80004f2:	f000 f8d7 	bl	80006a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(hi2c1);
 80004f6:	4c1d      	ldr	r4, [pc, #116]	@ (800056c <main+0x90>)
 80004f8:	4668      	mov	r0, sp
 80004fa:	f104 0310 	add.w	r3, r4, #16
 80004fe:	2244      	movs	r2, #68	@ 0x44
 8000500:	4619      	mov	r1, r3
 8000502:	f002 fab7 	bl	8002a74 <memcpy>
 8000506:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800050a:	f002 f8a1 	bl	8002650 <lcd_init>
  state_machine_init(4, "1235");
 800050e:	4918      	ldr	r1, [pc, #96]	@ (8000570 <main+0x94>)
 8000510:	2004      	movs	r0, #4
 8000512:	f002 f977 	bl	8002804 <state_machine_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char x = check_keyboard();
 8000516:	f001 ffc3 	bl	80024a0 <check_keyboard>
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	  if(x){
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d01d      	beq.n	8000560 <main+0x84>
		  if(x < 10) x += '0';
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b09      	cmp	r3, #9
 8000528:	d803      	bhi.n	8000532 <main+0x56>
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	3330      	adds	r3, #48	@ 0x30
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	e010      	b.n	8000554 <main+0x78>
		  else if(x == 10) x = '*';
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b0a      	cmp	r3, #10
 8000536:	d102      	bne.n	800053e <main+0x62>
 8000538:	232a      	movs	r3, #42	@ 0x2a
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	e00a      	b.n	8000554 <main+0x78>
		  else if(x == 11) x = '0';
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	d102      	bne.n	800054a <main+0x6e>
 8000544:	2330      	movs	r3, #48	@ 0x30
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	e004      	b.n	8000554 <main+0x78>
		  else if(x == 12) x = '#';
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b0c      	cmp	r3, #12
 800054e:	d101      	bne.n	8000554 <main+0x78>
 8000550:	2323      	movs	r3, #35	@ 0x23
 8000552:	71fb      	strb	r3, [r7, #7]
		  state_machine_run(x, true);
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2101      	movs	r1, #1
 8000558:	4618      	mov	r0, r3
 800055a:	f002 f911 	bl	8002780 <state_machine_run>
 800055e:	e7da      	b.n	8000516 <main+0x3a>
	  }
	  else state_machine_run(0, false);
 8000560:	2100      	movs	r1, #0
 8000562:	2000      	movs	r0, #0
 8000564:	f002 f90c 	bl	8002780 <state_machine_run>
  {
 8000568:	e7d5      	b.n	8000516 <main+0x3a>
 800056a:	bf00      	nop
 800056c:	20000038 	.word	0x20000038
 8000570:	08002aa8 	.word	0x08002aa8

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	@ 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fa4a 	bl	8002a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a27      	ldr	r2, [pc, #156]	@ (8000640 <SystemClock_Config+0xcc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	@ (8000640 <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <SystemClock_Config+0xd0>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000644 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80005e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f9de 	bl	80019bc <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000606:	f000 f8df 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2103      	movs	r1, #3
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fc40 	bl	8001eac <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000632:	f000 f8c9 	bl	80007c8 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	@ 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_I2C1_Init+0x50>)
 800064e:	4a13      	ldr	r2, [pc, #76]	@ (800069c <MX_I2C1_Init+0x54>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x58>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000666:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000686:	f000 fcfb 	bl	8001080 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f89a 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000038 	.word	0x20000038
 800069c:	40005400 	.word	0x40005400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006aa:	4a18      	ldr	r2, [pc, #96]	@ (800070c <MX_SPI2_Init+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006ee:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006f0:	220a      	movs	r2, #10
 80006f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_SPI2_Init+0x64>)
 80006f6:	f001 fda5 	bl	8002244 <HAL_SPI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000700:	f000 f862 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	2000008c 	.word	0x2000008c
 800070c:	40003800 	.word	0x40003800

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a24      	ldr	r2, [pc, #144]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a1d      	ldr	r2, [pc, #116]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a16      	ldr	r2, [pc, #88]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2154      	movs	r1, #84	@ 0x54
 800077e:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000780:	f000 fc64 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin;
 8000784:	232b      	movs	r3, #43	@ 0x2b
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	480b      	ldr	r0, [pc, #44]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000798:	f000 fabc 	bl	8000d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin;
 800079c:	2354      	movs	r3, #84	@ 0x54
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 80007b4:	f000 faae 	bl	8000d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	@ (80008a8 <HAL_I2C_MspInit+0x84>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d12b      	bne.n	800089e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_I2C_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <HAL_I2C_MspInit+0x88>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_I2C_MspInit+0x88>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000862:	23c0      	movs	r3, #192	@ 0xc0
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000866:	2312      	movs	r3, #18
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000872:	2304      	movs	r3, #4
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <HAL_I2C_MspInit+0x8c>)
 800087e:	f000 fa49 	bl	8000d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_I2C_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088a:	4a08      	ldr	r2, [pc, #32]	@ (80008ac <HAL_I2C_MspInit+0x88>)
 800088c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000890:	6413      	str	r3, [r2, #64]	@ 0x40
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_I2C_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020400 	.word	0x40020400

080008b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	@ (8000938 <HAL_SPI_MspInit+0x84>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12c      	bne.n	8000930 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <HAL_SPI_MspInit+0x88>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	4a17      	ldr	r2, [pc, #92]	@ (800093c <HAL_SPI_MspInit+0x88>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <HAL_SPI_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <HAL_SPI_MspInit+0x88>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	@ (800093c <HAL_SPI_MspInit+0x88>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <HAL_SPI_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800090e:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000920:	2305      	movs	r3, #5
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <HAL_SPI_MspInit+0x8c>)
 800092c:	f000 f9f2 	bl	8000d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40003800 	.word	0x40003800
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <NMI_Handler+0x4>

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <UsageFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099a:	f000 f891 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009cc:	f7ff ffea 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f6:	f002 f819 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fd6f 	bl	80004dc <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a0c:	08002b2c 	.word	0x08002b2c
  ldr r2, =_sbss
 8000a10:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a14:	200001a4 	.word	0x200001a4

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f931 	bl	8000cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fec0 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f93b 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f911 	bl	8000cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000004 	.word	0x20000004
 8000ab8:	2000000c 	.word	0x2000000c
 8000abc:	20000008 	.word	0x20000008

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	200000e4 	.word	0x200000e4

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200000e4 	.word	0x200000e4

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff ffee 	bl	8000ae8 <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d005      	beq.n	8000b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_Delay+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4413      	add	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b26:	bf00      	nop
 8000b28:	f7ff ffde 	bl	8000ae8 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d8f7      	bhi.n	8000b28 <HAL_Delay+0x28>
  {
  }
}
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000000c 	.word	0x2000000c

08000b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <__NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	@ (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	@ (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	@ 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c78:	d301      	bcc.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e00f      	b.n	8000c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	210f      	movs	r1, #15
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f7ff ff8e 	bl	8000bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c90:	4b05      	ldr	r3, [pc, #20]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <SysTick_Config+0x40>)
 8000c98:	2207      	movs	r2, #7
 8000c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ff47 	bl	8000b48 <__NVIC_SetPriorityGrouping>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd4:	f7ff ff5c 	bl	8000b90 <__NVIC_GetPriorityGrouping>
 8000cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	68b9      	ldr	r1, [r7, #8]
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff ff8e 	bl	8000c00 <NVIC_EncodePriority>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff5d 	bl	8000bac <__NVIC_SetPriority>
}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffb0 	bl	8000c68 <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	@ 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e159      	b.n	8000fe4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f040 8148 	bne.w	8000fde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d005      	beq.n	8000d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d130      	bne.n	8000dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4013      	ands	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	f003 0201 	and.w	r2, r3, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d017      	beq.n	8000e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d123      	bne.n	8000e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	69b9      	ldr	r1, [r7, #24]
 8000e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0203 	and.w	r2, r3, #3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80a2 	beq.w	8000fde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b57      	ldr	r3, [pc, #348]	@ (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a56      	ldr	r2, [pc, #344]	@ (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b54      	ldr	r3, [pc, #336]	@ (8000ffc <HAL_GPIO_Init+0x2e8>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb6:	4a52      	ldr	r2, [pc, #328]	@ (8001000 <HAL_GPIO_Init+0x2ec>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a49      	ldr	r2, [pc, #292]	@ (8001004 <HAL_GPIO_Init+0x2f0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x202>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a48      	ldr	r2, [pc, #288]	@ (8001008 <HAL_GPIO_Init+0x2f4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x1fe>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a47      	ldr	r2, [pc, #284]	@ (800100c <HAL_GPIO_Init+0x2f8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x1fa>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a46      	ldr	r2, [pc, #280]	@ (8001010 <HAL_GPIO_Init+0x2fc>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x1f6>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a45      	ldr	r2, [pc, #276]	@ (8001014 <HAL_GPIO_Init+0x300>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x1f2>
 8000f02:	2304      	movs	r3, #4
 8000f04:	e008      	b.n	8000f18 <HAL_GPIO_Init+0x204>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x204>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e004      	b.n	8000f18 <HAL_GPIO_Init+0x204>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e002      	b.n	8000f18 <HAL_GPIO_Init+0x204>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <HAL_GPIO_Init+0x204>
 8000f16:	2300      	movs	r3, #0
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	f002 0203 	and.w	r2, r2, #3
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	4093      	lsls	r3, r2
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f28:	4935      	ldr	r1, [pc, #212]	@ (8001000 <HAL_GPIO_Init+0x2ec>)
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f36:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f60:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f84:	4a24      	ldr	r2, [pc, #144]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f8a:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1a      	ldr	r2, [pc, #104]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001018 <HAL_GPIO_Init+0x304>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	f67f aea2 	bls.w	8000d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020c00 	.word	0x40020c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40013c00 	.word	0x40013c00

0800101c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	887b      	ldrh	r3, [r7, #2]
 800102e:	4013      	ands	r3, r2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e001      	b.n	800103e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e12b      	b.n	80012ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fbbc 	bl	8000824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2224      	movs	r2, #36	@ 0x24
 80010b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010e4:	f001 f89a 	bl	800221c <HAL_RCC_GetPCLK1Freq>
 80010e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a81      	ldr	r2, [pc, #516]	@ (80012f4 <HAL_I2C_Init+0x274>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d807      	bhi.n	8001104 <HAL_I2C_Init+0x84>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4a80      	ldr	r2, [pc, #512]	@ (80012f8 <HAL_I2C_Init+0x278>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	bf94      	ite	ls
 80010fc:	2301      	movls	r3, #1
 80010fe:	2300      	movhi	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	e006      	b.n	8001112 <HAL_I2C_Init+0x92>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a7d      	ldr	r2, [pc, #500]	@ (80012fc <HAL_I2C_Init+0x27c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	bf94      	ite	ls
 800110c:	2301      	movls	r3, #1
 800110e:	2300      	movhi	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e0e7      	b.n	80012ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a78      	ldr	r2, [pc, #480]	@ (8001300 <HAL_I2C_Init+0x280>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9b      	lsrs	r3, r3, #18
 8001124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	430a      	orrs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a6a      	ldr	r2, [pc, #424]	@ (80012f4 <HAL_I2C_Init+0x274>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d802      	bhi.n	8001154 <HAL_I2C_Init+0xd4>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	3301      	adds	r3, #1
 8001152:	e009      	b.n	8001168 <HAL_I2C_Init+0xe8>
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	4a69      	ldr	r2, [pc, #420]	@ (8001304 <HAL_I2C_Init+0x284>)
 8001160:	fba2 2303 	umull	r2, r3, r2, r3
 8001164:	099b      	lsrs	r3, r3, #6
 8001166:	3301      	adds	r3, #1
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	430b      	orrs	r3, r1
 800116e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800117a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	495c      	ldr	r1, [pc, #368]	@ (80012f4 <HAL_I2C_Init+0x274>)
 8001184:	428b      	cmp	r3, r1
 8001186:	d819      	bhi.n	80011bc <HAL_I2C_Init+0x13c>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1e59      	subs	r1, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fbb1 f3f3 	udiv	r3, r1, r3
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800119c:	400b      	ands	r3, r1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00a      	beq.n	80011b8 <HAL_I2C_Init+0x138>
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1e59      	subs	r1, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b6:	e051      	b.n	800125c <HAL_I2C_Init+0x1dc>
 80011b8:	2304      	movs	r3, #4
 80011ba:	e04f      	b.n	800125c <HAL_I2C_Init+0x1dc>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d111      	bne.n	80011e8 <HAL_I2C_Init+0x168>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	1e58      	subs	r0, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6859      	ldr	r1, [r3, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	440b      	add	r3, r1
 80011d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d6:	3301      	adds	r3, #1
 80011d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf0c      	ite	eq
 80011e0:	2301      	moveq	r3, #1
 80011e2:	2300      	movne	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	e012      	b.n	800120e <HAL_I2C_Init+0x18e>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1e58      	subs	r0, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6859      	ldr	r1, [r3, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	0099      	lsls	r1, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fe:	3301      	adds	r3, #1
 8001200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_I2C_Init+0x196>
 8001212:	2301      	movs	r3, #1
 8001214:	e022      	b.n	800125c <HAL_I2C_Init+0x1dc>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10e      	bne.n	800123c <HAL_I2C_Init+0x1bc>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1e58      	subs	r0, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6859      	ldr	r1, [r3, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	440b      	add	r3, r1
 800122c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001230:	3301      	adds	r3, #1
 8001232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800123a:	e00f      	b.n	800125c <HAL_I2C_Init+0x1dc>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1e58      	subs	r0, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6859      	ldr	r1, [r3, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	0099      	lsls	r1, r3, #2
 800124c:	440b      	add	r3, r1
 800124e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001252:	3301      	adds	r3, #1
 8001254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001258:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	6809      	ldr	r1, [r1, #0]
 8001260:	4313      	orrs	r3, r2
 8001262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69da      	ldr	r2, [r3, #28]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800128a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6911      	ldr	r1, [r2, #16]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68d2      	ldr	r2, [r2, #12]
 8001296:	4311      	orrs	r1, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	430b      	orrs	r3, r1
 800129e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0201 	orr.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2220      	movs	r2, #32
 80012d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	000186a0 	.word	0x000186a0
 80012f8:	001e847f 	.word	0x001e847f
 80012fc:	003d08ff 	.word	0x003d08ff
 8001300:	431bde83 	.word	0x431bde83
 8001304:	10624dd3 	.word	0x10624dd3

08001308 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af02      	add	r7, sp, #8
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	461a      	mov	r2, r3
 8001314:	460b      	mov	r3, r1
 8001316:	817b      	strh	r3, [r7, #10]
 8001318:	4613      	mov	r3, r2
 800131a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff fbe4 	bl	8000ae8 <HAL_GetTick>
 8001320:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b20      	cmp	r3, #32
 800132c:	f040 80e0 	bne.w	80014f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2319      	movs	r3, #25
 8001336:	2201      	movs	r2, #1
 8001338:	4970      	ldr	r1, [pc, #448]	@ (80014fc <HAL_I2C_Master_Transmit+0x1f4>)
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f964 	bl	8001608 <I2C_WaitOnFlagUntilTimeout>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001346:	2302      	movs	r3, #2
 8001348:	e0d3      	b.n	80014f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_I2C_Master_Transmit+0x50>
 8001354:	2302      	movs	r3, #2
 8001356:	e0cc      	b.n	80014f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b01      	cmp	r3, #1
 800136c:	d007      	beq.n	800137e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800138c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2221      	movs	r2, #33	@ 0x21
 8001392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2210      	movs	r2, #16
 800139a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	893a      	ldrh	r2, [r7, #8]
 80013ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a50      	ldr	r2, [pc, #320]	@ (8001500 <HAL_I2C_Master_Transmit+0x1f8>)
 80013be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013c0:	8979      	ldrh	r1, [r7, #10]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	6a3a      	ldr	r2, [r7, #32]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f89c 	bl	8001504 <I2C_MasterRequestWrite>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e08d      	b.n	80014f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013ec:	e066      	b.n	80014bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	6a39      	ldr	r1, [r7, #32]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fa22 	bl	800183c <I2C_WaitOnTXEFlagUntilTimeout>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00d      	beq.n	800141a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	2b04      	cmp	r3, #4
 8001404:	d107      	bne.n	8001416 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e06b      	b.n	80014f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	3b01      	subs	r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b04      	cmp	r3, #4
 8001456:	d11b      	bne.n	8001490 <HAL_I2C_Master_Transmit+0x188>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145c:	2b00      	cmp	r3, #0
 800145e:	d017      	beq.n	8001490 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	6a39      	ldr	r1, [r7, #32]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fa19 	bl	80018cc <I2C_WaitOnBTFFlagUntilTimeout>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00d      	beq.n	80014bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d107      	bne.n	80014b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e01a      	b.n	80014f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d194      	bne.n	80013ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2220      	movs	r2, #32
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	e000      	b.n	80014f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014f0:	2302      	movs	r3, #2
  }
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	00100002 	.word	0x00100002
 8001500:	ffff0000 	.word	0xffff0000

08001504 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	460b      	mov	r3, r1
 8001512:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b08      	cmp	r3, #8
 800151e:	d006      	beq.n	800152e <I2C_MasterRequestWrite+0x2a>
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d003      	beq.n	800152e <I2C_MasterRequestWrite+0x2a>
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800152c:	d108      	bne.n	8001540 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e00b      	b.n	8001558 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	2b12      	cmp	r3, #18
 8001546:	d107      	bne.n	8001558 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f84f 	bl	8001608 <I2C_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00d      	beq.n	800158c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157e:	d103      	bne.n	8001588 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e035      	b.n	80015f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001594:	d108      	bne.n	80015a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	e01b      	b.n	80015e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	11db      	asrs	r3, r3, #7
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f003 0306 	and.w	r3, r3, #6
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f063 030f 	orn	r3, r3, #15
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	490e      	ldr	r1, [pc, #56]	@ (8001600 <I2C_MasterRequestWrite+0xfc>)
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f898 	bl	80016fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e010      	b.n	80015f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015d6:	897b      	ldrh	r3, [r7, #10]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4907      	ldr	r1, [pc, #28]	@ (8001604 <I2C_MasterRequestWrite+0x100>)
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 f888 	bl	80016fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	00010008 	.word	0x00010008
 8001604:	00010002 	.word	0x00010002

08001608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	4613      	mov	r3, r2
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001618:	e048      	b.n	80016ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d044      	beq.n	80016ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001622:	f7ff fa61 	bl	8000ae8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d302      	bcc.n	8001638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d139      	bne.n	80016ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10d      	bne.n	800165e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	43da      	mvns	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4013      	ands	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	e00c      	b.n	8001678 <I2C_WaitOnFlagUntilTimeout+0x70>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	43da      	mvns	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4013      	ands	r3, r2
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	429a      	cmp	r2, r3
 800167c:	d116      	bne.n	80016ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e023      	b.n	80016f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	0c1b      	lsrs	r3, r3, #16
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10d      	bne.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	43da      	mvns	r2, r3
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	4013      	ands	r3, r2
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	bf0c      	ite	eq
 80016c8:	2301      	moveq	r3, #1
 80016ca:	2300      	movne	r3, #0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	e00c      	b.n	80016ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	43da      	mvns	r2, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4013      	ands	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d093      	beq.n	800161a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800170a:	e071      	b.n	80017f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171a:	d123      	bne.n	8001764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800172a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001734:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	f043 0204 	orr.w	r2, r3, #4
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e067      	b.n	8001834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176a:	d041      	beq.n	80017f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176c:	f7ff f9bc 	bl	8000ae8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	429a      	cmp	r2, r3
 800177a:	d302      	bcc.n	8001782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d136      	bne.n	80017f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	0c1b      	lsrs	r3, r3, #16
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b01      	cmp	r3, #1
 800178a:	d10c      	bne.n	80017a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4013      	ands	r3, r2
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf14      	ite	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	2300      	moveq	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	e00b      	b.n	80017be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4013      	ands	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf14      	ite	ne
 80017b8:	2301      	movne	r3, #1
 80017ba:	2300      	moveq	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2220      	movs	r2, #32
 80017cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	f043 0220 	orr.w	r2, r3, #32
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e021      	b.n	8001834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d10c      	bne.n	8001814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	43da      	mvns	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	4013      	ands	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	e00b      	b.n	800182c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4013      	ands	r3, r2
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	f47f af6d 	bne.w	800170c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001848:	e034      	b.n	80018b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f886 	bl	800195c <I2C_IsAcknowledgeFailed>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e034      	b.n	80018c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001860:	d028      	beq.n	80018b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001862:	f7ff f941 	bl	8000ae8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	d302      	bcc.n	8001878 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11d      	bne.n	80018b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001882:	2b80      	cmp	r3, #128	@ 0x80
 8001884:	d016      	beq.n	80018b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	f043 0220 	orr.w	r2, r3, #32
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e007      	b.n	80018c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018be:	2b80      	cmp	r3, #128	@ 0x80
 80018c0:	d1c3      	bne.n	800184a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018d8:	e034      	b.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f83e 	bl	800195c <I2C_IsAcknowledgeFailed>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e034      	b.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d028      	beq.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f2:	f7ff f8f9 	bl	8000ae8 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d302      	bcc.n	8001908 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d11d      	bne.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b04      	cmp	r3, #4
 8001914:	d016      	beq.n	8001944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f043 0220 	orr.w	r2, r3, #32
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e007      	b.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b04      	cmp	r3, #4
 8001950:	d1c3      	bne.n	80018da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001972:	d11b      	bne.n	80019ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800197c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f043 0204 	orr.w	r2, r3, #4
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e267      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d075      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019da:	4b88      	ldr	r3, [pc, #544]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d00c      	beq.n	8001a00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e6:	4b85      	ldr	r3, [pc, #532]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d112      	bne.n	8001a18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f2:	4b82      	ldr	r3, [pc, #520]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019fe:	d10b      	bne.n	8001a18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	4b7e      	ldr	r3, [pc, #504]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d05b      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x108>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d157      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e242      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a20:	d106      	bne.n	8001a30 <HAL_RCC_OscConfig+0x74>
 8001a22:	4b76      	ldr	r3, [pc, #472]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a75      	ldr	r2, [pc, #468]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xb0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x98>
 8001a3a:	4b70      	ldr	r3, [pc, #448]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6f      	ldr	r2, [pc, #444]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b6d      	ldr	r3, [pc, #436]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xb0>
 8001a54:	4b69      	ldr	r3, [pc, #420]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a68      	ldr	r2, [pc, #416]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a65      	ldr	r2, [pc, #404]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f838 	bl	8000ae8 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f834 	bl	8000ae8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e207      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xc0>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f824 	bl	8000ae8 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f820 	bl	8000ae8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1f3      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b51      	ldr	r3, [pc, #324]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xe8>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d063      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ade:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aea:	4b44      	ldr	r3, [pc, #272]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b41      	ldr	r3, [pc, #260]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x152>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1c7      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4937      	ldr	r1, [pc, #220]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e03a      	b.n	8001b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b34      	ldr	r3, [pc, #208]	@ (8001c00 <HAL_RCC_OscConfig+0x244>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7fe ffd9 	bl	8000ae8 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7fe ffd5 	bl	8000ae8 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1a8      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4925      	ldr	r1, [pc, #148]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <HAL_RCC_OscConfig+0x244>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7fe ffb8 	bl	8000ae8 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7fe ffb4 	bl	8000ae8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e187      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d036      	beq.n	8001c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d016      	beq.n	8001bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_RCC_OscConfig+0x248>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7fe ff98 	bl	8000ae8 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7fe ff94 	bl	8000ae8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e167      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_RCC_OscConfig+0x240>)
 8001bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x200>
 8001bda:	e01b      	b.n	8001c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_RCC_OscConfig+0x248>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7fe ff81 	bl	8000ae8 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	e00e      	b.n	8001c08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bea:	f7fe ff7d 	bl	8000ae8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d907      	bls.n	8001c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e150      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	42470000 	.word	0x42470000
 8001c04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b88      	ldr	r3, [pc, #544]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ea      	bne.n	8001bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8097 	beq.w	8001d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b81      	ldr	r3, [pc, #516]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	4b7d      	ldr	r3, [pc, #500]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	4b7a      	ldr	r3, [pc, #488]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b77      	ldr	r3, [pc, #476]	@ (8001e30 <HAL_RCC_OscConfig+0x474>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d118      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4b74      	ldr	r3, [pc, #464]	@ (8001e30 <HAL_RCC_OscConfig+0x474>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a73      	ldr	r2, [pc, #460]	@ (8001e30 <HAL_RCC_OscConfig+0x474>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7fe ff3d 	bl	8000ae8 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7fe ff39 	bl	8000ae8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e10c      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b6a      	ldr	r3, [pc, #424]	@ (8001e30 <HAL_RCC_OscConfig+0x474>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d106      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x2ea>
 8001c98:	4b64      	ldr	r3, [pc, #400]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9c:	4a63      	ldr	r2, [pc, #396]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca4:	e01c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x324>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d10c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x30c>
 8001cae:	4b5f      	ldr	r3, [pc, #380]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cba:	4b5c      	ldr	r3, [pc, #368]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x324>
 8001cc8:	4b58      	ldr	r3, [pc, #352]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ccc:	4a57      	ldr	r2, [pc, #348]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd4:	4b55      	ldr	r3, [pc, #340]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd8:	4a54      	ldr	r2, [pc, #336]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001cda:	f023 0304 	bic.w	r3, r3, #4
 8001cde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d015      	beq.n	8001d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7fe fefe 	bl	8000ae8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7fe fefa 	bl	8000ae8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0cb      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	4b49      	ldr	r3, [pc, #292]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ee      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x334>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d14:	f7fe fee8 	bl	8000ae8 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7fe fee4 	bl	8000ae8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0b5      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d32:	4b3e      	ldr	r3, [pc, #248]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ee      	bne.n	8001d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b39      	ldr	r3, [pc, #228]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	4a38      	ldr	r2, [pc, #224]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a1 	beq.w	8001e9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d5a:	4b34      	ldr	r3, [pc, #208]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d05c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d141      	bne.n	8001df2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <HAL_RCC_OscConfig+0x478>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7fe feb8 	bl	8000ae8 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe feb4 	bl	8000ae8 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e087      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8e:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	019b      	lsls	r3, r3, #6
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	3b01      	subs	r3, #1
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	491b      	ldr	r1, [pc, #108]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x478>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dca:	f7fe fe8d 	bl	8000ae8 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe fe89 	bl	8000ae8 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e05c      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x416>
 8001df0:	e054      	b.n	8001e9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HAL_RCC_OscConfig+0x478>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7fe fe76 	bl	8000ae8 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe fe72 	bl	8000ae8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e045      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_RCC_OscConfig+0x470>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x444>
 8001e1e:	e03d      	b.n	8001e9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e038      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000
 8001e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <HAL_RCC_OscConfig+0x4ec>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d028      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d121      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d11a      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e68:	4013      	ands	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d111      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	3b01      	subs	r3, #1
 8001e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d107      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800

08001eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0cc      	b.n	800205a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b68      	ldr	r3, [pc, #416]	@ (8002064 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d90c      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b65      	ldr	r3, [pc, #404]	@ (8002064 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	@ (8002064 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a58      	ldr	r2, [pc, #352]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d044      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d119      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d003      	beq.n	8001f6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06f      	b.n	800205a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e067      	b.n	800205a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8a:	4b37      	ldr	r3, [pc, #220]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4934      	ldr	r1, [pc, #208]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fda4 	bl	8000ae8 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fda0 	bl	8000ae8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e04f      	b.n	800205a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 020c 	and.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d1eb      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <HAL_RCC_ClockConfig+0x1b8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d20c      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4602      	mov	r2, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	490a      	ldr	r1, [pc, #40]	@ (800206c <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	5ccb      	ldrb	r3, [r1, r3]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fd04 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00
 8002068:	40023800 	.word	0x40023800
 800206c:	08002b04 	.word	0x08002b04
 8002070:	20000004 	.word	0x20000004
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800207c:	b090      	sub	sp, #64	@ 0x40
 800207e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002090:	4b59      	ldr	r3, [pc, #356]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d00d      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x40>
 800209c:	2b08      	cmp	r3, #8
 800209e:	f200 80a1 	bhi.w	80021e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x34>
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020aa:	e09b      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020ac:	4b53      	ldr	r3, [pc, #332]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x184>)
 80020ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020b0:	e09b      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b2:	4b53      	ldr	r3, [pc, #332]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020b6:	e098      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b8:	4b4f      	ldr	r3, [pc, #316]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c2:	4b4d      	ldr	r3, [pc, #308]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d028      	beq.n	8002120 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ce:	4b4a      	ldr	r3, [pc, #296]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	099b      	lsrs	r3, r3, #6
 80020d4:	2200      	movs	r2, #0
 80020d6:	623b      	str	r3, [r7, #32]
 80020d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020e0:	2100      	movs	r1, #0
 80020e2:	4b47      	ldr	r3, [pc, #284]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x188>)
 80020e4:	fb03 f201 	mul.w	r2, r3, r1
 80020e8:	2300      	movs	r3, #0
 80020ea:	fb00 f303 	mul.w	r3, r0, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	4a43      	ldr	r2, [pc, #268]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f2:	fba0 1202 	umull	r1, r2, r0, r2
 80020f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020f8:	460a      	mov	r2, r1
 80020fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80020fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020fe:	4413      	add	r3, r2
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002104:	2200      	movs	r2, #0
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	61fa      	str	r2, [r7, #28]
 800210a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800210e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002112:	f7fe f86b 	bl	80001ec <__aeabi_uldivmod>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4613      	mov	r3, r2
 800211c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800211e:	e053      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002120:	4b35      	ldr	r3, [pc, #212]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	2200      	movs	r2, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	617a      	str	r2, [r7, #20]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002132:	f04f 0b00 	mov.w	fp, #0
 8002136:	4652      	mov	r2, sl
 8002138:	465b      	mov	r3, fp
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002148:	0150      	lsls	r0, r2, #5
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	ebb2 080a 	subs.w	r8, r2, sl
 8002152:	eb63 090b 	sbc.w	r9, r3, fp
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002162:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002166:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800216a:	ebb2 0408 	subs.w	r4, r2, r8
 800216e:	eb63 0509 	sbc.w	r5, r3, r9
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	00eb      	lsls	r3, r5, #3
 800217c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002180:	00e2      	lsls	r2, r4, #3
 8002182:	4614      	mov	r4, r2
 8002184:	461d      	mov	r5, r3
 8002186:	eb14 030a 	adds.w	r3, r4, sl
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	eb45 030b 	adc.w	r3, r5, fp
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800219e:	4629      	mov	r1, r5
 80021a0:	028b      	lsls	r3, r1, #10
 80021a2:	4621      	mov	r1, r4
 80021a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a8:	4621      	mov	r1, r4
 80021aa:	028a      	lsls	r2, r1, #10
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b2:	2200      	movs	r2, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	60fa      	str	r2, [r7, #12]
 80021b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021bc:	f7fe f816 	bl	80001ec <__aeabi_uldivmod>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4613      	mov	r3, r2
 80021c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	3301      	adds	r3, #1
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021e2:	e002      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x184>)
 80021e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3740      	adds	r7, #64	@ 0x40
 80021f0:	46bd      	mov	sp, r7
 80021f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	00f42400 	.word	0x00f42400
 8002200:	017d7840 	.word	0x017d7840

08002204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_RCC_GetHCLKFreq+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000004 	.word	0x20000004

0800221c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002220:	f7ff fff0 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0a9b      	lsrs	r3, r3, #10
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4903      	ldr	r1, [pc, #12]	@ (8002240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	08002b14 	.word	0x08002b14

08002244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07b      	b.n	800234e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002266:	d009      	beq.n	800227c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
 800226e:	e005      	b.n	800227c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fb0c 	bl	80008b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002300:	ea42 0103 	orr.w	r1, r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002308:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0104 	and.w	r1, r3, #4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	f003 0210 	and.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <set_column>:
static char x;
static uint32_t i = 0;
static uint32_t lastDebounceTime[12];
static bool keyState[12] = {};

void set_column(uint8_t col, GPIO_PinState state){
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
	switch(col){
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d014      	beq.n	8002398 <set_column+0x40>
 800236e:	2b02      	cmp	r3, #2
 8002370:	dc19      	bgt.n	80023a6 <set_column+0x4e>
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <set_column+0x24>
 8002376:	2b01      	cmp	r3, #1
 8002378:	d007      	beq.n	800238a <set_column+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
		break;
	}
}
 800237a:	e014      	b.n	80023a6 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col1_Pin, state);
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	461a      	mov	r2, r3
 8002380:	2110      	movs	r1, #16
 8002382:	480b      	ldr	r0, [pc, #44]	@ (80023b0 <set_column+0x58>)
 8002384:	f7fe fe62 	bl	800104c <HAL_GPIO_WritePin>
		break;
 8002388:	e00d      	b.n	80023a6 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col2_Pin, state);
 800238a:	79bb      	ldrb	r3, [r7, #6]
 800238c:	461a      	mov	r2, r3
 800238e:	2140      	movs	r1, #64	@ 0x40
 8002390:	4807      	ldr	r0, [pc, #28]	@ (80023b0 <set_column+0x58>)
 8002392:	f7fe fe5b 	bl	800104c <HAL_GPIO_WritePin>
		break;
 8002396:	e006      	b.n	80023a6 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
 8002398:	79bb      	ldrb	r3, [r7, #6]
 800239a:	461a      	mov	r2, r3
 800239c:	2104      	movs	r1, #4
 800239e:	4804      	ldr	r0, [pc, #16]	@ (80023b0 <set_column+0x58>)
 80023a0:	f7fe fe54 	bl	800104c <HAL_GPIO_WritePin>
		break;
 80023a4:	bf00      	nop
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40020000 	.word	0x40020000

080023b4 <handle_key_press>:
void handle_key_press(uint8_t col, uint8_t row){
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 1;
 80023c4:	79ba      	ldrb	r2, [r7, #6]
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	441a      	add	r2, r3
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <handle_key_press+0x48>)
 80023d2:	2101      	movs	r1, #1
 80023d4:	54d1      	strb	r1, [r2, r3]
	x = (row) * 3 + col + 1;
 80023d6:	79bb      	ldrb	r3, [r7, #6]
 80023d8:	461a      	mov	r2, r3
 80023da:	0052      	lsls	r2, r2, #1
 80023dc:	4413      	add	r3, r2
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	4413      	add	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <handle_key_press+0x4c>)
 80023ec:	701a      	strb	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000120 	.word	0x20000120
 8002400:	200000e8 	.word	0x200000e8

08002404 <handle_key_reset>:
void handle_key_reset(uint8_t col, uint8_t row){
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	460a      	mov	r2, r1
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	4613      	mov	r3, r2
 8002412:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 0;
 8002414:	79ba      	ldrb	r2, [r7, #6]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	441a      	add	r2, r3
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	4413      	add	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <handle_key_reset+0x30>)
 8002422:	2100      	movs	r1, #0
 8002424:	54d1      	strb	r1, [r2, r3]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000120 	.word	0x20000120

08002438 <read_row>:

GPIO_PinState read_row(uint8_t row){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
	switch(row){
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d823      	bhi.n	8002490 <read_row+0x58>
 8002448:	a201      	add	r2, pc, #4	@ (adr r2, 8002450 <read_row+0x18>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002461 	.word	0x08002461
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002479 	.word	0x08002479
 800245c:	08002485 	.word	0x08002485
		case 0:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row1_Pin);
 8002460:	2120      	movs	r1, #32
 8002462:	480e      	ldr	r0, [pc, #56]	@ (800249c <read_row+0x64>)
 8002464:	f7fe fdda 	bl	800101c <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	e012      	b.n	8002492 <read_row+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row2_Pin);
 800246c:	2101      	movs	r1, #1
 800246e:	480b      	ldr	r0, [pc, #44]	@ (800249c <read_row+0x64>)
 8002470:	f7fe fdd4 	bl	800101c <HAL_GPIO_ReadPin>
 8002474:	4603      	mov	r3, r0
 8002476:	e00c      	b.n	8002492 <read_row+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row3_Pin);
 8002478:	2102      	movs	r1, #2
 800247a:	4808      	ldr	r0, [pc, #32]	@ (800249c <read_row+0x64>)
 800247c:	f7fe fdce 	bl	800101c <HAL_GPIO_ReadPin>
 8002480:	4603      	mov	r3, r0
 8002482:	e006      	b.n	8002492 <read_row+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row4_Pin);
 8002484:	2108      	movs	r1, #8
 8002486:	4805      	ldr	r0, [pc, #20]	@ (800249c <read_row+0x64>)
 8002488:	f7fe fdc8 	bl	800101c <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	e000      	b.n	8002492 <read_row+0x5a>
			break;
	}
	return 1;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40020000 	.word	0x40020000

080024a0 <check_keyboard>:
char check_keyboard(void){
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
	x = 0;
 80024a6:	4b36      	ldr	r3, [pc, #216]	@ (8002580 <check_keyboard+0xe0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
	i = 0;
 80024ac:	4b35      	ldr	r3, [pc, #212]	@ (8002584 <check_keyboard+0xe4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
	for (int col = 0; col < 3; col++) {
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e059      	b.n	800256c <check_keyboard+0xcc>
	    set_column(col, GPIO_PIN_RESET);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff4a 	bl	8002358 <set_column>
	    for (int row = 0; row < 4; row++) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	e044      	b.n	8002554 <check_keyboard+0xb4>
	    	uint32_t t = HAL_GetTick();
 80024ca:	f7fe fb0d 	bl	8000ae8 <HAL_GetTick>
 80024ce:	6078      	str	r0, [r7, #4]
	    	if(t - lastDebounceTime[(row) * 3 + col] > DEBOUNCE_TIME){
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	441a      	add	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002588 <check_keyboard+0xe8>)
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	d931      	bls.n	800254e <check_keyboard+0xae>
				if (read_row(row) == GPIO_PIN_RESET) {
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ffa2 	bl	8002438 <read_row>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d121      	bne.n	800253e <check_keyboard+0x9e>
					if(!keyState[(row) * 3 + col])
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	441a      	add	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	4a21      	ldr	r2, [pc, #132]	@ (800258c <check_keyboard+0xec>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <check_keyboard+0x84>
						handle_key_press(col, row);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff48 	bl	80023b4 <handle_key_press>
					lastDebounceTime[(row) * 3 + col] = HAL_GetTick();
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	441a      	add	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	18d4      	adds	r4, r2, r3
 8002530:	f7fe fada 	bl	8000ae8 <HAL_GetTick>
 8002534:	4603      	mov	r3, r0
 8002536:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <check_keyboard+0xe8>)
 8002538:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800253c:	e007      	b.n	800254e <check_keyboard+0xae>
				}
				else{
					handle_key_reset(col, row);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff5b 	bl	8002404 <handle_key_reset>
	    for (int row = 0; row < 4; row++) {
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3301      	adds	r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b03      	cmp	r3, #3
 8002558:	ddb7      	ble.n	80024ca <check_keyboard+0x2a>
				}
	    	}
	    }
	    set_column(col, GPIO_PIN_SET);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2101      	movs	r1, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fef9 	bl	8002358 <set_column>
	for (int col = 0; col < 3; col++) {
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3301      	adds	r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b02      	cmp	r3, #2
 8002570:	dda2      	ble.n	80024b8 <check_keyboard+0x18>
	}
	return x;
 8002572:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <check_keyboard+0xe0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bd90      	pop	{r4, r7, pc}
 800257e:	bf00      	nop
 8002580:	200000e8 	.word	0x200000e8
 8002584:	200000ec 	.word	0x200000ec
 8002588:	200000f0 	.word	0x200000f0
 800258c:	20000120 	.word	0x20000120

08002590 <lcd_send_cmd>:
 */
#include "lcd_driver.h"
static I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af02      	add	r7, sp, #8
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f023 030f 	bic.w	r3, r3, #15
 80025a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	f043 030c 	orr.w	r3, r3, #12
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80025bc:	7bbb      	ldrb	r3, [r7, #14]
 80025be:	f043 030c 	orr.w	r3, r3, #12
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80025d0:	f107 0208 	add.w	r2, r7, #8
 80025d4:	2364      	movs	r3, #100	@ 0x64
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2304      	movs	r3, #4
 80025da:	214e      	movs	r1, #78	@ 0x4e
 80025dc:	4803      	ldr	r0, [pc, #12]	@ (80025ec <lcd_send_cmd+0x5c>)
 80025de:	f7fe fe93 	bl	8001308 <HAL_I2C_Master_Transmit>
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000012c 	.word	0x2000012c

080025f0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f023 030f 	bic.w	r3, r3, #15
 8002600:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	f043 030d 	orr.w	r3, r3, #13
 800260e:	b2db      	uxtb	r3, r3
 8002610:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	f043 0309 	orr.w	r3, r3, #9
 8002618:	b2db      	uxtb	r3, r3
 800261a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 800261c:	7bbb      	ldrb	r3, [r7, #14]
 800261e:	f043 030d 	orr.w	r3, r3, #13
 8002622:	b2db      	uxtb	r3, r3
 8002624:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8002626:	7bbb      	ldrb	r3, [r7, #14]
 8002628:	f043 0309 	orr.w	r3, r3, #9
 800262c:	b2db      	uxtb	r3, r3
 800262e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002630:	f107 0208 	add.w	r2, r7, #8
 8002634:	2364      	movs	r3, #100	@ 0x64
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2304      	movs	r3, #4
 800263a:	214e      	movs	r1, #78	@ 0x4e
 800263c:	4803      	ldr	r0, [pc, #12]	@ (800264c <lcd_send_data+0x5c>)
 800263e:	f7fe fe63 	bl	8001308 <HAL_I2C_Master_Transmit>
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000012c 	.word	0x2000012c

08002650 <lcd_init>:

void lcd_init (I2C_HandleTypeDef i2c)
{
 8002650:	b084      	sub	sp, #16
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
 8002656:	f107 0c08 	add.w	ip, r7, #8
 800265a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 800265e:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <lcd_init+0x98>)
 8002660:	4618      	mov	r0, r3
 8002662:	f107 0308 	add.w	r3, r7, #8
 8002666:	2254      	movs	r2, #84	@ 0x54
 8002668:	4619      	mov	r1, r3
 800266a:	f000 fa03 	bl	8002a74 <memcpy>
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800266e:	2032      	movs	r0, #50	@ 0x32
 8002670:	f7fe fa46 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002674:	2030      	movs	r0, #48	@ 0x30
 8002676:	f7ff ff8b 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800267a:	2005      	movs	r0, #5
 800267c:	f7fe fa40 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002680:	2030      	movs	r0, #48	@ 0x30
 8002682:	f7ff ff85 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002686:	2001      	movs	r0, #1
 8002688:	f7fe fa3a 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x30);
 800268c:	2030      	movs	r0, #48	@ 0x30
 800268e:	f7ff ff7f 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(10);
 8002692:	200a      	movs	r0, #10
 8002694:	f7fe fa34 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8002698:	2020      	movs	r0, #32
 800269a:	f7ff ff79 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(10);
 800269e:	200a      	movs	r0, #10
 80026a0:	f7fe fa2e 	bl	8000b00 <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80026a4:	2028      	movs	r0, #40	@ 0x28
 80026a6:	f7ff ff73 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7fe fa28 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80026b0:	2008      	movs	r0, #8
 80026b2:	f7ff ff6d 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7fe fa22 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80026bc:	2001      	movs	r0, #1
 80026be:	f7ff ff67 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(2);
 80026c2:	2002      	movs	r0, #2
 80026c4:	f7fe fa1c 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80026c8:	2006      	movs	r0, #6
 80026ca:	f7ff ff61 	bl	8002590 <lcd_send_cmd>
	HAL_Delay(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7fe fa16 	bl	8000b00 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80026d4:	200c      	movs	r0, #12
 80026d6:	f7ff ff5b 	bl	8002590 <lcd_send_cmd>
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026e2:	b004      	add	sp, #16
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	2000012c 	.word	0x2000012c

080026ec <lcd_send_string>:

void lcd_send_string (char *str)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80026f4:	e006      	b.n	8002704 <lcd_send_string+0x18>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff76 	bl	80025f0 <lcd_send_data>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f4      	bne.n	80026f6 <lcd_send_string+0xa>
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <lcd_clear>:

void lcd_clear(void){
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 800271c:	2100      	movs	r1, #0
 800271e:	2000      	movs	r0, #0
 8002720:	f000 f80e 	bl	8002740 <lcd_put_cur>
	  lcd_send_string ("              ");
 8002724:	4805      	ldr	r0, [pc, #20]	@ (800273c <lcd_clear+0x24>)
 8002726:	f7ff ffe1 	bl	80026ec <lcd_send_string>
	  lcd_put_cur(1, 0);
 800272a:	2100      	movs	r1, #0
 800272c:	2001      	movs	r0, #1
 800272e:	f000 f807 	bl	8002740 <lcd_put_cur>
	  lcd_send_string ("              ");
 8002732:	4802      	ldr	r0, [pc, #8]	@ (800273c <lcd_clear+0x24>)
 8002734:	f7ff ffda 	bl	80026ec <lcd_send_string>
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	08002ab0 	.word	0x08002ab0

08002740 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
	switch (row)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <lcd_put_cur+0x18>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d005      	beq.n	8002762 <lcd_put_cur+0x22>
 8002756:	e009      	b.n	800276c <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800275e:	603b      	str	r3, [r7, #0]
			break;
 8002760:	e004      	b.n	800276c <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002768:	603b      	str	r3, [r7, #0]
			break;
 800276a:	bf00      	nop
	}
	lcd_send_cmd (col);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff0d 	bl	8002590 <lcd_send_cmd>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <state_machine_run>:
static char pin[16] = "";




void state_machine_run(char input, bool changed_inp){
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	460a      	mov	r2, r1
 800278a:	71fb      	strb	r3, [r7, #7]
 800278c:	4613      	mov	r3, r2
 800278e:	71bb      	strb	r3, [r7, #6]
	if(changed_inp){
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <state_machine_run+0x30>
		changed = true;
 8002796:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <state_machine_run+0x74>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
		str[len++] = input;
 800279c:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <state_machine_run+0x78>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	b2d1      	uxtb	r1, r2
 80027a4:	4a14      	ldr	r2, [pc, #80]	@ (80027f8 <state_machine_run+0x78>)
 80027a6:	7011      	strb	r1, [r2, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4a14      	ldr	r2, [pc, #80]	@ (80027fc <state_machine_run+0x7c>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	5453      	strb	r3, [r2, r1]
	}
	switch(state){
 80027b0:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <state_machine_run+0x80>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d819      	bhi.n	80027ec <state_machine_run+0x6c>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <state_machine_run+0x40>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027eb 	.word	0x080027eb
 80027c4:	080027eb 	.word	0x080027eb
 80027c8:	080027eb 	.word	0x080027eb
 80027cc:	080027e5 	.word	0x080027e5
 80027d0:	080027eb 	.word	0x080027eb
 80027d4:	080027eb 	.word	0x080027eb
 80027d8:	080027eb 	.word	0x080027eb
 80027dc:	080027eb 	.word	0x080027eb
 80027e0:	080027eb 	.word	0x080027eb
	case DISARMED:
		state_machine_disarmed();
 80027e4:	f000 f824 	bl	8002830 <state_machine_disarmed>
	  break;
 80027e8:	e000      	b.n	80027ec <state_machine_run+0x6c>
	case ARMED:
	  break;
 80027ea:	bf00      	nop
	case SET_ALERT_TIME:
	  break;
	case SET_NEW_PIN:
	  break;
	}
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	2000000d 	.word	0x2000000d
 80027f8:	2000018e 	.word	0x2000018e
 80027fc:	20000180 	.word	0x20000180
 8002800:	20000000 	.word	0x20000000

08002804 <state_machine_init>:

void state_machine_init(uint8_t pin_len, char pin_inp[static pin_len]){
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
	memcpy(pin,pin_inp, pin_len);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	461a      	mov	r2, r3
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	4805      	ldr	r0, [pc, #20]	@ (800282c <state_machine_init+0x28>)
 8002818:	f000 f92c 	bl	8002a74 <memcpy>
	pin[pin_len] = '#';
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	4a03      	ldr	r2, [pc, #12]	@ (800282c <state_machine_init+0x28>)
 8002820:	2123      	movs	r1, #35	@ 0x23
 8002822:	54d1      	strb	r1, [r2, r3]

}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000194 	.word	0x20000194

08002830 <state_machine_disarmed>:


void state_machine_disarmed(void){
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8002834:	4b6c      	ldr	r3, [pc, #432]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <state_machine_disarmed+0x20>
 800283c:	f7fe f954 	bl	8000ae8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	4b6a      	ldr	r3, [pc, #424]	@ (80029ec <state_machine_disarmed+0x1bc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800284c:	f240 80c9 	bls.w	80029e2 <state_machine_disarmed+0x1b2>
	  if(len == 0 && changed){
 8002850:	4b67      	ldr	r3, [pc, #412]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d117      	bne.n	8002888 <state_machine_disarmed+0x58>
 8002858:	4b63      	ldr	r3, [pc, #396]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <state_machine_disarmed+0x58>
		  changed = false;
 8002860:	4b61      	ldr	r3, [pc, #388]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
		  lcd_clear();
 8002866:	f7ff ff57 	bl	8002718 <lcd_clear>
		  lcd_put_cur(0, 0);
 800286a:	2100      	movs	r1, #0
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff ff67 	bl	8002740 <lcd_put_cur>
		  lcd_send_string ("DISARMED");
 8002872:	4860      	ldr	r0, [pc, #384]	@ (80029f4 <state_machine_disarmed+0x1c4>)
 8002874:	f7ff ff3a 	bl	80026ec <lcd_send_string>
		  lcd_put_cur(1, 0);
 8002878:	2100      	movs	r1, #0
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff ff60 	bl	8002740 <lcd_put_cur>
		  lcd_send_string("PIN TO ARM");
 8002880:	485d      	ldr	r0, [pc, #372]	@ (80029f8 <state_machine_disarmed+0x1c8>)
 8002882:	f7ff ff33 	bl	80026ec <lcd_send_string>
 8002886:	e0ac      	b.n	80029e2 <state_machine_disarmed+0x1b2>
	  }
	  else if(len != 0){
 8002888:	4b59      	ldr	r3, [pc, #356]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a8 	beq.w	80029e2 <state_machine_disarmed+0x1b2>
		  lcd_clear();
 8002892:	f7ff ff41 	bl	8002718 <lcd_clear>
		  lcd_put_cur(0, 0);
 8002896:	2100      	movs	r1, #0
 8002898:	2000      	movs	r0, #0
 800289a:	f7ff ff51 	bl	8002740 <lcd_put_cur>
		  lcd_send_string ("PIN:");
 800289e:	4857      	ldr	r0, [pc, #348]	@ (80029fc <state_machine_disarmed+0x1cc>)
 80028a0:	f7ff ff24 	bl	80026ec <lcd_send_string>
		  lcd_put_cur(1, 0);
 80028a4:	2100      	movs	r1, #0
 80028a6:	2001      	movs	r0, #1
 80028a8:	f7ff ff4a 	bl	8002740 <lcd_put_cur>
		  str[len] = '\0';
 80028ac:	4b50      	ldr	r3, [pc, #320]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b53      	ldr	r3, [pc, #332]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
		  lcd_send_string(str);
 80028b8:	4851      	ldr	r0, [pc, #324]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 80028ba:	f7ff ff17 	bl	80026ec <lcd_send_string>
		  if(strcmp(str,pin) == 0){
 80028be:	4951      	ldr	r1, [pc, #324]	@ (8002a04 <state_machine_disarmed+0x1d4>)
 80028c0:	484f      	ldr	r0, [pc, #316]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 80028c2:	f7fd fc89 	bl	80001d8 <strcmp>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10e      	bne.n	80028ea <state_machine_disarmed+0xba>
			  state = ARMED;
 80028cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002a08 <state_machine_disarmed+0x1d8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 80028d2:	220e      	movs	r2, #14
 80028d4:	2100      	movs	r1, #0
 80028d6:	484a      	ldr	r0, [pc, #296]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 80028d8:	f000 f8a0 	bl	8002a1c <memset>
			  len = 0;
 80028dc:	4b44      	ldr	r3, [pc, #272]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
			  changed = true;
 80028e2:	4b41      	ldr	r3, [pc, #260]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}
 80028e8:	e07b      	b.n	80029e2 <state_machine_disarmed+0x1b2>
		  else if(strcmp(str,set_new_pin) == 0){
 80028ea:	4b48      	ldr	r3, [pc, #288]	@ (8002a0c <state_machine_disarmed+0x1dc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	4843      	ldr	r0, [pc, #268]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 80028f2:	f7fd fc71 	bl	80001d8 <strcmp>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10e      	bne.n	800291a <state_machine_disarmed+0xea>
			  state = SET_NEW_PIN;
 80028fc:	4b42      	ldr	r3, [pc, #264]	@ (8002a08 <state_machine_disarmed+0x1d8>)
 80028fe:	2204      	movs	r2, #4
 8002900:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 8002902:	220e      	movs	r2, #14
 8002904:	2100      	movs	r1, #0
 8002906:	483e      	ldr	r0, [pc, #248]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 8002908:	f000 f888 	bl	8002a1c <memset>
			  len = 0;
 800290c:	4b38      	ldr	r3, [pc, #224]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002912:	4b35      	ldr	r3, [pc, #212]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
}
 8002918:	e063      	b.n	80029e2 <state_machine_disarmed+0x1b2>
		  else if(strcmp(str,set_alert_time) == 0){
 800291a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <state_machine_disarmed+0x1e0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4619      	mov	r1, r3
 8002920:	4837      	ldr	r0, [pc, #220]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 8002922:	f7fd fc59 	bl	80001d8 <strcmp>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10e      	bne.n	800294a <state_machine_disarmed+0x11a>
			  state = SET_ALERT_TIME;
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <state_machine_disarmed+0x1d8>)
 800292e:	2208      	movs	r2, #8
 8002930:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 8002932:	220e      	movs	r2, #14
 8002934:	2100      	movs	r1, #0
 8002936:	4832      	ldr	r0, [pc, #200]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 8002938:	f000 f870 	bl	8002a1c <memset>
			  len = 0;
 800293c:	4b2c      	ldr	r3, [pc, #176]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002942:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
}
 8002948:	e04b      	b.n	80029e2 <state_machine_disarmed+0x1b2>
		  else if(strcmp(str,menage_number) == 0){
 800294a:	4b32      	ldr	r3, [pc, #200]	@ (8002a14 <state_machine_disarmed+0x1e4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4619      	mov	r1, r3
 8002950:	482b      	ldr	r0, [pc, #172]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 8002952:	f7fd fc41 	bl	80001d8 <strcmp>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10e      	bne.n	800297a <state_machine_disarmed+0x14a>
			  state = SET_ALERT_TIME;
 800295c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <state_machine_disarmed+0x1d8>)
 800295e:	2208      	movs	r2, #8
 8002960:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 8002962:	220e      	movs	r2, #14
 8002964:	2100      	movs	r1, #0
 8002966:	4826      	ldr	r0, [pc, #152]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 8002968:	f000 f858 	bl	8002a1c <memset>
			  len = 0;
 800296c:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002972:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
}
 8002978:	e033      	b.n	80029e2 <state_machine_disarmed+0x1b2>
		  else if(str[len - 1] == '#' || len == 14 || !changed){
 800297a:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	3b01      	subs	r3, #1
 8002980:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 8002982:	5cd3      	ldrb	r3, [r2, r3]
 8002984:	2b23      	cmp	r3, #35	@ 0x23
 8002986:	d00a      	beq.n	800299e <state_machine_disarmed+0x16e>
 8002988:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b0e      	cmp	r3, #14
 800298e:	d006      	beq.n	800299e <state_machine_disarmed+0x16e>
 8002990:	4b15      	ldr	r3, [pc, #84]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d018      	beq.n	80029d0 <state_machine_disarmed+0x1a0>
			  lcd_clear();
 800299e:	f7ff febb 	bl	8002718 <lcd_clear>
			  lcd_put_cur(0, 0);
 80029a2:	2100      	movs	r1, #0
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7ff fecb 	bl	8002740 <lcd_put_cur>
			  lcd_send_string ("WRONG PIN");
 80029aa:	481b      	ldr	r0, [pc, #108]	@ (8002a18 <state_machine_disarmed+0x1e8>)
 80029ac:	f7ff fe9e 	bl	80026ec <lcd_send_string>
			  memset(str,0,14);
 80029b0:	220e      	movs	r2, #14
 80029b2:	2100      	movs	r1, #0
 80029b4:	4812      	ldr	r0, [pc, #72]	@ (8002a00 <state_machine_disarmed+0x1d0>)
 80029b6:	f000 f831 	bl	8002a1c <memset>
			  len = 0;
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <state_machine_disarmed+0x1c0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
			  changed = true;
 80029c0:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(3000);
 80029c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80029ca:	f7fe f899 	bl	8000b00 <HAL_Delay>
 80029ce:	e008      	b.n	80029e2 <state_machine_disarmed+0x1b2>
			  timestamp = HAL_GetTick();
 80029d0:	f7fe f88a 	bl	8000ae8 <HAL_GetTick>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4a05      	ldr	r2, [pc, #20]	@ (80029ec <state_machine_disarmed+0x1bc>)
 80029d8:	6013      	str	r3, [r2, #0]
			  changed = false;
 80029da:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <state_machine_disarmed+0x1b8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
}
 80029e0:	e7ff      	b.n	80029e2 <state_machine_disarmed+0x1b2>
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000000d 	.word	0x2000000d
 80029ec:	20000190 	.word	0x20000190
 80029f0:	2000018e 	.word	0x2000018e
 80029f4:	08002ad8 	.word	0x08002ad8
 80029f8:	08002ae4 	.word	0x08002ae4
 80029fc:	08002af0 	.word	0x08002af0
 8002a00:	20000180 	.word	0x20000180
 8002a04:	20000194 	.word	0x20000194
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000014 	.word	0x20000014
 8002a10:	20000010 	.word	0x20000010
 8002a14:	20000018 	.word	0x20000018
 8002a18:	08002af8 	.word	0x08002af8

08002a1c <memset>:
 8002a1c:	4402      	add	r2, r0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d100      	bne.n	8002a26 <memset+0xa>
 8002a24:	4770      	bx	lr
 8002a26:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2a:	e7f9      	b.n	8002a20 <memset+0x4>

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a64 <__libc_init_array+0x38>)
 8002a30:	4c0d      	ldr	r4, [pc, #52]	@ (8002a68 <__libc_init_array+0x3c>)
 8002a32:	1b64      	subs	r4, r4, r5
 8002a34:	10a4      	asrs	r4, r4, #2
 8002a36:	2600      	movs	r6, #0
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a6c <__libc_init_array+0x40>)
 8002a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a70 <__libc_init_array+0x44>)
 8002a40:	f000 f826 	bl	8002a90 <_init>
 8002a44:	1b64      	subs	r4, r4, r5
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	2600      	movs	r6, #0
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002b24 	.word	0x08002b24
 8002a68:	08002b24 	.word	0x08002b24
 8002a6c:	08002b24 	.word	0x08002b24
 8002a70:	08002b28 	.word	0x08002b28

08002a74 <memcpy>:
 8002a74:	440a      	add	r2, r1
 8002a76:	4291      	cmp	r1, r2
 8002a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a7c:	d100      	bne.n	8002a80 <memcpy+0xc>
 8002a7e:	4770      	bx	lr
 8002a80:	b510      	push	{r4, lr}
 8002a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a8a:	4291      	cmp	r1, r2
 8002a8c:	d1f9      	bne.n	8002a82 <memcpy+0xe>
 8002a8e:	bd10      	pop	{r4, pc}

08002a90 <_init>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	bf00      	nop
 8002a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a96:	bc08      	pop	{r3}
 8002a98:	469e      	mov	lr, r3
 8002a9a:	4770      	bx	lr

08002a9c <_fini>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr
