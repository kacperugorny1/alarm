
Alarm_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08006260  08006260  00007260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a18  08006a18  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006a18  08006a18  00007a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a20  08006a20  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00007a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a24  08006a24  00007a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006a28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000068  08006a90  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006a90  000082d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc44  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002095  00000000  00000000  00015cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00017d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000918  00000000  00000000  00018930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e94  00000000  00000000  00019248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e799  00000000  00000000  000330dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a128c  00000000  00000000  00041875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2b01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b0  00000000  00000000  000e2b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e5df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006248 	.word	0x08006248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006248 	.word	0x08006248

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <nrf_write_register>:
 * @param reg_addr: The register address (5 LSBs are used).
 * @param data: Pointer to the data to write.
 * @param size: Number of bytes to write.
 * @retval HAL_StatusTypeDef from SPI transaction.
 */
HAL_StatusTypeDef nrf_write_register(uint8_t reg_addr, uint8_t* data, uint8_t size) {
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	46c6      	mov	lr, r8
 8000648:	b500      	push	{lr}
 800064a:	b098      	sub	sp, #96	@ 0x60
 800064c:	af02      	add	r7, sp, #8
 800064e:	0003      	movs	r3, r0
 8000650:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000652:	0011      	movs	r1, r2
 8000654:	223f      	movs	r2, #63	@ 0x3f
 8000656:	18ba      	adds	r2, r7, r2
 8000658:	7013      	strb	r3, [r2, #0]
 800065a:	203e      	movs	r0, #62	@ 0x3e
 800065c:	183a      	adds	r2, r7, r0
 800065e:	1c0b      	adds	r3, r1, #0
 8000660:	7013      	strb	r3, [r2, #0]
 8000662:	466b      	mov	r3, sp
 8000664:	4698      	mov	r8, r3
    uint8_t tx_buf[size + 1];
 8000666:	183b      	adds	r3, r7, r0
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	1e53      	subs	r3, r2, #1
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000670:	0013      	movs	r3, r2
 8000672:	61bb      	str	r3, [r7, #24]
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
 8000678:	69b8      	ldr	r0, [r7, #24]
 800067a:	69f9      	ldr	r1, [r7, #28]
 800067c:	0003      	movs	r3, r0
 800067e:	0f5b      	lsrs	r3, r3, #29
 8000680:	000e      	movs	r6, r1
 8000682:	00f5      	lsls	r5, r6, #3
 8000684:	431d      	orrs	r5, r3
 8000686:	0003      	movs	r3, r0
 8000688:	00dc      	lsls	r4, r3, #3
 800068a:	0013      	movs	r3, r2
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	6938      	ldr	r0, [r7, #16]
 8000694:	6979      	ldr	r1, [r7, #20]
 8000696:	0003      	movs	r3, r0
 8000698:	0f5b      	lsrs	r3, r3, #29
 800069a:	000c      	movs	r4, r1
 800069c:	00e4      	lsls	r4, r4, #3
 800069e:	637c      	str	r4, [r7, #52]	@ 0x34
 80006a0:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80006a2:	431c      	orrs	r4, r3
 80006a4:	637c      	str	r4, [r7, #52]	@ 0x34
 80006a6:	0003      	movs	r3, r0
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80006ac:	0013      	movs	r3, r2
 80006ae:	3307      	adds	r3, #7
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	466a      	mov	r2, sp
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	469d      	mov	sp, r3
 80006ba:	ab02      	add	r3, sp, #8
 80006bc:	3300      	adds	r3, #0
 80006be:	653b      	str	r3, [r7, #80]	@ 0x50
    uint8_t rx_buf[size + 1]; // To capture status bytes clocked out
 80006c0:	253e      	movs	r5, #62	@ 0x3e
 80006c2:	197b      	adds	r3, r7, r5
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	1e5a      	subs	r2, r3, #1
 80006ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80006cc:	001a      	movs	r2, r3
 80006ce:	60ba      	str	r2, [r7, #8]
 80006d0:	2200      	movs	r2, #0
 80006d2:	60fa      	str	r2, [r7, #12]
 80006d4:	68b8      	ldr	r0, [r7, #8]
 80006d6:	68f9      	ldr	r1, [r7, #12]
 80006d8:	0002      	movs	r2, r0
 80006da:	0f52      	lsrs	r2, r2, #29
 80006dc:	000c      	movs	r4, r1
 80006de:	00e4      	lsls	r4, r4, #3
 80006e0:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80006e2:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 80006e4:	4314      	orrs	r4, r2
 80006e6:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80006e8:	0002      	movs	r2, r0
 80006ea:	00d2      	lsls	r2, r2, #3
 80006ec:	62ba      	str	r2, [r7, #40]	@ 0x28
 80006ee:	001a      	movs	r2, r3
 80006f0:	603a      	str	r2, [r7, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	6838      	ldr	r0, [r7, #0]
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	0002      	movs	r2, r0
 80006fc:	0f52      	lsrs	r2, r2, #29
 80006fe:	000c      	movs	r4, r1
 8000700:	00e4      	lsls	r4, r4, #3
 8000702:	627c      	str	r4, [r7, #36]	@ 0x24
 8000704:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8000706:	4314      	orrs	r4, r2
 8000708:	627c      	str	r4, [r7, #36]	@ 0x24
 800070a:	0002      	movs	r2, r0
 800070c:	00d2      	lsls	r2, r2, #3
 800070e:	623a      	str	r2, [r7, #32]
 8000710:	3307      	adds	r3, #7
 8000712:	08db      	lsrs	r3, r3, #3
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	466a      	mov	r2, sp
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	469d      	mov	sp, r3
 800071c:	ab02      	add	r3, sp, #8
 800071e:	3300      	adds	r3, #0
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
    HAL_StatusTypeDef status;

    tx_buf[0] = NRF_CMD_W_REGISTER | (reg_addr & 0x1F); // Command OR'd with register address
 8000722:	233f      	movs	r3, #63	@ 0x3f
 8000724:	18fb      	adds	r3, r7, r3
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	221f      	movs	r2, #31
 800072c:	4013      	ands	r3, r2
 800072e:	b25b      	sxtb	r3, r3
 8000730:	2220      	movs	r2, #32
 8000732:	4313      	orrs	r3, r2
 8000734:	b25b      	sxtb	r3, r3
 8000736:	b2da      	uxtb	r2, r3
 8000738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800073a:	701a      	strb	r2, [r3, #0]
    memcpy(tx_buf + 1, data, size);
 800073c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800073e:	1c58      	adds	r0, r3, #1
 8000740:	197b      	adds	r3, r7, r5
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000746:	0019      	movs	r1, r3
 8000748:	f004 feb1 	bl	80054ae <memcpy>

    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 800074c:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <nrf_write_register+0x184>)
 800074e:	2200      	movs	r2, #0
 8000750:	2104      	movs	r1, #4
 8000752:	0018      	movs	r0, r3
 8000754:	f001 f96d 	bl	8001a32 <HAL_GPIO_WritePin>
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buf, rx_buf, size + 1, HAL_MAX_DELAY);
 8000758:	197b      	adds	r3, r7, r5
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b29b      	uxth	r3, r3
 800075e:	3301      	adds	r3, #1
 8000760:	b29d      	uxth	r5, r3
 8000762:	220f      	movs	r2, #15
 8000764:	0016      	movs	r6, r2
 8000766:	2138      	movs	r1, #56	@ 0x38
 8000768:	1852      	adds	r2, r2, r1
 800076a:	19d4      	adds	r4, r2, r7
 800076c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800076e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000770:	4816      	ldr	r0, [pc, #88]	@ (80007cc <nrf_write_register+0x188>)
 8000772:	2301      	movs	r3, #1
 8000774:	425b      	negs	r3, r3
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	002b      	movs	r3, r5
 800077a:	f003 fa09 	bl	8003b90 <HAL_SPI_TransmitReceive>
 800077e:	0003      	movs	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <nrf_write_register+0x184>)
 8000784:	2201      	movs	r2, #1
 8000786:	2104      	movs	r1, #4
 8000788:	0018      	movs	r0, r3
 800078a:	f001 f952 	bl	8001a32 <HAL_GPIO_WritePin>

    // rx_buf[0] contains the STATUS register value at the time of command byte transmission.
    // You can print or log rx_buf[0] for debugging if needed.
    // printf("NRF_Write: Reg 0x%02X, Status during write: 0x%02X\n", reg_addr, rx_buf[0]);

    if (status != HAL_OK) {
 800078e:	0032      	movs	r2, r6
 8000790:	2138      	movs	r1, #56	@ 0x38
 8000792:	1850      	adds	r0, r2, r1
 8000794:	19c3      	adds	r3, r0, r7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d009      	beq.n	80007b0 <nrf_write_register+0x16c>
        printf("SPI Error in nrf_write_register: %d for reg 0x%02X\n", (int)status, reg_addr);
 800079c:	1852      	adds	r2, r2, r1
 800079e:	19d3      	adds	r3, r2, r7
 80007a0:	7819      	ldrb	r1, [r3, #0]
 80007a2:	233f      	movs	r3, #63	@ 0x3f
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <nrf_write_register+0x18c>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f004 fc6c 	bl	8005088 <iprintf>
    }
    return status;
 80007b0:	230f      	movs	r3, #15
 80007b2:	2238      	movs	r2, #56	@ 0x38
 80007b4:	189b      	adds	r3, r3, r2
 80007b6:	19db      	adds	r3, r3, r7
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	46c5      	mov	sp, r8
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b016      	add	sp, #88	@ 0x58
 80007c2:	bc80      	pop	{r7}
 80007c4:	46b8      	mov	r8, r7
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	50000400 	.word	0x50000400
 80007cc:	20000084 	.word	0x20000084
 80007d0:	08006260 	.word	0x08006260

080007d4 <nrf_read_register_multi>:
 * @param reg_addr: The register address (5 LSBs are used).
 * @param read_data: Pointer to a buffer to store the read data.
 * @param size: Number of bytes to read.
 * @retval HAL_StatusTypeDef from SPI transaction.
 */
HAL_StatusTypeDef nrf_read_register_multi(uint8_t reg_addr, uint8_t* read_data, uint8_t size) {
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af02      	add	r7, sp, #8
 80007da:	6039      	str	r1, [r7, #0]
 80007dc:	0011      	movs	r1, r2
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	1c02      	adds	r2, r0, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	1dbb      	adds	r3, r7, #6
 80007e6:	1c0a      	adds	r2, r1, #0
 80007e8:	701a      	strb	r2, [r3, #0]
    uint8_t cmd = NRF_CMD_R_REGISTER | (reg_addr & 0x1F);
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	221f      	movs	r2, #31
 80007f0:	4013      	ands	r3, r2
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	260e      	movs	r6, #14
 80007f6:	19bb      	adds	r3, r7, r6
 80007f8:	701a      	strb	r2, [r3, #0]
    uint8_t status_byte; // To store the status clocked out during command transmission
    HAL_StatusTypeDef status;

    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <nrf_read_register_multi+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	2104      	movs	r1, #4
 8000800:	0018      	movs	r0, r3
 8000802:	f001 f916 	bl	8001a32 <HAL_GPIO_WritePin>
    // Transmit the read command, receive status byte
    status = HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_byte, 1, HAL_MAX_DELAY);
 8000806:	250f      	movs	r5, #15
 8000808:	197c      	adds	r4, r7, r5
 800080a:	230d      	movs	r3, #13
 800080c:	18fa      	adds	r2, r7, r3
 800080e:	19b9      	adds	r1, r7, r6
 8000810:	481a      	ldr	r0, [pc, #104]	@ (800087c <nrf_read_register_multi+0xa8>)
 8000812:	2301      	movs	r3, #1
 8000814:	425b      	negs	r3, r3
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	f003 f9b9 	bl	8003b90 <HAL_SPI_TransmitReceive>
 800081e:	0003      	movs	r3, r0
 8000820:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK) {
 8000822:	197b      	adds	r3, r7, r5
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10b      	bne.n	8000842 <nrf_read_register_multi+0x6e>
        // Receive the register data (clocks out NOPs on MOSI if HAL_SPI_Receive requires it,
        // or send dummy bytes if using HAL_SPI_TransmitReceive for reading)
        // Using HAL_SPI_Receive is cleaner here.
        status = HAL_SPI_Receive(&hspi2, read_data, size, HAL_MAX_DELAY);
 800082a:	1dbb      	adds	r3, r7, #6
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b29a      	uxth	r2, r3
 8000830:	197c      	adds	r4, r7, r5
 8000832:	2301      	movs	r3, #1
 8000834:	425b      	negs	r3, r3
 8000836:	6839      	ldr	r1, [r7, #0]
 8000838:	4810      	ldr	r0, [pc, #64]	@ (800087c <nrf_read_register_multi+0xa8>)
 800083a:	f003 f857 	bl	80038ec <HAL_SPI_Receive>
 800083e:	0003      	movs	r3, r0
 8000840:	7023      	strb	r3, [r4, #0]
    }
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <nrf_read_register_multi+0xa4>)
 8000844:	2201      	movs	r2, #1
 8000846:	2104      	movs	r1, #4
 8000848:	0018      	movs	r0, r3
 800084a:	f001 f8f2 	bl	8001a32 <HAL_GPIO_WritePin>

    // printf("NRF_Read_Multi: Reg 0x%02X, Status during read cmd: 0x%02X\n", reg_addr, status_byte);

    if (status != HAL_OK) {
 800084e:	220f      	movs	r2, #15
 8000850:	18bb      	adds	r3, r7, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d007      	beq.n	8000868 <nrf_read_register_multi+0x94>
        printf("SPI Error in nrf_read_register_multi: %d for reg 0x%02X\n", (int)status, reg_addr);
 8000858:	18bb      	adds	r3, r7, r2
 800085a:	7819      	ldrb	r1, [r3, #0]
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <nrf_read_register_multi+0xac>)
 8000862:	0018      	movs	r0, r3
 8000864:	f004 fc10 	bl	8005088 <iprintf>
    }
    return status;
 8000868:	230f      	movs	r3, #15
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	781b      	ldrb	r3, [r3, #0]
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b005      	add	sp, #20
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	50000400 	.word	0x50000400
 800087c:	20000084 	.word	0x20000084
 8000880:	08006294 	.word	0x08006294

08000884 <nrf_read_single_register>:
/*
 * @brief Reads a single byte from an NRF24L01+ register.
 * @param reg_addr: The register address.
 * @retval The byte read from the register. Returns 0xFF on SPI error for simplicity.
 */
uint8_t nrf_read_single_register(uint8_t reg_addr) {
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	701a      	strb	r2, [r3, #0]
    uint8_t data_byte;
    if (nrf_read_register_multi(reg_addr, &data_byte, 1) == HAL_OK) {
 8000890:	240f      	movs	r4, #15
 8000892:	1939      	adds	r1, r7, r4
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2201      	movs	r2, #1
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff ff9a 	bl	80007d4 <nrf_read_register_multi>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d102      	bne.n	80008aa <nrf_read_single_register+0x26>
        return data_byte;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	e007      	b.n	80008ba <nrf_read_single_register+0x36>
    }
    printf("Error reading single register 0x%02X\n", reg_addr);
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <nrf_read_single_register+0x40>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f004 fbe8 	bl	8005088 <iprintf>
    return 0xFF; // Indicate error
 80008b8:	23ff      	movs	r3, #255	@ 0xff
}
 80008ba:	0018      	movs	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	b005      	add	sp, #20
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	080062d0 	.word	0x080062d0

080008c8 <nrf_read_status_register>:

/*
 * @brief Reads the NRF24L01+ STATUS register using NOP command.
 * @retval The STATUS register value. Returns 0xFF on SPI error.
 */
uint8_t nrf_read_status_register(void) {
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af02      	add	r7, sp, #8
    uint8_t status_val;
    uint8_t nop_cmd = NRF_CMD_NOP;
 80008ce:	1d7b      	adds	r3, r7, #5
 80008d0:	22ff      	movs	r2, #255	@ 0xff
 80008d2:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef spi_status;
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <nrf_read_status_register+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	2104      	movs	r1, #4
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 f8a9 	bl	8001a32 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_TransmitReceive(&hspi2, &nop_cmd, &status_val, 1, HAL_MAX_DELAY);
 80008e0:	1dfc      	adds	r4, r7, #7
 80008e2:	1dba      	adds	r2, r7, #6
 80008e4:	1d79      	adds	r1, r7, #5
 80008e6:	4812      	ldr	r0, [pc, #72]	@ (8000930 <nrf_read_status_register+0x68>)
 80008e8:	2301      	movs	r3, #1
 80008ea:	425b      	negs	r3, r3
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2301      	movs	r3, #1
 80008f0:	f003 f94e 	bl	8003b90 <HAL_SPI_TransmitReceive>
 80008f4:	0003      	movs	r3, r0
 80008f6:	7023      	strb	r3, [r4, #0]
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <nrf_read_status_register+0x64>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	2104      	movs	r1, #4
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 f897 	bl	8001a32 <HAL_GPIO_WritePin>
    if (spi_status != HAL_OK) {
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <nrf_read_status_register+0x56>
        printf("SPI Error reading STATUS register: %d\n", (int)spi_status);
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <nrf_read_status_register+0x6c>)
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f004 fbb7 	bl	8005088 <iprintf>
        return 0xFF; // Error
 800091a:	23ff      	movs	r3, #255	@ 0xff
 800091c:	e001      	b.n	8000922 <nrf_read_status_register+0x5a>
    }
    return status_val;
 800091e:	1dbb      	adds	r3, r7, #6
 8000920:	781b      	ldrb	r3, [r3, #0]
}
 8000922:	0018      	movs	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	b003      	add	sp, #12
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	50000400 	.word	0x50000400
 8000930:	20000084 	.word	0x20000084
 8000934:	080062f8 	.word	0x080062f8

08000938 <nrf_clear_status_flags>:

/*
 * @brief Clears specified IRQ flags in the STATUS register.
 * @param flags_to_clear: Bitmask of flags (NRF_STATUS_RX_DR, NRF_STATUS_TX_DS, NRF_STATUS_MAX_RT).
 */
void nrf_clear_status_flags(uint8_t flags_to_clear) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	0002      	movs	r2, r0
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	701a      	strb	r2, [r3, #0]
    // To clear a flag, write '1' to its bit position in the STATUS register
    nrf_write_register(NRF_REG_STATUS, &flags_to_clear, 1);
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	2201      	movs	r2, #1
 8000948:	0019      	movs	r1, r3
 800094a:	2007      	movs	r0, #7
 800094c:	f7ff fe7a 	bl	8000644 <nrf_write_register>
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}

08000958 <nrf_flush_tx_fifo>:
}

/*
 * @brief Flushes the TX FIFO.
 */
void nrf_flush_tx_fifo(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
    uint8_t cmd = NRF_CMD_FLUSH_TX;
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	22e1      	movs	r2, #225	@ 0xe1
 8000962:	701a      	strb	r2, [r3, #0]
    uint8_t status_byte;
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <nrf_flush_tx_fifo+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	2104      	movs	r1, #4
 800096a:	0018      	movs	r0, r3
 800096c:	f001 f861 	bl	8001a32 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_byte, 1, HAL_MAX_DELAY);
 8000970:	1dba      	adds	r2, r7, #6
 8000972:	1df9      	adds	r1, r7, #7
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <nrf_flush_tx_fifo+0x44>)
 8000976:	2301      	movs	r3, #1
 8000978:	425b      	negs	r3, r3
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2301      	movs	r3, #1
 800097e:	f003 f907 	bl	8003b90 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <nrf_flush_tx_fifo+0x40>)
 8000984:	2201      	movs	r2, #1
 8000986:	2104      	movs	r1, #4
 8000988:	0018      	movs	r0, r3
 800098a:	f001 f852 	bl	8001a32 <HAL_GPIO_WritePin>
    // printf("NRF_Flush_TX: Status during flush: 0x%02X\n", status_byte);
}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	50000400 	.word	0x50000400
 800099c:	20000084 	.word	0x20000084

080009a0 <nrf_flush_rx_fifo>:

/*
 * @brief Flushes the RX FIFO.
 */
void nrf_flush_rx_fifo(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af02      	add	r7, sp, #8
    uint8_t cmd = NRF_CMD_FLUSH_RX;
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	22e2      	movs	r2, #226	@ 0xe2
 80009aa:	701a      	strb	r2, [r3, #0]
    uint8_t status_byte;
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <nrf_flush_rx_fifo+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	0018      	movs	r0, r3
 80009b4:	f001 f83d 	bl	8001a32 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, &cmd, &status_byte, 1, HAL_MAX_DELAY);
 80009b8:	1dba      	adds	r2, r7, #6
 80009ba:	1df9      	adds	r1, r7, #7
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <nrf_flush_rx_fifo+0x44>)
 80009be:	2301      	movs	r3, #1
 80009c0:	425b      	negs	r3, r3
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	f003 f8e3 	bl	8003b90 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <nrf_flush_rx_fifo+0x40>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	2104      	movs	r1, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 f82e 	bl	8001a32 <HAL_GPIO_WritePin>
    // printf("NRF_Flush_RX: Status during flush: 0x%02X\n", status_byte);
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	50000400 	.word	0x50000400
 80009e4:	20000084 	.word	0x20000084

080009e8 <init_nrf_slave>:


// --- Slave (Transmitter) Functions ---
void init_nrf_slave(void) {
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b089      	sub	sp, #36	@ 0x24
 80009ec:	af02      	add	r7, sp, #8
    uint8_t data_val[5]; // Buffer for register values
    uint8_t addr[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7}; // Example address, ensure it's consistent
 80009ee:	2608      	movs	r6, #8
 80009f0:	19bb      	adds	r3, r7, r6
 80009f2:	4a9d      	ldr	r2, [pc, #628]	@ (8000c68 <init_nrf_slave+0x280>)
 80009f4:	6811      	ldr	r1, [r2, #0]
 80009f6:	6019      	str	r1, [r3, #0]
 80009f8:	7912      	ldrb	r2, [r2, #4]
 80009fa:	711a      	strb	r2, [r3, #4]

    HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET); // Start with CE low
 80009fc:	4b9b      	ldr	r3, [pc, #620]	@ (8000c6c <init_nrf_slave+0x284>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	2102      	movs	r1, #2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f815 	bl	8001a32 <HAL_GPIO_WritePin>
    HAL_Delay(1000); // Allow NRF to settle after power on (datasheet says 100ms from PWDN to Standby-I)
 8000a08:	23fa      	movs	r3, #250	@ 0xfa
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fdb1 	bl	8001574 <HAL_Delay>


    printf("--- Initializing NRF Slave (PTX) ---\n");
 8000a12:	4b97      	ldr	r3, [pc, #604]	@ (8000c70 <init_nrf_slave+0x288>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f004 fb9d 	bl	8005154 <puts>

    // Read initial status (optional, but good for debugging)
    uint8_t initial_nrf_status = nrf_read_status_register();
 8000a1a:	2517      	movs	r5, #23
 8000a1c:	197c      	adds	r4, r7, r5
 8000a1e:	f7ff ff53 	bl	80008c8 <nrf_read_status_register>
 8000a22:	0003      	movs	r3, r0
 8000a24:	7023      	strb	r3, [r4, #0]
    printf("Slave: Initial NRF Status (before clear): 0x%02X\n", initial_nrf_status);
 8000a26:	197b      	adds	r3, r7, r5
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b92      	ldr	r3, [pc, #584]	@ (8000c74 <init_nrf_slave+0x28c>)
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f004 fb2a 	bl	8005088 <iprintf>

    // Force clear RX_DR, TX_DS, MAX_RT flags
    uint8_t flags_to_clear = NRF_STATUS_RX_DR | NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT; // This is 0x70
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	2270      	movs	r2, #112	@ 0x70
 8000a38:	701a      	strb	r2, [r3, #0]
    printf("Slave: Attempting to clear status flags (writing 0x%02X to STATUS reg).\n", flags_to_clear);
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	4b8d      	ldr	r3, [pc, #564]	@ (8000c78 <init_nrf_slave+0x290>)
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f004 fb1f 	bl	8005088 <iprintf>
    nrf_write_register(NRF_REG_STATUS, &flags_to_clear, 1);
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	0019      	movs	r1, r3
 8000a50:	2007      	movs	r0, #7
 8000a52:	f7ff fdf7 	bl	8000644 <nrf_write_register>
    HAL_Delay(1); // Small delay for the write to process
 8000a56:	2001      	movs	r0, #1
 8000a58:	f000 fd8c 	bl	8001574 <HAL_Delay>

    // Read status again to confirm
    uint8_t status_after_clear = nrf_read_status_register();
 8000a5c:	2516      	movs	r5, #22
 8000a5e:	197c      	adds	r4, r7, r5
 8000a60:	f7ff ff32 	bl	80008c8 <nrf_read_status_register>
 8000a64:	0003      	movs	r3, r0
 8000a66:	7023      	strb	r3, [r4, #0]
    printf("Slave: NRF Status after clearing flags: 0x%02X\n", status_after_clear);
 8000a68:	197b      	adds	r3, r7, r5
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4b83      	ldr	r3, [pc, #524]	@ (8000c7c <init_nrf_slave+0x294>)
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f004 fb09 	bl	8005088 <iprintf>

    // Also good to flush FIFOs early
    nrf_flush_tx_fifo();
 8000a76:	f7ff ff6f 	bl	8000958 <nrf_flush_tx_fifo>
    nrf_flush_rx_fifo();
 8000a7a:	f7ff ff91 	bl	80009a0 <nrf_flush_rx_fifo>
    HAL_Delay(1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 fd78 	bl	8001574 <HAL_Delay>

    // Now attempt to write the CONFIG register
    //data_val[0] = NRF_CONFIG_PWR_UP; // Target: 0x02 (or NRF_CONFIG_PWR_UP | NRF_CONFIG_EN_CRC = 0x0A)

    data_val[0] = NRF_CONFIG_PWR_UP | NRF_CONFIG_EN_CRC | NRF_CONFIG_CRCO | NRF_CONFIG_MASK_RX_DR;
 8000a84:	2510      	movs	r5, #16
 8000a86:	197b      	adds	r3, r7, r5
 8000a88:	224e      	movs	r2, #78	@ 0x4e
 8000a8a:	701a      	strb	r2, [r3, #0]
    printf("Slave: Intended CONFIG data_val[0] = 0x%02X\n", data_val[0]);
 8000a8c:	197b      	adds	r3, r7, r5
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	001a      	movs	r2, r3
 8000a92:	4b7b      	ldr	r3, [pc, #492]	@ (8000c80 <init_nrf_slave+0x298>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f004 faf6 	bl	8005088 <iprintf>
    // Add your detailed SPI write debug here for the CONFIG write if you haven't already:
    // printf("Slave SPI Write to CONFIG: TargetReg=0x00, CmdByteSent=0xXX, DataByteSent=0x%02X\n", data_val[0]);
    // HAL_StatusTypeDef spi_op_status = nrf_write_register(NRF_REG_CONFIG, data_val, 1);
    // printf("  Slave SPI Write to CONFIG: HAL_SPI_Status=%d, NRF_Status_during_Cmd=0xXX\n", (int)spi_op_status, /* NRF status from rx_buf[0] */);

    nrf_write_register(NRF_REG_CONFIG, data_val, 1);
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fdce 	bl	8000644 <nrf_write_register>
    HAL_Delay(5); // Allow time for PWR_UP (1.5ms) to take effect
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f000 fd63 	bl	8001574 <HAL_Delay>

    uint8_t actual_config = nrf_read_single_register(NRF_REG_CONFIG);
 8000aae:	2315      	movs	r3, #21
 8000ab0:	18fc      	adds	r4, r7, r3
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f7ff fee6 	bl	8000884 <nrf_read_single_register>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	7023      	strb	r3, [r4, #0]
    printf("Slave: Actual CONFIG read back = 0x%02X\n", actual_config);
 8000abc:	2315      	movs	r3, #21
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	4b70      	ldr	r3, [pc, #448]	@ (8000c84 <init_nrf_slave+0x29c>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f004 fade 	bl	8005088 <iprintf>



    // Enable Auto-Acknowledgement on Pipe 0 (for receiving ACKs from master)
    data_val[0] = 0x00; nrf_write_register(NRF_REG_EN_AA, data_val, 1);
 8000acc:	197b      	adds	r3, r7, r5
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	197b      	adds	r3, r7, r5
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	0019      	movs	r1, r3
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff fdb3 	bl	8000644 <nrf_write_register>

    // Enable RX Pipe 0 (needed to receive ACKs)
    data_val[0] = 0x01; nrf_write_register(NRF_REG_EN_RXADDR, data_val, 1);
 8000ade:	002c      	movs	r4, r5
 8000ae0:	197b      	adds	r3, r7, r5
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	2201      	movs	r2, #1
 8000aea:	0019      	movs	r1, r3
 8000aec:	2002      	movs	r0, #2
 8000aee:	f7ff fda9 	bl	8000644 <nrf_write_register>

    // Address Width: 5 bytes
    data_val[0] = 0x03; nrf_write_register(NRF_REG_SETUP_AW, data_val, 1);
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2203      	movs	r2, #3
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2201      	movs	r2, #1
 8000afc:	0019      	movs	r1, r3
 8000afe:	2003      	movs	r0, #3
 8000b00:	f7ff fda0 	bl	8000644 <nrf_write_register>

    // Auto Retransmit Delay: 500us, Auto Retransmit Count: 10 retries
    // Your original 0x0F (250us, 15 retries) is also fine.
    // 0x1A = (0001 << 4) | (1010) = 500us delay, 10 retries.
    data_val[0] = 0x1A; nrf_write_register(NRF_REG_SETUP_RETR, data_val, 1);
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	221a      	movs	r2, #26
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	0019      	movs	r1, r3
 8000b10:	2004      	movs	r0, #4
 8000b12:	f7ff fd97 	bl	8000644 <nrf_write_register>

    // RF Channel: e.g., Channel 60 (2460 MHz)
    // Your original 0x3C (Channel 60) is good.
    data_val[0] = 0x01; nrf_write_register(NRF_REG_RF_CH, data_val, 1);
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2201      	movs	r2, #1
 8000b20:	0019      	movs	r1, r3
 8000b22:	2005      	movs	r0, #5
 8000b24:	f7ff fd8e 	bl	8000644 <nrf_write_register>

    // RF Setup: Data Rate 1Mbps, Output Power 0dBm
    // Your original 0x27 (250kbps, 0dBm). Ensure master matches.
    // For testing, 1Mbps (0x07) or 2Mbps (0x0F) can be more robust if range is short.
    // Let's stick to 1Mbps (0x07) for now for consistency with master example.
    data_val[0] = 0x07; nrf_write_register(NRF_REG_RF_SETUP, data_val, 1);
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2201      	movs	r2, #1
 8000b32:	0019      	movs	r1, r3
 8000b34:	2006      	movs	r0, #6
 8000b36:	f7ff fd85 	bl	8000644 <nrf_write_register>

    // TX Address (slave transmits on this address)
    nrf_write_register(NRF_REG_TX_ADDR, addr, 5);
 8000b3a:	19bb      	adds	r3, r7, r6
 8000b3c:	2205      	movs	r2, #5
 8000b3e:	0019      	movs	r1, r3
 8000b40:	2010      	movs	r0, #16
 8000b42:	f7ff fd7f 	bl	8000644 <nrf_write_register>

    // RX Address Pipe 0 (slave receives ACKs on this address, must match TX_ADDR for ACKs)
    nrf_write_register(NRF_REG_RX_ADDR_P0, addr, 5);
 8000b46:	19bb      	adds	r3, r7, r6
 8000b48:	2205      	movs	r2, #5
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f7ff fd79 	bl	8000644 <nrf_write_register>

    // Enable Dynamic Payload Length for Pipe 0 (for ACKs if master sends ACK payloads, though usually not needed for basic ACK)
    // And globally enable DPL feature.
    // Your original 0x01 for DYNPD (Pipe0) and 0x04 for FEATURE (EN_DPL)
    data_val[0] = 0x01; nrf_write_register(NRF_REG_DYNPD, data_val, 1);
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	201c      	movs	r0, #28
 8000b60:	f7ff fd70 	bl	8000644 <nrf_write_register>
    data_val[0] = (1<<2); // FEATURE: EN_DPL bit (bit 2)
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2204      	movs	r2, #4
 8000b68:	701a      	strb	r2, [r3, #0]
    // Your original 0x04 for FEATURE is (EN_DPL | EN_ACK_PAY). If you don't use ACK payloads, just EN_DPL is enough.
    // Let's use EN_DPL only: data_val[0] = (1<<2);
    // If you need ACK payloads: data_val[0] = (1<<2) | (1<<1);
    // For simplicity, let's assume no ACK payloads for now.
    nrf_write_register(NRF_REG_FEATURE, data_val, 1);
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	0019      	movs	r1, r3
 8000b70:	201d      	movs	r0, #29
 8000b72:	f7ff fd67 	bl	8000644 <nrf_write_register>


    // Clear any pending IRQ flags from startup
    nrf_clear_status_flags(NRF_STATUS_RX_DR | NRF_STATUS_TX_DS | NRF_STATUS_MAX_RT);
 8000b76:	2070      	movs	r0, #112	@ 0x70
 8000b78:	f7ff fede 	bl	8000938 <nrf_clear_status_flags>
    nrf_flush_tx_fifo(); // Important
 8000b7c:	f7ff feec 	bl	8000958 <nrf_flush_tx_fifo>
    nrf_flush_rx_fifo(); // Important
 8000b80:	f7ff ff0e 	bl	80009a0 <nrf_flush_rx_fifo>

    HAL_Delay(5); // Allow settings to take effect
 8000b84:	2005      	movs	r0, #5
 8000b86:	f000 fcf5 	bl	8001574 <HAL_Delay>

    // --- Verification Prints ---
    printf("Slave CONFIG: 0x%02X (Expected PTX: PWR_UP, CRC_EN, CRC_2B, MASK_RX_DR)\n", nrf_read_single_register(NRF_REG_CONFIG));
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fe7a 	bl	8000884 <nrf_read_single_register>
 8000b90:	0003      	movs	r3, r0
 8000b92:	001a      	movs	r2, r3
 8000b94:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <init_nrf_slave+0x2a0>)
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f004 fa75 	bl	8005088 <iprintf>
    printf("Slave RF_SETUP: 0x%02X (Expected 1Mbps, 0dBm: 0x07)\n", nrf_read_single_register(NRF_REG_RF_SETUP));
 8000b9e:	2006      	movs	r0, #6
 8000ba0:	f7ff fe70 	bl	8000884 <nrf_read_single_register>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <init_nrf_slave+0x2a4>)
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f004 fa6b 	bl	8005088 <iprintf>
    printf("Slave RF_CH: 0x%02X (Expected 0x3C)\n", nrf_read_single_register(NRF_REG_RF_CH));
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f7ff fe66 	bl	8000884 <nrf_read_single_register>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	001a      	movs	r2, r3
 8000bbc:	4b34      	ldr	r3, [pc, #208]	@ (8000c90 <init_nrf_slave+0x2a8>)
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f004 fa61 	bl	8005088 <iprintf>
    uint8_t rxtx_addr_check[5];
    nrf_read_register_multi(NRF_REG_TX_ADDR, rxtx_addr_check, 5);
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2205      	movs	r2, #5
 8000bca:	0019      	movs	r1, r3
 8000bcc:	2010      	movs	r0, #16
 8000bce:	f7ff fe01 	bl	80007d4 <nrf_read_register_multi>
    printf("Slave TX_ADDR: %02X:%02X:%02X:%02X:%02X\n", rxtx_addr_check[0],rxtx_addr_check[1],rxtx_addr_check[2],rxtx_addr_check[3],rxtx_addr_check[4]);
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	003b      	movs	r3, r7
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	001c      	movs	r4, r3
 8000bde:	003b      	movs	r3, r7
 8000be0:	789b      	ldrb	r3, [r3, #2]
 8000be2:	001d      	movs	r5, r3
 8000be4:	003b      	movs	r3, r7
 8000be6:	78db      	ldrb	r3, [r3, #3]
 8000be8:	001a      	movs	r2, r3
 8000bea:	003b      	movs	r3, r7
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	4829      	ldr	r0, [pc, #164]	@ (8000c94 <init_nrf_slave+0x2ac>)
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	002b      	movs	r3, r5
 8000bf6:	0022      	movs	r2, r4
 8000bf8:	f004 fa46 	bl	8005088 <iprintf>
    nrf_read_register_multi(NRF_REG_RX_ADDR_P0, rxtx_addr_check, 5);
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2205      	movs	r2, #5
 8000c00:	0019      	movs	r1, r3
 8000c02:	200a      	movs	r0, #10
 8000c04:	f7ff fde6 	bl	80007d4 <nrf_read_register_multi>
    printf("Slave RX_ADDR_P0: %02X:%02X:%02X:%02X:%02X\n", rxtx_addr_check[0],rxtx_addr_check[1],rxtx_addr_check[2],rxtx_addr_check[3],rxtx_addr_check[4]);
 8000c08:	003b      	movs	r3, r7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	003b      	movs	r3, r7
 8000c10:	785b      	ldrb	r3, [r3, #1]
 8000c12:	001c      	movs	r4, r3
 8000c14:	003b      	movs	r3, r7
 8000c16:	789b      	ldrb	r3, [r3, #2]
 8000c18:	001d      	movs	r5, r3
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	78db      	ldrb	r3, [r3, #3]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	003b      	movs	r3, r7
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	481c      	ldr	r0, [pc, #112]	@ (8000c98 <init_nrf_slave+0x2b0>)
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	9200      	str	r2, [sp, #0]
 8000c2a:	002b      	movs	r3, r5
 8000c2c:	0022      	movs	r2, r4
 8000c2e:	f004 fa2b 	bl	8005088 <iprintf>
    printf("Slave STATUS: 0x%02X\n", nrf_read_status_register());
 8000c32:	f7ff fe49 	bl	80008c8 <nrf_read_status_register>
 8000c36:	0003      	movs	r3, r0
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <init_nrf_slave+0x2b4>)
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f004 fa22 	bl	8005088 <iprintf>
    printf("Slave FIFO_STATUS: 0x%02X\n", nrf_read_single_register(NRF_REG_FIFO_STATUS));
 8000c44:	2017      	movs	r0, #23
 8000c46:	f7ff fe1d 	bl	8000884 <nrf_read_single_register>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <init_nrf_slave+0x2b8>)
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f004 fa18 	bl	8005088 <iprintf>
    printf("--- NRF Slave Initialized ---\n");
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <init_nrf_slave+0x2bc>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f004 fa7a 	bl	8005154 <puts>
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b007      	add	sp, #28
 8000c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c68:	08006628 	.word	0x08006628
 8000c6c:	50000400 	.word	0x50000400
 8000c70:	0800639c 	.word	0x0800639c
 8000c74:	080063c4 	.word	0x080063c4
 8000c78:	080063f8 	.word	0x080063f8
 8000c7c:	08006444 	.word	0x08006444
 8000c80:	08006474 	.word	0x08006474
 8000c84:	080064a4 	.word	0x080064a4
 8000c88:	080064d0 	.word	0x080064d0
 8000c8c:	0800651c 	.word	0x0800651c
 8000c90:	08006554 	.word	0x08006554
 8000c94:	0800657c 	.word	0x0800657c
 8000c98:	080065a8 	.word	0x080065a8
 8000c9c:	080065d4 	.word	0x080065d4
 8000ca0:	080065ec 	.word	0x080065ec
 8000ca4:	08006608 	.word	0x08006608

08000ca8 <transmit_nrf_payload>:

void transmit_nrf_payload(uint8_t size, char* data) {
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	0002      	movs	r2, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	701a      	strb	r2, [r3, #0]
    if (size == 0 || size > 32) {
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <transmit_nrf_payload+0x1e>
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b20      	cmp	r3, #32
 8000cc4:	d907      	bls.n	8000cd6 <transmit_nrf_payload+0x2e>
        printf("Transmit_NRF: Invalid payload size %d\n", size);
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <transmit_nrf_payload+0xb0>)
 8000ccc:	0011      	movs	r1, r2
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f004 f9da 	bl	8005088 <iprintf>
 8000cd4:	e03d      	b.n	8000d52 <transmit_nrf_payload+0xaa>
    //    // Potentially re-initialize or set to PTX mode here
    //    return;
    // }

    // Ensure CE is low before writing payload
    HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 8000cd6:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <transmit_nrf_payload+0xb4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2102      	movs	r1, #2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fea8 	bl	8001a32 <HAL_GPIO_WritePin>

    // Write payload to TX FIFO using W_TX_PAYLOAD command
    uint8_t tx_payload_cmd =  0xB0; // W_TX_PAYLOAD_NOACK;
 8000ce2:	240f      	movs	r4, #15
 8000ce4:	193b      	adds	r3, r7, r4
 8000ce6:	22b0      	movs	r2, #176	@ 0xb0
 8000ce8:	701a      	strb	r2, [r3, #0]
    uint8_t status_byte_during_cmd;

    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_RESET);
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <transmit_nrf_payload+0xb4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	2104      	movs	r1, #4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fe9e 	bl	8001a32 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi2, &tx_payload_cmd, &status_byte_during_cmd, 1, HAL_MAX_DELAY);
 8000cf6:	230e      	movs	r3, #14
 8000cf8:	18fa      	adds	r2, r7, r3
 8000cfa:	1939      	adds	r1, r7, r4
 8000cfc:	4818      	ldr	r0, [pc, #96]	@ (8000d60 <transmit_nrf_payload+0xb8>)
 8000cfe:	2301      	movs	r3, #1
 8000d00:	425b      	negs	r3, r3
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2301      	movs	r3, #1
 8000d06:	f002 ff43 	bl	8003b90 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(&hspi2, (uint8_t*)data, size, HAL_MAX_DELAY); // Send payload data
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	2301      	movs	r3, #1
 8000d12:	425b      	negs	r3, r3
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	4812      	ldr	r0, [pc, #72]	@ (8000d60 <transmit_nrf_payload+0xb8>)
 8000d18:	f002 fc88 	bl	800362c <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <transmit_nrf_payload+0xb4>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2104      	movs	r1, #4
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fe85 	bl	8001a32 <HAL_GPIO_WritePin>
    // printf("Transmit_NRF: Status during W_TX_PAYLOAD cmd: 0x%02X\n", status_byte_during_cmd);

    // Pulse CE to trigger transmission
    HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_SET);
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <transmit_nrf_payload+0xb4>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fe7f 	bl	8001a32 <HAL_GPIO_WritePin>
    // Keep CE high for at least 10us for transmission to start.
    // HAL_Delay(1) is more than enough. For faster systems, a microsecond delay is better.
    // For STM32, DWT_Delay_us can be used if initialized.
    volatile uint32_t delay_count = 1000; // Simple busy loop for short delay, adjust as needed
 8000d34:	23fa      	movs	r3, #250	@ 0xfa
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	60bb      	str	r3, [r7, #8]
    while(delay_count--); // This is a rough delay, use proper us delay if available
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1e5a      	subs	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1fa      	bne.n	8000d3c <transmit_nrf_payload+0x94>
    // HAL_Delay(1); // Using HAL_Delay for simplicity, though it's ms resolution
    HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <transmit_nrf_payload+0xb4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fe70 	bl	8001a32 <HAL_GPIO_WritePin>

    // After pulsing CE, the NRF attempts transmission.
    // The IRQ pin will go low if TX_DS or MAX_RT occurs (if unmasked in CONFIG).
    // Or, you can poll the STATUS register.
    // It's good practice to wait for TX_DS or MAX_RT, or implement a timeout.
}
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b005      	add	sp, #20
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	08006630 	.word	0x08006630
 8000d5c:	50000400 	.word	0x50000400
 8000d60:	20000084 	.word	0x20000084

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f000 fb88 	bl	800147e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f877 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 f947 	bl	8001004 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000d76:	f000 f8b9 	bl	8000eec <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000d7a:	f000 f8f5 	bl	8000f68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500); // Initial delay
 8000d7e:	23fa      	movs	r3, #250	@ 0xfa
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fbf6 	bl	8001574 <HAL_Delay>
  init_nrf_slave();
 8000d88:	f7ff fe2e 	bl	80009e8 <init_nrf_slave>
  uint32_t tx_count = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(1000); // Send a message every second
 8000d90:	23fa      	movs	r3, #250	@ 0xfa
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 fbed 	bl	8001574 <HAL_Delay>

	  // Or use your HAL_GPIO_ReadPin(GPIOB, GPIO_input_Pin) == 1 condition
	  if(HAL_GPIO_ReadPin(GPIO_input_GPIO_Port, GPIO_input_Pin) == GPIO_PIN_SET) {
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <main+0xe0>)
 8000d9c:	2120      	movs	r1, #32
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fe2a 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000da4:	0003      	movs	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d1f2      	bne.n	8000d90 <main+0x2c>

	  snprintf(message_buffer, sizeof(message_buffer), "Slave Msg %lu", tx_count++);
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	627a      	str	r2, [r7, #36]	@ 0x24
 8000db0:	4a25      	ldr	r2, [pc, #148]	@ (8000e48 <main+0xe4>)
 8000db2:	0038      	movs	r0, r7
 8000db4:	2120      	movs	r1, #32
 8000db6:	f004 f9d7 	bl	8005168 <sniprintf>
	  printf("Slave: Transmitting: \"%s\" (len %d)\n", message_buffer, strlen(message_buffer));
 8000dba:	003b      	movs	r3, r7
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff f9a3 	bl	8000108 <strlen>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	0039      	movs	r1, r7
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <main+0xe8>)
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f004 f95d 	bl	8005088 <iprintf>
	  transmit_nrf_payload(strlen(message_buffer), message_buffer);
 8000dce:	003b      	movs	r3, r7
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff f999 	bl	8000108 <strlen>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	003a      	movs	r2, r7
 8000ddc:	0011      	movs	r1, r2
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff ff62 	bl	8000ca8 <transmit_nrf_payload>

	  // Check status after attempting transmission - this requires waiting for IRQ or timeout
	  // For simplicity, we'll just print status. A robust implementation would poll IRQ or use an interrupt.
	  // The NRF will assert IRQ (if TX_DS or MAX_RT unmasked) or set status bits.
	  // Give some time for the transaction to complete (ACK or MAX_RT)
	  HAL_Delay(50); // This delay is arbitrary, real check should be event-driven or timed
 8000de4:	2032      	movs	r0, #50	@ 0x32
 8000de6:	f000 fbc5 	bl	8001574 <HAL_Delay>

	  uint8_t slave_status = nrf_read_status_register();
 8000dea:	2523      	movs	r5, #35	@ 0x23
 8000dec:	197c      	adds	r4, r7, r5
 8000dee:	f7ff fd6b 	bl	80008c8 <nrf_read_status_register>
 8000df2:	0003      	movs	r3, r0
 8000df4:	7023      	strb	r3, [r4, #0]
	  printf("Slave: STATUS after TX attempt: 0x%02X\n", slave_status);
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <main+0xec>)
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f004 f942 	bl	8005088 <iprintf>

	  if (slave_status & NRF_STATUS_TX_DS) {
 8000e04:	197b      	adds	r3, r7, r5
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d006      	beq.n	8000e1c <main+0xb8>
		  printf("Slave: TX_DS set. Transmission successful, ACK likely received.\n");
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <main+0xf0>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f004 f99f 	bl	8005154 <puts>
		  nrf_clear_status_flags(NRF_STATUS_TX_DS); // Clear TX_DS
 8000e16:	2020      	movs	r0, #32
 8000e18:	f7ff fd8e 	bl	8000938 <nrf_clear_status_flags>
	  }
	  if (slave_status & NRF_STATUS_MAX_RT) {
 8000e1c:	2323      	movs	r3, #35	@ 0x23
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2210      	movs	r2, #16
 8000e24:	4013      	ands	r3, r2
 8000e26:	d0b3      	beq.n	8000d90 <main+0x2c>
		  printf("Slave: MAX_RT set. Max retries reached, ACK not received.\n");
 8000e28:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <main+0xf4>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f004 f992 	bl	8005154 <puts>
		  nrf_clear_status_flags(NRF_STATUS_MAX_RT); // Clear MAX_RT
 8000e30:	2010      	movs	r0, #16
 8000e32:	f7ff fd81 	bl	8000938 <nrf_clear_status_flags>
		  nrf_flush_tx_fifo(); // Flush TX FIFO as packet was not delivered
 8000e36:	f7ff fd8f 	bl	8000958 <nrf_flush_tx_fifo>
		  printf("Slave: TX FIFO flushed due to MAX_RT.\n");
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <main+0xf8>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f004 f989 	bl	8005154 <puts>
	  HAL_Delay(1000); // Send a message every second
 8000e42:	e7a5      	b.n	8000d90 <main+0x2c>
 8000e44:	50000400 	.word	0x50000400
 8000e48:	080067f0 	.word	0x080067f0
 8000e4c:	08006800 	.word	0x08006800
 8000e50:	08006824 	.word	0x08006824
 8000e54:	0800684c 	.word	0x0800684c
 8000e58:	0800688c 	.word	0x0800688c
 8000e5c:	080068c8 	.word	0x080068c8

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b097      	sub	sp, #92	@ 0x5c
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	2410      	movs	r4, #16
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2348      	movs	r3, #72	@ 0x48
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f004 fa99 	bl	80053a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e76:	003b      	movs	r3, r7
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2310      	movs	r3, #16
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f004 fa92 	bl	80053a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 fdef 	bl	8001a6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	2202      	movs	r2, #2
 8000e92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	0052      	lsls	r2, r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2240      	movs	r2, #64	@ 0x40
 8000ea0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 fe4a 	bl	8001b44 <HAL_RCC_OscConfig>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eb4:	f000 f922 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2207      	movs	r2, #7
 8000ebc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f001 fa1b 	bl	8002310 <HAL_RCC_ClockConfig>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ede:	f000 f90d 	bl	80010fc <Error_Handler>
  }
}
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b017      	add	sp, #92	@ 0x5c
 8000ee8:	bd90      	pop	{r4, r7, pc}
	...

08000eec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <MX_SPI2_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000ef8:	2282      	movs	r2, #130	@ 0x82
 8000efa:	0052      	lsls	r2, r2, #1
 8000efc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f06:	22e0      	movs	r2, #224	@ 0xe0
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f1a:	2280      	movs	r2, #128	@ 0x80
 8000f1c:	0092      	lsls	r2, r2, #2
 8000f1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f38:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f46:	2208      	movs	r2, #8
 8000f48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <MX_SPI2_Init+0x74>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f002 fabf 	bl	80034d0 <HAL_SPI_Init>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f000 f8d1 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000084 	.word	0x20000084
 8000f64:	40003800 	.word	0x40003800

08000f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f6e:	4a24      	ldr	r2, [pc, #144]	@ (8001000 <MX_USART2_UART_Init+0x98>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f72:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f74:	22e1      	movs	r2, #225	@ 0xe1
 8000f76:	0252      	lsls	r2, r2, #9
 8000f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f003 f9a2 	bl	80042fc <HAL_UART_Init>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fbc:	f000 f89e 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f003 febb 	bl	8004d40 <HAL_UARTEx_SetTxFifoThreshold>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fce:	f000 f895 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f003 fef2 	bl	8004dc0 <HAL_UARTEx_SetRxFifoThreshold>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f000 f88c 	bl	80010fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <MX_USART2_UART_Init+0x94>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f003 fe70 	bl	8004ccc <HAL_UARTEx_DisableFifoMode>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f000 f884 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	200000e8 	.word	0x200000e8
 8001000:	40004400 	.word	0x40004400

08001004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	240c      	movs	r4, #12
 800100c:	193b      	adds	r3, r7, r4
 800100e:	0018      	movs	r0, r3
 8001010:	2314      	movs	r3, #20
 8001012:	001a      	movs	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	f004 f9c7 	bl	80053a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b25      	ldr	r3, [pc, #148]	@ (80010b0 <MX_GPIO_Init+0xac>)
 800101c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800101e:	4b24      	ldr	r3, [pc, #144]	@ (80010b0 <MX_GPIO_Init+0xac>)
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <MX_GPIO_Init+0xac>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102a:	2201      	movs	r2, #1
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <MX_GPIO_Init+0xac>)
 8001034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <MX_GPIO_Init+0xac>)
 8001038:	2102      	movs	r1, #2
 800103a:	430a      	orrs	r2, r1
 800103c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <MX_GPIO_Init+0xac>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 800104c:	2200      	movs	r2, #0
 800104e:	2102      	movs	r1, #2
 8001050:	0018      	movs	r0, r3
 8001052:	f000 fcee 	bl	8001a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CSN_GPIO_Port, SPI_SW_CSN_Pin, GPIO_PIN_SET);
 8001056:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 8001058:	2201      	movs	r2, #1
 800105a:	2104      	movs	r1, #4
 800105c:	0018      	movs	r0, r3
 800105e:	f000 fce8 	bl	8001a32 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI_SW_CE_Pin SPI_SW_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_SW_CE_Pin|SPI_SW_CSN_Pin;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2206      	movs	r2, #6
 8001066:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2201      	movs	r2, #1
 800106c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	193b      	adds	r3, r7, r4
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 800107e:	0019      	movs	r1, r3
 8001080:	0010      	movs	r0, r2
 8001082:	f000 fb4d 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_input_Pin */
  GPIO_InitStruct.Pin = GPIO_input_Pin;
 8001086:	0021      	movs	r1, r4
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2220      	movs	r2, #32
 800108c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_input_GPIO_Port, &GPIO_InitStruct);
 800109a:	187b      	adds	r3, r7, r1
 800109c:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <MX_GPIO_Init+0xb0>)
 800109e:	0019      	movs	r1, r3
 80010a0:	0010      	movs	r0, r2
 80010a2:	f000 fb3d 	bl	8001720 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b009      	add	sp, #36	@ 0x24
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	40021000 	.word	0x40021000
 80010b4:	50000400 	.word	0x50000400

080010b8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  // We only care about stdout (1) and stderr (2)
  // For other file descriptors, you might want to return -1 or handle them differently.
  if (file == 1 || file == 2) {
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d002      	beq.n	80010d0 <_write+0x18>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d10e      	bne.n	80010ee <_write+0x36>
    // Transmit the data through UART2
    // HAL_MAX_DELAY means the function will block until transmission is complete or timeout occurs.
    // You can adjust the timeout value as needed.
    // For non-blocking, you would need to manage the transmission buffer and use interrupts or DMA.
    if (HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) == HAL_OK) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	2301      	movs	r3, #1
 80010d6:	425b      	negs	r3, r3
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <_write+0x40>)
 80010dc:	f003 f964 	bl	80043a8 <HAL_UART_Transmit>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d101      	bne.n	80010e8 <_write+0x30>
      return len; // Return the number of characters written
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	e003      	b.n	80010f0 <_write+0x38>
    } else {
      return -1; // Or EIO, if you include errno.h and want to set errno
 80010e8:	2301      	movs	r3, #1
 80010ea:	425b      	negs	r3, r3
 80010ec:	e000      	b.n	80010f0 <_write+0x38>
    }
  }
  // For other file descriptors, return an error or handle as appropriate.
  // For example, you could implement a basic file system or return -1.
  // return -1; // Or handle other file descriptors
  return len; // If you want to pretend other files "worked" without actual output
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b004      	add	sp, #16
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000e8 	.word	0x200000e8

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_MspInit+0x44>)
 8001110:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_MspInit+0x44>)
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	0549      	lsls	r1, r1, #21
 8001118:	430a      	orrs	r2, r1
 800111a:	659a      	str	r2, [r3, #88]	@ 0x58
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <HAL_MspInit+0x44>)
 800111e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	055b      	lsls	r3, r3, #21
 8001124:	4013      	ands	r3, r2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_MspInit+0x44>)
 800112c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <HAL_MspInit+0x44>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	661a      	str	r2, [r3, #96]	@ 0x60
 8001136:	4b05      	ldr	r3, [pc, #20]	@ (800114c <HAL_MspInit+0x44>)
 8001138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			@ (mov r8, r8)
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08b      	sub	sp, #44	@ 0x2c
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	2414      	movs	r4, #20
 800115a:	193b      	adds	r3, r7, r4
 800115c:	0018      	movs	r0, r3
 800115e:	2314      	movs	r3, #20
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f004 f920 	bl	80053a8 <memset>
  if(hspi->Instance==SPI2)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1b      	ldr	r2, [pc, #108]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d130      	bne.n	80011d4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 8001174:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	01c9      	lsls	r1, r1, #7
 800117c:	430a      	orrs	r2, r1
 800117e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 8001182:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	01db      	lsls	r3, r3, #7
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 8001190:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 8001194:	2102      	movs	r1, #2
 8001196:	430a      	orrs	r2, r1
 8001198:	64da      	str	r2, [r3, #76]	@ 0x4c
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_SPI_MspInit+0x90>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	22e0      	movs	r2, #224	@ 0xe0
 80011aa:	0212      	lsls	r2, r2, #8
 80011ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	0021      	movs	r1, r4
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2202      	movs	r2, #2
 80011b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2205      	movs	r2, #5
 80011c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <HAL_SPI_MspInit+0x94>)
 80011cc:	0019      	movs	r1, r3
 80011ce:	0010      	movs	r0, r2
 80011d0:	f000 faa6 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b00b      	add	sp, #44	@ 0x2c
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	40003800 	.word	0x40003800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	50000400 	.word	0x50000400

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b099      	sub	sp, #100	@ 0x64
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	234c      	movs	r3, #76	@ 0x4c
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	0018      	movs	r0, r3
 80011f6:	2314      	movs	r3, #20
 80011f8:	001a      	movs	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	f004 f8d4 	bl	80053a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001200:	2414      	movs	r4, #20
 8001202:	193b      	adds	r3, r7, r4
 8001204:	0018      	movs	r0, r3
 8001206:	2338      	movs	r3, #56	@ 0x38
 8001208:	001a      	movs	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f004 f8cc 	bl	80053a8 <memset>
  if(huart->Instance==USART2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <HAL_UART_MspInit+0xb8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d13e      	bne.n	8001298 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2202      	movs	r2, #2
 800121e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001226:	193b      	adds	r3, r7, r4
 8001228:	0018      	movs	r0, r3
 800122a:	f001 fa87 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 800122e:	1e03      	subs	r3, r0, #0
 8001230:	d001      	beq.n	8001236 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001232:	f7ff ff63 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <HAL_UART_MspInit+0xbc>)
 8001238:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800123a:	4b1a      	ldr	r3, [pc, #104]	@ (80012a4 <HAL_UART_MspInit+0xbc>)
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	0289      	lsls	r1, r1, #10
 8001240:	430a      	orrs	r2, r1
 8001242:	659a      	str	r2, [r3, #88]	@ 0x58
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <HAL_UART_MspInit+0xbc>)
 8001246:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <HAL_UART_MspInit+0xbc>)
 8001254:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <HAL_UART_MspInit+0xbc>)
 8001258:	2101      	movs	r1, #1
 800125a:	430a      	orrs	r2, r1
 800125c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_UART_MspInit+0xbc>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	2201      	movs	r2, #1
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800126a:	214c      	movs	r1, #76	@ 0x4c
 800126c:	187b      	adds	r3, r7, r1
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2202      	movs	r2, #2
 8001276:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2207      	movs	r2, #7
 8001288:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	187a      	adds	r2, r7, r1
 800128c:	23a0      	movs	r3, #160	@ 0xa0
 800128e:	05db      	lsls	r3, r3, #23
 8001290:	0011      	movs	r1, r2
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fa44 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001298:	46c0      	nop			@ (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b019      	add	sp, #100	@ 0x64
 800129e:	bd90      	pop	{r4, r7, pc}
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	46c0      	nop			@ (mov r8, r8)
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012bc:	46c0      	nop			@ (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d0:	f000 f936 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d4:	46c0      	nop			@ (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e00a      	b.n	8001302 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ec:	e000      	b.n	80012f0 <_read+0x16>
 80012ee:	bf00      	nop
 80012f0:	0001      	movs	r1, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	b2ca      	uxtb	r2, r1
 80012fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	dbf0      	blt.n	80012ec <_read+0x12>
  }

  return len;
 800130a:	687b      	ldr	r3, [r7, #4]
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b006      	add	sp, #24
 8001312:	bd80      	pop	{r7, pc}

08001314 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800131c:	2301      	movs	r3, #1
 800131e:	425b      	negs	r3, r3
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}

08001328 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	0192      	lsls	r2, r2, #6
 8001338:	605a      	str	r2, [r3, #4]
  return 0;
 800133a:	2300      	movs	r3, #0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}

08001344 <_isatty>:

int _isatty(int file)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}

08001356 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	0018      	movs	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	b004      	add	sp, #16
 800136a:	bd80      	pop	{r7, pc}

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	18d3      	adds	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f004 f85a 	bl	8005454 <__errno>
 80013a0:	0003      	movs	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	425b      	negs	r3, r3
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	18d2      	adds	r2, r2, r3
 80013ba:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <_sbrk+0x64>)
 80013bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b006      	add	sp, #24
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20002000 	.word	0x20002000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	2000017c 	.word	0x2000017c
 80013d4:	200002d0 	.word	0x200002d0

080013d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <SystemInit+0x4c>)
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	0512      	lsls	r2, r2, #20
 80013e2:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 80013e4:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <SystemInit+0x50>)
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	58d2      	ldr	r2, [r2, r3]
 80013ea:	2380      	movs	r3, #128	@ 0x80
 80013ec:	025b      	lsls	r3, r3, #9
 80013ee:	401a      	ands	r2, r3
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d112      	bne.n	800141e <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <SystemInit+0x50>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	22ff      	movs	r2, #255	@ 0xff
 80013fe:	4013      	ands	r3, r2
 8001400:	2bcc      	cmp	r3, #204	@ 0xcc
 8001402:	d00c      	beq.n	800141e <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <SystemInit+0x50>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	22ff      	movs	r2, #255	@ 0xff
 800140a:	4013      	ands	r3, r2
 800140c:	2baa      	cmp	r3, #170	@ 0xaa
 800140e:	d006      	beq.n	800141e <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SystemInit+0x50>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <SystemInit+0x50>)
 8001416:	2180      	movs	r1, #128	@ 0x80
 8001418:	02c9      	lsls	r1, r1, #11
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 800141e:	46c0      	nop			@ (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	e000ed00 	.word	0xe000ed00
 8001428:	40022000 	.word	0x40022000

0800142c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800142c:	480d      	ldr	r0, [pc, #52]	@ (8001464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001430:	f7ff ffd2 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	@ (800146c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	@ (8001478 <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800145a:	f004 f801 	bl	8005460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145e:	f7ff fc81 	bl	8000d64 <main>

08001462 <LoopForever>:

LoopForever:
  b LoopForever
 8001462:	e7fe      	b.n	8001462 <LoopForever>
  ldr   r0, =_estack
 8001464:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001470:	08006a28 	.word	0x08006a28
  ldr r2, =_sbss
 8001474:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001478:	200002d0 	.word	0x200002d0

0800147c <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC_COMP1_IRQHandler>

0800147e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f80e 	bl	80014ac <HAL_InitTick>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d003      	beq.n	800149c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e001      	b.n	80014a0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800149c:	f7ff fe34 	bl	8001108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	781b      	ldrb	r3, [r3, #0]
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b4:	230f      	movs	r3, #15
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80014bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001534 <HAL_InitTick+0x88>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d02b      	beq.n	800151c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_InitTick+0x8c>)
 80014c6:	681c      	ldr	r4, [r3, #0]
 80014c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <HAL_InitTick+0x88>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0019      	movs	r1, r3
 80014ce:	23fa      	movs	r3, #250	@ 0xfa
 80014d0:	0098      	lsls	r0, r3, #2
 80014d2:	f7fe fe2b 	bl	800012c <__udivsi3>
 80014d6:	0003      	movs	r3, r0
 80014d8:	0019      	movs	r1, r3
 80014da:	0020      	movs	r0, r4
 80014dc:	f7fe fe26 	bl	800012c <__udivsi3>
 80014e0:	0003      	movs	r3, r0
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 f90f 	bl	8001706 <HAL_SYSTICK_Config>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d112      	bne.n	8001512 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d80a      	bhi.n	8001508 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	2301      	movs	r3, #1
 80014f6:	425b      	negs	r3, r3
 80014f8:	2200      	movs	r2, #0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f8ee 	bl	80016dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_InitTick+0x90>)
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e00d      	b.n	8001524 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001508:	230f      	movs	r3, #15
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	e008      	b.n	8001524 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001512:	230f      	movs	r3, #15
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e003      	b.n	8001524 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001524:	230f      	movs	r3, #15
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b005      	add	sp, #20
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	20000008 	.word	0x20000008
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <HAL_IncTick+0x18>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <HAL_IncTick+0x1c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	18d2      	adds	r2, r2, r3
 800154e:	4b02      	ldr	r3, [pc, #8]	@ (8001558 <HAL_IncTick+0x18>)
 8001550:	601a      	str	r2, [r3, #0]
}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000180 	.word	0x20000180
 800155c:	20000008 	.word	0x20000008

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	@ (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	20000180 	.word	0x20000180

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff0 	bl	8001560 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	d004      	beq.n	8001598 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <HAL_Delay+0x40>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	18d3      	adds	r3, r2, r3
 8001596:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	f7ff ffe1 	bl	8001560 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d8f7      	bhi.n	800159a <HAL_Delay+0x26>
  {
  }
}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46c0      	nop			@ (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000008 	.word	0x20000008

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80015cc:	d828      	bhi.n	8001620 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <__NVIC_SetPriority+0xd4>)
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	33c0      	adds	r3, #192	@ 0xc0
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	589b      	ldr	r3, [r3, r2]
 80015de:	1dfa      	adds	r2, r7, #7
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	0011      	movs	r1, r2
 80015e4:	2203      	movs	r2, #3
 80015e6:	400a      	ands	r2, r1
 80015e8:	00d2      	lsls	r2, r2, #3
 80015ea:	21ff      	movs	r1, #255	@ 0xff
 80015ec:	4091      	lsls	r1, r2
 80015ee:	000a      	movs	r2, r1
 80015f0:	43d2      	mvns	r2, r2
 80015f2:	401a      	ands	r2, r3
 80015f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	019b      	lsls	r3, r3, #6
 80015fa:	22ff      	movs	r2, #255	@ 0xff
 80015fc:	401a      	ands	r2, r3
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	0018      	movs	r0, r3
 8001604:	2303      	movs	r3, #3
 8001606:	4003      	ands	r3, r0
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160c:	481f      	ldr	r0, [pc, #124]	@ (800168c <__NVIC_SetPriority+0xd4>)
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	430a      	orrs	r2, r1
 8001618:	33c0      	adds	r3, #192	@ 0xc0
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800161e:	e031      	b.n	8001684 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	4a1b      	ldr	r2, [pc, #108]	@ (8001690 <__NVIC_SetPriority+0xd8>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0019      	movs	r1, r3
 8001628:	230f      	movs	r3, #15
 800162a:	400b      	ands	r3, r1
 800162c:	3b08      	subs	r3, #8
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3306      	adds	r3, #6
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	3304      	adds	r3, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1dfa      	adds	r2, r7, #7
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	0011      	movs	r1, r2
 8001640:	2203      	movs	r2, #3
 8001642:	400a      	ands	r2, r1
 8001644:	00d2      	lsls	r2, r2, #3
 8001646:	21ff      	movs	r1, #255	@ 0xff
 8001648:	4091      	lsls	r1, r2
 800164a:	000a      	movs	r2, r1
 800164c:	43d2      	mvns	r2, r2
 800164e:	401a      	ands	r2, r3
 8001650:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	019b      	lsls	r3, r3, #6
 8001656:	22ff      	movs	r2, #255	@ 0xff
 8001658:	401a      	ands	r2, r3
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	0018      	movs	r0, r3
 8001660:	2303      	movs	r3, #3
 8001662:	4003      	ands	r3, r0
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001668:	4809      	ldr	r0, [pc, #36]	@ (8001690 <__NVIC_SetPriority+0xd8>)
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	001c      	movs	r4, r3
 8001670:	230f      	movs	r3, #15
 8001672:	4023      	ands	r3, r4
 8001674:	3b08      	subs	r3, #8
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	430a      	orrs	r2, r1
 800167a:	3306      	adds	r3, #6
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	18c3      	adds	r3, r0, r3
 8001680:	3304      	adds	r3, #4
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b003      	add	sp, #12
 800168a:	bd90      	pop	{r4, r7, pc}
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	045b      	lsls	r3, r3, #17
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d301      	bcc.n	80016ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a8:	2301      	movs	r3, #1
 80016aa:	e010      	b.n	80016ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <SysTick_Config+0x44>)
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	3a01      	subs	r2, #1
 80016b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b4:	2301      	movs	r3, #1
 80016b6:	425b      	negs	r3, r3
 80016b8:	2103      	movs	r1, #3
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff ff7c 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <SysTick_Config+0x44>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <SysTick_Config+0x44>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			@ (mov r8, r8)
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	210f      	movs	r1, #15
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	1c02      	adds	r2, r0, #0
 80016ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ff5d 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff ffbf 	bl	8001694 <SysTick_Config>
 8001716:	0003      	movs	r3, r0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172e:	e14d      	b.n	80019cc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2101      	movs	r1, #1
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4091      	lsls	r1, r2
 800173a:	000a      	movs	r2, r1
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d100      	bne.n	8001748 <HAL_GPIO_Init+0x28>
 8001746:	e13e      	b.n	80019c6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	4013      	ands	r3, r2
 8001750:	2b01      	cmp	r3, #1
 8001752:	d005      	beq.n	8001760 <HAL_GPIO_Init+0x40>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	4013      	ands	r3, r2
 800175c:	2b02      	cmp	r3, #2
 800175e:	d130      	bne.n	80017c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	409a      	lsls	r2, r3
 800176e:	0013      	movs	r3, r2
 8001770:	43da      	mvns	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001796:	2201      	movs	r2, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	43da      	mvns	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	2201      	movs	r2, #1
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2203      	movs	r2, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d017      	beq.n	80017fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	2203      	movs	r2, #3
 80017da:	409a      	lsls	r2, r3
 80017dc:	0013      	movs	r3, r2
 80017de:	43da      	mvns	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	409a      	lsls	r2, r3
 80017f0:	0013      	movs	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	4013      	ands	r3, r2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d123      	bne.n	8001852 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	58d3      	ldr	r3, [r2, r3]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2207      	movs	r2, #7
 800181c:	4013      	ands	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	220f      	movs	r2, #15
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	43da      	mvns	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2107      	movs	r1, #7
 8001836:	400b      	ands	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	409a      	lsls	r2, r3
 800183c:	0013      	movs	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	6939      	ldr	r1, [r7, #16]
 8001850:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	401a      	ands	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	23c0      	movs	r3, #192	@ 0xc0
 800188c:	029b      	lsls	r3, r3, #10
 800188e:	4013      	ands	r3, r2
 8001890:	d100      	bne.n	8001894 <HAL_GPIO_Init+0x174>
 8001892:	e098      	b.n	80019c6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001894:	4a53      	ldr	r2, [pc, #332]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3318      	adds	r3, #24
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	589b      	ldr	r3, [r3, r2]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4013      	ands	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	220f      	movs	r2, #15
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	43da      	mvns	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	23a0      	movs	r3, #160	@ 0xa0
 80018bc:	05db      	lsls	r3, r3, #23
 80018be:	429a      	cmp	r2, r3
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x1d6>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a48      	ldr	r2, [pc, #288]	@ (80019e8 <HAL_GPIO_Init+0x2c8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x1d2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a47      	ldr	r2, [pc, #284]	@ (80019ec <HAL_GPIO_Init+0x2cc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x1ce>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a46      	ldr	r2, [pc, #280]	@ (80019f0 <HAL_GPIO_Init+0x2d0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x1ca>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <HAL_GPIO_Init+0x2d4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x1c6>
 80018e2:	2305      	movs	r3, #5
 80018e4:	e008      	b.n	80018f8 <HAL_GPIO_Init+0x1d8>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x1d8>
 80018ea:	2303      	movs	r3, #3
 80018ec:	e004      	b.n	80018f8 <HAL_GPIO_Init+0x1d8>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e002      	b.n	80018f8 <HAL_GPIO_Init+0x1d8>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_GPIO_Init+0x1d8>
 80018f6:	2300      	movs	r3, #0
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	2103      	movs	r1, #3
 80018fc:	400a      	ands	r2, r1
 80018fe:	00d2      	lsls	r2, r2, #3
 8001900:	4093      	lsls	r3, r2
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001908:	4936      	ldr	r1, [pc, #216]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3318      	adds	r3, #24
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001916:	4b33      	ldr	r3, [pc, #204]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43da      	mvns	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	035b      	lsls	r3, r3, #13
 800192e:	4013      	ands	r3, r2
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800193a:	4b2a      	ldr	r3, [pc, #168]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43da      	mvns	r2, r3
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	039b      	lsls	r3, r3, #14
 8001958:	4013      	ands	r3, r2
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001964:	4b1f      	ldr	r3, [pc, #124]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800196a:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 800196c:	2384      	movs	r3, #132	@ 0x84
 800196e:	58d3      	ldr	r3, [r2, r3]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43da      	mvns	r2, r3
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	029b      	lsls	r3, r3, #10
 8001984:	4013      	ands	r3, r2
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001990:	4914      	ldr	r1, [pc, #80]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 8001992:	2284      	movs	r2, #132	@ 0x84
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001998:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 800199a:	2380      	movs	r3, #128	@ 0x80
 800199c:	58d3      	ldr	r3, [r2, r3]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	025b      	lsls	r3, r3, #9
 80019b2:	4013      	ands	r3, r2
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019be:	4909      	ldr	r1, [pc, #36]	@ (80019e4 <HAL_GPIO_Init+0x2c4>)
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	40da      	lsrs	r2, r3
 80019d4:	1e13      	subs	r3, r2, #0
 80019d6:	d000      	beq.n	80019da <HAL_GPIO_Init+0x2ba>
 80019d8:	e6aa      	b.n	8001730 <HAL_GPIO_Init+0x10>
  }
}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	46c0      	nop			@ (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b006      	add	sp, #24
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021800 	.word	0x40021800
 80019e8:	50000400 	.word	0x50000400
 80019ec:	50000800 	.word	0x50000800
 80019f0:	50000c00 	.word	0x50000c00
 80019f4:	50001400 	.word	0x50001400

080019f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	000a      	movs	r2, r1
 8001a02:	1cbb      	adds	r3, r7, #2
 8001a04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	1cba      	adds	r2, r7, #2
 8001a0c:	8812      	ldrh	r2, [r2, #0]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d004      	beq.n	8001a1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a12:	230f      	movs	r3, #15
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	e003      	b.n	8001a24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b004      	add	sp, #16
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	0008      	movs	r0, r1
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	1cbb      	adds	r3, r7, #2
 8001a40:	1c02      	adds	r2, r0, #0
 8001a42:	801a      	strh	r2, [r3, #0]
 8001a44:	1c7b      	adds	r3, r7, #1
 8001a46:	1c0a      	adds	r2, r1, #0
 8001a48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4a:	1c7b      	adds	r3, r7, #1
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d004      	beq.n	8001a5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a5a:	e003      	b.n	8001a64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5c:	1cbb      	adds	r3, r7, #2
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a64:	46c0      	nop			@ (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d137      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a7e:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	23c0      	movs	r3, #192	@ 0xc0
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	401a      	ands	r2, r3
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d040      	beq.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a90:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a22      	ldr	r2, [pc, #136]	@ (8001b20 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001a96:	401a      	ands	r2, r3
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001a9a:	2180      	movs	r1, #128	@ 0x80
 8001a9c:	0089      	lsls	r1, r1, #2
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2232      	movs	r2, #50	@ 0x32
 8001aa8:	4353      	muls	r3, r2
 8001aaa:	491f      	ldr	r1, [pc, #124]	@ (8001b28 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7fe fb3d 	bl	800012c <__udivsi3>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab8:	e002      	b.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac0:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d102      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f0      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ad8:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d113      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e012      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	23c0      	movs	r3, #192	@ 0xc0
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	401a      	ands	r2, r3
 8001af8:	2380      	movs	r3, #128	@ 0x80
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d008      	beq.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001b06:	401a      	ands	r2, r3
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001b0a:	2180      	movs	r1, #128	@ 0x80
 8001b0c:	00c9      	lsls	r1, r1, #3
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	fffff9ff 	.word	0xfffff9ff
 8001b24:	20000000 	.word	0x20000000
 8001b28:	000f4240 	.word	0x000f4240

08001b2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <HAL_PWREx_GetVoltageRange+0x14>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	23c0      	movs	r3, #192	@ 0xc0
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4013      	ands	r3, r2
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40007000 	.word	0x40007000

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4c:	4bc8      	ldr	r3, [pc, #800]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2238      	movs	r2, #56	@ 0x38
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b56:	4bc6      	ldr	r3, [pc, #792]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2210      	movs	r2, #16
 8001b66:	4013      	ands	r3, r2
 8001b68:	d100      	bne.n	8001b6c <HAL_RCC_OscConfig+0x28>
 8001b6a:	e0ee      	b.n	8001d4a <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3e>
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b18      	cmp	r3, #24
 8001b76:	d000      	beq.n	8001b7a <HAL_RCC_OscConfig+0x36>
 8001b78:	e093      	b.n	8001ca2 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d000      	beq.n	8001b82 <HAL_RCC_OscConfig+0x3e>
 8001b80:	e08f      	b.n	8001ca2 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b82:	4bbb      	ldr	r3, [pc, #748]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d006      	beq.n	8001b9a <HAL_RCC_OscConfig+0x56>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f000 fbae 	bl	80022f6 <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b9e:	4bb4      	ldr	r3, [pc, #720]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	400b      	ands	r3, r1
 8001ba6:	d004      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x6e>
 8001ba8:	4bb1      	ldr	r3, [pc, #708]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	21f0      	movs	r1, #240	@ 0xf0
 8001bae:	400b      	ands	r3, r1
 8001bb0:	e005      	b.n	8001bbe <HAL_RCC_OscConfig+0x7a>
 8001bb2:	49af      	ldr	r1, [pc, #700]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	2394      	movs	r3, #148	@ 0x94
 8001bb6:	58cb      	ldr	r3, [r1, r3]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	21f0      	movs	r1, #240	@ 0xf0
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d225      	bcs.n	8001c0e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fd4c 	bl	8002664 <RCC_SetFlashLatencyFromMSIRange>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f000 fb90 	bl	80022f6 <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4ba6      	ldr	r3, [pc, #664]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4ba5      	ldr	r3, [pc, #660]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	2108      	movs	r1, #8
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	4ba3      	ldr	r3, [pc, #652]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	22f0      	movs	r2, #240	@ 0xf0
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf0:	4b9f      	ldr	r3, [pc, #636]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf6:	4b9e      	ldr	r3, [pc, #632]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	4a9e      	ldr	r2, [pc, #632]	@ (8001e74 <HAL_RCC_OscConfig+0x330>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	021a      	lsls	r2, r3, #8
 8001c06:	4b9a      	ldr	r3, [pc, #616]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	e027      	b.n	8001c5e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0e:	4b98      	ldr	r3, [pc, #608]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b97      	ldr	r3, [pc, #604]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c14:	2108      	movs	r1, #8
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	4b95      	ldr	r3, [pc, #596]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	22f0      	movs	r2, #240	@ 0xf0
 8001c20:	4393      	bics	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c28:	4b91      	ldr	r3, [pc, #580]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2e:	4b90      	ldr	r3, [pc, #576]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a90      	ldr	r2, [pc, #576]	@ (8001e74 <HAL_RCC_OscConfig+0x330>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	021a      	lsls	r2, r3, #8
 8001c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 fd08 	bl	8002664 <RCC_SetFlashLatencyFromMSIRange>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f000 fb4c 	bl	80022f6 <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001c5e:	f000 fc43 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8001c62:	0001      	movs	r1, r0
 8001c64:	4b82      	ldr	r3, [pc, #520]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001c6e:	4a82      	ldr	r2, [pc, #520]	@ (8001e78 <HAL_RCC_OscConfig+0x334>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c72:	001a      	movs	r2, r3
 8001c74:	231f      	movs	r3, #31
 8001c76:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001c78:	000a      	movs	r2, r1
 8001c7a:	40da      	lsrs	r2, r3
 8001c7c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e7c <HAL_RCC_OscConfig+0x338>)
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c80:	4b7f      	ldr	r3, [pc, #508]	@ (8001e80 <HAL_RCC_OscConfig+0x33c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	250f      	movs	r5, #15
 8001c86:	197c      	adds	r4, r7, r5
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff fc0f 	bl	80014ac <HAL_InitTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8001c92:	197b      	adds	r3, r7, r5
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d056      	beq.n	8001d48 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 8001c9a:	197b      	adds	r3, r7, r5
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f000 fb2a 	bl	80022f6 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d034      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001caa:	4b71      	ldr	r3, [pc, #452]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b70      	ldr	r3, [pc, #448]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fc53 	bl	8001560 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fc4e 	bl	8001560 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e311      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd2:	4b67      	ldr	r3, [pc, #412]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f1      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cdc:	4b64      	ldr	r3, [pc, #400]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b63      	ldr	r3, [pc, #396]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	2108      	movs	r1, #8
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4b61      	ldr	r3, [pc, #388]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	22f0      	movs	r2, #240	@ 0xf0
 8001cee:	4393      	bics	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <HAL_RCC_OscConfig+0x330>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	021a      	lsls	r2, r3, #8
 8001d0c:	4b58      	ldr	r3, [pc, #352]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	e01a      	b.n	8001d4a <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d14:	4b56      	ldr	r3, [pc, #344]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b55      	ldr	r3, [pc, #340]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	438a      	bics	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fc1e 	bl	8001560 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fc19 	bl	8001560 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e2dc      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4013      	ands	r3, r2
 8001d44:	d1f1      	bne.n	8001d2a <HAL_RCC_OscConfig+0x1e6>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d48:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x212>
 8001d54:	e065      	b.n	8001e22 <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x224>
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b18      	cmp	r3, #24
 8001d60:	d10e      	bne.n	8001d80 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d10b      	bne.n	8001d80 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	d055      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2dc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d151      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e2ba      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	025b      	lsls	r3, r3, #9
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_OscConfig+0x258>
 8001d8c:	4b38      	ldr	r3, [pc, #224]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b37      	ldr	r3, [pc, #220]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	0249      	lsls	r1, r1, #9
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x280>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	23a0      	movs	r3, #160	@ 0xa0
 8001da2:	02db      	lsls	r3, r3, #11
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_OscConfig+0x274>
 8001da8:	4b31      	ldr	r3, [pc, #196]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b30      	ldr	r3, [pc, #192]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001dae:	21a0      	movs	r1, #160	@ 0xa0
 8001db0:	02c9      	lsls	r1, r1, #11
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_OscConfig+0x280>
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	4931      	ldr	r1, [pc, #196]	@ (8001e84 <HAL_RCC_OscConfig+0x340>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d014      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fbc8 	bl	8001560 <HAL_GetTick>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fbc3 	bl	8001560 <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b64      	cmp	r3, #100	@ 0x64
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e286      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x292>
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff fbb3 	bl	8001560 <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fbae 	bl	8001560 <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	@ 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e271      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2bc>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2202      	movs	r2, #2
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d100      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2ea>
 8001e2c:	e073      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2fc>
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b18      	cmp	r3, #24
 8001e38:	d128      	bne.n	8001e8c <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d125      	bne.n	8001e8c <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x314>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e24e      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <HAL_RCC_OscConfig+0x344>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	0019      	movs	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	061a      	lsls	r2, r3, #24
 8001e68:	4b01      	ldr	r3, [pc, #4]	@ (8001e70 <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6e:	e052      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	ffff00ff 	.word	0xffff00ff
 8001e78:	080068f0 	.word	0x080068f0
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004
 8001e84:	fffaffff 	.word	0xfffaffff
 8001e88:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d026      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	4bc7      	ldr	r3, [pc, #796]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4bc6      	ldr	r3, [pc, #792]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	0049      	lsls	r1, r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fb5d 	bl	8001560 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fb58 	bl	8001560 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e21b      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebe:	4bbd      	ldr	r3, [pc, #756]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4bba      	ldr	r3, [pc, #744]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4aba      	ldr	r2, [pc, #744]	@ (80021b8 <HAL_RCC_OscConfig+0x674>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	061a      	lsls	r2, r3, #24
 8001eda:	4bb6      	ldr	r3, [pc, #728]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	e019      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee2:	4bb4      	ldr	r3, [pc, #720]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4bb3      	ldr	r3, [pc, #716]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001ee8:	49b4      	ldr	r1, [pc, #720]	@ (80021bc <HAL_RCC_OscConfig+0x678>)
 8001eea:	400a      	ands	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eee:	f7ff fb37 	bl	8001560 <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb32 	bl	8001560 <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1f5      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0a:	4baa      	ldr	r3, [pc, #680]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4013      	ands	r3, r2
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d051      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d031      	beq.n	8001f8c <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d108      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001f30:	4aa0      	ldr	r2, [pc, #640]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f32:	2394      	movs	r3, #148	@ 0x94
 8001f34:	58d3      	ldr	r3, [r2, r3]
 8001f36:	499f      	ldr	r1, [pc, #636]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f38:	2204      	movs	r2, #4
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	2294      	movs	r2, #148	@ 0x94
 8001f3e:	508b      	str	r3, [r1, r2]
 8001f40:	e007      	b.n	8001f52 <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001f42:	4a9c      	ldr	r2, [pc, #624]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f44:	2394      	movs	r3, #148	@ 0x94
 8001f46:	58d3      	ldr	r3, [r2, r3]
 8001f48:	499a      	ldr	r1, [pc, #616]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	2294      	movs	r2, #148	@ 0x94
 8001f50:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4a98      	ldr	r2, [pc, #608]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f54:	2394      	movs	r3, #148	@ 0x94
 8001f56:	58d3      	ldr	r3, [r2, r3]
 8001f58:	4996      	ldr	r1, [pc, #600]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	2294      	movs	r2, #148	@ 0x94
 8001f60:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff fafd 	bl	8001560 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff faf8 	bl	8001560 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b11      	cmp	r3, #17
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1bb      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f7e:	4a8d      	ldr	r2, [pc, #564]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f80:	2394      	movs	r3, #148	@ 0x94
 8001f82:	58d3      	ldr	r3, [r2, r3]
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x428>
 8001f8a:	e01b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8c:	4a89      	ldr	r2, [pc, #548]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f8e:	2394      	movs	r3, #148	@ 0x94
 8001f90:	58d3      	ldr	r3, [r2, r3]
 8001f92:	4988      	ldr	r1, [pc, #544]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	4393      	bics	r3, r2
 8001f98:	2294      	movs	r2, #148	@ 0x94
 8001f9a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fae0 	bl	8001560 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fadb 	bl	8001560 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b11      	cmp	r3, #17
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e19e      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fb8:	4a7e      	ldr	r2, [pc, #504]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001fba:	2394      	movs	r3, #148	@ 0x94
 8001fbc:	58d3      	ldr	r3, [r2, r3]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d100      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x48c>
 8001fce:	e10d      	b.n	80021ec <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd0:	201f      	movs	r0, #31
 8001fd2:	183b      	adds	r3, r7, r0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8001fd8:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001fda:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	055b      	lsls	r3, r3, #21
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d110      	bne.n	8002006 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	4b73      	ldr	r3, [pc, #460]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001fe6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001fe8:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001fea:	2180      	movs	r1, #128	@ 0x80
 8001fec:	0549      	lsls	r1, r1, #21
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ff2:	4b70      	ldr	r3, [pc, #448]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8001ff4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ff6:	2380      	movs	r3, #128	@ 0x80
 8001ff8:	055b      	lsls	r3, r3, #21
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002000:	183b      	adds	r3, r7, r0
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	4b6e      	ldr	r3, [pc, #440]	@ (80021c0 <HAL_RCC_OscConfig+0x67c>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	@ 0x80
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4013      	ands	r3, r2
 8002010:	d11a      	bne.n	8002048 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002012:	4b6b      	ldr	r3, [pc, #428]	@ (80021c0 <HAL_RCC_OscConfig+0x67c>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b6a      	ldr	r3, [pc, #424]	@ (80021c0 <HAL_RCC_OscConfig+0x67c>)
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	0049      	lsls	r1, r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002020:	f7ff fa9e 	bl	8001560 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7ff fa99 	bl	8001560 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e15c      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203c:	4b60      	ldr	r3, [pc, #384]	@ (80021c0 <HAL_RCC_OscConfig+0x67c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4013      	ands	r3, r2
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2201      	movs	r2, #1
 800204e:	4013      	ands	r3, r2
 8002050:	d01e      	beq.n	8002090 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d010      	beq.n	800207e <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800205c:	4a55      	ldr	r2, [pc, #340]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 800205e:	2390      	movs	r3, #144	@ 0x90
 8002060:	58d3      	ldr	r3, [r2, r3]
 8002062:	4954      	ldr	r1, [pc, #336]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002064:	2204      	movs	r2, #4
 8002066:	4313      	orrs	r3, r2
 8002068:	2290      	movs	r2, #144	@ 0x90
 800206a:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800206c:	4a51      	ldr	r2, [pc, #324]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 800206e:	2390      	movs	r3, #144	@ 0x90
 8002070:	58d3      	ldr	r3, [r2, r3]
 8002072:	4950      	ldr	r1, [pc, #320]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002074:	2201      	movs	r2, #1
 8002076:	4313      	orrs	r3, r2
 8002078:	2290      	movs	r2, #144	@ 0x90
 800207a:	508b      	str	r3, [r1, r2]
 800207c:	e018      	b.n	80020b0 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800207e:	4a4d      	ldr	r2, [pc, #308]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002080:	2390      	movs	r3, #144	@ 0x90
 8002082:	58d3      	ldr	r3, [r2, r3]
 8002084:	494b      	ldr	r1, [pc, #300]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002086:	2201      	movs	r2, #1
 8002088:	4313      	orrs	r3, r2
 800208a:	2290      	movs	r2, #144	@ 0x90
 800208c:	508b      	str	r3, [r1, r2]
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002090:	4a48      	ldr	r2, [pc, #288]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002092:	2390      	movs	r3, #144	@ 0x90
 8002094:	58d3      	ldr	r3, [r2, r3]
 8002096:	4947      	ldr	r1, [pc, #284]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002098:	2201      	movs	r2, #1
 800209a:	4393      	bics	r3, r2
 800209c:	2290      	movs	r2, #144	@ 0x90
 800209e:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020a0:	4a44      	ldr	r2, [pc, #272]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 80020a2:	2390      	movs	r3, #144	@ 0x90
 80020a4:	58d3      	ldr	r3, [r2, r3]
 80020a6:	4943      	ldr	r1, [pc, #268]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 80020a8:	2204      	movs	r2, #4
 80020aa:	4393      	bics	r3, r2
 80020ac:	2290      	movs	r2, #144	@ 0x90
 80020ae:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d04f      	beq.n	8002158 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff fa52 	bl	8001560 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c0:	e009      	b.n	80020d6 <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff fa4d 	bl	8001560 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	4a3d      	ldr	r2, [pc, #244]	@ (80021c4 <HAL_RCC_OscConfig+0x680>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e10f      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d6:	4a37      	ldr	r2, [pc, #220]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 80020d8:	2390      	movs	r3, #144	@ 0x90
 80020da:	58d3      	ldr	r3, [r2, r3]
 80020dc:	2202      	movs	r2, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d0ef      	beq.n	80020c2 <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2280      	movs	r2, #128	@ 0x80
 80020e8:	4013      	ands	r3, r2
 80020ea:	d01a      	beq.n	8002122 <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020ec:	4a31      	ldr	r2, [pc, #196]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 80020ee:	2390      	movs	r3, #144	@ 0x90
 80020f0:	58d3      	ldr	r3, [r2, r3]
 80020f2:	4930      	ldr	r1, [pc, #192]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 80020f4:	2280      	movs	r2, #128	@ 0x80
 80020f6:	4313      	orrs	r3, r2
 80020f8:	2290      	movs	r2, #144	@ 0x90
 80020fa:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80020fc:	e009      	b.n	8002112 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7ff fa2f 	bl	8001560 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4a2e      	ldr	r2, [pc, #184]	@ (80021c4 <HAL_RCC_OscConfig+0x680>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0f1      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002112:	4a28      	ldr	r2, [pc, #160]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002114:	2390      	movs	r3, #144	@ 0x90
 8002116:	58d2      	ldr	r2, [r2, r3]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	4013      	ands	r3, r2
 800211e:	d0ee      	beq.n	80020fe <HAL_RCC_OscConfig+0x5ba>
 8002120:	e059      	b.n	80021d6 <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002122:	4a24      	ldr	r2, [pc, #144]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002124:	2390      	movs	r3, #144	@ 0x90
 8002126:	58d3      	ldr	r3, [r2, r3]
 8002128:	4922      	ldr	r1, [pc, #136]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 800212a:	2280      	movs	r2, #128	@ 0x80
 800212c:	4393      	bics	r3, r2
 800212e:	2290      	movs	r2, #144	@ 0x90
 8002130:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002132:	e009      	b.n	8002148 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7ff fa14 	bl	8001560 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	4a21      	ldr	r2, [pc, #132]	@ (80021c4 <HAL_RCC_OscConfig+0x680>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0d6      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002148:	4a1a      	ldr	r2, [pc, #104]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 800214a:	2390      	movs	r3, #144	@ 0x90
 800214c:	58d2      	ldr	r2, [r2, r3]
 800214e:	2380      	movs	r3, #128	@ 0x80
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4013      	ands	r3, r2
 8002154:	d1ee      	bne.n	8002134 <HAL_RCC_OscConfig+0x5f0>
 8002156:	e03e      	b.n	80021d6 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7ff fa02 	bl	8001560 <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002160:	e009      	b.n	8002176 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff f9fd 	bl	8001560 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a15      	ldr	r2, [pc, #84]	@ (80021c4 <HAL_RCC_OscConfig+0x680>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e0bf      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002176:	4a0f      	ldr	r2, [pc, #60]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002178:	2390      	movs	r3, #144	@ 0x90
 800217a:	58d3      	ldr	r3, [r2, r3]
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d1ef      	bne.n	8002162 <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002182:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002184:	2390      	movs	r3, #144	@ 0x90
 8002186:	58d3      	ldr	r3, [r2, r3]
 8002188:	2280      	movs	r2, #128	@ 0x80
 800218a:	4013      	ands	r3, r2
 800218c:	d023      	beq.n	80021d6 <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002190:	2390      	movs	r3, #144	@ 0x90
 8002192:	58d3      	ldr	r3, [r2, r3]
 8002194:	4907      	ldr	r1, [pc, #28]	@ (80021b4 <HAL_RCC_OscConfig+0x670>)
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	4393      	bics	r3, r2
 800219a:	2290      	movs	r2, #144	@ 0x90
 800219c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800219e:	e013      	b.n	80021c8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7ff f9de 	bl	8001560 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	4a06      	ldr	r2, [pc, #24]	@ (80021c4 <HAL_RCC_OscConfig+0x680>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d90b      	bls.n	80021c8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0a0      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	80ffffff 	.word	0x80ffffff
 80021bc:	fffffeff 	.word	0xfffffeff
 80021c0:	40007000 	.word	0x40007000
 80021c4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021c8:	4a4d      	ldr	r2, [pc, #308]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80021ca:	2390      	movs	r3, #144	@ 0x90
 80021cc:	58d2      	ldr	r2, [r2, r3]
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	4013      	ands	r3, r2
 80021d4:	d1e4      	bne.n	80021a0 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d6:	231f      	movs	r3, #31
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b47      	ldr	r3, [pc, #284]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80021e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021e4:	4b46      	ldr	r3, [pc, #280]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80021e6:	4947      	ldr	r1, [pc, #284]	@ (8002304 <HAL_RCC_OscConfig+0x7c0>)
 80021e8:	400a      	ands	r2, r1
 80021ea:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d100      	bne.n	80021f6 <HAL_RCC_OscConfig+0x6b2>
 80021f4:	e07e      	b.n	80022f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f6:	4b42      	ldr	r3, [pc, #264]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2238      	movs	r2, #56	@ 0x38
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b18      	cmp	r3, #24
 8002200:	d100      	bne.n	8002204 <HAL_RCC_OscConfig+0x6c0>
 8002202:	e075      	b.n	80022f0 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	2b02      	cmp	r3, #2
 800220a:	d156      	bne.n	80022ba <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b3b      	ldr	r3, [pc, #236]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 8002212:	493d      	ldr	r1, [pc, #244]	@ (8002308 <HAL_RCC_OscConfig+0x7c4>)
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff f9a2 	bl	8001560 <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f99d 	bl	8001560 <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e060      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	4b32      	ldr	r3, [pc, #200]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	049b      	lsls	r3, r3, #18
 800223c:	4013      	ands	r3, r2
 800223e:	d1f0      	bne.n	8002222 <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a31      	ldr	r2, [pc, #196]	@ (800230c <HAL_RCC_OscConfig+0x7c8>)
 8002246:	4013      	ands	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226c:	431a      	orrs	r2, r3
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 8002270:	430a      	orrs	r2, r1
 8002272:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8002274:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 800227a:	2180      	movs	r1, #128	@ 0x80
 800227c:	0549      	lsls	r1, r1, #21
 800227e:	430a      	orrs	r2, r1
 8002280:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002282:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	0449      	lsls	r1, r1, #17
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f966 	bl	8001560 <HAL_GetTick>
 8002294:	0003      	movs	r3, r0
 8002296:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229a:	f7ff f961 	bl	8001560 <HAL_GetTick>
 800229e:	0002      	movs	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e024      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	2380      	movs	r3, #128	@ 0x80
 80022b2:	049b      	lsls	r3, r3, #18
 80022b4:	4013      	ands	r3, r2
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x756>
 80022b8:	e01c      	b.n	80022f4 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80022c0:	4911      	ldr	r1, [pc, #68]	@ (8002308 <HAL_RCC_OscConfig+0x7c4>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff f94b 	bl	8001560 <HAL_GetTick>
 80022ca:	0003      	movs	r3, r0
 80022cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7ff f946 	bl	8001560 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e009      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e2:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <HAL_RCC_OscConfig+0x7bc>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	049b      	lsls	r3, r3, #18
 80022ea:	4013      	ands	r3, r2
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x78c>
 80022ee:	e001      	b.n	80022f4 <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b008      	add	sp, #32
 80022fc:	bdb0      	pop	{r4, r5, r7, pc}
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	40021000 	.word	0x40021000
 8002304:	efffffff 	.word	0xefffffff
 8002308:	feffffff 	.word	0xfeffffff
 800230c:	11c1808c 	.word	0x11c1808c

08002310 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800231a:	4b6c      	ldr	r3, [pc, #432]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2207      	movs	r2, #7
 8002320:	4013      	ands	r3, r2
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d911      	bls.n	800234c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002328:	4b68      	ldr	r3, [pc, #416]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2207      	movs	r2, #7
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	4b66      	ldr	r3, [pc, #408]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b64      	ldr	r3, [pc, #400]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2207      	movs	r2, #7
 8002340:	4013      	ands	r3, r2
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0bb      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	d100      	bne.n	8002358 <HAL_RCC_ClockConfig+0x48>
 8002356:	e064      	b.n	8002422 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002360:	4b5b      	ldr	r3, [pc, #364]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	049b      	lsls	r3, r3, #18
 8002368:	4013      	ands	r3, r2
 800236a:	d138      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0a9      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d107      	bne.n	8002388 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002378:	4b55      	ldr	r3, [pc, #340]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	029b      	lsls	r3, r3, #10
 8002380:	4013      	ands	r3, r2
 8002382:	d12c      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e09d      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002390:	4b4f      	ldr	r3, [pc, #316]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d121      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e092      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4013      	ands	r3, r2
 80023b0:	d115      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e086      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023be:	4a44      	ldr	r2, [pc, #272]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	2394      	movs	r3, #148	@ 0x94
 80023c2:	58d3      	ldr	r3, [r2, r3]
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07a      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ce:	4a40      	ldr	r2, [pc, #256]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	2390      	movs	r3, #144	@ 0x90
 80023d2:	58d3      	ldr	r3, [r2, r3]
 80023d4:	2202      	movs	r2, #2
 80023d6:	4013      	ands	r3, r2
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e072      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b3c      	ldr	r3, [pc, #240]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2207      	movs	r2, #7
 80023e4:	4393      	bics	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4b38      	ldr	r3, [pc, #224]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f2:	f7ff f8b5 	bl	8001560 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e009      	b.n	8002410 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7ff f8b0 	bl	8001560 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	4a33      	ldr	r2, [pc, #204]	@ (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e059      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002410:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2238      	movs	r2, #56	@ 0x38
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	429a      	cmp	r2, r3
 8002420:	d1ec      	bne.n	80023fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d009      	beq.n	8002440 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b28      	ldr	r3, [pc, #160]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a29      	ldr	r2, [pc, #164]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2207      	movs	r2, #7
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d211      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2207      	movs	r2, #7
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002460:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2207      	movs	r2, #7
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e028      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2204      	movs	r2, #4
 8002478:	4013      	ands	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <HAL_RCC_ClockConfig+0x1cc>)
 8002482:	4013      	ands	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4b11      	ldr	r3, [pc, #68]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8002490:	f000 f82a 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002494:	0001      	movs	r1, r0
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	220f      	movs	r2, #15
 800249e:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80024a0:	4a0f      	ldr	r2, [pc, #60]	@ (80024e0 <HAL_RCC_ClockConfig+0x1d0>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024a4:	001a      	movs	r2, r3
 80024a6:	231f      	movs	r3, #31
 80024a8:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80024aa:	000a      	movs	r2, r1
 80024ac:	40da      	lsrs	r2, r3
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <HAL_RCC_ClockConfig+0x1d4>)
 80024b0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80024b2:	250b      	movs	r5, #11
 80024b4:	197c      	adds	r4, r7, r5
 80024b6:	2003      	movs	r0, #3
 80024b8:	f7fe fff8 	bl	80014ac <HAL_InitTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80024c0:	197b      	adds	r3, r7, r5
 80024c2:	781b      	ldrb	r3, [r3, #0]
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b004      	add	sp, #16
 80024ca:	bdb0      	pop	{r4, r5, r7, pc}
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	00001388 	.word	0x00001388
 80024d8:	fffff0ff 	.word	0xfffff0ff
 80024dc:	ffff8fff 	.word	0xffff8fff
 80024e0:	080068f0 	.word	0x080068f0
 80024e4:	20000000 	.word	0x20000000

080024e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	@ 0x28
 80024ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b46      	ldr	r3, [pc, #280]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2238      	movs	r2, #56	@ 0x38
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002500:	4b43      	ldr	r3, [pc, #268]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x34>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b18      	cmp	r3, #24
 8002514:	d125      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d122      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800251c:	4b3c      	ldr	r3, [pc, #240]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	4013      	ands	r3, r2
 8002524:	d107      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8002526:	4a3a      	ldr	r2, [pc, #232]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 8002528:	2394      	movs	r3, #148	@ 0x94
 800252a:	58d3      	ldr	r3, [r2, r3]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	220f      	movs	r2, #15
 8002530:	4013      	ands	r3, r2
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
 8002534:	e005      	b.n	8002542 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002536:	4b36      	ldr	r3, [pc, #216]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	220f      	movs	r2, #15
 800253e:	4013      	ands	r3, r2
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8002542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002544:	2b0b      	cmp	r3, #11
 8002546:	d901      	bls.n	800254c <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 800254c:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x12c>)
 800254e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002550:	0092      	lsls	r2, r2, #2
 8002552:	58d3      	ldr	r3, [r2, r3]
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11b      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002560:	e018      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d102      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002568:	4b2b      	ldr	r3, [pc, #172]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x130>)
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	e012      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b10      	cmp	r3, #16
 8002572:	d102      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002574:	4b29      	ldr	r3, [pc, #164]	@ (800261c <HAL_RCC_GetSysClockFreq+0x134>)
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	e00c      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b20      	cmp	r3, #32
 800257e:	d103      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002580:	23fa      	movs	r3, #250	@ 0xfa
 8002582:	01db      	lsls	r3, r3, #7
 8002584:	623b      	str	r3, [r7, #32]
 8002586:	e005      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b28      	cmp	r3, #40	@ 0x28
 800258c:	d102      	bne.n	8002594 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800258e:	2380      	movs	r3, #128	@ 0x80
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b18      	cmp	r3, #24
 8002598:	d135      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800259a:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	2207      	movs	r2, #7
 80025ac:	4013      	ands	r3, r2
 80025ae:	3301      	adds	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d003      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0xd8>
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0xde>
 80025be:	e005      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80025c0:	4b15      	ldr	r3, [pc, #84]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x130>)
 80025c2:	61fb      	str	r3, [r7, #28]
        break;
 80025c4:	e005      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_RCC_GetSysClockFreq+0x134>)
 80025c8:	61fb      	str	r3, [r7, #28]
        break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	61fb      	str	r3, [r7, #28]
        break;
 80025d0:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80025d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	227f      	movs	r2, #127	@ 0x7f
 80025da:	4013      	ands	r3, r2
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	4353      	muls	r3, r2
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7fd fda2 	bl	800012c <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x128>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0f5b      	lsrs	r3, r3, #29
 80025f2:	2207      	movs	r2, #7
 80025f4:	4013      	ands	r3, r2
 80025f6:	3301      	adds	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68b8      	ldr	r0, [r7, #8]
 80025fe:	f7fd fd95 	bl	800012c <__udivsi3>
 8002602:	0003      	movs	r3, r0
 8002604:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8002606:	6a3b      	ldr	r3, [r7, #32]
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b00a      	add	sp, #40	@ 0x28
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	08006908 	.word	0x08006908
 8002618:	00f42400 	.word	0x00f42400
 800261c:	003d0900 	.word	0x003d0900

08002620 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b02      	ldr	r3, [pc, #8]	@ (8002630 <HAL_RCC_GetHCLKFreq+0x10>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	20000000 	.word	0x20000000

08002634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8002638:	f7ff fff2 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 800263c:	0001      	movs	r1, r0
 800263e:	4b07      	ldr	r3, [pc, #28]	@ (800265c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	0b1b      	lsrs	r3, r3, #12
 8002644:	2207      	movs	r2, #7
 8002646:	4013      	ands	r3, r2
 8002648:	4a05      	ldr	r2, [pc, #20]	@ (8002660 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	001a      	movs	r2, r3
 800264e:	231f      	movs	r3, #31
 8002650:	4013      	ands	r3, r2
 8002652:	40d9      	lsrs	r1, r3
 8002654:	000b      	movs	r3, r1
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	08006900 	.word	0x08006900

08002664 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002670:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002672:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002674:	2380      	movs	r3, #128	@ 0x80
 8002676:	055b      	lsls	r3, r3, #21
 8002678:	4013      	ands	r3, r2
 800267a:	d004      	beq.n	8002686 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800267c:	f7ff fa56 	bl	8001b2c <HAL_PWREx_GetVoltageRange>
 8002680:	0003      	movs	r3, r0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	e017      	b.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b2a      	ldr	r3, [pc, #168]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002688:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800268a:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	0549      	lsls	r1, r1, #21
 8002690:	430a      	orrs	r2, r1
 8002692:	659a      	str	r2, [r3, #88]	@ 0x58
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002696:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	055b      	lsls	r3, r3, #21
 800269c:	4013      	ands	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026a2:	f7ff fa43 	bl	8001b2c <HAL_PWREx_GetVoltageRange>
 80026a6:	0003      	movs	r3, r0
 80026a8:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80026ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026ae:	4b20      	ldr	r3, [pc, #128]	@ (8002730 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80026b0:	4920      	ldr	r1, [pc, #128]	@ (8002734 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d111      	bne.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b80      	cmp	r3, #128	@ 0x80
 80026c4:	d91c      	bls.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2bb0      	cmp	r3, #176	@ 0xb0
 80026ca:	d902      	bls.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026cc:	2302      	movs	r3, #2
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e016      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b90      	cmp	r3, #144	@ 0x90
 80026d6:	d902      	bls.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	e010      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e00d      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80026e8:	d902      	bls.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80026ea:	2302      	movs	r3, #2
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	e007      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b70      	cmp	r3, #112	@ 0x70
 80026f4:	d102      	bne.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80026f6:	2301      	movs	r3, #1
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e001      	b.n	8002700 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002700:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2207      	movs	r2, #7
 8002706:	4393      	bics	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2207      	movs	r2, #7
 8002718:	4013      	ands	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b006      	add	sp, #24
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	40021000 	.word	0x40021000
 8002734:	efffffff 	.word	0xefffffff
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002744:	2313      	movs	r3, #19
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800274c:	2312      	movs	r3, #18
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	4013      	ands	r3, r2
 800275e:	d100      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002760:	e0b7      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2011      	movs	r0, #17
 8002764:	183b      	adds	r3, r7, r0
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b4c      	ldr	r3, [pc, #304]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	055b      	lsls	r3, r3, #21
 8002772:	4013      	ands	r3, r2
 8002774:	d110      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b49      	ldr	r3, [pc, #292]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002778:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800277a:	4b48      	ldr	r3, [pc, #288]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	0549      	lsls	r1, r1, #21
 8002780:	430a      	orrs	r2, r1
 8002782:	659a      	str	r2, [r3, #88]	@ 0x58
 8002784:	4b45      	ldr	r3, [pc, #276]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	055b      	lsls	r3, r3, #21
 800278c:	4013      	ands	r3, r2
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	183b      	adds	r3, r7, r0
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002798:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b40      	ldr	r3, [pc, #256]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	0049      	lsls	r1, r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fedb 	bl	8001560 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ae:	e00b      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7fe fed6 	bl	8001560 <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d904      	bls.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80027be:	2313      	movs	r3, #19
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	2203      	movs	r2, #3
 80027c4:	701a      	strb	r2, [r3, #0]
        break;
 80027c6:	e005      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027c8:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	d0ed      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80027d4:	2313      	movs	r3, #19
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027de:	4a2f      	ldr	r2, [pc, #188]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e0:	2390      	movs	r3, #144	@ 0x90
 80027e2:	58d2      	ldr	r2, [r2, r3]
 80027e4:	23c0      	movs	r3, #192	@ 0xc0
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4013      	ands	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01f      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d01a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027fc:	4a27      	ldr	r2, [pc, #156]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	2390      	movs	r3, #144	@ 0x90
 8002800:	58d3      	ldr	r3, [r2, r3]
 8002802:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002804:	4013      	ands	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002808:	4a24      	ldr	r2, [pc, #144]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	2390      	movs	r3, #144	@ 0x90
 800280c:	58d3      	ldr	r3, [r2, r3]
 800280e:	4923      	ldr	r1, [pc, #140]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002810:	2280      	movs	r2, #128	@ 0x80
 8002812:	0252      	lsls	r2, r2, #9
 8002814:	4313      	orrs	r3, r2
 8002816:	2290      	movs	r2, #144	@ 0x90
 8002818:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	4a20      	ldr	r2, [pc, #128]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281c:	2390      	movs	r3, #144	@ 0x90
 800281e:	58d3      	ldr	r3, [r2, r3]
 8002820:	491e      	ldr	r1, [pc, #120]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	4a21      	ldr	r2, [pc, #132]	@ (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002824:	4013      	ands	r3, r2
 8002826:	2290      	movs	r2, #144	@ 0x90
 8002828:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800282a:	491c      	ldr	r1, [pc, #112]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282c:	2290      	movs	r2, #144	@ 0x90
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	d017      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fe91 	bl	8001560 <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002842:	e00c      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7fe fe8c 	bl	8001560 <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	4a17      	ldr	r2, [pc, #92]	@ (80028ac <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d904      	bls.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8002854:	2313      	movs	r3, #19
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	2203      	movs	r2, #3
 800285a:	701a      	strb	r2, [r3, #0]
            break;
 800285c:	e005      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285e:	4a0f      	ldr	r2, [pc, #60]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002860:	2390      	movs	r3, #144	@ 0x90
 8002862:	58d3      	ldr	r3, [r2, r3]
 8002864:	2202      	movs	r2, #2
 8002866:	4013      	ands	r3, r2
 8002868:	d0ec      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 800286a:	2313      	movs	r3, #19
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002874:	4a09      	ldr	r2, [pc, #36]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	2390      	movs	r3, #144	@ 0x90
 8002878:	58d3      	ldr	r3, [r2, r3]
 800287a:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800287c:	401a      	ands	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	4906      	ldr	r1, [pc, #24]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002884:	4313      	orrs	r3, r2
 8002886:	2290      	movs	r2, #144	@ 0x90
 8002888:	508b      	str	r3, [r1, r2]
 800288a:	e017      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800288c:	2312      	movs	r3, #18
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2213      	movs	r2, #19
 8002892:	18ba      	adds	r2, r7, r2
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	e010      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	fffffcff 	.word	0xfffffcff
 80028a8:	fffeffff 	.word	0xfffeffff
 80028ac:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	2312      	movs	r3, #18
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2213      	movs	r2, #19
 80028b6:	18ba      	adds	r2, r7, r2
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028bc:	2311      	movs	r3, #17
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c6:	4b84      	ldr	r3, [pc, #528]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80028ca:	4b83      	ldr	r3, [pc, #524]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028cc:	4983      	ldr	r1, [pc, #524]	@ (8002adc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	d00b      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028dc:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028de:	2388      	movs	r3, #136	@ 0x88
 80028e0:	58d3      	ldr	r3, [r2, r3]
 80028e2:	2203      	movs	r2, #3
 80028e4:	4393      	bics	r3, r2
 80028e6:	001a      	movs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	497a      	ldr	r1, [pc, #488]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	2288      	movs	r2, #136	@ 0x88
 80028f2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2202      	movs	r2, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	d00b      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028fe:	4a76      	ldr	r2, [pc, #472]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002900:	2388      	movs	r3, #136	@ 0x88
 8002902:	58d3      	ldr	r3, [r2, r3]
 8002904:	220c      	movs	r2, #12
 8002906:	4393      	bics	r3, r2
 8002908:	001a      	movs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4972      	ldr	r1, [pc, #456]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002910:	4313      	orrs	r3, r2
 8002912:	2288      	movs	r2, #136	@ 0x88
 8002914:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2210      	movs	r2, #16
 800291c:	4013      	ands	r3, r2
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002920:	4a6d      	ldr	r2, [pc, #436]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002922:	2388      	movs	r3, #136	@ 0x88
 8002924:	58d3      	ldr	r3, [r2, r3]
 8002926:	4a6e      	ldr	r2, [pc, #440]	@ (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002928:	401a      	ands	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	496a      	ldr	r1, [pc, #424]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	2288      	movs	r2, #136	@ 0x88
 8002934:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2208      	movs	r2, #8
 800293c:	4013      	ands	r3, r2
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002940:	4a65      	ldr	r2, [pc, #404]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002942:	2388      	movs	r3, #136	@ 0x88
 8002944:	58d3      	ldr	r3, [r2, r3]
 8002946:	4a67      	ldr	r2, [pc, #412]	@ (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4962      	ldr	r1, [pc, #392]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	2288      	movs	r2, #136	@ 0x88
 8002954:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2220      	movs	r2, #32
 800295c:	4013      	ands	r3, r2
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002960:	4a5d      	ldr	r2, [pc, #372]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002962:	2388      	movs	r3, #136	@ 0x88
 8002964:	58d3      	ldr	r3, [r2, r3]
 8002966:	4a60      	ldr	r2, [pc, #384]	@ (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002968:	401a      	ands	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	495a      	ldr	r1, [pc, #360]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002970:	4313      	orrs	r3, r2
 8002972:	2288      	movs	r2, #136	@ 0x88
 8002974:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2240      	movs	r2, #64	@ 0x40
 800297c:	4013      	ands	r3, r2
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002980:	4a55      	ldr	r2, [pc, #340]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002982:	2388      	movs	r3, #136	@ 0x88
 8002984:	58d3      	ldr	r3, [r2, r3]
 8002986:	4a59      	ldr	r2, [pc, #356]	@ (8002aec <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8002988:	401a      	ands	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	4952      	ldr	r1, [pc, #328]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	2288      	movs	r2, #136	@ 0x88
 8002994:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	4013      	ands	r3, r2
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029a0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80029a2:	2388      	movs	r3, #136	@ 0x88
 80029a4:	58d3      	ldr	r3, [r2, r3]
 80029a6:	4a52      	ldr	r2, [pc, #328]	@ (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 80029a8:	401a      	ands	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	494a      	ldr	r1, [pc, #296]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	2288      	movs	r2, #136	@ 0x88
 80029b4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029c2:	4a45      	ldr	r2, [pc, #276]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80029c4:	2388      	movs	r3, #136	@ 0x88
 80029c6:	58d3      	ldr	r3, [r2, r3]
 80029c8:	4a4a      	ldr	r2, [pc, #296]	@ (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80029ca:	401a      	ands	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4941      	ldr	r1, [pc, #260]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	2288      	movs	r2, #136	@ 0x88
 80029d6:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	01db      	lsls	r3, r3, #7
 80029e0:	4013      	ands	r3, r2
 80029e2:	d017      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	055b      	lsls	r3, r3, #21
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80029f0:	4b39      	ldr	r3, [pc, #228]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	4b38      	ldr	r3, [pc, #224]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80029f6:	2180      	movs	r1, #128	@ 0x80
 80029f8:	0249      	lsls	r1, r1, #9
 80029fa:	430a      	orrs	r2, r1
 80029fc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029fe:	4a36      	ldr	r2, [pc, #216]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a00:	2388      	movs	r3, #136	@ 0x88
 8002a02:	58d3      	ldr	r3, [r2, r3]
 8002a04:	4a3c      	ldr	r2, [pc, #240]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	4932      	ldr	r1, [pc, #200]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	2288      	movs	r2, #136	@ 0x88
 8002a12:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	019b      	lsls	r3, r3, #6
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d017      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	051b      	lsls	r3, r3, #20
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a32:	2180      	movs	r1, #128	@ 0x80
 8002a34:	0449      	lsls	r1, r1, #17
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a3a:	4a27      	ldr	r2, [pc, #156]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a3c:	2388      	movs	r3, #136	@ 0x88
 8002a3e:	58d3      	ldr	r3, [r2, r3]
 8002a40:	4a2e      	ldr	r2, [pc, #184]	@ (8002afc <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	4923      	ldr	r1, [pc, #140]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	2288      	movs	r2, #136	@ 0x88
 8002a4e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d017      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	045b      	lsls	r3, r3, #17
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a6e:	2180      	movs	r1, #128	@ 0x80
 8002a70:	0449      	lsls	r1, r1, #17
 8002a72:	430a      	orrs	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a76:	4a18      	ldr	r2, [pc, #96]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a78:	2388      	movs	r3, #136	@ 0x88
 8002a7a:	58d3      	ldr	r3, [r2, r3]
 8002a7c:	4a20      	ldr	r2, [pc, #128]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002a7e:	401a      	ands	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	4914      	ldr	r1, [pc, #80]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	2288      	movs	r2, #136	@ 0x88
 8002a8a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	4013      	ands	r3, r2
 8002a96:	d017      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	049b      	lsls	r3, r3, #18
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002aaa:	2180      	movs	r1, #128	@ 0x80
 8002aac:	0449      	lsls	r1, r1, #17
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ab2:	4a09      	ldr	r2, [pc, #36]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002ab4:	2388      	movs	r3, #136	@ 0x88
 8002ab6:	58d3      	ldr	r3, [r2, r3]
 8002ab8:	4a11      	ldr	r2, [pc, #68]	@ (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002aba:	401a      	ands	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	4905      	ldr	r1, [pc, #20]	@ (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	2288      	movs	r2, #136	@ 0x88
 8002ac6:	508b      	str	r3, [r1, r2]

  }

  return status;
 8002ac8:	2312      	movs	r3, #18
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	781b      	ldrb	r3, [r3, #0]
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	efffffff 	.word	0xefffffff
 8002ae0:	fffff3ff 	.word	0xfffff3ff
 8002ae4:	fffffcff 	.word	0xfffffcff
 8002ae8:	ffffcfff 	.word	0xffffcfff
 8002aec:	fffcffff 	.word	0xfffcffff
 8002af0:	fff3ffff 	.word	0xfff3ffff
 8002af4:	ffcfffff 	.word	0xffcfffff
 8002af8:	cfffffff 	.word	0xcfffffff
 8002afc:	f3ffffff 	.word	0xf3ffffff
 8002b00:	feffffff 	.word	0xfeffffff

08002b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b089      	sub	sp, #36	@ 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d154      	bne.n	8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002b1a:	4ad0      	ldr	r2, [pc, #832]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b1c:	2390      	movs	r3, #144	@ 0x90
 8002b1e:	58d2      	ldr	r2, [r2, r3]
 8002b20:	23c0      	movs	r3, #192	@ 0xc0
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d039      	beq.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	23c0      	movs	r3, #192	@ 0xc0
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002b3c:	f000 fbf3 	bl	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	2380      	movs	r3, #128	@ 0x80
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d006      	beq.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d00f      	beq.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8002b54:	f000 fbe7 	bl	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b58:	4ac0      	ldr	r2, [pc, #768]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b5a:	2390      	movs	r3, #144	@ 0x90
 8002b5c:	58d3      	ldr	r3, [r2, r3]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d001      	beq.n	8002b6a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8002b66:	f000 fbe0 	bl	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 8002b6a:	2380      	movs	r3, #128	@ 0x80
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	61fb      	str	r3, [r7, #28]
        break;
 8002b70:	f000 fbdb 	bl	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002b74:	4ab9      	ldr	r2, [pc, #740]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b76:	2394      	movs	r3, #148	@ 0x94
 8002b78:	58d3      	ldr	r3, [r2, r3]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d001      	beq.n	8002b86 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8002b82:	f000 fbd4 	bl	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002b86:	4ab5      	ldr	r2, [pc, #724]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002b88:	2394      	movs	r3, #148	@ 0x94
 8002b8a:	58d3      	ldr	r3, [r2, r3]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d103      	bne.n	8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8002b94:	23fa      	movs	r3, #250	@ 0xfa
 8002b96:	61fb      	str	r3, [r7, #28]
        break;
 8002b98:	f000 fbc9 	bl	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 8002b9c:	23fa      	movs	r3, #250	@ 0xfa
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	61fb      	str	r3, [r7, #28]
        break;
 8002ba2:	f000 fbc4 	bl	800332e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ba6:	4bad      	ldr	r3, [pc, #692]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	029b      	lsls	r3, r3, #10
 8002bae:	401a      	ands	r2, r3
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8002bb8:	f000 fbbb 	bl	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 8002bbc:	4ba8      	ldr	r3, [pc, #672]	@ (8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8002bbe:	61fb      	str	r3, [r7, #28]
        break;
 8002bc0:	f000 fbb7 	bl	8003332 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	029b      	lsls	r3, r3, #10
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d100      	bne.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002bce:	e0f7      	b.n	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	029b      	lsls	r3, r3, #10
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d901      	bls.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002bda:	f000 fbac 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	025b      	lsls	r3, r3, #9
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d100      	bne.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8002be8:	e0ea      	b.n	8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	025b      	lsls	r3, r3, #9
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002bf4:	f000 fb9f 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	2380      	movs	r3, #128	@ 0x80
 8002bfc:	01db      	lsls	r3, r3, #7
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d100      	bne.n	8002c04 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002c02:	e180      	b.n	8002f06 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	2380      	movs	r3, #128	@ 0x80
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8002c0e:	f000 fb92 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	019b      	lsls	r3, r3, #6
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8002c1c:	f000 fb29 	bl	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	2380      	movs	r3, #128	@ 0x80
 8002c24:	019b      	lsls	r3, r3, #6
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d901      	bls.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8002c2a:	f000 fb84 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	2380      	movs	r3, #128	@ 0x80
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d100      	bne.n	8002c3a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8002c38:	e2f0      	b.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	2380      	movs	r3, #128	@ 0x80
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d901      	bls.n	8002c48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8002c44:	f000 fb77 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	2380      	movs	r3, #128	@ 0x80
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d100      	bne.n	8002c54 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8002c52:	e2b8      	b.n	80031c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	2380      	movs	r3, #128	@ 0x80
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002c5e:	f000 fb6a 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	2380      	movs	r3, #128	@ 0x80
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d100      	bne.n	8002c6e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8002c6c:	e249      	b.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d901      	bls.n	8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8002c78:	f000 fb5d 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b80      	cmp	r3, #128	@ 0x80
 8002c80:	d100      	bne.n	8002c84 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8002c82:	e1e1      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b80      	cmp	r3, #128	@ 0x80
 8002c88:	d901      	bls.n	8002c8e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8002c8a:	f000 fb54 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d80f      	bhi.n	8002cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8002c9a:	f000 fb4c 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002ca4:	f000 fb47 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	4b6d      	ldr	r3, [pc, #436]	@ (8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002cae:	18d3      	adds	r3, r2, r3
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	469f      	mov	pc, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b40      	cmp	r3, #64	@ 0x40
 8002cb8:	d100      	bne.n	8002cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8002cba:	e191      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 8002cbc:	f000 fb3b 	bl	8003336 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002cc0:	4a66      	ldr	r2, [pc, #408]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002cc2:	2388      	movs	r3, #136	@ 0x88
 8002cc4:	58d3      	ldr	r3, [r2, r3]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d025      	beq.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d82d      	bhi.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d013      	beq.n	8002d06 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d827      	bhi.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d005      	beq.n	8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 8002cf0:	e020      	b.n	8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002cf2:	f7ff fc9f 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	61fb      	str	r3, [r7, #28]
            break;
 8002cfa:	e020      	b.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 8002cfc:	f7ff fbf4 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002d00:	0003      	movs	r3, r0
 8002d02:	61fb      	str	r3, [r7, #28]
            break;
 8002d04:	e01b      	b.n	8002d3e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d06:	4b55      	ldr	r3, [pc, #340]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	401a      	ands	r2, r3
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d10f      	bne.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002d1a:	61fb      	str	r3, [r7, #28]
            break;
 8002d1c:	e00c      	b.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d1e:	4a4f      	ldr	r2, [pc, #316]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002d20:	2390      	movs	r3, #144	@ 0x90
 8002d22:	58d3      	ldr	r3, [r2, r3]
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	61fb      	str	r3, [r7, #28]
            break;
 8002d32:	e003      	b.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	e2ff      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002d38:	46c0      	nop			@ (mov r8, r8)
 8002d3a:	e2fd      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002d3c:	46c0      	nop			@ (mov r8, r8)
        break;
 8002d3e:	e2fb      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002d40:	4a46      	ldr	r2, [pc, #280]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002d42:	2388      	movs	r3, #136	@ 0x88
 8002d44:	58d3      	ldr	r3, [r2, r3]
 8002d46:	220c      	movs	r2, #12
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d025      	beq.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d82d      	bhi.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d013      	beq.n	8002d86 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d827      	bhi.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8002d70:	e020      	b.n	8002db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002d72:	f7ff fc5f 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61fb      	str	r3, [r7, #28]
            break;
 8002d7a:	e020      	b.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 8002d7c:	f7ff fbb4 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002d80:	0003      	movs	r3, r0
 8002d82:	61fb      	str	r3, [r7, #28]
            break;
 8002d84:	e01b      	b.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d86:	4b35      	ldr	r3, [pc, #212]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	2380      	movs	r3, #128	@ 0x80
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	401a      	ands	r2, r3
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d10f      	bne.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002d9a:	61fb      	str	r3, [r7, #28]
            break;
 8002d9c:	e00c      	b.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002da0:	2390      	movs	r3, #144	@ 0x90
 8002da2:	58d3      	ldr	r3, [r2, r3]
 8002da4:	2202      	movs	r2, #2
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d107      	bne.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	61fb      	str	r3, [r7, #28]
            break;
 8002db2:	e003      	b.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	e2bf      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	e2bd      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002dbc:	46c0      	nop			@ (mov r8, r8)
        break;
 8002dbe:	e2bb      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002dc0:	f7ff fc38 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	61fb      	str	r3, [r7, #28]
        break;
 8002dc8:	e2b6      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002dca:	4a24      	ldr	r2, [pc, #144]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002dcc:	2388      	movs	r3, #136	@ 0x88
 8002dce:	58d2      	ldr	r2, [r2, r3]
 8002dd0:	23c0      	movs	r3, #192	@ 0xc0
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	23c0      	movs	r3, #192	@ 0xc0
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d02d      	beq.n	8002e3e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	23c0      	movs	r3, #192	@ 0xc0
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d833      	bhi.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	2380      	movs	r3, #128	@ 0x80
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d017      	beq.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d829      	bhi.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	2380      	movs	r3, #128	@ 0x80
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d005      	beq.n	8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 8002e10:	e020      	b.n	8002e54 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002e12:	f7ff fc0f 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002e16:	0003      	movs	r3, r0
 8002e18:	61fb      	str	r3, [r7, #28]
            break;
 8002e1a:	e028      	b.n	8002e6e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 8002e1c:	f7ff fb64 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002e20:	0003      	movs	r3, r0
 8002e22:	61fb      	str	r3, [r7, #28]
            break;
 8002e24:	e023      	b.n	8002e6e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002e26:	4b0d      	ldr	r3, [pc, #52]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	2380      	movs	r3, #128	@ 0x80
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10f      	bne.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002e3a:	61fb      	str	r3, [r7, #28]
            break;
 8002e3c:	e00c      	b.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002e3e:	4a07      	ldr	r2, [pc, #28]	@ (8002e5c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002e40:	2390      	movs	r3, #144	@ 0x90
 8002e42:	58d3      	ldr	r3, [r2, r3]
 8002e44:	2202      	movs	r2, #2
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d10f      	bne.n	8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 8002e4c:	2380      	movs	r3, #128	@ 0x80
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	61fb      	str	r3, [r7, #28]
            break;
 8002e52:	e00b      	b.n	8002e6c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	e26f      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002e58:	46c0      	nop			@ (mov r8, r8)
 8002e5a:	e26d      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	0001e848 	.word	0x0001e848
 8002e64:	08006938 	.word	0x08006938
 8002e68:	00f42400 	.word	0x00f42400
            break;
 8002e6c:	46c0      	nop			@ (mov r8, r8)
        break;
 8002e6e:	e263      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8002e70:	4ac1      	ldr	r2, [pc, #772]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002e72:	2388      	movs	r3, #136	@ 0x88
 8002e74:	58d2      	ldr	r2, [r2, r3]
 8002e76:	23c0      	movs	r3, #192	@ 0xc0
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	23c0      	movs	r3, #192	@ 0xc0
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d02d      	beq.n	8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	23c0      	movs	r3, #192	@ 0xc0
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d833      	bhi.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	2380      	movs	r3, #128	@ 0x80
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d017      	beq.n	8002ecc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d829      	bhi.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 8002eb6:	e020      	b.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7ff fbbc 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	61fb      	str	r3, [r7, #28]
            break;
 8002ec0:	e020      	b.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 8002ec2:	f7ff fb11 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	61fb      	str	r3, [r7, #28]
            break;
 8002eca:	e01b      	b.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ecc:	4baa      	ldr	r3, [pc, #680]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d10f      	bne.n	8002efe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 8002ede:	4ba7      	ldr	r3, [pc, #668]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002ee0:	61fb      	str	r3, [r7, #28]
            break;
 8002ee2:	e00c      	b.n	8002efe <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002ee4:	4aa4      	ldr	r2, [pc, #656]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002ee6:	2390      	movs	r3, #144	@ 0x90
 8002ee8:	58d3      	ldr	r3, [r2, r3]
 8002eea:	2202      	movs	r2, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	61fb      	str	r3, [r7, #28]
            break;
 8002ef8:	e003      	b.n	8002f02 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	e21c      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	e21a      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002f02:	46c0      	nop			@ (mov r8, r8)
        break;
 8002f04:	e218      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002f06:	4a9c      	ldr	r2, [pc, #624]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002f08:	2388      	movs	r3, #136	@ 0x88
 8002f0a:	58d2      	ldr	r2, [r2, r3]
 8002f0c:	23c0      	movs	r3, #192	@ 0xc0
 8002f0e:	059b      	lsls	r3, r3, #22
 8002f10:	4013      	ands	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	059b      	lsls	r3, r3, #22
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d012      	beq.n	8002f44 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	059b      	lsls	r3, r3, #22
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d825      	bhi.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	2380      	movs	r3, #128	@ 0x80
 8002f32:	055b      	lsls	r3, r3, #21
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d014      	beq.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 8002f38:	e01c      	b.n	8002f74 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 8002f3a:	f7ff fad5 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	61fb      	str	r3, [r7, #28]
            break;
 8002f42:	e018      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002f44:	4b8c      	ldr	r3, [pc, #560]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d102      	bne.n	8002f5c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 8002f56:	4b89      	ldr	r3, [pc, #548]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002f58:	61fb      	str	r3, [r7, #28]
            break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
            break;
 8002f60:	e009      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002f62:	2408      	movs	r4, #8
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 f9f4 	bl	8003354 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8002f6c:	193b      	adds	r3, r7, r4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	61fb      	str	r3, [r7, #28]
            break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 8002f74:	46c0      	nop			@ (mov r8, r8)
        break;
 8002f76:	e1df      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002f78:	4a7f      	ldr	r2, [pc, #508]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002f7a:	2388      	movs	r3, #136	@ 0x88
 8002f7c:	58d2      	ldr	r2, [r2, r3]
 8002f7e:	23c0      	movs	r3, #192	@ 0xc0
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	4013      	ands	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	019b      	lsls	r3, r3, #6
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d017      	beq.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	019b      	lsls	r3, r3, #6
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d81e      	bhi.n	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	015b      	lsls	r3, r3, #5
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 8002faa:	e015      	b.n	8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002fac:	f7ff fb42 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	61fb      	str	r3, [r7, #28]
            break;
 8002fb4:	e013      	b.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7ff fa97 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	61fb      	str	r3, [r7, #28]
            break;
 8002fbe:	e00e      	b.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002fc0:	4b6d      	ldr	r3, [pc, #436]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	2380      	movs	r3, #128	@ 0x80
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	401a      	ands	r2, r3
 8002fca:	2380      	movs	r3, #128	@ 0x80
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d104      	bne.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 8002fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002fd4:	61fb      	str	r3, [r7, #28]
            break;
 8002fd6:	e001      	b.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	e1ad      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002fdc:	46c0      	nop			@ (mov r8, r8)
        break;
 8002fde:	e1ab      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002fe0:	4a65      	ldr	r2, [pc, #404]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002fe2:	2388      	movs	r3, #136	@ 0x88
 8002fe4:	58d2      	ldr	r2, [r2, r3]
 8002fe6:	23c0      	movs	r3, #192	@ 0xc0
 8002fe8:	029b      	lsls	r3, r3, #10
 8002fea:	4013      	ands	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d017      	beq.n	8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d81e      	bhi.n	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	2380      	movs	r3, #128	@ 0x80
 800300c:	025b      	lsls	r3, r3, #9
 800300e:	429a      	cmp	r2, r3
 8003010:	d005      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 8003012:	e015      	b.n	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003014:	f7ff fb0e 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8003018:	0003      	movs	r3, r0
 800301a:	61fb      	str	r3, [r7, #28]
            break;
 800301c:	e013      	b.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 800301e:	f7ff fa63 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8003022:	0003      	movs	r3, r0
 8003024:	61fb      	str	r3, [r7, #28]
            break;
 8003026:	e00e      	b.n	8003046 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003028:	4b53      	ldr	r3, [pc, #332]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2380      	movs	r3, #128	@ 0x80
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	401a      	ands	r2, r3
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	429a      	cmp	r2, r3
 8003038:	d104      	bne.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 800303a:	4b50      	ldr	r3, [pc, #320]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 800303c:	61fb      	str	r3, [r7, #28]
            break;
 800303e:	e001      	b.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 8003040:	46c0      	nop			@ (mov r8, r8)
 8003042:	e179      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003044:	46c0      	nop			@ (mov r8, r8)
        break;
 8003046:	e177      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003048:	4a4b      	ldr	r2, [pc, #300]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800304a:	2388      	movs	r3, #136	@ 0x88
 800304c:	58d2      	ldr	r2, [r2, r3]
 800304e:	23c0      	movs	r3, #192	@ 0xc0
 8003050:	031b      	lsls	r3, r3, #12
 8003052:	4013      	ands	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	23c0      	movs	r3, #192	@ 0xc0
 800305a:	031b      	lsls	r3, r3, #12
 800305c:	429a      	cmp	r2, r3
 800305e:	d03d      	beq.n	80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	23c0      	movs	r3, #192	@ 0xc0
 8003064:	031b      	lsls	r3, r3, #12
 8003066:	429a      	cmp	r2, r3
 8003068:	d843      	bhi.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	031b      	lsls	r3, r3, #12
 8003070:	429a      	cmp	r2, r3
 8003072:	d027      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	031b      	lsls	r3, r3, #12
 800307a:	429a      	cmp	r2, r3
 800307c:	d839      	bhi.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	2380      	movs	r3, #128	@ 0x80
 8003088:	02db      	lsls	r3, r3, #11
 800308a:	429a      	cmp	r2, r3
 800308c:	d005      	beq.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 800308e:	e030      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8003090:	f7ff fad0 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8003094:	0003      	movs	r3, r0
 8003096:	61fb      	str	r3, [r7, #28]
            break;
 8003098:	e032      	b.n	8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800309a:	4a37      	ldr	r2, [pc, #220]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800309c:	2394      	movs	r3, #148	@ 0x94
 800309e:	58d3      	ldr	r3, [r2, r3]
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d126      	bne.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80030a8:	4a33      	ldr	r2, [pc, #204]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80030aa:	2394      	movs	r3, #148	@ 0x94
 80030ac:	58d3      	ldr	r3, [r2, r3]
 80030ae:	2204      	movs	r2, #4
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d102      	bne.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 80030b6:	23fa      	movs	r3, #250	@ 0xfa
 80030b8:	61fb      	str	r3, [r7, #28]
            break;
 80030ba:	e01c      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 80030bc:	23fa      	movs	r3, #250	@ 0xfa
 80030be:	01db      	lsls	r3, r3, #7
 80030c0:	61fb      	str	r3, [r7, #28]
            break;
 80030c2:	e018      	b.n	80030f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80030c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2380      	movs	r3, #128	@ 0x80
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	401a      	ands	r2, r3
 80030ce:	2380      	movs	r3, #128	@ 0x80
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d111      	bne.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 80030d6:	4b29      	ldr	r3, [pc, #164]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80030d8:	61fb      	str	r3, [r7, #28]
            break;
 80030da:	e00e      	b.n	80030fa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80030dc:	4a26      	ldr	r2, [pc, #152]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80030de:	2390      	movs	r3, #144	@ 0x90
 80030e0:	58d3      	ldr	r3, [r2, r3]
 80030e2:	2202      	movs	r2, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d109      	bne.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	61fb      	str	r3, [r7, #28]
            break;
 80030f0:	e005      	b.n	80030fe <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	e120      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	e11e      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	e11c      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80030fe:	46c0      	nop			@ (mov r8, r8)
        break;
 8003100:	e11a      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003102:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003104:	2388      	movs	r3, #136	@ 0x88
 8003106:	58d2      	ldr	r2, [r2, r3]
 8003108:	23c0      	movs	r3, #192	@ 0xc0
 800310a:	039b      	lsls	r3, r3, #14
 800310c:	4013      	ands	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	23c0      	movs	r3, #192	@ 0xc0
 8003114:	039b      	lsls	r3, r3, #14
 8003116:	429a      	cmp	r2, r3
 8003118:	d042      	beq.n	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	23c0      	movs	r3, #192	@ 0xc0
 800311e:	039b      	lsls	r3, r3, #14
 8003120:	429a      	cmp	r2, r3
 8003122:	d848      	bhi.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	2380      	movs	r3, #128	@ 0x80
 8003128:	039b      	lsls	r3, r3, #14
 800312a:	429a      	cmp	r2, r3
 800312c:	d02c      	beq.n	8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	2380      	movs	r3, #128	@ 0x80
 8003132:	039b      	lsls	r3, r3, #14
 8003134:	429a      	cmp	r2, r3
 8003136:	d83e      	bhi.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	035b      	lsls	r3, r3, #13
 8003144:	429a      	cmp	r2, r3
 8003146:	d005      	beq.n	8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 8003148:	e035      	b.n	80031b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 800314a:	f7ff fa73 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 800314e:	0003      	movs	r3, r0
 8003150:	61fb      	str	r3, [r7, #28]
            break;
 8003152:	e037      	b.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003154:	4a08      	ldr	r2, [pc, #32]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003156:	2394      	movs	r3, #148	@ 0x94
 8003158:	58d3      	ldr	r3, [r2, r3]
 800315a:	2202      	movs	r2, #2
 800315c:	4013      	ands	r3, r2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d12b      	bne.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8003162:	4a05      	ldr	r2, [pc, #20]	@ (8003178 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8003164:	2394      	movs	r3, #148	@ 0x94
 8003166:	58d3      	ldr	r3, [r2, r3]
 8003168:	2204      	movs	r2, #4
 800316a:	4013      	ands	r3, r2
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 8003170:	23fa      	movs	r3, #250	@ 0xfa
 8003172:	61fb      	str	r3, [r7, #28]
            break;
 8003174:	e021      	b.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	40021000 	.word	0x40021000
 800317c:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 8003180:	23fa      	movs	r3, #250	@ 0xfa
 8003182:	01db      	lsls	r3, r3, #7
 8003184:	61fb      	str	r3, [r7, #28]
            break;
 8003186:	e018      	b.n	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003188:	4b6e      	ldr	r3, [pc, #440]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	401a      	ands	r2, r3
 8003192:	2380      	movs	r3, #128	@ 0x80
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	429a      	cmp	r2, r3
 8003198:	d111      	bne.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 800319a:	4b6b      	ldr	r3, [pc, #428]	@ (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800319c:	61fb      	str	r3, [r7, #28]
            break;
 800319e:	e00e      	b.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80031a0:	4a68      	ldr	r2, [pc, #416]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80031a2:	2390      	movs	r3, #144	@ 0x90
 80031a4:	58d3      	ldr	r3, [r2, r3]
 80031a6:	2202      	movs	r2, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d109      	bne.n	80031c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	61fb      	str	r3, [r7, #28]
            break;
 80031b4:	e005      	b.n	80031c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	e0be      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80031ba:	46c0      	nop			@ (mov r8, r8)
 80031bc:	e0bc      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	e0ba      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80031c2:	46c0      	nop			@ (mov r8, r8)
        break;
 80031c4:	e0b8      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80031c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80031c8:	2388      	movs	r3, #136	@ 0x88
 80031ca:	58d2      	ldr	r2, [r2, r3]
 80031cc:	2380      	movs	r3, #128	@ 0x80
 80031ce:	045b      	lsls	r3, r3, #17
 80031d0:	4013      	ands	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	2380      	movs	r3, #128	@ 0x80
 80031de:	045b      	lsls	r3, r3, #17
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d011      	beq.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 80031e4:	e019      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80031e6:	4b57      	ldr	r3, [pc, #348]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	23e0      	movs	r3, #224	@ 0xe0
 80031ec:	01db      	lsls	r3, r3, #7
 80031ee:	4013      	ands	r3, r2
 80031f0:	d104      	bne.n	80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 80031f2:	f7ff fa1f 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 80031f6:	0003      	movs	r3, r0
 80031f8:	61fb      	str	r3, [r7, #28]
            break;
 80031fa:	e00e      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80031fc:	f7ff fa1a 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8003200:	0003      	movs	r3, r0
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
            break;
 8003206:	e008      	b.n	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003208:	2408      	movs	r4, #8
 800320a:	193b      	adds	r3, r7, r4
 800320c:	0018      	movs	r0, r3
 800320e:	f000 f8a1 	bl	8003354 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003212:	193b      	adds	r3, r7, r4
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61fb      	str	r3, [r7, #28]
            break;
 8003218:	46c0      	nop			@ (mov r8, r8)
        break;
 800321a:	e08d      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 800321c:	4a49      	ldr	r2, [pc, #292]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800321e:	2388      	movs	r3, #136	@ 0x88
 8003220:	58d2      	ldr	r2, [r2, r3]
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	049b      	lsls	r3, r3, #18
 8003226:	4013      	ands	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	049b      	lsls	r3, r3, #18
 8003236:	429a      	cmp	r2, r3
 8003238:	d011      	beq.n	800325e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 800323a:	e019      	b.n	8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800323c:	4b41      	ldr	r3, [pc, #260]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	23e0      	movs	r3, #224	@ 0xe0
 8003242:	01db      	lsls	r3, r3, #7
 8003244:	4013      	ands	r3, r2
 8003246:	d104      	bne.n	8003252 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 8003248:	f7ff f9f4 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 800324c:	0003      	movs	r3, r0
 800324e:	61fb      	str	r3, [r7, #28]
            break;
 8003250:	e00e      	b.n	8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8003252:	f7ff f9ef 	bl	8002634 <HAL_RCC_GetPCLK1Freq>
 8003256:	0003      	movs	r3, r0
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
            break;
 800325c:	e008      	b.n	8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800325e:	2408      	movs	r4, #8
 8003260:	193b      	adds	r3, r7, r4
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f876 	bl	8003354 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003268:	193b      	adds	r3, r7, r4
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	61fb      	str	r3, [r7, #28]
            break;
 800326e:	46c0      	nop			@ (mov r8, r8)
        break;
 8003270:	e062      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003272:	4a34      	ldr	r2, [pc, #208]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003274:	2388      	movs	r3, #136	@ 0x88
 8003276:	58d2      	ldr	r2, [r2, r3]
 8003278:	23c0      	movs	r3, #192	@ 0xc0
 800327a:	051b      	lsls	r3, r3, #20
 800327c:	4013      	ands	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	23c0      	movs	r3, #192	@ 0xc0
 8003284:	051b      	lsls	r3, r3, #20
 8003286:	429a      	cmp	r2, r3
 8003288:	d017      	beq.n	80032ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	23c0      	movs	r3, #192	@ 0xc0
 800328e:	051b      	lsls	r3, r3, #20
 8003290:	429a      	cmp	r2, r3
 8003292:	d844      	bhi.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	2380      	movs	r3, #128	@ 0x80
 8003298:	051b      	lsls	r3, r3, #20
 800329a:	429a      	cmp	r2, r3
 800329c:	d033      	beq.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	051b      	lsls	r3, r3, #20
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d83a      	bhi.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d034      	beq.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	04db      	lsls	r3, r3, #19
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d003      	beq.n	80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 80032b8:	e031      	b.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 80032ba:	4b24      	ldr	r3, [pc, #144]	@ (800334c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80032bc:	61fb      	str	r3, [r7, #28]
            break;
 80032be:	e031      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80032c0:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2202      	movs	r2, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d12a      	bne.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80032cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2208      	movs	r2, #8
 80032d2:	4013      	ands	r3, r2
 80032d4:	d005      	beq.n	80032e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80032d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	220f      	movs	r2, #15
 80032de:	4013      	ands	r3, r2
 80032e0:	e005      	b.n	80032ee <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80032e2:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80032e4:	2394      	movs	r3, #148	@ 0x94
 80032e6:	58d3      	ldr	r3, [r2, r3]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	220f      	movs	r2, #15
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b0b      	cmp	r3, #11
 80032f4:	d901      	bls.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 80032f6:	230b      	movs	r3, #11
 80032f8:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80032fa:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	58d3      	ldr	r3, [r2, r3]
 8003302:	61fb      	str	r3, [r7, #28]
            break;
 8003304:	e00d      	b.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8003306:	2408      	movs	r4, #8
 8003308:	193b      	adds	r3, r7, r4
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f822 	bl	8003354 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8003310:	193b      	adds	r3, r7, r4
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	61fb      	str	r3, [r7, #28]
            break;
 8003316:	e005      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
            break;
 800331c:	e002      	b.n	8003324 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	e00a      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8003322:	46c0      	nop			@ (mov r8, r8)
        break;
 8003324:	e008      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	e004      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	e002      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8003336:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8003338:	69fb      	ldr	r3, [r7, #28]
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b009      	add	sp, #36	@ 0x24
 8003340:	bd90      	pop	{r4, r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	40021000 	.word	0x40021000
 8003348:	00f42400 	.word	0x00f42400
 800334c:	02dc6c00 	.word	0x02dc6c00
 8003350:	08006908 	.word	0x08006908

08003354 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800335c:	4b58      	ldr	r3, [pc, #352]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	227f      	movs	r2, #127	@ 0x7f
 8003364:	4013      	ands	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003368:	4b55      	ldr	r3, [pc, #340]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2203      	movs	r2, #3
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8003372:	4b53      	ldr	r3, [pc, #332]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	2207      	movs	r2, #7
 800337a:	4013      	ands	r3, r2
 800337c:	3301      	adds	r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8003380:	4b4f      	ldr	r3, [pc, #316]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2208      	movs	r2, #8
 8003386:	4013      	ands	r3, r2
 8003388:	d005      	beq.n	8003396 <HAL_RCCEx_GetPLLClockFreq+0x42>
 800338a:	4b4d      	ldr	r3, [pc, #308]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	220f      	movs	r2, #15
 8003392:	4013      	ands	r3, r2
 8003394:	e005      	b.n	80033a2 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8003396:	4a4a      	ldr	r2, [pc, #296]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003398:	2394      	movs	r3, #148	@ 0x94
 800339a:	58d3      	ldr	r3, [r2, r3]
 800339c:	0a1b      	lsrs	r3, r3, #8
 800339e:	220f      	movs	r2, #15
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b0b      	cmp	r3, #11
 80033a8:	d901      	bls.n	80033ae <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 80033aa:	230b      	movs	r3, #11
 80033ac:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d020      	beq.n	80033f6 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d827      	bhi.n	800340a <HAL_RCCEx_GetPLLClockFreq+0xb6>
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d00c      	beq.n	80033da <HAL_RCCEx_GetPLLClockFreq+0x86>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d121      	bne.n	800340a <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	483e      	ldr	r0, [pc, #248]	@ (80034c4 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80033ca:	f7fc feaf 	bl	800012c <__udivsi3>
 80033ce:	0003      	movs	r3, r0
 80033d0:	001a      	movs	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4353      	muls	r3, r2
 80033d6:	61fb      	str	r3, [r7, #28]
      break;
 80033d8:	e025      	b.n	8003426 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80033da:	4b3b      	ldr	r3, [pc, #236]	@ (80034c8 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	58d3      	ldr	r3, [r2, r3]
 80033e2:	68f9      	ldr	r1, [r7, #12]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fc fea1 	bl	800012c <__udivsi3>
 80033ea:	0003      	movs	r3, r0
 80033ec:	001a      	movs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4353      	muls	r3, r2
 80033f2:	61fb      	str	r3, [r7, #28]
      break;
 80033f4:	e017      	b.n	8003426 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	4834      	ldr	r0, [pc, #208]	@ (80034cc <HAL_RCCEx_GetPLLClockFreq+0x178>)
 80033fa:	f7fc fe97 	bl	800012c <__udivsi3>
 80033fe:	0003      	movs	r3, r0
 8003400:	001a      	movs	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	4353      	muls	r3, r2
 8003406:	61fb      	str	r3, [r7, #28]
      break;
 8003408:	e00d      	b.n	8003426 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 800340a:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	58d3      	ldr	r3, [r2, r3]
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	0018      	movs	r0, r3
 8003416:	f7fc fe89 	bl	800012c <__udivsi3>
 800341a:	0003      	movs	r3, r0
 800341c:	001a      	movs	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	4353      	muls	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
      break;
 8003424:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8003426:	4b26      	ldr	r3, [pc, #152]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	2380      	movs	r3, #128	@ 0x80
 800342c:	025b      	lsls	r3, r3, #9
 800342e:	4013      	ands	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8003432:	4b23      	ldr	r3, [pc, #140]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003434:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8003436:	0c5b      	lsrs	r3, r3, #17
 8003438:	221f      	movs	r2, #31
 800343a:	4013      	ands	r3, r2
 800343c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 800343e:	0019      	movs	r1, r3
 8003440:	69f8      	ldr	r0, [r7, #28]
 8003442:	f7fc fe73 	bl	800012c <__udivsi3>
 8003446:	0003      	movs	r3, r0
 8003448:	001a      	movs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e002      	b.n	8003456 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8003456:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	045b      	lsls	r3, r3, #17
 800345e:	4013      	ands	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8003462:	4b17      	ldr	r3, [pc, #92]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003464:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8003466:	0e5b      	lsrs	r3, r3, #25
 8003468:	2207      	movs	r2, #7
 800346a:	4013      	ands	r3, r2
 800346c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 800346e:	0019      	movs	r1, r3
 8003470:	69f8      	ldr	r0, [r7, #28]
 8003472:	f7fc fe5b 	bl	800012c <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	001a      	movs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8003486:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	055b      	lsls	r3, r3, #21
 800348e:	4013      	ands	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8003492:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8003494:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8003496:	0f5b      	lsrs	r3, r3, #29
 8003498:	2207      	movs	r2, #7
 800349a:	4013      	ands	r3, r2
 800349c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 800349e:	0019      	movs	r1, r3
 80034a0:	69f8      	ldr	r0, [r7, #28]
 80034a2:	f7fc fe43 	bl	800012c <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	001a      	movs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 80034ae:	e002      	b.n	80034b6 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b008      	add	sp, #32
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	40021000 	.word	0x40021000
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	08006908 	.word	0x08006908
 80034cc:	003d0900 	.word	0x003d0900

080034d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e0a0      	b.n	8003624 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	2382      	movs	r3, #130	@ 0x82
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d009      	beq.n	800350a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	61da      	str	r2, [r3, #28]
 80034fc:	e005      	b.n	800350a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	225d      	movs	r2, #93	@ 0x5d
 8003514:	5c9b      	ldrb	r3, [r3, r2]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	225c      	movs	r2, #92	@ 0x5c
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f7fd fe12 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	225d      	movs	r2, #93	@ 0x5d
 8003530:	2102      	movs	r1, #2
 8003532:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2140      	movs	r1, #64	@ 0x40
 8003540:	438a      	bics	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	23e0      	movs	r3, #224	@ 0xe0
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	429a      	cmp	r2, r3
 800354e:	d902      	bls.n	8003556 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e002      	b.n	800355c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003556:	2380      	movs	r3, #128	@ 0x80
 8003558:	015b      	lsls	r3, r3, #5
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	23f0      	movs	r3, #240	@ 0xf0
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	429a      	cmp	r2, r3
 8003566:	d008      	beq.n	800357a <HAL_SPI_Init+0xaa>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	23e0      	movs	r3, #224	@ 0xe0
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	429a      	cmp	r2, r3
 8003572:	d002      	beq.n	800357a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	2382      	movs	r3, #130	@ 0x82
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	401a      	ands	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	2384      	movs	r3, #132	@ 0x84
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	400b      	ands	r3, r1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2102      	movs	r1, #2
 8003596:	400b      	ands	r3, r1
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2101      	movs	r1, #1
 80035a0:	400b      	ands	r3, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6999      	ldr	r1, [r3, #24]
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	400b      	ands	r3, r1
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2138      	movs	r1, #56	@ 0x38
 80035b6:	400b      	ands	r3, r1
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	2180      	movs	r1, #128	@ 0x80
 80035c0:	400b      	ands	r3, r1
 80035c2:	431a      	orrs	r2, r3
 80035c4:	0011      	movs	r1, r2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ca:	2380      	movs	r3, #128	@ 0x80
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	401a      	ands	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	2204      	movs	r2, #4
 80035e0:	401a      	ands	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	2110      	movs	r1, #16
 80035e8:	400b      	ands	r3, r1
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	2108      	movs	r1, #8
 80035f2:	400b      	ands	r3, r1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68d9      	ldr	r1, [r3, #12]
 80035fa:	23f0      	movs	r3, #240	@ 0xf0
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	400b      	ands	r3, r1
 8003600:	431a      	orrs	r2, r3
 8003602:	0011      	movs	r1, r2
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	015b      	lsls	r3, r3, #5
 800360a:	401a      	ands	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	225d      	movs	r2, #93	@ 0x5d
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	1dbb      	adds	r3, r7, #6
 800363a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800363c:	231f      	movs	r3, #31
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	225c      	movs	r2, #92	@ 0x5c
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_SPI_Transmit+0x26>
 800364e:	2302      	movs	r3, #2
 8003650:	e147      	b.n	80038e2 <HAL_SPI_Transmit+0x2b6>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	225c      	movs	r2, #92	@ 0x5c
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800365a:	f7fd ff81 	bl	8001560 <HAL_GetTick>
 800365e:	0003      	movs	r3, r0
 8003660:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003662:	2316      	movs	r3, #22
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	1dba      	adds	r2, r7, #6
 8003668:	8812      	ldrh	r2, [r2, #0]
 800366a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	225d      	movs	r2, #93	@ 0x5d
 8003670:	5c9b      	ldrb	r3, [r3, r2]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d004      	beq.n	8003682 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003678:	231f      	movs	r3, #31
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2202      	movs	r2, #2
 800367e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003680:	e128      	b.n	80038d4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_SPI_Transmit+0x64>
 8003688:	1dbb      	adds	r3, r7, #6
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003690:	231f      	movs	r3, #31
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
    goto error;
 8003698:	e11c      	b.n	80038d4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	225d      	movs	r2, #93	@ 0x5d
 800369e:	2103      	movs	r1, #3
 80036a0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1dba      	adds	r2, r7, #6
 80036b2:	8812      	ldrh	r2, [r2, #0]
 80036b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1dba      	adds	r2, r7, #6
 80036ba:	8812      	ldrh	r2, [r2, #0]
 80036bc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2244      	movs	r2, #68	@ 0x44
 80036c8:	2100      	movs	r1, #0
 80036ca:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2246      	movs	r2, #70	@ 0x46
 80036d0:	2100      	movs	r1, #0
 80036d2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	2380      	movs	r3, #128	@ 0x80
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d110      	bne.n	800370e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2140      	movs	r1, #64	@ 0x40
 80036f8:	438a      	bics	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2180      	movs	r1, #128	@ 0x80
 8003708:	01c9      	lsls	r1, r1, #7
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2240      	movs	r2, #64	@ 0x40
 8003716:	4013      	ands	r3, r2
 8003718:	2b40      	cmp	r3, #64	@ 0x40
 800371a:	d007      	beq.n	800372c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2140      	movs	r1, #64	@ 0x40
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	23e0      	movs	r3, #224	@ 0xe0
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	429a      	cmp	r2, r3
 8003736:	d952      	bls.n	80037de <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_SPI_Transmit+0x11e>
 8003740:	2316      	movs	r3, #22
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d143      	bne.n	80037d2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800376e:	e030      	b.n	80037d2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2202      	movs	r2, #2
 8003778:	4013      	ands	r3, r2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d112      	bne.n	80037a4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	881a      	ldrh	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	1c9a      	adds	r2, r3, #2
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037a2:	e016      	b.n	80037d2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a4:	f7fd fedc 	bl	8001560 <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d802      	bhi.n	80037ba <HAL_SPI_Transmit+0x18e>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_SPI_Transmit+0x194>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d108      	bne.n	80037d2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2203      	movs	r2, #3
 80037c6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	225d      	movs	r2, #93	@ 0x5d
 80037cc:	2101      	movs	r1, #1
 80037ce:	5499      	strb	r1, [r3, r2]
          goto error;
 80037d0:	e080      	b.n	80038d4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1c9      	bne.n	8003770 <HAL_SPI_Transmit+0x144>
 80037dc:	e053      	b.n	8003886 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <HAL_SPI_Transmit+0x1c4>
 80037e6:	2316      	movs	r3, #22
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d145      	bne.n	800387c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003816:	e031      	b.n	800387c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d113      	bne.n	800384e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800384c:	e016      	b.n	800387c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384e:	f7fd fe87 	bl	8001560 <HAL_GetTick>
 8003852:	0002      	movs	r2, r0
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d802      	bhi.n	8003864 <HAL_SPI_Transmit+0x238>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	d102      	bne.n	800386a <HAL_SPI_Transmit+0x23e>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d108      	bne.n	800387c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800386a:	231f      	movs	r3, #31
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2203      	movs	r2, #3
 8003870:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	225d      	movs	r2, #93	@ 0x5d
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]
          goto error;
 800387a:	e02b      	b.n	80038d4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1c8      	bne.n	8003818 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	0018      	movs	r0, r3
 800388e:	f000 fcef 	bl	8004270 <SPI_EndRxTxTransaction>
 8003892:	1e03      	subs	r3, r0, #0
 8003894:	d002      	beq.n	800389c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80038c2:	231f      	movs	r3, #31
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e003      	b.n	80038d4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	225d      	movs	r2, #93	@ 0x5d
 80038d0:	2101      	movs	r1, #1
 80038d2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	225c      	movs	r2, #92	@ 0x5c
 80038d8:	2100      	movs	r1, #0
 80038da:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80038dc:	231f      	movs	r3, #31
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	781b      	ldrb	r3, [r3, #0]
}
 80038e2:	0018      	movs	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b008      	add	sp, #32
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b089      	sub	sp, #36	@ 0x24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	1dbb      	adds	r3, r7, #6
 80038fa:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038fc:	2117      	movs	r1, #23
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	225d      	movs	r2, #93	@ 0x5d
 8003908:	5c9b      	ldrb	r3, [r3, r2]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d003      	beq.n	8003918 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003910:	187b      	adds	r3, r7, r1
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
    goto error;
 8003916:	e12b      	b.n	8003b70 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	2382      	movs	r3, #130	@ 0x82
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	429a      	cmp	r2, r3
 8003922:	d113      	bne.n	800394c <HAL_SPI_Receive+0x60>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10f      	bne.n	800394c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	225d      	movs	r2, #93	@ 0x5d
 8003930:	2104      	movs	r1, #4
 8003932:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	881c      	ldrh	r4, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	0023      	movs	r3, r4
 8003944:	f000 f924 	bl	8003b90 <HAL_SPI_TransmitReceive>
 8003948:	0003      	movs	r3, r0
 800394a:	e118      	b.n	8003b7e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	225c      	movs	r2, #92	@ 0x5c
 8003950:	5c9b      	ldrb	r3, [r3, r2]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_SPI_Receive+0x6e>
 8003956:	2302      	movs	r3, #2
 8003958:	e111      	b.n	8003b7e <HAL_SPI_Receive+0x292>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	225c      	movs	r2, #92	@ 0x5c
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003962:	f7fd fdfd 	bl	8001560 <HAL_GetTick>
 8003966:	0003      	movs	r3, r0
 8003968:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_SPI_Receive+0x8c>
 8003970:	1dbb      	adds	r3, r7, #6
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003978:	2317      	movs	r3, #23
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003980:	e0f6      	b.n	8003b70 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	225d      	movs	r2, #93	@ 0x5d
 8003986:	2104      	movs	r1, #4
 8003988:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1dba      	adds	r2, r7, #6
 800399a:	2144      	movs	r1, #68	@ 0x44
 800399c:	8812      	ldrh	r2, [r2, #0]
 800399e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1dba      	adds	r2, r7, #6
 80039a4:	2146      	movs	r1, #70	@ 0x46
 80039a6:	8812      	ldrh	r2, [r2, #0]
 80039a8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	23e0      	movs	r3, #224	@ 0xe0
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d908      	bls.n	80039e6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	496a      	ldr	r1, [pc, #424]	@ (8003b88 <HAL_SPI_Receive+0x29c>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	e008      	b.n	80039f8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2180      	movs	r1, #128	@ 0x80
 80039f2:	0149      	lsls	r1, r1, #5
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d10f      	bne.n	8003a24 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2140      	movs	r1, #64	@ 0x40
 8003a10:	438a      	bics	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	495b      	ldr	r1, [pc, #364]	@ (8003b8c <HAL_SPI_Receive+0x2a0>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2240      	movs	r2, #64	@ 0x40
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d007      	beq.n	8003a42 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2140      	movs	r1, #64	@ 0x40
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	23e0      	movs	r3, #224	@ 0xe0
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d900      	bls.n	8003a50 <HAL_SPI_Receive+0x164>
 8003a4e:	e071      	b.n	8003b34 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a50:	e035      	b.n	8003abe <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d117      	bne.n	8003a90 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	001a      	movs	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2246      	movs	r2, #70	@ 0x46
 8003a80:	5a9b      	ldrh	r3, [r3, r2]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b299      	uxth	r1, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2246      	movs	r2, #70	@ 0x46
 8003a8c:	5299      	strh	r1, [r3, r2]
 8003a8e:	e016      	b.n	8003abe <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a90:	f7fd fd66 	bl	8001560 <HAL_GetTick>
 8003a94:	0002      	movs	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d802      	bhi.n	8003aa6 <HAL_SPI_Receive+0x1ba>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_SPI_Receive+0x1c0>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d108      	bne.n	8003abe <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003aac:	2317      	movs	r3, #23
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	225d      	movs	r2, #93	@ 0x5d
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5499      	strb	r1, [r3, r2]
          goto error;
 8003abc:	e058      	b.n	8003b70 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2246      	movs	r2, #70	@ 0x46
 8003ac2:	5a9b      	ldrh	r3, [r3, r2]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1c3      	bne.n	8003a52 <HAL_SPI_Receive+0x166>
 8003aca:	e039      	b.n	8003b40 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d115      	bne.n	8003b06 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2246      	movs	r2, #70	@ 0x46
 8003af6:	5a9b      	ldrh	r3, [r3, r2]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b299      	uxth	r1, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2246      	movs	r2, #70	@ 0x46
 8003b02:	5299      	strh	r1, [r3, r2]
 8003b04:	e016      	b.n	8003b34 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b06:	f7fd fd2b 	bl	8001560 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d802      	bhi.n	8003b1c <HAL_SPI_Receive+0x230>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	d102      	bne.n	8003b22 <HAL_SPI_Receive+0x236>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d108      	bne.n	8003b34 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003b22:	2317      	movs	r3, #23
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	2203      	movs	r2, #3
 8003b28:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	225d      	movs	r2, #93	@ 0x5d
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]
          goto error;
 8003b32:	e01d      	b.n	8003b70 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2246      	movs	r2, #70	@ 0x46
 8003b38:	5a9b      	ldrh	r3, [r3, r2]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1c5      	bne.n	8003acc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 fb34 	bl	80041b4 <SPI_EndRxTransaction>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d004      	beq.n	8003b68 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003b5e:	2317      	movs	r3, #23
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e003      	b.n	8003b70 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	225d      	movs	r2, #93	@ 0x5d
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	225c      	movs	r2, #92	@ 0x5c
 8003b74:	2100      	movs	r1, #0
 8003b76:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003b78:	2317      	movs	r3, #23
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b007      	add	sp, #28
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	ffffefff 	.word	0xffffefff
 8003b8c:	ffffbfff 	.word	0xffffbfff

08003b90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	1cbb      	adds	r3, r7, #2
 8003ba0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ba6:	2323      	movs	r3, #35	@ 0x23
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	225c      	movs	r2, #92	@ 0x5c
 8003bb2:	5c9b      	ldrb	r3, [r3, r2]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x2c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e1c4      	b.n	8003f46 <HAL_SPI_TransmitReceive+0x3b6>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	225c      	movs	r2, #92	@ 0x5c
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bc4:	f7fd fccc 	bl	8001560 <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bcc:	201b      	movs	r0, #27
 8003bce:	183b      	adds	r3, r7, r0
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	215d      	movs	r1, #93	@ 0x5d
 8003bd4:	5c52      	ldrb	r2, [r2, r1]
 8003bd6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003bde:	2312      	movs	r3, #18
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	1cba      	adds	r2, r7, #2
 8003be4:	8812      	ldrh	r2, [r2, #0]
 8003be6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003be8:	183b      	adds	r3, r7, r0
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d011      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x84>
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	2382      	movs	r3, #130	@ 0x82
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d107      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d103      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x7a>
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d004      	beq.n	8003c14 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003c0a:	2323      	movs	r3, #35	@ 0x23
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c12:	e191      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d006      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x98>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x98>
 8003c20:	1cbb      	adds	r3, r7, #2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003c28:	2323      	movs	r3, #35	@ 0x23
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c30:	e182      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	225d      	movs	r2, #93	@ 0x5d
 8003c36:	5c9b      	ldrb	r3, [r3, r2]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d003      	beq.n	8003c46 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	225d      	movs	r2, #93	@ 0x5d
 8003c42:	2105      	movs	r1, #5
 8003c44:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1cba      	adds	r2, r7, #2
 8003c56:	2146      	movs	r1, #70	@ 0x46
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1cba      	adds	r2, r7, #2
 8003c60:	2144      	movs	r1, #68	@ 0x44
 8003c62:	8812      	ldrh	r2, [r2, #0]
 8003c64:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1cba      	adds	r2, r7, #2
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1cba      	adds	r2, r7, #2
 8003c78:	8812      	ldrh	r2, [r2, #0]
 8003c7a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	23e0      	movs	r3, #224	@ 0xe0
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d908      	bls.n	8003ca6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	49ac      	ldr	r1, [pc, #688]	@ (8003f50 <HAL_SPI_TransmitReceive+0x3c0>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
 8003ca4:	e008      	b.n	8003cb8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2180      	movs	r1, #128	@ 0x80
 8003cb2:	0149      	lsls	r1, r1, #5
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2240      	movs	r2, #64	@ 0x40
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b40      	cmp	r3, #64	@ 0x40
 8003cc4:	d007      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2140      	movs	r1, #64	@ 0x40
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	23e0      	movs	r3, #224	@ 0xe0
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d800      	bhi.n	8003ce4 <HAL_SPI_TransmitReceive+0x154>
 8003ce2:	e083      	b.n	8003dec <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x168>
 8003cec:	2312      	movs	r3, #18
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d000      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x168>
 8003cf6:	e06d      	b.n	8003dd4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1c:	e05a      	b.n	8003dd4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d11b      	bne.n	8003d64 <HAL_SPI_TransmitReceive+0x1d4>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <HAL_SPI_TransmitReceive+0x1d4>
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d113      	bne.n	8003d64 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	881a      	ldrh	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d11c      	bne.n	8003dac <HAL_SPI_TransmitReceive+0x21c>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2246      	movs	r2, #70	@ 0x46
 8003d76:	5a9b      	ldrh	r3, [r3, r2]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	b292      	uxth	r2, r2
 8003d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	1c9a      	adds	r2, r3, #2
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2246      	movs	r2, #70	@ 0x46
 8003d9a:	5a9b      	ldrh	r3, [r3, r2]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b299      	uxth	r1, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2246      	movs	r2, #70	@ 0x46
 8003da6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003da8:	2301      	movs	r3, #1
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003dac:	f7fd fbd8 	bl	8001560 <HAL_GetTick>
 8003db0:	0002      	movs	r2, r0
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d80b      	bhi.n	8003dd4 <HAL_SPI_TransmitReceive+0x244>
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	d008      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003dc2:	2323      	movs	r3, #35	@ 0x23
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	225d      	movs	r2, #93	@ 0x5d
 8003dce:	2101      	movs	r1, #1
 8003dd0:	5499      	strb	r1, [r3, r2]
        goto error;
 8003dd2:	e0b1      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d19f      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x18e>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2246      	movs	r2, #70	@ 0x46
 8003de2:	5a9b      	ldrh	r3, [r3, r2]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d199      	bne.n	8003d1e <HAL_SPI_TransmitReceive+0x18e>
 8003dea:	e089      	b.n	8003f00 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x270>
 8003df4:	2312      	movs	r3, #18
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d000      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x270>
 8003dfe:	e074      	b.n	8003eea <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	7812      	ldrb	r2, [r2, #0]
 8003e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e26:	e060      	b.n	8003eea <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d11c      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x2e0>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x2e0>
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d114      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	330c      	adds	r3, #12
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2201      	movs	r2, #1
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d11e      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x32c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2246      	movs	r2, #70	@ 0x46
 8003e82:	5a9b      	ldrh	r3, [r3, r2]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	001a      	movs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	7812      	ldrb	r2, [r2, #0]
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2246      	movs	r2, #70	@ 0x46
 8003eaa:	5a9b      	ldrh	r3, [r3, r2]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b299      	uxth	r1, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2246      	movs	r2, #70	@ 0x46
 8003eb6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ebc:	f7fd fb50 	bl	8001560 <HAL_GetTick>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d802      	bhi.n	8003ed2 <HAL_SPI_TransmitReceive+0x342>
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	3301      	adds	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x348>
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003ed8:	2323      	movs	r3, #35	@ 0x23
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	2203      	movs	r2, #3
 8003ede:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	225d      	movs	r2, #93	@ 0x5d
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	5499      	strb	r1, [r3, r2]
        goto error;
 8003ee8:	e026      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d199      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x298>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2246      	movs	r2, #70	@ 0x46
 8003ef8:	5a9b      	ldrh	r3, [r3, r2]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d193      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 f9b2 	bl	8004270 <SPI_EndRxTxTransaction>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d006      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003f10:	2323      	movs	r3, #35	@ 0x23
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003f26:	2323      	movs	r3, #35	@ 0x23
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e003      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	225d      	movs	r2, #93	@ 0x5d
 8003f34:	2101      	movs	r1, #1
 8003f36:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	225c      	movs	r2, #92	@ 0x5c
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003f40:	2323      	movs	r3, #35	@ 0x23
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	781b      	ldrb	r3, [r3, #0]
}
 8003f46:	0018      	movs	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b00a      	add	sp, #40	@ 0x28
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	ffffefff 	.word	0xffffefff

08003f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	1dfb      	adds	r3, r7, #7
 8003f62:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f64:	f7fd fafc 	bl	8001560 <HAL_GetTick>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	18d3      	adds	r3, r2, r3
 8003f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f74:	f7fd faf4 	bl	8001560 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004068 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	015b      	lsls	r3, r3, #5
 8003f82:	0d1b      	lsrs	r3, r3, #20
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	4353      	muls	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8a:	e058      	b.n	800403e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	d055      	beq.n	800403e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f92:	f7fd fae5 	bl	8001560 <HAL_GetTick>
 8003f96:	0002      	movs	r2, r0
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d902      	bls.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d142      	bne.n	800402e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	21e0      	movs	r1, #224	@ 0xe0
 8003fb4:	438a      	bics	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	2382      	movs	r3, #130	@ 0x82
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d113      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x98>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d005      	beq.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d107      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2140      	movs	r1, #64	@ 0x40
 8003fe8:	438a      	bics	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d110      	bne.n	800401a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	491a      	ldr	r1, [pc, #104]	@ (800406c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004004:	400a      	ands	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2180      	movs	r1, #128	@ 0x80
 8004014:	0189      	lsls	r1, r1, #6
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	225d      	movs	r2, #93	@ 0x5d
 800401e:	2101      	movs	r1, #1
 8004020:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	225c      	movs	r2, #92	@ 0x5c
 8004026:	2100      	movs	r1, #0
 8004028:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e017      	b.n	800405e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	3b01      	subs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	425a      	negs	r2, r3
 800404e:	4153      	adcs	r3, r2
 8004050:	b2db      	uxtb	r3, r3
 8004052:	001a      	movs	r2, r3
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d197      	bne.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b008      	add	sp, #32
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	20000000 	.word	0x20000000
 800406c:	ffffdfff 	.word	0xffffdfff

08004070 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	@ 0x28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800407e:	2317      	movs	r3, #23
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004086:	f7fd fa6b 	bl	8001560 <HAL_GetTick>
 800408a:	0002      	movs	r2, r0
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	18d3      	adds	r3, r2, r3
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004096:	f7fd fa63 	bl	8001560 <HAL_GetTick>
 800409a:	0003      	movs	r3, r0
 800409c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80040a6:	4b41      	ldr	r3, [pc, #260]	@ (80041ac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	0013      	movs	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	00da      	lsls	r2, r3, #3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	0d1b      	lsrs	r3, r3, #20
 80040b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b8:	4353      	muls	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80040bc:	e068      	b.n	8004190 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	23c0      	movs	r3, #192	@ 0xc0
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d10a      	bne.n	80040de <SPI_WaitFifoStateUntilTimeout+0x6e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	2117      	movs	r1, #23
 80040d6:	187b      	adds	r3, r7, r1
 80040d8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	d055      	beq.n	8004190 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040e4:	f7fd fa3c 	bl	8001560 <HAL_GetTick>
 80040e8:	0002      	movs	r2, r0
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d902      	bls.n	80040fa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d142      	bne.n	8004180 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	21e0      	movs	r1, #224	@ 0xe0
 8004106:	438a      	bics	r2, r1
 8004108:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	2382      	movs	r3, #130	@ 0x82
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	429a      	cmp	r2, r3
 8004114:	d113      	bne.n	800413e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	429a      	cmp	r2, r3
 8004120:	d005      	beq.n	800412e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	429a      	cmp	r2, r3
 800412c:	d107      	bne.n	800413e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2140      	movs	r1, #64	@ 0x40
 800413a:	438a      	bics	r2, r1
 800413c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	019b      	lsls	r3, r3, #6
 8004146:	429a      	cmp	r2, r3
 8004148:	d110      	bne.n	800416c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4916      	ldr	r1, [pc, #88]	@ (80041b0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004156:	400a      	ands	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2180      	movs	r1, #128	@ 0x80
 8004166:	0189      	lsls	r1, r1, #6
 8004168:	430a      	orrs	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	225d      	movs	r2, #93	@ 0x5d
 8004170:	2101      	movs	r1, #1
 8004172:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	225c      	movs	r2, #92	@ 0x5c
 8004178:	2100      	movs	r1, #0
 800417a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e010      	b.n	80041a2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	3b01      	subs	r3, #1
 800418e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d18e      	bne.n	80040be <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b00a      	add	sp, #40	@ 0x28
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	20000000 	.word	0x20000000
 80041b0:	ffffdfff 	.word	0xffffdfff

080041b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	2382      	movs	r3, #130	@ 0x82
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d113      	bne.n	80041f4 <SPI_EndRxTransaction+0x40>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d005      	beq.n	80041e4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2140      	movs	r1, #64	@ 0x40
 80041f0:	438a      	bics	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	0013      	movs	r3, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	2180      	movs	r1, #128	@ 0x80
 8004202:	f7ff fea7 	bl	8003f54 <SPI_WaitFlagStateUntilTimeout>
 8004206:	1e03      	subs	r3, r0, #0
 8004208:	d007      	beq.n	800421a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800420e:	2220      	movs	r2, #32
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e026      	b.n	8004268 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	2382      	movs	r3, #130	@ 0x82
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	429a      	cmp	r2, r3
 8004224:	d11f      	bne.n	8004266 <SPI_EndRxTransaction+0xb2>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	2380      	movs	r3, #128	@ 0x80
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	429a      	cmp	r2, r3
 8004230:	d005      	beq.n	800423e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	2380      	movs	r3, #128	@ 0x80
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	429a      	cmp	r2, r3
 800423c:	d113      	bne.n	8004266 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	23c0      	movs	r3, #192	@ 0xc0
 8004242:	00d9      	lsls	r1, r3, #3
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	0013      	movs	r3, r2
 800424c:	2200      	movs	r2, #0
 800424e:	f7ff ff0f 	bl	8004070 <SPI_WaitFifoStateUntilTimeout>
 8004252:	1e03      	subs	r3, r0, #0
 8004254:	d007      	beq.n	8004266 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800425a:	2220      	movs	r2, #32
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e000      	b.n	8004268 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b004      	add	sp, #16
 800426e:	bd80      	pop	{r7, pc}

08004270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	23c0      	movs	r3, #192	@ 0xc0
 8004280:	0159      	lsls	r1, r3, #5
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	0013      	movs	r3, r2
 800428a:	2200      	movs	r2, #0
 800428c:	f7ff fef0 	bl	8004070 <SPI_WaitFifoStateUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d007      	beq.n	80042a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004298:	2220      	movs	r2, #32
 800429a:	431a      	orrs	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e027      	b.n	80042f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	0013      	movs	r3, r2
 80042ae:	2200      	movs	r2, #0
 80042b0:	2180      	movs	r1, #128	@ 0x80
 80042b2:	f7ff fe4f 	bl	8003f54 <SPI_WaitFlagStateUntilTimeout>
 80042b6:	1e03      	subs	r3, r0, #0
 80042b8:	d007      	beq.n	80042ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042be:	2220      	movs	r2, #32
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e014      	b.n	80042f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	23c0      	movs	r3, #192	@ 0xc0
 80042ce:	00d9      	lsls	r1, r3, #3
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	0013      	movs	r3, r2
 80042d8:	2200      	movs	r2, #0
 80042da:	f7ff fec9 	bl	8004070 <SPI_WaitFifoStateUntilTimeout>
 80042de:	1e03      	subs	r3, r0, #0
 80042e0:	d007      	beq.n	80042f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e6:	2220      	movs	r2, #32
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e000      	b.n	80042f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e046      	b.n	800439c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2288      	movs	r2, #136	@ 0x88
 8004312:	589b      	ldr	r3, [r3, r2]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2284      	movs	r2, #132	@ 0x84
 800431c:	2100      	movs	r1, #0
 800431e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f7fc ff60 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2288      	movs	r2, #136	@ 0x88
 800432c:	2124      	movs	r1, #36	@ 0x24
 800432e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2101      	movs	r1, #1
 800433c:	438a      	bics	r2, r1
 800433e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	0018      	movs	r0, r3
 800434c:	f000 fa8a 	bl	8004864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0018      	movs	r0, r3
 8004354:	f000 f8cc 	bl	80044f0 <UART_SetConfig>
 8004358:	0003      	movs	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e01c      	b.n	800439c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	490d      	ldr	r1, [pc, #52]	@ (80043a4 <HAL_UART_Init+0xa8>)
 800436e:	400a      	ands	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	212a      	movs	r1, #42	@ 0x2a
 800437e:	438a      	bics	r2, r1
 8004380:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2101      	movs	r1, #1
 800438e:	430a      	orrs	r2, r1
 8004390:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f000 fb19 	bl	80049cc <UART_CheckIdleState>
 800439a:	0003      	movs	r3, r0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b002      	add	sp, #8
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	ffffb7ff 	.word	0xffffb7ff

080043a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	1dbb      	adds	r3, r7, #6
 80043b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2288      	movs	r2, #136	@ 0x88
 80043bc:	589b      	ldr	r3, [r3, r2]
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d000      	beq.n	80043c4 <HAL_UART_Transmit+0x1c>
 80043c2:	e090      	b.n	80044e6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_UART_Transmit+0x2a>
 80043ca:	1dbb      	adds	r3, r7, #6
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e088      	b.n	80044e8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	015b      	lsls	r3, r3, #5
 80043de:	429a      	cmp	r2, r3
 80043e0:	d109      	bne.n	80043f6 <HAL_UART_Transmit+0x4e>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2201      	movs	r2, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	d001      	beq.n	80043f6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e078      	b.n	80044e8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2290      	movs	r2, #144	@ 0x90
 80043fa:	2100      	movs	r1, #0
 80043fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2288      	movs	r2, #136	@ 0x88
 8004402:	2121      	movs	r1, #33	@ 0x21
 8004404:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004406:	f7fd f8ab 	bl	8001560 <HAL_GetTick>
 800440a:	0003      	movs	r3, r0
 800440c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1dba      	adds	r2, r7, #6
 8004412:	2154      	movs	r1, #84	@ 0x54
 8004414:	8812      	ldrh	r2, [r2, #0]
 8004416:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1dba      	adds	r2, r7, #6
 800441c:	2156      	movs	r1, #86	@ 0x56
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	2380      	movs	r3, #128	@ 0x80
 8004428:	015b      	lsls	r3, r3, #5
 800442a:	429a      	cmp	r2, r3
 800442c:	d108      	bne.n	8004440 <HAL_UART_Transmit+0x98>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e003      	b.n	8004448 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004448:	e030      	b.n	80044ac <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	0013      	movs	r3, r2
 8004454:	2200      	movs	r2, #0
 8004456:	2180      	movs	r1, #128	@ 0x80
 8004458:	f000 fb62 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 800445c:	1e03      	subs	r3, r0, #0
 800445e:	d005      	beq.n	800446c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2288      	movs	r2, #136	@ 0x88
 8004464:	2120      	movs	r1, #32
 8004466:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e03d      	b.n	80044e8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	001a      	movs	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	05d2      	lsls	r2, r2, #23
 800447e:	0dd2      	lsrs	r2, r2, #23
 8004480:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3302      	adds	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e007      	b.n	800449a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3301      	adds	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2256      	movs	r2, #86	@ 0x56
 800449e:	5a9b      	ldrh	r3, [r3, r2]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b299      	uxth	r1, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2256      	movs	r2, #86	@ 0x56
 80044aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2256      	movs	r2, #86	@ 0x56
 80044b0:	5a9b      	ldrh	r3, [r3, r2]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1c8      	bne.n	800444a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	0013      	movs	r3, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	2140      	movs	r1, #64	@ 0x40
 80044c6:	f000 fb2b 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 80044ca:	1e03      	subs	r3, r0, #0
 80044cc:	d005      	beq.n	80044da <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2288      	movs	r2, #136	@ 0x88
 80044d2:	2120      	movs	r1, #32
 80044d4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e006      	b.n	80044e8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2288      	movs	r2, #136	@ 0x88
 80044de:	2120      	movs	r1, #32
 80044e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b008      	add	sp, #32
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b092      	sub	sp, #72	@ 0x48
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f8:	231f      	movs	r3, #31
 80044fa:	2220      	movs	r2, #32
 80044fc:	189b      	adds	r3, r3, r2
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	431a      	orrs	r2, r3
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	431a      	orrs	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4313      	orrs	r3, r2
 800451a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4ac6      	ldr	r2, [pc, #792]	@ (800483c <UART_SetConfig+0x34c>)
 8004524:	4013      	ands	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800452e:	430b      	orrs	r3, r1
 8004530:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4ac1      	ldr	r2, [pc, #772]	@ (8004840 <UART_SetConfig+0x350>)
 800453a:	4013      	ands	r3, r2
 800453c:	0018      	movs	r0, r3
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	68d9      	ldr	r1, [r3, #12]
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	0003      	movs	r3, r0
 8004548:	430b      	orrs	r3, r1
 800454a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4abb      	ldr	r2, [pc, #748]	@ (8004844 <UART_SetConfig+0x354>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <UART_SetConfig+0x80>
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4ab9      	ldr	r2, [pc, #740]	@ (8004848 <UART_SetConfig+0x358>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800456c:	4313      	orrs	r3, r2
 800456e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	4ab5      	ldr	r2, [pc, #724]	@ (800484c <UART_SetConfig+0x35c>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004582:	430b      	orrs	r3, r1
 8004584:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	220f      	movs	r2, #15
 800458e:	4393      	bics	r3, r2
 8004590:	0018      	movs	r0, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	0003      	movs	r3, r0
 800459c:	430b      	orrs	r3, r1
 800459e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4aaa      	ldr	r2, [pc, #680]	@ (8004850 <UART_SetConfig+0x360>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d102      	bne.n	80045b0 <UART_SetConfig+0xc0>
 80045aa:	2301      	movs	r3, #1
 80045ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ae:	e02b      	b.n	8004608 <UART_SetConfig+0x118>
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4aa7      	ldr	r2, [pc, #668]	@ (8004854 <UART_SetConfig+0x364>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d102      	bne.n	80045c0 <UART_SetConfig+0xd0>
 80045ba:	2302      	movs	r3, #2
 80045bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80045be:	e023      	b.n	8004608 <UART_SetConfig+0x118>
 80045c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4aa4      	ldr	r2, [pc, #656]	@ (8004858 <UART_SetConfig+0x368>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d103      	bne.n	80045d2 <UART_SetConfig+0xe2>
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	025b      	lsls	r3, r3, #9
 80045ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80045d0:	e01a      	b.n	8004608 <UART_SetConfig+0x118>
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4aa1      	ldr	r2, [pc, #644]	@ (800485c <UART_SetConfig+0x36c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <UART_SetConfig+0xf4>
 80045dc:	2380      	movs	r3, #128	@ 0x80
 80045de:	029b      	lsls	r3, r3, #10
 80045e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045e2:	e011      	b.n	8004608 <UART_SetConfig+0x118>
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a96      	ldr	r2, [pc, #600]	@ (8004844 <UART_SetConfig+0x354>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d102      	bne.n	80045f4 <UART_SetConfig+0x104>
 80045ee:	2310      	movs	r3, #16
 80045f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045f2:	e009      	b.n	8004608 <UART_SetConfig+0x118>
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a93      	ldr	r2, [pc, #588]	@ (8004848 <UART_SetConfig+0x358>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d102      	bne.n	8004604 <UART_SetConfig+0x114>
 80045fe:	2308      	movs	r3, #8
 8004600:	643b      	str	r3, [r7, #64]	@ 0x40
 8004602:	e001      	b.n	8004608 <UART_SetConfig+0x118>
 8004604:	2300      	movs	r3, #0
 8004606:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a8d      	ldr	r2, [pc, #564]	@ (8004844 <UART_SetConfig+0x354>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d005      	beq.n	800461e <UART_SetConfig+0x12e>
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a8c      	ldr	r2, [pc, #560]	@ (8004848 <UART_SetConfig+0x358>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d000      	beq.n	800461e <UART_SetConfig+0x12e>
 800461c:	e06f      	b.n	80046fe <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800461e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004620:	0018      	movs	r0, r3
 8004622:	f7fe fa6f 	bl	8002b04 <HAL_RCCEx_GetPeriphCLKFreq>
 8004626:	0003      	movs	r3, r0
 8004628:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 800462a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462c:	2b00      	cmp	r3, #0
 800462e:	d100      	bne.n	8004632 <UART_SetConfig+0x142>
 8004630:	e0ec      	b.n	800480c <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004636:	4b8a      	ldr	r3, [pc, #552]	@ (8004860 <UART_SetConfig+0x370>)
 8004638:	0052      	lsls	r2, r2, #1
 800463a:	5ad3      	ldrh	r3, [r2, r3]
 800463c:	0019      	movs	r1, r3
 800463e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004640:	f7fb fd74 	bl	800012c <__udivsi3>
 8004644:	0003      	movs	r3, r0
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	0013      	movs	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	189b      	adds	r3, r3, r2
 8004652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004654:	429a      	cmp	r2, r3
 8004656:	d305      	bcc.n	8004664 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800465e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004660:	429a      	cmp	r2, r3
 8004662:	d906      	bls.n	8004672 <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8004664:	231f      	movs	r3, #31
 8004666:	2220      	movs	r2, #32
 8004668:	189b      	adds	r3, r3, r2
 800466a:	19db      	adds	r3, r3, r7
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e044      	b.n	80046fc <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800467e:	4b78      	ldr	r3, [pc, #480]	@ (8004860 <UART_SetConfig+0x370>)
 8004680:	0052      	lsls	r2, r2, #1
 8004682:	5ad3      	ldrh	r3, [r2, r3]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	69b8      	ldr	r0, [r7, #24]
 8004690:	69f9      	ldr	r1, [r7, #28]
 8004692:	f7fb fec1 	bl	8000418 <__aeabi_uldivmod>
 8004696:	0002      	movs	r2, r0
 8004698:	000b      	movs	r3, r1
 800469a:	0e11      	lsrs	r1, r2, #24
 800469c:	021d      	lsls	r5, r3, #8
 800469e:	430d      	orrs	r5, r1
 80046a0:	0214      	lsls	r4, r2, #8
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	68f9      	ldr	r1, [r7, #12]
 80046b2:	1900      	adds	r0, r0, r4
 80046b4:	4169      	adcs	r1, r5
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	2300      	movs	r3, #0
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f7fb fea8 	bl	8000418 <__aeabi_uldivmod>
 80046c8:	0002      	movs	r2, r0
 80046ca:	000b      	movs	r3, r1
 80046cc:	0013      	movs	r3, r2
 80046ce:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046d2:	23c0      	movs	r3, #192	@ 0xc0
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d309      	bcc.n	80046ee <UART_SetConfig+0x1fe>
 80046da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046dc:	2380      	movs	r3, #128	@ 0x80
 80046de:	035b      	lsls	r3, r3, #13
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d204      	bcs.n	80046ee <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046ea:	60da      	str	r2, [r3, #12]
 80046ec:	e006      	b.n	80046fc <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 80046ee:	231f      	movs	r3, #31
 80046f0:	2220      	movs	r2, #32
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	19db      	adds	r3, r3, r7
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80046fa:	e087      	b.n	800480c <UART_SetConfig+0x31c>
 80046fc:	e086      	b.n	800480c <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	2380      	movs	r3, #128	@ 0x80
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	429a      	cmp	r2, r3
 8004708:	d14c      	bne.n	80047a4 <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800470a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800470c:	0018      	movs	r0, r3
 800470e:	f7fe f9f9 	bl	8002b04 <HAL_RCCEx_GetPeriphCLKFreq>
 8004712:	0003      	movs	r3, r0
 8004714:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d100      	bne.n	800471e <UART_SetConfig+0x22e>
 800471c:	e076      	b.n	800480c <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004722:	4b4f      	ldr	r3, [pc, #316]	@ (8004860 <UART_SetConfig+0x370>)
 8004724:	0052      	lsls	r2, r2, #1
 8004726:	5ad3      	ldrh	r3, [r2, r3]
 8004728:	0019      	movs	r1, r3
 800472a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800472c:	f7fb fcfe 	bl	800012c <__udivsi3>
 8004730:	0003      	movs	r3, r0
 8004732:	005a      	lsls	r2, r3, #1
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	18d2      	adds	r2, r2, r3
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0019      	movs	r1, r3
 8004742:	0010      	movs	r0, r2
 8004744:	f7fb fcf2 	bl	800012c <__udivsi3>
 8004748:	0003      	movs	r3, r0
 800474a:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800474c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474e:	2b0f      	cmp	r3, #15
 8004750:	d921      	bls.n	8004796 <UART_SetConfig+0x2a6>
 8004752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004754:	2380      	movs	r3, #128	@ 0x80
 8004756:	025b      	lsls	r3, r3, #9
 8004758:	429a      	cmp	r2, r3
 800475a:	d21c      	bcs.n	8004796 <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800475c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475e:	b29a      	uxth	r2, r3
 8004760:	2012      	movs	r0, #18
 8004762:	2420      	movs	r4, #32
 8004764:	1903      	adds	r3, r0, r4
 8004766:	19db      	adds	r3, r3, r7
 8004768:	210f      	movs	r1, #15
 800476a:	438a      	bics	r2, r1
 800476c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800476e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	b29b      	uxth	r3, r3
 8004774:	2207      	movs	r2, #7
 8004776:	4013      	ands	r3, r2
 8004778:	b299      	uxth	r1, r3
 800477a:	1903      	adds	r3, r0, r4
 800477c:	19db      	adds	r3, r3, r7
 800477e:	1902      	adds	r2, r0, r4
 8004780:	19d2      	adds	r2, r2, r7
 8004782:	8812      	ldrh	r2, [r2, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	1902      	adds	r2, r0, r4
 800478e:	19d2      	adds	r2, r2, r7
 8004790:	8812      	ldrh	r2, [r2, #0]
 8004792:	60da      	str	r2, [r3, #12]
 8004794:	e03a      	b.n	800480c <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004796:	231f      	movs	r3, #31
 8004798:	2220      	movs	r2, #32
 800479a:	189b      	adds	r3, r3, r2
 800479c:	19db      	adds	r3, r3, r7
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e033      	b.n	800480c <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80047a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a6:	0018      	movs	r0, r3
 80047a8:	f7fe f9ac 	bl	8002b04 <HAL_RCCEx_GetPeriphCLKFreq>
 80047ac:	0003      	movs	r3, r0
 80047ae:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d02a      	beq.n	800480c <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ba:	4b29      	ldr	r3, [pc, #164]	@ (8004860 <UART_SetConfig+0x370>)
 80047bc:	0052      	lsls	r2, r2, #1
 80047be:	5ad3      	ldrh	r3, [r2, r3]
 80047c0:	0019      	movs	r1, r3
 80047c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80047c4:	f7fb fcb2 	bl	800012c <__udivsi3>
 80047c8:	0003      	movs	r3, r0
 80047ca:	001a      	movs	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	085b      	lsrs	r3, r3, #1
 80047d2:	18d2      	adds	r2, r2, r3
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	0019      	movs	r1, r3
 80047da:	0010      	movs	r0, r2
 80047dc:	f7fb fca6 	bl	800012c <__udivsi3>
 80047e0:	0003      	movs	r3, r0
 80047e2:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	d90a      	bls.n	8004800 <UART_SetConfig+0x310>
 80047ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	025b      	lsls	r3, r3, #9
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d205      	bcs.n	8004800 <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	e005      	b.n	800480c <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8004800:	231f      	movs	r3, #31
 8004802:	2220      	movs	r2, #32
 8004804:	189b      	adds	r3, r3, r2
 8004806:	19db      	adds	r3, r3, r7
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	226a      	movs	r2, #106	@ 0x6a
 8004810:	2101      	movs	r1, #1
 8004812:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	2268      	movs	r2, #104	@ 0x68
 8004818:	2101      	movs	r1, #1
 800481a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	2200      	movs	r2, #0
 8004820:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	2200      	movs	r2, #0
 8004826:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004828:	231f      	movs	r3, #31
 800482a:	2220      	movs	r2, #32
 800482c:	189b      	adds	r3, r3, r2
 800482e:	19db      	adds	r3, r3, r7
 8004830:	781b      	ldrb	r3, [r3, #0]
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	b012      	add	sp, #72	@ 0x48
 8004838:	bdb0      	pop	{r4, r5, r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	cfff69f3 	.word	0xcfff69f3
 8004840:	ffffcfff 	.word	0xffffcfff
 8004844:	40008000 	.word	0x40008000
 8004848:	40008400 	.word	0x40008400
 800484c:	11fff4ff 	.word	0x11fff4ff
 8004850:	40013800 	.word	0x40013800
 8004854:	40004400 	.word	0x40004400
 8004858:	40004800 	.word	0x40004800
 800485c:	40004c00 	.word	0x40004c00
 8004860:	080069bc 	.word	0x080069bc

08004864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	2208      	movs	r2, #8
 8004872:	4013      	ands	r3, r2
 8004874:	d00b      	beq.n	800488e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a4a      	ldr	r2, [pc, #296]	@ (80049a8 <UART_AdvFeatureConfig+0x144>)
 800487e:	4013      	ands	r3, r2
 8004880:	0019      	movs	r1, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004892:	2201      	movs	r2, #1
 8004894:	4013      	ands	r3, r2
 8004896:	d00b      	beq.n	80048b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a43      	ldr	r2, [pc, #268]	@ (80049ac <UART_AdvFeatureConfig+0x148>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	0019      	movs	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	2202      	movs	r2, #2
 80048b6:	4013      	ands	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a3b      	ldr	r2, [pc, #236]	@ (80049b0 <UART_AdvFeatureConfig+0x14c>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	2204      	movs	r2, #4
 80048d8:	4013      	ands	r3, r2
 80048da:	d00b      	beq.n	80048f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4a34      	ldr	r2, [pc, #208]	@ (80049b4 <UART_AdvFeatureConfig+0x150>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	2210      	movs	r2, #16
 80048fa:	4013      	ands	r3, r2
 80048fc:	d00b      	beq.n	8004916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <UART_AdvFeatureConfig+0x154>)
 8004906:	4013      	ands	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491a:	2220      	movs	r2, #32
 800491c:	4013      	ands	r3, r2
 800491e:	d00b      	beq.n	8004938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4a25      	ldr	r2, [pc, #148]	@ (80049bc <UART_AdvFeatureConfig+0x158>)
 8004928:	4013      	ands	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	2240      	movs	r2, #64	@ 0x40
 800493e:	4013      	ands	r3, r2
 8004940:	d01d      	beq.n	800497e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <UART_AdvFeatureConfig+0x15c>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800495e:	2380      	movs	r3, #128	@ 0x80
 8004960:	035b      	lsls	r3, r3, #13
 8004962:	429a      	cmp	r2, r3
 8004964:	d10b      	bne.n	800497e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <UART_AdvFeatureConfig+0x160>)
 800496e:	4013      	ands	r3, r2
 8004970:	0019      	movs	r1, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004982:	2280      	movs	r2, #128	@ 0x80
 8004984:	4013      	ands	r3, r2
 8004986:	d00b      	beq.n	80049a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a0e      	ldr	r2, [pc, #56]	@ (80049c8 <UART_AdvFeatureConfig+0x164>)
 8004990:	4013      	ands	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	605a      	str	r2, [r3, #4]
  }
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	ffff7fff 	.word	0xffff7fff
 80049ac:	fffdffff 	.word	0xfffdffff
 80049b0:	fffeffff 	.word	0xfffeffff
 80049b4:	fffbffff 	.word	0xfffbffff
 80049b8:	ffffefff 	.word	0xffffefff
 80049bc:	ffffdfff 	.word	0xffffdfff
 80049c0:	ffefffff 	.word	0xffefffff
 80049c4:	ff9fffff 	.word	0xff9fffff
 80049c8:	fff7ffff 	.word	0xfff7ffff

080049cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b092      	sub	sp, #72	@ 0x48
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2290      	movs	r2, #144	@ 0x90
 80049d8:	2100      	movs	r1, #0
 80049da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049dc:	f7fc fdc0 	bl	8001560 <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2208      	movs	r2, #8
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d12d      	bne.n	8004a4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049f4:	2280      	movs	r2, #128	@ 0x80
 80049f6:	0391      	lsls	r1, r2, #14
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4a47      	ldr	r2, [pc, #284]	@ (8004b18 <UART_CheckIdleState+0x14c>)
 80049fc:	9200      	str	r2, [sp, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f000 f88e 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 8004a04:	1e03      	subs	r3, r0, #0
 8004a06:	d022      	beq.n	8004a4e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a08:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a12:	2301      	movs	r3, #1
 8004a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	f383 8810 	msr	PRIMASK, r3
}
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2180      	movs	r1, #128	@ 0x80
 8004a2a:	438a      	bics	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2288      	movs	r2, #136	@ 0x88
 8004a3e:	2120      	movs	r1, #32
 8004a40:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2284      	movs	r2, #132	@ 0x84
 8004a46:	2100      	movs	r1, #0
 8004a48:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e060      	b.n	8004b10 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2204      	movs	r2, #4
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d146      	bne.n	8004aea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5e:	2280      	movs	r2, #128	@ 0x80
 8004a60:	03d1      	lsls	r1, r2, #15
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4a2c      	ldr	r2, [pc, #176]	@ (8004b18 <UART_CheckIdleState+0x14c>)
 8004a66:	9200      	str	r2, [sp, #0]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f000 f859 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 8004a6e:	1e03      	subs	r3, r0, #0
 8004a70:	d03b      	beq.n	8004aea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a72:	f3ef 8310 	mrs	r3, PRIMASK
 8004a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a78:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f383 8810 	msr	PRIMASK, r3
}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4922      	ldr	r1, [pc, #136]	@ (8004b1c <UART_CheckIdleState+0x150>)
 8004a94:	400a      	ands	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f383 8810 	msr	PRIMASK, r3
}
 8004ab8:	46c0      	nop			@ (mov r8, r8)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	438a      	bics	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	f383 8810 	msr	PRIMASK, r3
}
 8004ad4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	228c      	movs	r2, #140	@ 0x8c
 8004ada:	2120      	movs	r1, #32
 8004adc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2284      	movs	r2, #132	@ 0x84
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e012      	b.n	8004b10 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2288      	movs	r2, #136	@ 0x88
 8004aee:	2120      	movs	r1, #32
 8004af0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	228c      	movs	r2, #140	@ 0x8c
 8004af6:	2120      	movs	r1, #32
 8004af8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2284      	movs	r2, #132	@ 0x84
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	0018      	movs	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b010      	add	sp, #64	@ 0x40
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	01ffffff 	.word	0x01ffffff
 8004b1c:	fffffedf 	.word	0xfffffedf

08004b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b30:	e051      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	3301      	adds	r3, #1
 8004b36:	d04e      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b38:	f7fc fd12 	bl	8001560 <HAL_GetTick>
 8004b3c:	0002      	movs	r2, r0
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e051      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b80      	cmp	r3, #128	@ 0x80
 8004b62:	d038      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b40      	cmp	r3, #64	@ 0x40
 8004b68:	d035      	beq.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	2208      	movs	r2, #8
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d111      	bne.n	8004b9c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 f83c 	bl	8004c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2290      	movs	r2, #144	@ 0x90
 8004b8c:	2108      	movs	r1, #8
 8004b8e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2284      	movs	r2, #132	@ 0x84
 8004b94:	2100      	movs	r1, #0
 8004b96:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e02c      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	2380      	movs	r3, #128	@ 0x80
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d112      	bne.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2280      	movs	r2, #128	@ 0x80
 8004bb6:	0112      	lsls	r2, r2, #4
 8004bb8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f81f 	bl	8004c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2290      	movs	r2, #144	@ 0x90
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2284      	movs	r2, #132	@ 0x84
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e00f      	b.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	425a      	negs	r2, r3
 8004be6:	4153      	adcs	r3, r2
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	001a      	movs	r2, r3
 8004bec:	1dfb      	adds	r3, r7, #7
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d09e      	beq.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b004      	add	sp, #16
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08e      	sub	sp, #56	@ 0x38
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c08:	f3ef 8310 	mrs	r3, PRIMASK
 8004c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c12:	2301      	movs	r3, #1
 8004c14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f383 8810 	msr	PRIMASK, r3
}
 8004c1c:	46c0      	nop			@ (mov r8, r8)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4926      	ldr	r1, [pc, #152]	@ (8004cc4 <UART_EndRxTransfer+0xc4>)
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f383 8810 	msr	PRIMASK, r3
}
 8004c38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c3e:	623b      	str	r3, [r7, #32]
  return(result);
 8004c40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c42:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c44:	2301      	movs	r3, #1
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	f383 8810 	msr	PRIMASK, r3
}
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	491b      	ldr	r1, [pc, #108]	@ (8004cc8 <UART_EndRxTransfer+0xc8>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	f383 8810 	msr	PRIMASK, r3
}
 8004c6a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d118      	bne.n	8004ca6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c74:	f3ef 8310 	mrs	r3, PRIMASK
 8004c78:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c7e:	2301      	movs	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f383 8810 	msr	PRIMASK, r3
}
 8004c88:	46c0      	nop			@ (mov r8, r8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2110      	movs	r1, #16
 8004c96:	438a      	bics	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f383 8810 	msr	PRIMASK, r3
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	228c      	movs	r2, #140	@ 0x8c
 8004caa:	2120      	movs	r1, #32
 8004cac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b00e      	add	sp, #56	@ 0x38
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	fffffedf 	.word	0xfffffedf
 8004cc8:	effffffe 	.word	0xeffffffe

08004ccc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2284      	movs	r2, #132	@ 0x84
 8004cd8:	5c9b      	ldrb	r3, [r3, r2]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e027      	b.n	8004d32 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2284      	movs	r2, #132	@ 0x84
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2288      	movs	r2, #136	@ 0x88
 8004cee:	2124      	movs	r1, #36	@ 0x24
 8004cf0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2101      	movs	r1, #1
 8004d06:	438a      	bics	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d3c <HAL_UARTEx_DisableFifoMode+0x70>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2288      	movs	r2, #136	@ 0x88
 8004d24:	2120      	movs	r1, #32
 8004d26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2284      	movs	r2, #132	@ 0x84
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	0018      	movs	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	dfffffff 	.word	0xdfffffff

08004d40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2284      	movs	r2, #132	@ 0x84
 8004d4e:	5c9b      	ldrb	r3, [r3, r2]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e02e      	b.n	8004db6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2284      	movs	r2, #132	@ 0x84
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2288      	movs	r2, #136	@ 0x88
 8004d64:	2124      	movs	r1, #36	@ 0x24
 8004d66:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	438a      	bics	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	08d9      	lsrs	r1, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	0018      	movs	r0, r3
 8004d98:	f000 f854 	bl	8004e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2288      	movs	r2, #136	@ 0x88
 8004da8:	2120      	movs	r1, #32
 8004daa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2284      	movs	r2, #132	@ 0x84
 8004db0:	2100      	movs	r1, #0
 8004db2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2284      	movs	r2, #132	@ 0x84
 8004dce:	5c9b      	ldrb	r3, [r3, r2]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e02f      	b.n	8004e38 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2284      	movs	r2, #132	@ 0x84
 8004ddc:	2101      	movs	r1, #1
 8004dde:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2288      	movs	r2, #136	@ 0x88
 8004de4:	2124      	movs	r1, #36	@ 0x24
 8004de6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4a0e      	ldr	r2, [pc, #56]	@ (8004e40 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f000 f813 	bl	8004e44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2288      	movs	r2, #136	@ 0x88
 8004e2a:	2120      	movs	r1, #32
 8004e2c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2284      	movs	r2, #132	@ 0x84
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	f1ffffff 	.word	0xf1ffffff

08004e44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d108      	bne.n	8004e66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	226a      	movs	r2, #106	@ 0x6a
 8004e58:	2101      	movs	r1, #1
 8004e5a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2268      	movs	r2, #104	@ 0x68
 8004e60:	2101      	movs	r1, #1
 8004e62:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e64:	e043      	b.n	8004eee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e66:	260f      	movs	r6, #15
 8004e68:	19bb      	adds	r3, r7, r6
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e6e:	200e      	movs	r0, #14
 8004e70:	183b      	adds	r3, r7, r0
 8004e72:	2208      	movs	r2, #8
 8004e74:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	0e5b      	lsrs	r3, r3, #25
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	240d      	movs	r4, #13
 8004e82:	193b      	adds	r3, r7, r4
 8004e84:	2107      	movs	r1, #7
 8004e86:	400a      	ands	r2, r1
 8004e88:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	0f5b      	lsrs	r3, r3, #29
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	250c      	movs	r5, #12
 8004e96:	197b      	adds	r3, r7, r5
 8004e98:	2107      	movs	r1, #7
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e9e:	183b      	adds	r3, r7, r0
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	197a      	adds	r2, r7, r5
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	4914      	ldr	r1, [pc, #80]	@ (8004ef8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ea8:	5c8a      	ldrb	r2, [r1, r2]
 8004eaa:	435a      	muls	r2, r3
 8004eac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eae:	197b      	adds	r3, r7, r5
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	4a12      	ldr	r2, [pc, #72]	@ (8004efc <UARTEx_SetNbDataToProcess+0xb8>)
 8004eb4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	f7fb f9c2 	bl	8000240 <__divsi3>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	b299      	uxth	r1, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	226a      	movs	r2, #106	@ 0x6a
 8004ec4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ec6:	19bb      	adds	r3, r7, r6
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	193a      	adds	r2, r7, r4
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	490a      	ldr	r1, [pc, #40]	@ (8004ef8 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ed0:	5c8a      	ldrb	r2, [r1, r2]
 8004ed2:	435a      	muls	r2, r3
 8004ed4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ed6:	193b      	adds	r3, r7, r4
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <UARTEx_SetNbDataToProcess+0xb8>)
 8004edc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ede:	0019      	movs	r1, r3
 8004ee0:	f7fb f9ae 	bl	8000240 <__divsi3>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	b299      	uxth	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2268      	movs	r2, #104	@ 0x68
 8004eec:	5299      	strh	r1, [r3, r2]
}
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b005      	add	sp, #20
 8004ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	080069d4 	.word	0x080069d4
 8004efc:	080069dc 	.word	0x080069dc

08004f00 <std>:
 8004f00:	2300      	movs	r3, #0
 8004f02:	b510      	push	{r4, lr}
 8004f04:	0004      	movs	r4, r0
 8004f06:	6003      	str	r3, [r0, #0]
 8004f08:	6043      	str	r3, [r0, #4]
 8004f0a:	6083      	str	r3, [r0, #8]
 8004f0c:	8181      	strh	r1, [r0, #12]
 8004f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f10:	81c2      	strh	r2, [r0, #14]
 8004f12:	6103      	str	r3, [r0, #16]
 8004f14:	6143      	str	r3, [r0, #20]
 8004f16:	6183      	str	r3, [r0, #24]
 8004f18:	0019      	movs	r1, r3
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	305c      	adds	r0, #92	@ 0x5c
 8004f1e:	f000 fa43 	bl	80053a8 <memset>
 8004f22:	4b0b      	ldr	r3, [pc, #44]	@ (8004f50 <std+0x50>)
 8004f24:	6224      	str	r4, [r4, #32]
 8004f26:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f28:	4b0a      	ldr	r3, [pc, #40]	@ (8004f54 <std+0x54>)
 8004f2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <std+0x58>)
 8004f2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f30:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <std+0x5c>)
 8004f32:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <std+0x60>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	d005      	beq.n	8004f46 <std+0x46>
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <std+0x64>)
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	d002      	beq.n	8004f46 <std+0x46>
 8004f40:	4b09      	ldr	r3, [pc, #36]	@ (8004f68 <std+0x68>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d103      	bne.n	8004f4e <std+0x4e>
 8004f46:	0020      	movs	r0, r4
 8004f48:	3058      	adds	r0, #88	@ 0x58
 8004f4a:	f000 faad 	bl	80054a8 <__retarget_lock_init_recursive>
 8004f4e:	bd10      	pop	{r4, pc}
 8004f50:	080051d1 	.word	0x080051d1
 8004f54:	080051f9 	.word	0x080051f9
 8004f58:	08005231 	.word	0x08005231
 8004f5c:	0800525d 	.word	0x0800525d
 8004f60:	20000184 	.word	0x20000184
 8004f64:	200001ec 	.word	0x200001ec
 8004f68:	20000254 	.word	0x20000254

08004f6c <stdio_exit_handler>:
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	4a03      	ldr	r2, [pc, #12]	@ (8004f7c <stdio_exit_handler+0x10>)
 8004f70:	4903      	ldr	r1, [pc, #12]	@ (8004f80 <stdio_exit_handler+0x14>)
 8004f72:	4804      	ldr	r0, [pc, #16]	@ (8004f84 <stdio_exit_handler+0x18>)
 8004f74:	f000 f86c 	bl	8005050 <_fwalk_sglue>
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	2000000c 	.word	0x2000000c
 8004f80:	08006005 	.word	0x08006005
 8004f84:	2000001c 	.word	0x2000001c

08004f88 <cleanup_stdio>:
 8004f88:	6841      	ldr	r1, [r0, #4]
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <cleanup_stdio+0x30>)
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	0004      	movs	r4, r0
 8004f90:	4299      	cmp	r1, r3
 8004f92:	d001      	beq.n	8004f98 <cleanup_stdio+0x10>
 8004f94:	f001 f836 	bl	8006004 <_fflush_r>
 8004f98:	68a1      	ldr	r1, [r4, #8]
 8004f9a:	4b08      	ldr	r3, [pc, #32]	@ (8004fbc <cleanup_stdio+0x34>)
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	d002      	beq.n	8004fa6 <cleanup_stdio+0x1e>
 8004fa0:	0020      	movs	r0, r4
 8004fa2:	f001 f82f 	bl	8006004 <_fflush_r>
 8004fa6:	68e1      	ldr	r1, [r4, #12]
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <cleanup_stdio+0x38>)
 8004faa:	4299      	cmp	r1, r3
 8004fac:	d002      	beq.n	8004fb4 <cleanup_stdio+0x2c>
 8004fae:	0020      	movs	r0, r4
 8004fb0:	f001 f828 	bl	8006004 <_fflush_r>
 8004fb4:	bd10      	pop	{r4, pc}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	20000184 	.word	0x20000184
 8004fbc:	200001ec 	.word	0x200001ec
 8004fc0:	20000254 	.word	0x20000254

08004fc4 <global_stdio_init.part.0>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <global_stdio_init.part.0+0x28>)
 8004fc8:	4a09      	ldr	r2, [pc, #36]	@ (8004ff0 <global_stdio_init.part.0+0x2c>)
 8004fca:	2104      	movs	r1, #4
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	4809      	ldr	r0, [pc, #36]	@ (8004ff4 <global_stdio_init.part.0+0x30>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f7ff ff95 	bl	8004f00 <std>
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	2109      	movs	r1, #9
 8004fda:	4807      	ldr	r0, [pc, #28]	@ (8004ff8 <global_stdio_init.part.0+0x34>)
 8004fdc:	f7ff ff90 	bl	8004f00 <std>
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	2112      	movs	r1, #18
 8004fe4:	4805      	ldr	r0, [pc, #20]	@ (8004ffc <global_stdio_init.part.0+0x38>)
 8004fe6:	f7ff ff8b 	bl	8004f00 <std>
 8004fea:	bd10      	pop	{r4, pc}
 8004fec:	200002bc 	.word	0x200002bc
 8004ff0:	08004f6d 	.word	0x08004f6d
 8004ff4:	20000184 	.word	0x20000184
 8004ff8:	200001ec 	.word	0x200001ec
 8004ffc:	20000254 	.word	0x20000254

08005000 <__sfp_lock_acquire>:
 8005000:	b510      	push	{r4, lr}
 8005002:	4802      	ldr	r0, [pc, #8]	@ (800500c <__sfp_lock_acquire+0xc>)
 8005004:	f000 fa51 	bl	80054aa <__retarget_lock_acquire_recursive>
 8005008:	bd10      	pop	{r4, pc}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	200002c5 	.word	0x200002c5

08005010 <__sfp_lock_release>:
 8005010:	b510      	push	{r4, lr}
 8005012:	4802      	ldr	r0, [pc, #8]	@ (800501c <__sfp_lock_release+0xc>)
 8005014:	f000 fa4a 	bl	80054ac <__retarget_lock_release_recursive>
 8005018:	bd10      	pop	{r4, pc}
 800501a:	46c0      	nop			@ (mov r8, r8)
 800501c:	200002c5 	.word	0x200002c5

08005020 <__sinit>:
 8005020:	b510      	push	{r4, lr}
 8005022:	0004      	movs	r4, r0
 8005024:	f7ff ffec 	bl	8005000 <__sfp_lock_acquire>
 8005028:	6a23      	ldr	r3, [r4, #32]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <__sinit+0x14>
 800502e:	f7ff ffef 	bl	8005010 <__sfp_lock_release>
 8005032:	bd10      	pop	{r4, pc}
 8005034:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <__sinit+0x28>)
 8005036:	6223      	str	r3, [r4, #32]
 8005038:	4b04      	ldr	r3, [pc, #16]	@ (800504c <__sinit+0x2c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f6      	bne.n	800502e <__sinit+0xe>
 8005040:	f7ff ffc0 	bl	8004fc4 <global_stdio_init.part.0>
 8005044:	e7f3      	b.n	800502e <__sinit+0xe>
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	08004f89 	.word	0x08004f89
 800504c:	200002bc 	.word	0x200002bc

08005050 <_fwalk_sglue>:
 8005050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005052:	0014      	movs	r4, r2
 8005054:	2600      	movs	r6, #0
 8005056:	9000      	str	r0, [sp, #0]
 8005058:	9101      	str	r1, [sp, #4]
 800505a:	68a5      	ldr	r5, [r4, #8]
 800505c:	6867      	ldr	r7, [r4, #4]
 800505e:	3f01      	subs	r7, #1
 8005060:	d504      	bpl.n	800506c <_fwalk_sglue+0x1c>
 8005062:	6824      	ldr	r4, [r4, #0]
 8005064:	2c00      	cmp	r4, #0
 8005066:	d1f8      	bne.n	800505a <_fwalk_sglue+0xa>
 8005068:	0030      	movs	r0, r6
 800506a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800506c:	89ab      	ldrh	r3, [r5, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d908      	bls.n	8005084 <_fwalk_sglue+0x34>
 8005072:	220e      	movs	r2, #14
 8005074:	5eab      	ldrsh	r3, [r5, r2]
 8005076:	3301      	adds	r3, #1
 8005078:	d004      	beq.n	8005084 <_fwalk_sglue+0x34>
 800507a:	0029      	movs	r1, r5
 800507c:	9800      	ldr	r0, [sp, #0]
 800507e:	9b01      	ldr	r3, [sp, #4]
 8005080:	4798      	blx	r3
 8005082:	4306      	orrs	r6, r0
 8005084:	3568      	adds	r5, #104	@ 0x68
 8005086:	e7ea      	b.n	800505e <_fwalk_sglue+0xe>

08005088 <iprintf>:
 8005088:	b40f      	push	{r0, r1, r2, r3}
 800508a:	b507      	push	{r0, r1, r2, lr}
 800508c:	4905      	ldr	r1, [pc, #20]	@ (80050a4 <iprintf+0x1c>)
 800508e:	ab04      	add	r3, sp, #16
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	cb04      	ldmia	r3!, {r2}
 8005094:	6881      	ldr	r1, [r0, #8]
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	f000 fc94 	bl	80059c4 <_vfiprintf_r>
 800509c:	b003      	add	sp, #12
 800509e:	bc08      	pop	{r3}
 80050a0:	b004      	add	sp, #16
 80050a2:	4718      	bx	r3
 80050a4:	20000018 	.word	0x20000018

080050a8 <_puts_r>:
 80050a8:	6a03      	ldr	r3, [r0, #32]
 80050aa:	b570      	push	{r4, r5, r6, lr}
 80050ac:	0005      	movs	r5, r0
 80050ae:	000e      	movs	r6, r1
 80050b0:	6884      	ldr	r4, [r0, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <_puts_r+0x12>
 80050b6:	f7ff ffb3 	bl	8005020 <__sinit>
 80050ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050bc:	07db      	lsls	r3, r3, #31
 80050be:	d405      	bmi.n	80050cc <_puts_r+0x24>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	059b      	lsls	r3, r3, #22
 80050c4:	d402      	bmi.n	80050cc <_puts_r+0x24>
 80050c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050c8:	f000 f9ef 	bl	80054aa <__retarget_lock_acquire_recursive>
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	071b      	lsls	r3, r3, #28
 80050d0:	d502      	bpl.n	80050d8 <_puts_r+0x30>
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d11f      	bne.n	8005118 <_puts_r+0x70>
 80050d8:	0021      	movs	r1, r4
 80050da:	0028      	movs	r0, r5
 80050dc:	f000 f906 	bl	80052ec <__swsetup_r>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d019      	beq.n	8005118 <_puts_r+0x70>
 80050e4:	2501      	movs	r5, #1
 80050e6:	426d      	negs	r5, r5
 80050e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050ea:	07db      	lsls	r3, r3, #31
 80050ec:	d405      	bmi.n	80050fa <_puts_r+0x52>
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	059b      	lsls	r3, r3, #22
 80050f2:	d402      	bmi.n	80050fa <_puts_r+0x52>
 80050f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050f6:	f000 f9d9 	bl	80054ac <__retarget_lock_release_recursive>
 80050fa:	0028      	movs	r0, r5
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	3601      	adds	r6, #1
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	da04      	bge.n	8005110 <_puts_r+0x68>
 8005106:	69a2      	ldr	r2, [r4, #24]
 8005108:	429a      	cmp	r2, r3
 800510a:	dc16      	bgt.n	800513a <_puts_r+0x92>
 800510c:	290a      	cmp	r1, #10
 800510e:	d014      	beq.n	800513a <_puts_r+0x92>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	6022      	str	r2, [r4, #0]
 8005116:	7019      	strb	r1, [r3, #0]
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	7831      	ldrb	r1, [r6, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	2900      	cmp	r1, #0
 8005120:	d1ed      	bne.n	80050fe <_puts_r+0x56>
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	da0f      	bge.n	8005148 <_puts_r+0xa0>
 8005128:	0022      	movs	r2, r4
 800512a:	0028      	movs	r0, r5
 800512c:	310a      	adds	r1, #10
 800512e:	f000 f89b 	bl	8005268 <__swbuf_r>
 8005132:	3001      	adds	r0, #1
 8005134:	d0d6      	beq.n	80050e4 <_puts_r+0x3c>
 8005136:	250a      	movs	r5, #10
 8005138:	e7d6      	b.n	80050e8 <_puts_r+0x40>
 800513a:	0022      	movs	r2, r4
 800513c:	0028      	movs	r0, r5
 800513e:	f000 f893 	bl	8005268 <__swbuf_r>
 8005142:	3001      	adds	r0, #1
 8005144:	d1e8      	bne.n	8005118 <_puts_r+0x70>
 8005146:	e7cd      	b.n	80050e4 <_puts_r+0x3c>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	6022      	str	r2, [r4, #0]
 800514e:	220a      	movs	r2, #10
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e7f0      	b.n	8005136 <_puts_r+0x8e>

08005154 <puts>:
 8005154:	b510      	push	{r4, lr}
 8005156:	4b03      	ldr	r3, [pc, #12]	@ (8005164 <puts+0x10>)
 8005158:	0001      	movs	r1, r0
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	f7ff ffa4 	bl	80050a8 <_puts_r>
 8005160:	bd10      	pop	{r4, pc}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	20000018 	.word	0x20000018

08005168 <sniprintf>:
 8005168:	b40c      	push	{r2, r3}
 800516a:	b530      	push	{r4, r5, lr}
 800516c:	4b17      	ldr	r3, [pc, #92]	@ (80051cc <sniprintf+0x64>)
 800516e:	000c      	movs	r4, r1
 8005170:	681d      	ldr	r5, [r3, #0]
 8005172:	b09d      	sub	sp, #116	@ 0x74
 8005174:	2900      	cmp	r1, #0
 8005176:	da08      	bge.n	800518a <sniprintf+0x22>
 8005178:	238b      	movs	r3, #139	@ 0x8b
 800517a:	2001      	movs	r0, #1
 800517c:	602b      	str	r3, [r5, #0]
 800517e:	4240      	negs	r0, r0
 8005180:	b01d      	add	sp, #116	@ 0x74
 8005182:	bc30      	pop	{r4, r5}
 8005184:	bc08      	pop	{r3}
 8005186:	b002      	add	sp, #8
 8005188:	4718      	bx	r3
 800518a:	2382      	movs	r3, #130	@ 0x82
 800518c:	466a      	mov	r2, sp
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	8293      	strh	r3, [r2, #20]
 8005192:	2300      	movs	r3, #0
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9006      	str	r0, [sp, #24]
 8005198:	4299      	cmp	r1, r3
 800519a:	d000      	beq.n	800519e <sniprintf+0x36>
 800519c:	1e4b      	subs	r3, r1, #1
 800519e:	9304      	str	r3, [sp, #16]
 80051a0:	9307      	str	r3, [sp, #28]
 80051a2:	2301      	movs	r3, #1
 80051a4:	466a      	mov	r2, sp
 80051a6:	425b      	negs	r3, r3
 80051a8:	82d3      	strh	r3, [r2, #22]
 80051aa:	0028      	movs	r0, r5
 80051ac:	ab21      	add	r3, sp, #132	@ 0x84
 80051ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80051b0:	a902      	add	r1, sp, #8
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	f000 fae0 	bl	8005778 <_svfiprintf_r>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	da01      	bge.n	80051c0 <sniprintf+0x58>
 80051bc:	238b      	movs	r3, #139	@ 0x8b
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	d0dd      	beq.n	8005180 <sniprintf+0x18>
 80051c4:	2200      	movs	r2, #0
 80051c6:	9b02      	ldr	r3, [sp, #8]
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e7d9      	b.n	8005180 <sniprintf+0x18>
 80051cc:	20000018 	.word	0x20000018

080051d0 <__sread>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	000c      	movs	r4, r1
 80051d4:	250e      	movs	r5, #14
 80051d6:	5f49      	ldrsh	r1, [r1, r5]
 80051d8:	f000 f914 	bl	8005404 <_read_r>
 80051dc:	2800      	cmp	r0, #0
 80051de:	db03      	blt.n	80051e8 <__sread+0x18>
 80051e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80051e2:	181b      	adds	r3, r3, r0
 80051e4:	6563      	str	r3, [r4, #84]	@ 0x54
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	4a02      	ldr	r2, [pc, #8]	@ (80051f4 <__sread+0x24>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	e7f9      	b.n	80051e6 <__sread+0x16>
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	ffffefff 	.word	0xffffefff

080051f8 <__swrite>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	001f      	movs	r7, r3
 80051fc:	898b      	ldrh	r3, [r1, #12]
 80051fe:	0005      	movs	r5, r0
 8005200:	000c      	movs	r4, r1
 8005202:	0016      	movs	r6, r2
 8005204:	05db      	lsls	r3, r3, #23
 8005206:	d505      	bpl.n	8005214 <__swrite+0x1c>
 8005208:	230e      	movs	r3, #14
 800520a:	5ec9      	ldrsh	r1, [r1, r3]
 800520c:	2200      	movs	r2, #0
 800520e:	2302      	movs	r3, #2
 8005210:	f000 f8e4 	bl	80053dc <_lseek_r>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	4a05      	ldr	r2, [pc, #20]	@ (800522c <__swrite+0x34>)
 8005218:	0028      	movs	r0, r5
 800521a:	4013      	ands	r3, r2
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	0032      	movs	r2, r6
 8005220:	230e      	movs	r3, #14
 8005222:	5ee1      	ldrsh	r1, [r4, r3]
 8005224:	003b      	movs	r3, r7
 8005226:	f000 f901 	bl	800542c <_write_r>
 800522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800522c:	ffffefff 	.word	0xffffefff

08005230 <__sseek>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	000c      	movs	r4, r1
 8005234:	250e      	movs	r5, #14
 8005236:	5f49      	ldrsh	r1, [r1, r5]
 8005238:	f000 f8d0 	bl	80053dc <_lseek_r>
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	1c42      	adds	r2, r0, #1
 8005240:	d103      	bne.n	800524a <__sseek+0x1a>
 8005242:	4a05      	ldr	r2, [pc, #20]	@ (8005258 <__sseek+0x28>)
 8005244:	4013      	ands	r3, r2
 8005246:	81a3      	strh	r3, [r4, #12]
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	2280      	movs	r2, #128	@ 0x80
 800524c:	0152      	lsls	r2, r2, #5
 800524e:	4313      	orrs	r3, r2
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	6560      	str	r0, [r4, #84]	@ 0x54
 8005254:	e7f8      	b.n	8005248 <__sseek+0x18>
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	ffffefff 	.word	0xffffefff

0800525c <__sclose>:
 800525c:	b510      	push	{r4, lr}
 800525e:	230e      	movs	r3, #14
 8005260:	5ec9      	ldrsh	r1, [r1, r3]
 8005262:	f000 f8a9 	bl	80053b8 <_close_r>
 8005266:	bd10      	pop	{r4, pc}

08005268 <__swbuf_r>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	0006      	movs	r6, r0
 800526c:	000d      	movs	r5, r1
 800526e:	0014      	movs	r4, r2
 8005270:	2800      	cmp	r0, #0
 8005272:	d004      	beq.n	800527e <__swbuf_r+0x16>
 8005274:	6a03      	ldr	r3, [r0, #32]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <__swbuf_r+0x16>
 800527a:	f7ff fed1 	bl	8005020 <__sinit>
 800527e:	69a3      	ldr	r3, [r4, #24]
 8005280:	60a3      	str	r3, [r4, #8]
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	071b      	lsls	r3, r3, #28
 8005286:	d502      	bpl.n	800528e <__swbuf_r+0x26>
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <__swbuf_r+0x3a>
 800528e:	0021      	movs	r1, r4
 8005290:	0030      	movs	r0, r6
 8005292:	f000 f82b 	bl	80052ec <__swsetup_r>
 8005296:	2800      	cmp	r0, #0
 8005298:	d003      	beq.n	80052a2 <__swbuf_r+0x3a>
 800529a:	2501      	movs	r5, #1
 800529c:	426d      	negs	r5, r5
 800529e:	0028      	movs	r0, r5
 80052a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	b2ef      	uxtb	r7, r5
 80052a8:	1ac0      	subs	r0, r0, r3
 80052aa:	6963      	ldr	r3, [r4, #20]
 80052ac:	b2ed      	uxtb	r5, r5
 80052ae:	4283      	cmp	r3, r0
 80052b0:	dc05      	bgt.n	80052be <__swbuf_r+0x56>
 80052b2:	0021      	movs	r1, r4
 80052b4:	0030      	movs	r0, r6
 80052b6:	f000 fea5 	bl	8006004 <_fflush_r>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d1ed      	bne.n	800529a <__swbuf_r+0x32>
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	3001      	adds	r0, #1
 80052c2:	3b01      	subs	r3, #1
 80052c4:	60a3      	str	r3, [r4, #8]
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	6022      	str	r2, [r4, #0]
 80052cc:	701f      	strb	r7, [r3, #0]
 80052ce:	6963      	ldr	r3, [r4, #20]
 80052d0:	4283      	cmp	r3, r0
 80052d2:	d004      	beq.n	80052de <__swbuf_r+0x76>
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d5e1      	bpl.n	800529e <__swbuf_r+0x36>
 80052da:	2d0a      	cmp	r5, #10
 80052dc:	d1df      	bne.n	800529e <__swbuf_r+0x36>
 80052de:	0021      	movs	r1, r4
 80052e0:	0030      	movs	r0, r6
 80052e2:	f000 fe8f 	bl	8006004 <_fflush_r>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d0d9      	beq.n	800529e <__swbuf_r+0x36>
 80052ea:	e7d6      	b.n	800529a <__swbuf_r+0x32>

080052ec <__swsetup_r>:
 80052ec:	4b2d      	ldr	r3, [pc, #180]	@ (80053a4 <__swsetup_r+0xb8>)
 80052ee:	b570      	push	{r4, r5, r6, lr}
 80052f0:	0005      	movs	r5, r0
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	000c      	movs	r4, r1
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d004      	beq.n	8005304 <__swsetup_r+0x18>
 80052fa:	6a03      	ldr	r3, [r0, #32]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <__swsetup_r+0x18>
 8005300:	f7ff fe8e 	bl	8005020 <__sinit>
 8005304:	230c      	movs	r3, #12
 8005306:	5ee2      	ldrsh	r2, [r4, r3]
 8005308:	0713      	lsls	r3, r2, #28
 800530a:	d423      	bmi.n	8005354 <__swsetup_r+0x68>
 800530c:	06d3      	lsls	r3, r2, #27
 800530e:	d407      	bmi.n	8005320 <__swsetup_r+0x34>
 8005310:	2309      	movs	r3, #9
 8005312:	602b      	str	r3, [r5, #0]
 8005314:	2340      	movs	r3, #64	@ 0x40
 8005316:	2001      	movs	r0, #1
 8005318:	4313      	orrs	r3, r2
 800531a:	81a3      	strh	r3, [r4, #12]
 800531c:	4240      	negs	r0, r0
 800531e:	e03a      	b.n	8005396 <__swsetup_r+0xaa>
 8005320:	0752      	lsls	r2, r2, #29
 8005322:	d513      	bpl.n	800534c <__swsetup_r+0x60>
 8005324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005326:	2900      	cmp	r1, #0
 8005328:	d008      	beq.n	800533c <__swsetup_r+0x50>
 800532a:	0023      	movs	r3, r4
 800532c:	3344      	adds	r3, #68	@ 0x44
 800532e:	4299      	cmp	r1, r3
 8005330:	d002      	beq.n	8005338 <__swsetup_r+0x4c>
 8005332:	0028      	movs	r0, r5
 8005334:	f000 f8c4 	bl	80054c0 <_free_r>
 8005338:	2300      	movs	r3, #0
 800533a:	6363      	str	r3, [r4, #52]	@ 0x34
 800533c:	2224      	movs	r2, #36	@ 0x24
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	4393      	bics	r3, r2
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	2300      	movs	r3, #0
 8005346:	6063      	str	r3, [r4, #4]
 8005348:	6923      	ldr	r3, [r4, #16]
 800534a:	6023      	str	r3, [r4, #0]
 800534c:	2308      	movs	r3, #8
 800534e:	89a2      	ldrh	r2, [r4, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	6923      	ldr	r3, [r4, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <__swsetup_r+0x86>
 800535a:	21a0      	movs	r1, #160	@ 0xa0
 800535c:	2280      	movs	r2, #128	@ 0x80
 800535e:	89a3      	ldrh	r3, [r4, #12]
 8005360:	0089      	lsls	r1, r1, #2
 8005362:	0092      	lsls	r2, r2, #2
 8005364:	400b      	ands	r3, r1
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <__swsetup_r+0x86>
 800536a:	0021      	movs	r1, r4
 800536c:	0028      	movs	r0, r5
 800536e:	f000 fe9f 	bl	80060b0 <__smakebuf_r>
 8005372:	230c      	movs	r3, #12
 8005374:	5ee2      	ldrsh	r2, [r4, r3]
 8005376:	2101      	movs	r1, #1
 8005378:	0013      	movs	r3, r2
 800537a:	400b      	ands	r3, r1
 800537c:	420a      	tst	r2, r1
 800537e:	d00b      	beq.n	8005398 <__swsetup_r+0xac>
 8005380:	2300      	movs	r3, #0
 8005382:	60a3      	str	r3, [r4, #8]
 8005384:	6963      	ldr	r3, [r4, #20]
 8005386:	425b      	negs	r3, r3
 8005388:	61a3      	str	r3, [r4, #24]
 800538a:	2000      	movs	r0, #0
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	4283      	cmp	r3, r0
 8005390:	d101      	bne.n	8005396 <__swsetup_r+0xaa>
 8005392:	0613      	lsls	r3, r2, #24
 8005394:	d4be      	bmi.n	8005314 <__swsetup_r+0x28>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	0791      	lsls	r1, r2, #30
 800539a:	d400      	bmi.n	800539e <__swsetup_r+0xb2>
 800539c:	6963      	ldr	r3, [r4, #20]
 800539e:	60a3      	str	r3, [r4, #8]
 80053a0:	e7f3      	b.n	800538a <__swsetup_r+0x9e>
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	20000018 	.word	0x20000018

080053a8 <memset>:
 80053a8:	0003      	movs	r3, r0
 80053aa:	1882      	adds	r2, r0, r2
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d100      	bne.n	80053b2 <memset+0xa>
 80053b0:	4770      	bx	lr
 80053b2:	7019      	strb	r1, [r3, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	e7f9      	b.n	80053ac <memset+0x4>

080053b8 <_close_r>:
 80053b8:	2300      	movs	r3, #0
 80053ba:	b570      	push	{r4, r5, r6, lr}
 80053bc:	4d06      	ldr	r5, [pc, #24]	@ (80053d8 <_close_r+0x20>)
 80053be:	0004      	movs	r4, r0
 80053c0:	0008      	movs	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fb ffa6 	bl	8001314 <_close>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d103      	bne.n	80053d4 <_close_r+0x1c>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d000      	beq.n	80053d4 <_close_r+0x1c>
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	bd70      	pop	{r4, r5, r6, pc}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	200002c0 	.word	0x200002c0

080053dc <_lseek_r>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	0004      	movs	r4, r0
 80053e0:	0008      	movs	r0, r1
 80053e2:	0011      	movs	r1, r2
 80053e4:	001a      	movs	r2, r3
 80053e6:	2300      	movs	r3, #0
 80053e8:	4d05      	ldr	r5, [pc, #20]	@ (8005400 <_lseek_r+0x24>)
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fb ffb3 	bl	8001356 <_lseek>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d103      	bne.n	80053fc <_lseek_r+0x20>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d000      	beq.n	80053fc <_lseek_r+0x20>
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	200002c0 	.word	0x200002c0

08005404 <_read_r>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	0004      	movs	r4, r0
 8005408:	0008      	movs	r0, r1
 800540a:	0011      	movs	r1, r2
 800540c:	001a      	movs	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	4d05      	ldr	r5, [pc, #20]	@ (8005428 <_read_r+0x24>)
 8005412:	602b      	str	r3, [r5, #0]
 8005414:	f7fb ff61 	bl	80012da <_read>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d103      	bne.n	8005424 <_read_r+0x20>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d000      	beq.n	8005424 <_read_r+0x20>
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	bd70      	pop	{r4, r5, r6, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	200002c0 	.word	0x200002c0

0800542c <_write_r>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	0004      	movs	r4, r0
 8005430:	0008      	movs	r0, r1
 8005432:	0011      	movs	r1, r2
 8005434:	001a      	movs	r2, r3
 8005436:	2300      	movs	r3, #0
 8005438:	4d05      	ldr	r5, [pc, #20]	@ (8005450 <_write_r+0x24>)
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	f7fb fe3c 	bl	80010b8 <_write>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d103      	bne.n	800544c <_write_r+0x20>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d000      	beq.n	800544c <_write_r+0x20>
 800544a:	6023      	str	r3, [r4, #0]
 800544c:	bd70      	pop	{r4, r5, r6, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	200002c0 	.word	0x200002c0

08005454 <__errno>:
 8005454:	4b01      	ldr	r3, [pc, #4]	@ (800545c <__errno+0x8>)
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	4770      	bx	lr
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	20000018 	.word	0x20000018

08005460 <__libc_init_array>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	2600      	movs	r6, #0
 8005464:	4c0c      	ldr	r4, [pc, #48]	@ (8005498 <__libc_init_array+0x38>)
 8005466:	4d0d      	ldr	r5, [pc, #52]	@ (800549c <__libc_init_array+0x3c>)
 8005468:	1b64      	subs	r4, r4, r5
 800546a:	10a4      	asrs	r4, r4, #2
 800546c:	42a6      	cmp	r6, r4
 800546e:	d109      	bne.n	8005484 <__libc_init_array+0x24>
 8005470:	2600      	movs	r6, #0
 8005472:	f000 fee9 	bl	8006248 <_init>
 8005476:	4c0a      	ldr	r4, [pc, #40]	@ (80054a0 <__libc_init_array+0x40>)
 8005478:	4d0a      	ldr	r5, [pc, #40]	@ (80054a4 <__libc_init_array+0x44>)
 800547a:	1b64      	subs	r4, r4, r5
 800547c:	10a4      	asrs	r4, r4, #2
 800547e:	42a6      	cmp	r6, r4
 8005480:	d105      	bne.n	800548e <__libc_init_array+0x2e>
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	00b3      	lsls	r3, r6, #2
 8005486:	58eb      	ldr	r3, [r5, r3]
 8005488:	4798      	blx	r3
 800548a:	3601      	adds	r6, #1
 800548c:	e7ee      	b.n	800546c <__libc_init_array+0xc>
 800548e:	00b3      	lsls	r3, r6, #2
 8005490:	58eb      	ldr	r3, [r5, r3]
 8005492:	4798      	blx	r3
 8005494:	3601      	adds	r6, #1
 8005496:	e7f2      	b.n	800547e <__libc_init_array+0x1e>
 8005498:	08006a20 	.word	0x08006a20
 800549c:	08006a20 	.word	0x08006a20
 80054a0:	08006a24 	.word	0x08006a24
 80054a4:	08006a20 	.word	0x08006a20

080054a8 <__retarget_lock_init_recursive>:
 80054a8:	4770      	bx	lr

080054aa <__retarget_lock_acquire_recursive>:
 80054aa:	4770      	bx	lr

080054ac <__retarget_lock_release_recursive>:
 80054ac:	4770      	bx	lr

080054ae <memcpy>:
 80054ae:	2300      	movs	r3, #0
 80054b0:	b510      	push	{r4, lr}
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xa>
 80054b6:	bd10      	pop	{r4, pc}
 80054b8:	5ccc      	ldrb	r4, [r1, r3]
 80054ba:	54c4      	strb	r4, [r0, r3]
 80054bc:	3301      	adds	r3, #1
 80054be:	e7f8      	b.n	80054b2 <memcpy+0x4>

080054c0 <_free_r>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	0005      	movs	r5, r0
 80054c4:	1e0c      	subs	r4, r1, #0
 80054c6:	d010      	beq.n	80054ea <_free_r+0x2a>
 80054c8:	3c04      	subs	r4, #4
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da00      	bge.n	80054d2 <_free_r+0x12>
 80054d0:	18e4      	adds	r4, r4, r3
 80054d2:	0028      	movs	r0, r5
 80054d4:	f000 f8e0 	bl	8005698 <__malloc_lock>
 80054d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <_free_r+0x90>)
 80054da:	6813      	ldr	r3, [r2, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <_free_r+0x2c>
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	6014      	str	r4, [r2, #0]
 80054e4:	0028      	movs	r0, r5
 80054e6:	f000 f8df 	bl	80056a8 <__malloc_unlock>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d908      	bls.n	8005502 <_free_r+0x42>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	1821      	adds	r1, r4, r0
 80054f4:	428b      	cmp	r3, r1
 80054f6:	d1f3      	bne.n	80054e0 <_free_r+0x20>
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	1809      	adds	r1, r1, r0
 80054fe:	6021      	str	r1, [r4, #0]
 8005500:	e7ee      	b.n	80054e0 <_free_r+0x20>
 8005502:	001a      	movs	r2, r3
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <_free_r+0x4e>
 800550a:	42a3      	cmp	r3, r4
 800550c:	d9f9      	bls.n	8005502 <_free_r+0x42>
 800550e:	6811      	ldr	r1, [r2, #0]
 8005510:	1850      	adds	r0, r2, r1
 8005512:	42a0      	cmp	r0, r4
 8005514:	d10b      	bne.n	800552e <_free_r+0x6e>
 8005516:	6820      	ldr	r0, [r4, #0]
 8005518:	1809      	adds	r1, r1, r0
 800551a:	1850      	adds	r0, r2, r1
 800551c:	6011      	str	r1, [r2, #0]
 800551e:	4283      	cmp	r3, r0
 8005520:	d1e0      	bne.n	80054e4 <_free_r+0x24>
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	1841      	adds	r1, r0, r1
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	6053      	str	r3, [r2, #4]
 800552c:	e7da      	b.n	80054e4 <_free_r+0x24>
 800552e:	42a0      	cmp	r0, r4
 8005530:	d902      	bls.n	8005538 <_free_r+0x78>
 8005532:	230c      	movs	r3, #12
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	e7d5      	b.n	80054e4 <_free_r+0x24>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428b      	cmp	r3, r1
 800553e:	d103      	bne.n	8005548 <_free_r+0x88>
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	1809      	adds	r1, r1, r0
 8005546:	6021      	str	r1, [r4, #0]
 8005548:	6063      	str	r3, [r4, #4]
 800554a:	6054      	str	r4, [r2, #4]
 800554c:	e7ca      	b.n	80054e4 <_free_r+0x24>
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	200002cc 	.word	0x200002cc

08005554 <sbrk_aligned>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	4e0f      	ldr	r6, [pc, #60]	@ (8005594 <sbrk_aligned+0x40>)
 8005558:	000d      	movs	r5, r1
 800555a:	6831      	ldr	r1, [r6, #0]
 800555c:	0004      	movs	r4, r0
 800555e:	2900      	cmp	r1, #0
 8005560:	d102      	bne.n	8005568 <sbrk_aligned+0x14>
 8005562:	f000 fe1d 	bl	80061a0 <_sbrk_r>
 8005566:	6030      	str	r0, [r6, #0]
 8005568:	0029      	movs	r1, r5
 800556a:	0020      	movs	r0, r4
 800556c:	f000 fe18 	bl	80061a0 <_sbrk_r>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d103      	bne.n	800557c <sbrk_aligned+0x28>
 8005574:	2501      	movs	r5, #1
 8005576:	426d      	negs	r5, r5
 8005578:	0028      	movs	r0, r5
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	2303      	movs	r3, #3
 800557e:	1cc5      	adds	r5, r0, #3
 8005580:	439d      	bics	r5, r3
 8005582:	42a8      	cmp	r0, r5
 8005584:	d0f8      	beq.n	8005578 <sbrk_aligned+0x24>
 8005586:	1a29      	subs	r1, r5, r0
 8005588:	0020      	movs	r0, r4
 800558a:	f000 fe09 	bl	80061a0 <_sbrk_r>
 800558e:	3001      	adds	r0, #1
 8005590:	d1f2      	bne.n	8005578 <sbrk_aligned+0x24>
 8005592:	e7ef      	b.n	8005574 <sbrk_aligned+0x20>
 8005594:	200002c8 	.word	0x200002c8

08005598 <_malloc_r>:
 8005598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800559a:	2203      	movs	r2, #3
 800559c:	1ccb      	adds	r3, r1, #3
 800559e:	4393      	bics	r3, r2
 80055a0:	3308      	adds	r3, #8
 80055a2:	0005      	movs	r5, r0
 80055a4:	001f      	movs	r7, r3
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d234      	bcs.n	8005614 <_malloc_r+0x7c>
 80055aa:	270c      	movs	r7, #12
 80055ac:	42b9      	cmp	r1, r7
 80055ae:	d833      	bhi.n	8005618 <_malloc_r+0x80>
 80055b0:	0028      	movs	r0, r5
 80055b2:	f000 f871 	bl	8005698 <__malloc_lock>
 80055b6:	4e37      	ldr	r6, [pc, #220]	@ (8005694 <_malloc_r+0xfc>)
 80055b8:	6833      	ldr	r3, [r6, #0]
 80055ba:	001c      	movs	r4, r3
 80055bc:	2c00      	cmp	r4, #0
 80055be:	d12f      	bne.n	8005620 <_malloc_r+0x88>
 80055c0:	0039      	movs	r1, r7
 80055c2:	0028      	movs	r0, r5
 80055c4:	f7ff ffc6 	bl	8005554 <sbrk_aligned>
 80055c8:	0004      	movs	r4, r0
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d15f      	bne.n	800568e <_malloc_r+0xf6>
 80055ce:	6834      	ldr	r4, [r6, #0]
 80055d0:	9400      	str	r4, [sp, #0]
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d14a      	bne.n	800566e <_malloc_r+0xd6>
 80055d8:	2c00      	cmp	r4, #0
 80055da:	d052      	beq.n	8005682 <_malloc_r+0xea>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	0028      	movs	r0, r5
 80055e0:	18e3      	adds	r3, r4, r3
 80055e2:	9900      	ldr	r1, [sp, #0]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	f000 fddb 	bl	80061a0 <_sbrk_r>
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	4283      	cmp	r3, r0
 80055ee:	d148      	bne.n	8005682 <_malloc_r+0xea>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	0028      	movs	r0, r5
 80055f4:	1aff      	subs	r7, r7, r3
 80055f6:	0039      	movs	r1, r7
 80055f8:	f7ff ffac 	bl	8005554 <sbrk_aligned>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d040      	beq.n	8005682 <_malloc_r+0xea>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	19db      	adds	r3, r3, r7
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	2a00      	cmp	r2, #0
 800560c:	d133      	bne.n	8005676 <_malloc_r+0xde>
 800560e:	9b00      	ldr	r3, [sp, #0]
 8005610:	6033      	str	r3, [r6, #0]
 8005612:	e019      	b.n	8005648 <_malloc_r+0xb0>
 8005614:	2b00      	cmp	r3, #0
 8005616:	dac9      	bge.n	80055ac <_malloc_r+0x14>
 8005618:	230c      	movs	r3, #12
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	2000      	movs	r0, #0
 800561e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	1bc9      	subs	r1, r1, r7
 8005624:	d420      	bmi.n	8005668 <_malloc_r+0xd0>
 8005626:	290b      	cmp	r1, #11
 8005628:	d90a      	bls.n	8005640 <_malloc_r+0xa8>
 800562a:	19e2      	adds	r2, r4, r7
 800562c:	6027      	str	r7, [r4, #0]
 800562e:	42a3      	cmp	r3, r4
 8005630:	d104      	bne.n	800563c <_malloc_r+0xa4>
 8005632:	6032      	str	r2, [r6, #0]
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	6011      	str	r1, [r2, #0]
 8005638:	6053      	str	r3, [r2, #4]
 800563a:	e005      	b.n	8005648 <_malloc_r+0xb0>
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	e7f9      	b.n	8005634 <_malloc_r+0x9c>
 8005640:	6862      	ldr	r2, [r4, #4]
 8005642:	42a3      	cmp	r3, r4
 8005644:	d10e      	bne.n	8005664 <_malloc_r+0xcc>
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	0028      	movs	r0, r5
 800564a:	f000 f82d 	bl	80056a8 <__malloc_unlock>
 800564e:	0020      	movs	r0, r4
 8005650:	2207      	movs	r2, #7
 8005652:	300b      	adds	r0, #11
 8005654:	1d23      	adds	r3, r4, #4
 8005656:	4390      	bics	r0, r2
 8005658:	1ac2      	subs	r2, r0, r3
 800565a:	4298      	cmp	r0, r3
 800565c:	d0df      	beq.n	800561e <_malloc_r+0x86>
 800565e:	1a1b      	subs	r3, r3, r0
 8005660:	50a3      	str	r3, [r4, r2]
 8005662:	e7dc      	b.n	800561e <_malloc_r+0x86>
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	e7ef      	b.n	8005648 <_malloc_r+0xb0>
 8005668:	0023      	movs	r3, r4
 800566a:	6864      	ldr	r4, [r4, #4]
 800566c:	e7a6      	b.n	80055bc <_malloc_r+0x24>
 800566e:	9c00      	ldr	r4, [sp, #0]
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	e7ad      	b.n	80055d2 <_malloc_r+0x3a>
 8005676:	001a      	movs	r2, r3
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	42a3      	cmp	r3, r4
 800567c:	d1fb      	bne.n	8005676 <_malloc_r+0xde>
 800567e:	2300      	movs	r3, #0
 8005680:	e7da      	b.n	8005638 <_malloc_r+0xa0>
 8005682:	230c      	movs	r3, #12
 8005684:	0028      	movs	r0, r5
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f000 f80e 	bl	80056a8 <__malloc_unlock>
 800568c:	e7c6      	b.n	800561c <_malloc_r+0x84>
 800568e:	6007      	str	r7, [r0, #0]
 8005690:	e7da      	b.n	8005648 <_malloc_r+0xb0>
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	200002cc 	.word	0x200002cc

08005698 <__malloc_lock>:
 8005698:	b510      	push	{r4, lr}
 800569a:	4802      	ldr	r0, [pc, #8]	@ (80056a4 <__malloc_lock+0xc>)
 800569c:	f7ff ff05 	bl	80054aa <__retarget_lock_acquire_recursive>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	200002c4 	.word	0x200002c4

080056a8 <__malloc_unlock>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4802      	ldr	r0, [pc, #8]	@ (80056b4 <__malloc_unlock+0xc>)
 80056ac:	f7ff fefe 	bl	80054ac <__retarget_lock_release_recursive>
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	200002c4 	.word	0x200002c4

080056b8 <__ssputs_r>:
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	688e      	ldr	r6, [r1, #8]
 80056bc:	b085      	sub	sp, #20
 80056be:	001f      	movs	r7, r3
 80056c0:	000c      	movs	r4, r1
 80056c2:	680b      	ldr	r3, [r1, #0]
 80056c4:	9002      	str	r0, [sp, #8]
 80056c6:	9203      	str	r2, [sp, #12]
 80056c8:	42be      	cmp	r6, r7
 80056ca:	d830      	bhi.n	800572e <__ssputs_r+0x76>
 80056cc:	210c      	movs	r1, #12
 80056ce:	5e62      	ldrsh	r2, [r4, r1]
 80056d0:	2190      	movs	r1, #144	@ 0x90
 80056d2:	00c9      	lsls	r1, r1, #3
 80056d4:	420a      	tst	r2, r1
 80056d6:	d028      	beq.n	800572a <__ssputs_r+0x72>
 80056d8:	2003      	movs	r0, #3
 80056da:	6921      	ldr	r1, [r4, #16]
 80056dc:	1a5b      	subs	r3, r3, r1
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	6963      	ldr	r3, [r4, #20]
 80056e2:	4343      	muls	r3, r0
 80056e4:	9801      	ldr	r0, [sp, #4]
 80056e6:	0fdd      	lsrs	r5, r3, #31
 80056e8:	18ed      	adds	r5, r5, r3
 80056ea:	1c7b      	adds	r3, r7, #1
 80056ec:	181b      	adds	r3, r3, r0
 80056ee:	106d      	asrs	r5, r5, #1
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	d900      	bls.n	80056f6 <__ssputs_r+0x3e>
 80056f4:	001d      	movs	r5, r3
 80056f6:	0552      	lsls	r2, r2, #21
 80056f8:	d528      	bpl.n	800574c <__ssputs_r+0x94>
 80056fa:	0029      	movs	r1, r5
 80056fc:	9802      	ldr	r0, [sp, #8]
 80056fe:	f7ff ff4b 	bl	8005598 <_malloc_r>
 8005702:	1e06      	subs	r6, r0, #0
 8005704:	d02c      	beq.n	8005760 <__ssputs_r+0xa8>
 8005706:	9a01      	ldr	r2, [sp, #4]
 8005708:	6921      	ldr	r1, [r4, #16]
 800570a:	f7ff fed0 	bl	80054ae <memcpy>
 800570e:	89a2      	ldrh	r2, [r4, #12]
 8005710:	4b18      	ldr	r3, [pc, #96]	@ (8005774 <__ssputs_r+0xbc>)
 8005712:	401a      	ands	r2, r3
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	4313      	orrs	r3, r2
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	9b01      	ldr	r3, [sp, #4]
 800571c:	6126      	str	r6, [r4, #16]
 800571e:	18f6      	adds	r6, r6, r3
 8005720:	6026      	str	r6, [r4, #0]
 8005722:	003e      	movs	r6, r7
 8005724:	6165      	str	r5, [r4, #20]
 8005726:	1aed      	subs	r5, r5, r3
 8005728:	60a5      	str	r5, [r4, #8]
 800572a:	42be      	cmp	r6, r7
 800572c:	d900      	bls.n	8005730 <__ssputs_r+0x78>
 800572e:	003e      	movs	r6, r7
 8005730:	0032      	movs	r2, r6
 8005732:	9903      	ldr	r1, [sp, #12]
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	f000 fcfc 	bl	8006132 <memmove>
 800573a:	2000      	movs	r0, #0
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	1b9b      	subs	r3, r3, r6
 8005740:	60a3      	str	r3, [r4, #8]
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	199b      	adds	r3, r3, r6
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	b005      	add	sp, #20
 800574a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800574c:	002a      	movs	r2, r5
 800574e:	9802      	ldr	r0, [sp, #8]
 8005750:	f000 fd43 	bl	80061da <_realloc_r>
 8005754:	1e06      	subs	r6, r0, #0
 8005756:	d1e0      	bne.n	800571a <__ssputs_r+0x62>
 8005758:	6921      	ldr	r1, [r4, #16]
 800575a:	9802      	ldr	r0, [sp, #8]
 800575c:	f7ff feb0 	bl	80054c0 <_free_r>
 8005760:	230c      	movs	r3, #12
 8005762:	2001      	movs	r0, #1
 8005764:	9a02      	ldr	r2, [sp, #8]
 8005766:	4240      	negs	r0, r0
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	89a2      	ldrh	r2, [r4, #12]
 800576c:	3334      	adds	r3, #52	@ 0x34
 800576e:	4313      	orrs	r3, r2
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	e7e9      	b.n	8005748 <__ssputs_r+0x90>
 8005774:	fffffb7f 	.word	0xfffffb7f

08005778 <_svfiprintf_r>:
 8005778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577a:	b0a1      	sub	sp, #132	@ 0x84
 800577c:	9003      	str	r0, [sp, #12]
 800577e:	001d      	movs	r5, r3
 8005780:	898b      	ldrh	r3, [r1, #12]
 8005782:	000f      	movs	r7, r1
 8005784:	0016      	movs	r6, r2
 8005786:	061b      	lsls	r3, r3, #24
 8005788:	d511      	bpl.n	80057ae <_svfiprintf_r+0x36>
 800578a:	690b      	ldr	r3, [r1, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10e      	bne.n	80057ae <_svfiprintf_r+0x36>
 8005790:	2140      	movs	r1, #64	@ 0x40
 8005792:	f7ff ff01 	bl	8005598 <_malloc_r>
 8005796:	6038      	str	r0, [r7, #0]
 8005798:	6138      	str	r0, [r7, #16]
 800579a:	2800      	cmp	r0, #0
 800579c:	d105      	bne.n	80057aa <_svfiprintf_r+0x32>
 800579e:	230c      	movs	r3, #12
 80057a0:	9a03      	ldr	r2, [sp, #12]
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	2001      	movs	r0, #1
 80057a6:	4240      	negs	r0, r0
 80057a8:	e0cf      	b.n	800594a <_svfiprintf_r+0x1d2>
 80057aa:	2340      	movs	r3, #64	@ 0x40
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	2300      	movs	r3, #0
 80057b0:	ac08      	add	r4, sp, #32
 80057b2:	6163      	str	r3, [r4, #20]
 80057b4:	3320      	adds	r3, #32
 80057b6:	7663      	strb	r3, [r4, #25]
 80057b8:	3310      	adds	r3, #16
 80057ba:	76a3      	strb	r3, [r4, #26]
 80057bc:	9507      	str	r5, [sp, #28]
 80057be:	0035      	movs	r5, r6
 80057c0:	782b      	ldrb	r3, [r5, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <_svfiprintf_r+0x52>
 80057c6:	2b25      	cmp	r3, #37	@ 0x25
 80057c8:	d148      	bne.n	800585c <_svfiprintf_r+0xe4>
 80057ca:	1bab      	subs	r3, r5, r6
 80057cc:	9305      	str	r3, [sp, #20]
 80057ce:	42b5      	cmp	r5, r6
 80057d0:	d00b      	beq.n	80057ea <_svfiprintf_r+0x72>
 80057d2:	0032      	movs	r2, r6
 80057d4:	0039      	movs	r1, r7
 80057d6:	9803      	ldr	r0, [sp, #12]
 80057d8:	f7ff ff6e 	bl	80056b8 <__ssputs_r>
 80057dc:	3001      	adds	r0, #1
 80057de:	d100      	bne.n	80057e2 <_svfiprintf_r+0x6a>
 80057e0:	e0ae      	b.n	8005940 <_svfiprintf_r+0x1c8>
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	9a05      	ldr	r2, [sp, #20]
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	6163      	str	r3, [r4, #20]
 80057ea:	782b      	ldrb	r3, [r5, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d100      	bne.n	80057f2 <_svfiprintf_r+0x7a>
 80057f0:	e0a6      	b.n	8005940 <_svfiprintf_r+0x1c8>
 80057f2:	2201      	movs	r2, #1
 80057f4:	2300      	movs	r3, #0
 80057f6:	4252      	negs	r2, r2
 80057f8:	6062      	str	r2, [r4, #4]
 80057fa:	a904      	add	r1, sp, #16
 80057fc:	3254      	adds	r2, #84	@ 0x54
 80057fe:	1852      	adds	r2, r2, r1
 8005800:	1c6e      	adds	r6, r5, #1
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	60e3      	str	r3, [r4, #12]
 8005806:	60a3      	str	r3, [r4, #8]
 8005808:	7013      	strb	r3, [r2, #0]
 800580a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800580c:	4b54      	ldr	r3, [pc, #336]	@ (8005960 <_svfiprintf_r+0x1e8>)
 800580e:	2205      	movs	r2, #5
 8005810:	0018      	movs	r0, r3
 8005812:	7831      	ldrb	r1, [r6, #0]
 8005814:	9305      	str	r3, [sp, #20]
 8005816:	f000 fcd5 	bl	80061c4 <memchr>
 800581a:	1c75      	adds	r5, r6, #1
 800581c:	2800      	cmp	r0, #0
 800581e:	d11f      	bne.n	8005860 <_svfiprintf_r+0xe8>
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	06d3      	lsls	r3, r2, #27
 8005824:	d504      	bpl.n	8005830 <_svfiprintf_r+0xb8>
 8005826:	2353      	movs	r3, #83	@ 0x53
 8005828:	a904      	add	r1, sp, #16
 800582a:	185b      	adds	r3, r3, r1
 800582c:	2120      	movs	r1, #32
 800582e:	7019      	strb	r1, [r3, #0]
 8005830:	0713      	lsls	r3, r2, #28
 8005832:	d504      	bpl.n	800583e <_svfiprintf_r+0xc6>
 8005834:	2353      	movs	r3, #83	@ 0x53
 8005836:	a904      	add	r1, sp, #16
 8005838:	185b      	adds	r3, r3, r1
 800583a:	212b      	movs	r1, #43	@ 0x2b
 800583c:	7019      	strb	r1, [r3, #0]
 800583e:	7833      	ldrb	r3, [r6, #0]
 8005840:	2b2a      	cmp	r3, #42	@ 0x2a
 8005842:	d016      	beq.n	8005872 <_svfiprintf_r+0xfa>
 8005844:	0035      	movs	r5, r6
 8005846:	2100      	movs	r1, #0
 8005848:	200a      	movs	r0, #10
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	782a      	ldrb	r2, [r5, #0]
 800584e:	1c6e      	adds	r6, r5, #1
 8005850:	3a30      	subs	r2, #48	@ 0x30
 8005852:	2a09      	cmp	r2, #9
 8005854:	d950      	bls.n	80058f8 <_svfiprintf_r+0x180>
 8005856:	2900      	cmp	r1, #0
 8005858:	d111      	bne.n	800587e <_svfiprintf_r+0x106>
 800585a:	e017      	b.n	800588c <_svfiprintf_r+0x114>
 800585c:	3501      	adds	r5, #1
 800585e:	e7af      	b.n	80057c0 <_svfiprintf_r+0x48>
 8005860:	9b05      	ldr	r3, [sp, #20]
 8005862:	6822      	ldr	r2, [r4, #0]
 8005864:	1ac0      	subs	r0, r0, r3
 8005866:	2301      	movs	r3, #1
 8005868:	4083      	lsls	r3, r0
 800586a:	4313      	orrs	r3, r2
 800586c:	002e      	movs	r6, r5
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	e7cc      	b.n	800580c <_svfiprintf_r+0x94>
 8005872:	9b07      	ldr	r3, [sp, #28]
 8005874:	1d19      	adds	r1, r3, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	9107      	str	r1, [sp, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	db01      	blt.n	8005882 <_svfiprintf_r+0x10a>
 800587e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005880:	e004      	b.n	800588c <_svfiprintf_r+0x114>
 8005882:	425b      	negs	r3, r3
 8005884:	60e3      	str	r3, [r4, #12]
 8005886:	2302      	movs	r3, #2
 8005888:	4313      	orrs	r3, r2
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	782b      	ldrb	r3, [r5, #0]
 800588e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005890:	d10c      	bne.n	80058ac <_svfiprintf_r+0x134>
 8005892:	786b      	ldrb	r3, [r5, #1]
 8005894:	2b2a      	cmp	r3, #42	@ 0x2a
 8005896:	d134      	bne.n	8005902 <_svfiprintf_r+0x18a>
 8005898:	9b07      	ldr	r3, [sp, #28]
 800589a:	3502      	adds	r5, #2
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	9207      	str	r2, [sp, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da01      	bge.n	80058aa <_svfiprintf_r+0x132>
 80058a6:	2301      	movs	r3, #1
 80058a8:	425b      	negs	r3, r3
 80058aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ac:	4e2d      	ldr	r6, [pc, #180]	@ (8005964 <_svfiprintf_r+0x1ec>)
 80058ae:	2203      	movs	r2, #3
 80058b0:	0030      	movs	r0, r6
 80058b2:	7829      	ldrb	r1, [r5, #0]
 80058b4:	f000 fc86 	bl	80061c4 <memchr>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d006      	beq.n	80058ca <_svfiprintf_r+0x152>
 80058bc:	2340      	movs	r3, #64	@ 0x40
 80058be:	1b80      	subs	r0, r0, r6
 80058c0:	4083      	lsls	r3, r0
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	3501      	adds	r5, #1
 80058c6:	4313      	orrs	r3, r2
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	7829      	ldrb	r1, [r5, #0]
 80058cc:	2206      	movs	r2, #6
 80058ce:	4826      	ldr	r0, [pc, #152]	@ (8005968 <_svfiprintf_r+0x1f0>)
 80058d0:	1c6e      	adds	r6, r5, #1
 80058d2:	7621      	strb	r1, [r4, #24]
 80058d4:	f000 fc76 	bl	80061c4 <memchr>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d038      	beq.n	800594e <_svfiprintf_r+0x1d6>
 80058dc:	4b23      	ldr	r3, [pc, #140]	@ (800596c <_svfiprintf_r+0x1f4>)
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d122      	bne.n	8005928 <_svfiprintf_r+0x1b0>
 80058e2:	2207      	movs	r2, #7
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	3307      	adds	r3, #7
 80058e8:	4393      	bics	r3, r2
 80058ea:	3308      	adds	r3, #8
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	6963      	ldr	r3, [r4, #20]
 80058f0:	9a04      	ldr	r2, [sp, #16]
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	6163      	str	r3, [r4, #20]
 80058f6:	e762      	b.n	80057be <_svfiprintf_r+0x46>
 80058f8:	4343      	muls	r3, r0
 80058fa:	0035      	movs	r5, r6
 80058fc:	2101      	movs	r1, #1
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	e7a4      	b.n	800584c <_svfiprintf_r+0xd4>
 8005902:	2300      	movs	r3, #0
 8005904:	200a      	movs	r0, #10
 8005906:	0019      	movs	r1, r3
 8005908:	3501      	adds	r5, #1
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	782a      	ldrb	r2, [r5, #0]
 800590e:	1c6e      	adds	r6, r5, #1
 8005910:	3a30      	subs	r2, #48	@ 0x30
 8005912:	2a09      	cmp	r2, #9
 8005914:	d903      	bls.n	800591e <_svfiprintf_r+0x1a6>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0c8      	beq.n	80058ac <_svfiprintf_r+0x134>
 800591a:	9109      	str	r1, [sp, #36]	@ 0x24
 800591c:	e7c6      	b.n	80058ac <_svfiprintf_r+0x134>
 800591e:	4341      	muls	r1, r0
 8005920:	0035      	movs	r5, r6
 8005922:	2301      	movs	r3, #1
 8005924:	1889      	adds	r1, r1, r2
 8005926:	e7f1      	b.n	800590c <_svfiprintf_r+0x194>
 8005928:	aa07      	add	r2, sp, #28
 800592a:	9200      	str	r2, [sp, #0]
 800592c:	0021      	movs	r1, r4
 800592e:	003a      	movs	r2, r7
 8005930:	4b0f      	ldr	r3, [pc, #60]	@ (8005970 <_svfiprintf_r+0x1f8>)
 8005932:	9803      	ldr	r0, [sp, #12]
 8005934:	e000      	b.n	8005938 <_svfiprintf_r+0x1c0>
 8005936:	bf00      	nop
 8005938:	9004      	str	r0, [sp, #16]
 800593a:	9b04      	ldr	r3, [sp, #16]
 800593c:	3301      	adds	r3, #1
 800593e:	d1d6      	bne.n	80058ee <_svfiprintf_r+0x176>
 8005940:	89bb      	ldrh	r3, [r7, #12]
 8005942:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005944:	065b      	lsls	r3, r3, #25
 8005946:	d500      	bpl.n	800594a <_svfiprintf_r+0x1d2>
 8005948:	e72c      	b.n	80057a4 <_svfiprintf_r+0x2c>
 800594a:	b021      	add	sp, #132	@ 0x84
 800594c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594e:	aa07      	add	r2, sp, #28
 8005950:	9200      	str	r2, [sp, #0]
 8005952:	0021      	movs	r1, r4
 8005954:	003a      	movs	r2, r7
 8005956:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <_svfiprintf_r+0x1f8>)
 8005958:	9803      	ldr	r0, [sp, #12]
 800595a:	f000 f9bf 	bl	8005cdc <_printf_i>
 800595e:	e7eb      	b.n	8005938 <_svfiprintf_r+0x1c0>
 8005960:	080069e4 	.word	0x080069e4
 8005964:	080069ea 	.word	0x080069ea
 8005968:	080069ee 	.word	0x080069ee
 800596c:	00000000 	.word	0x00000000
 8005970:	080056b9 	.word	0x080056b9

08005974 <__sfputc_r>:
 8005974:	6893      	ldr	r3, [r2, #8]
 8005976:	b510      	push	{r4, lr}
 8005978:	3b01      	subs	r3, #1
 800597a:	6093      	str	r3, [r2, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	da04      	bge.n	800598a <__sfputc_r+0x16>
 8005980:	6994      	ldr	r4, [r2, #24]
 8005982:	42a3      	cmp	r3, r4
 8005984:	db07      	blt.n	8005996 <__sfputc_r+0x22>
 8005986:	290a      	cmp	r1, #10
 8005988:	d005      	beq.n	8005996 <__sfputc_r+0x22>
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	1c58      	adds	r0, r3, #1
 800598e:	6010      	str	r0, [r2, #0]
 8005990:	7019      	strb	r1, [r3, #0]
 8005992:	0008      	movs	r0, r1
 8005994:	bd10      	pop	{r4, pc}
 8005996:	f7ff fc67 	bl	8005268 <__swbuf_r>
 800599a:	0001      	movs	r1, r0
 800599c:	e7f9      	b.n	8005992 <__sfputc_r+0x1e>

0800599e <__sfputs_r>:
 800599e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a0:	0006      	movs	r6, r0
 80059a2:	000f      	movs	r7, r1
 80059a4:	0014      	movs	r4, r2
 80059a6:	18d5      	adds	r5, r2, r3
 80059a8:	42ac      	cmp	r4, r5
 80059aa:	d101      	bne.n	80059b0 <__sfputs_r+0x12>
 80059ac:	2000      	movs	r0, #0
 80059ae:	e007      	b.n	80059c0 <__sfputs_r+0x22>
 80059b0:	7821      	ldrb	r1, [r4, #0]
 80059b2:	003a      	movs	r2, r7
 80059b4:	0030      	movs	r0, r6
 80059b6:	f7ff ffdd 	bl	8005974 <__sfputc_r>
 80059ba:	3401      	adds	r4, #1
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	d1f3      	bne.n	80059a8 <__sfputs_r+0xa>
 80059c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059c4 <_vfiprintf_r>:
 80059c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c6:	b0a1      	sub	sp, #132	@ 0x84
 80059c8:	000f      	movs	r7, r1
 80059ca:	0015      	movs	r5, r2
 80059cc:	001e      	movs	r6, r3
 80059ce:	9003      	str	r0, [sp, #12]
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d004      	beq.n	80059de <_vfiprintf_r+0x1a>
 80059d4:	6a03      	ldr	r3, [r0, #32]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <_vfiprintf_r+0x1a>
 80059da:	f7ff fb21 	bl	8005020 <__sinit>
 80059de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059e0:	07db      	lsls	r3, r3, #31
 80059e2:	d405      	bmi.n	80059f0 <_vfiprintf_r+0x2c>
 80059e4:	89bb      	ldrh	r3, [r7, #12]
 80059e6:	059b      	lsls	r3, r3, #22
 80059e8:	d402      	bmi.n	80059f0 <_vfiprintf_r+0x2c>
 80059ea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80059ec:	f7ff fd5d 	bl	80054aa <__retarget_lock_acquire_recursive>
 80059f0:	89bb      	ldrh	r3, [r7, #12]
 80059f2:	071b      	lsls	r3, r3, #28
 80059f4:	d502      	bpl.n	80059fc <_vfiprintf_r+0x38>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d113      	bne.n	8005a24 <_vfiprintf_r+0x60>
 80059fc:	0039      	movs	r1, r7
 80059fe:	9803      	ldr	r0, [sp, #12]
 8005a00:	f7ff fc74 	bl	80052ec <__swsetup_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d00d      	beq.n	8005a24 <_vfiprintf_r+0x60>
 8005a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a0a:	07db      	lsls	r3, r3, #31
 8005a0c:	d503      	bpl.n	8005a16 <_vfiprintf_r+0x52>
 8005a0e:	2001      	movs	r0, #1
 8005a10:	4240      	negs	r0, r0
 8005a12:	b021      	add	sp, #132	@ 0x84
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	89bb      	ldrh	r3, [r7, #12]
 8005a18:	059b      	lsls	r3, r3, #22
 8005a1a:	d4f8      	bmi.n	8005a0e <_vfiprintf_r+0x4a>
 8005a1c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005a1e:	f7ff fd45 	bl	80054ac <__retarget_lock_release_recursive>
 8005a22:	e7f4      	b.n	8005a0e <_vfiprintf_r+0x4a>
 8005a24:	2300      	movs	r3, #0
 8005a26:	ac08      	add	r4, sp, #32
 8005a28:	6163      	str	r3, [r4, #20]
 8005a2a:	3320      	adds	r3, #32
 8005a2c:	7663      	strb	r3, [r4, #25]
 8005a2e:	3310      	adds	r3, #16
 8005a30:	76a3      	strb	r3, [r4, #26]
 8005a32:	9607      	str	r6, [sp, #28]
 8005a34:	002e      	movs	r6, r5
 8005a36:	7833      	ldrb	r3, [r6, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <_vfiprintf_r+0x7c>
 8005a3c:	2b25      	cmp	r3, #37	@ 0x25
 8005a3e:	d148      	bne.n	8005ad2 <_vfiprintf_r+0x10e>
 8005a40:	1b73      	subs	r3, r6, r5
 8005a42:	9305      	str	r3, [sp, #20]
 8005a44:	42ae      	cmp	r6, r5
 8005a46:	d00b      	beq.n	8005a60 <_vfiprintf_r+0x9c>
 8005a48:	002a      	movs	r2, r5
 8005a4a:	0039      	movs	r1, r7
 8005a4c:	9803      	ldr	r0, [sp, #12]
 8005a4e:	f7ff ffa6 	bl	800599e <__sfputs_r>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d100      	bne.n	8005a58 <_vfiprintf_r+0x94>
 8005a56:	e0ae      	b.n	8005bb6 <_vfiprintf_r+0x1f2>
 8005a58:	6963      	ldr	r3, [r4, #20]
 8005a5a:	9a05      	ldr	r2, [sp, #20]
 8005a5c:	189b      	adds	r3, r3, r2
 8005a5e:	6163      	str	r3, [r4, #20]
 8005a60:	7833      	ldrb	r3, [r6, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d100      	bne.n	8005a68 <_vfiprintf_r+0xa4>
 8005a66:	e0a6      	b.n	8005bb6 <_vfiprintf_r+0x1f2>
 8005a68:	2201      	movs	r2, #1
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4252      	negs	r2, r2
 8005a6e:	6062      	str	r2, [r4, #4]
 8005a70:	a904      	add	r1, sp, #16
 8005a72:	3254      	adds	r2, #84	@ 0x54
 8005a74:	1852      	adds	r2, r2, r1
 8005a76:	1c75      	adds	r5, r6, #1
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	60e3      	str	r3, [r4, #12]
 8005a7c:	60a3      	str	r3, [r4, #8]
 8005a7e:	7013      	strb	r3, [r2, #0]
 8005a80:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005a82:	4b59      	ldr	r3, [pc, #356]	@ (8005be8 <_vfiprintf_r+0x224>)
 8005a84:	2205      	movs	r2, #5
 8005a86:	0018      	movs	r0, r3
 8005a88:	7829      	ldrb	r1, [r5, #0]
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	f000 fb9a 	bl	80061c4 <memchr>
 8005a90:	1c6e      	adds	r6, r5, #1
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d11f      	bne.n	8005ad6 <_vfiprintf_r+0x112>
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	06d3      	lsls	r3, r2, #27
 8005a9a:	d504      	bpl.n	8005aa6 <_vfiprintf_r+0xe2>
 8005a9c:	2353      	movs	r3, #83	@ 0x53
 8005a9e:	a904      	add	r1, sp, #16
 8005aa0:	185b      	adds	r3, r3, r1
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	7019      	strb	r1, [r3, #0]
 8005aa6:	0713      	lsls	r3, r2, #28
 8005aa8:	d504      	bpl.n	8005ab4 <_vfiprintf_r+0xf0>
 8005aaa:	2353      	movs	r3, #83	@ 0x53
 8005aac:	a904      	add	r1, sp, #16
 8005aae:	185b      	adds	r3, r3, r1
 8005ab0:	212b      	movs	r1, #43	@ 0x2b
 8005ab2:	7019      	strb	r1, [r3, #0]
 8005ab4:	782b      	ldrb	r3, [r5, #0]
 8005ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab8:	d016      	beq.n	8005ae8 <_vfiprintf_r+0x124>
 8005aba:	002e      	movs	r6, r5
 8005abc:	2100      	movs	r1, #0
 8005abe:	200a      	movs	r0, #10
 8005ac0:	68e3      	ldr	r3, [r4, #12]
 8005ac2:	7832      	ldrb	r2, [r6, #0]
 8005ac4:	1c75      	adds	r5, r6, #1
 8005ac6:	3a30      	subs	r2, #48	@ 0x30
 8005ac8:	2a09      	cmp	r2, #9
 8005aca:	d950      	bls.n	8005b6e <_vfiprintf_r+0x1aa>
 8005acc:	2900      	cmp	r1, #0
 8005ace:	d111      	bne.n	8005af4 <_vfiprintf_r+0x130>
 8005ad0:	e017      	b.n	8005b02 <_vfiprintf_r+0x13e>
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	e7af      	b.n	8005a36 <_vfiprintf_r+0x72>
 8005ad6:	9b05      	ldr	r3, [sp, #20]
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	1ac0      	subs	r0, r0, r3
 8005adc:	2301      	movs	r3, #1
 8005ade:	4083      	lsls	r3, r0
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	0035      	movs	r5, r6
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	e7cc      	b.n	8005a82 <_vfiprintf_r+0xbe>
 8005ae8:	9b07      	ldr	r3, [sp, #28]
 8005aea:	1d19      	adds	r1, r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	9107      	str	r1, [sp, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	db01      	blt.n	8005af8 <_vfiprintf_r+0x134>
 8005af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005af6:	e004      	b.n	8005b02 <_vfiprintf_r+0x13e>
 8005af8:	425b      	negs	r3, r3
 8005afa:	60e3      	str	r3, [r4, #12]
 8005afc:	2302      	movs	r3, #2
 8005afe:	4313      	orrs	r3, r2
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	7833      	ldrb	r3, [r6, #0]
 8005b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b06:	d10c      	bne.n	8005b22 <_vfiprintf_r+0x15e>
 8005b08:	7873      	ldrb	r3, [r6, #1]
 8005b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b0c:	d134      	bne.n	8005b78 <_vfiprintf_r+0x1b4>
 8005b0e:	9b07      	ldr	r3, [sp, #28]
 8005b10:	3602      	adds	r6, #2
 8005b12:	1d1a      	adds	r2, r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	9207      	str	r2, [sp, #28]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da01      	bge.n	8005b20 <_vfiprintf_r+0x15c>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	425b      	negs	r3, r3
 8005b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b22:	4d32      	ldr	r5, [pc, #200]	@ (8005bec <_vfiprintf_r+0x228>)
 8005b24:	2203      	movs	r2, #3
 8005b26:	0028      	movs	r0, r5
 8005b28:	7831      	ldrb	r1, [r6, #0]
 8005b2a:	f000 fb4b 	bl	80061c4 <memchr>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d006      	beq.n	8005b40 <_vfiprintf_r+0x17c>
 8005b32:	2340      	movs	r3, #64	@ 0x40
 8005b34:	1b40      	subs	r0, r0, r5
 8005b36:	4083      	lsls	r3, r0
 8005b38:	6822      	ldr	r2, [r4, #0]
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	7831      	ldrb	r1, [r6, #0]
 8005b42:	2206      	movs	r2, #6
 8005b44:	482a      	ldr	r0, [pc, #168]	@ (8005bf0 <_vfiprintf_r+0x22c>)
 8005b46:	1c75      	adds	r5, r6, #1
 8005b48:	7621      	strb	r1, [r4, #24]
 8005b4a:	f000 fb3b 	bl	80061c4 <memchr>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d040      	beq.n	8005bd4 <_vfiprintf_r+0x210>
 8005b52:	4b28      	ldr	r3, [pc, #160]	@ (8005bf4 <_vfiprintf_r+0x230>)
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d122      	bne.n	8005b9e <_vfiprintf_r+0x1da>
 8005b58:	2207      	movs	r2, #7
 8005b5a:	9b07      	ldr	r3, [sp, #28]
 8005b5c:	3307      	adds	r3, #7
 8005b5e:	4393      	bics	r3, r2
 8005b60:	3308      	adds	r3, #8
 8005b62:	9307      	str	r3, [sp, #28]
 8005b64:	6963      	ldr	r3, [r4, #20]
 8005b66:	9a04      	ldr	r2, [sp, #16]
 8005b68:	189b      	adds	r3, r3, r2
 8005b6a:	6163      	str	r3, [r4, #20]
 8005b6c:	e762      	b.n	8005a34 <_vfiprintf_r+0x70>
 8005b6e:	4343      	muls	r3, r0
 8005b70:	002e      	movs	r6, r5
 8005b72:	2101      	movs	r1, #1
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	e7a4      	b.n	8005ac2 <_vfiprintf_r+0xfe>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	200a      	movs	r0, #10
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	6063      	str	r3, [r4, #4]
 8005b82:	7832      	ldrb	r2, [r6, #0]
 8005b84:	1c75      	adds	r5, r6, #1
 8005b86:	3a30      	subs	r2, #48	@ 0x30
 8005b88:	2a09      	cmp	r2, #9
 8005b8a:	d903      	bls.n	8005b94 <_vfiprintf_r+0x1d0>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0c8      	beq.n	8005b22 <_vfiprintf_r+0x15e>
 8005b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b92:	e7c6      	b.n	8005b22 <_vfiprintf_r+0x15e>
 8005b94:	4341      	muls	r1, r0
 8005b96:	002e      	movs	r6, r5
 8005b98:	2301      	movs	r3, #1
 8005b9a:	1889      	adds	r1, r1, r2
 8005b9c:	e7f1      	b.n	8005b82 <_vfiprintf_r+0x1be>
 8005b9e:	aa07      	add	r2, sp, #28
 8005ba0:	9200      	str	r2, [sp, #0]
 8005ba2:	0021      	movs	r1, r4
 8005ba4:	003a      	movs	r2, r7
 8005ba6:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <_vfiprintf_r+0x234>)
 8005ba8:	9803      	ldr	r0, [sp, #12]
 8005baa:	e000      	b.n	8005bae <_vfiprintf_r+0x1ea>
 8005bac:	bf00      	nop
 8005bae:	9004      	str	r0, [sp, #16]
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	d1d6      	bne.n	8005b64 <_vfiprintf_r+0x1a0>
 8005bb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bb8:	07db      	lsls	r3, r3, #31
 8005bba:	d405      	bmi.n	8005bc8 <_vfiprintf_r+0x204>
 8005bbc:	89bb      	ldrh	r3, [r7, #12]
 8005bbe:	059b      	lsls	r3, r3, #22
 8005bc0:	d402      	bmi.n	8005bc8 <_vfiprintf_r+0x204>
 8005bc2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005bc4:	f7ff fc72 	bl	80054ac <__retarget_lock_release_recursive>
 8005bc8:	89bb      	ldrh	r3, [r7, #12]
 8005bca:	065b      	lsls	r3, r3, #25
 8005bcc:	d500      	bpl.n	8005bd0 <_vfiprintf_r+0x20c>
 8005bce:	e71e      	b.n	8005a0e <_vfiprintf_r+0x4a>
 8005bd0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005bd2:	e71e      	b.n	8005a12 <_vfiprintf_r+0x4e>
 8005bd4:	aa07      	add	r2, sp, #28
 8005bd6:	9200      	str	r2, [sp, #0]
 8005bd8:	0021      	movs	r1, r4
 8005bda:	003a      	movs	r2, r7
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <_vfiprintf_r+0x234>)
 8005bde:	9803      	ldr	r0, [sp, #12]
 8005be0:	f000 f87c 	bl	8005cdc <_printf_i>
 8005be4:	e7e3      	b.n	8005bae <_vfiprintf_r+0x1ea>
 8005be6:	46c0      	nop			@ (mov r8, r8)
 8005be8:	080069e4 	.word	0x080069e4
 8005bec:	080069ea 	.word	0x080069ea
 8005bf0:	080069ee 	.word	0x080069ee
 8005bf4:	00000000 	.word	0x00000000
 8005bf8:	0800599f 	.word	0x0800599f

08005bfc <_printf_common>:
 8005bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bfe:	0016      	movs	r6, r2
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	688a      	ldr	r2, [r1, #8]
 8005c04:	690b      	ldr	r3, [r1, #16]
 8005c06:	000c      	movs	r4, r1
 8005c08:	9000      	str	r0, [sp, #0]
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	da00      	bge.n	8005c10 <_printf_common+0x14>
 8005c0e:	0013      	movs	r3, r2
 8005c10:	0022      	movs	r2, r4
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	3243      	adds	r2, #67	@ 0x43
 8005c16:	7812      	ldrb	r2, [r2, #0]
 8005c18:	2a00      	cmp	r2, #0
 8005c1a:	d001      	beq.n	8005c20 <_printf_common+0x24>
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	6033      	str	r3, [r6, #0]
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	069b      	lsls	r3, r3, #26
 8005c24:	d502      	bpl.n	8005c2c <_printf_common+0x30>
 8005c26:	6833      	ldr	r3, [r6, #0]
 8005c28:	3302      	adds	r3, #2
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	2306      	movs	r3, #6
 8005c30:	0015      	movs	r5, r2
 8005c32:	401d      	ands	r5, r3
 8005c34:	421a      	tst	r2, r3
 8005c36:	d027      	beq.n	8005c88 <_printf_common+0x8c>
 8005c38:	0023      	movs	r3, r4
 8005c3a:	3343      	adds	r3, #67	@ 0x43
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	1e5a      	subs	r2, r3, #1
 8005c40:	4193      	sbcs	r3, r2
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	0692      	lsls	r2, r2, #26
 8005c46:	d430      	bmi.n	8005caa <_printf_common+0xae>
 8005c48:	0022      	movs	r2, r4
 8005c4a:	9901      	ldr	r1, [sp, #4]
 8005c4c:	9800      	ldr	r0, [sp, #0]
 8005c4e:	9d08      	ldr	r5, [sp, #32]
 8005c50:	3243      	adds	r2, #67	@ 0x43
 8005c52:	47a8      	blx	r5
 8005c54:	3001      	adds	r0, #1
 8005c56:	d025      	beq.n	8005ca4 <_printf_common+0xa8>
 8005c58:	2206      	movs	r2, #6
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	2500      	movs	r5, #0
 8005c5e:	4013      	ands	r3, r2
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d105      	bne.n	8005c70 <_printf_common+0x74>
 8005c64:	6833      	ldr	r3, [r6, #0]
 8005c66:	68e5      	ldr	r5, [r4, #12]
 8005c68:	1aed      	subs	r5, r5, r3
 8005c6a:	43eb      	mvns	r3, r5
 8005c6c:	17db      	asrs	r3, r3, #31
 8005c6e:	401d      	ands	r5, r3
 8005c70:	68a3      	ldr	r3, [r4, #8]
 8005c72:	6922      	ldr	r2, [r4, #16]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	dd01      	ble.n	8005c7c <_printf_common+0x80>
 8005c78:	1a9b      	subs	r3, r3, r2
 8005c7a:	18ed      	adds	r5, r5, r3
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	42b5      	cmp	r5, r6
 8005c80:	d120      	bne.n	8005cc4 <_printf_common+0xc8>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e010      	b.n	8005ca8 <_printf_common+0xac>
 8005c86:	3501      	adds	r5, #1
 8005c88:	68e3      	ldr	r3, [r4, #12]
 8005c8a:	6832      	ldr	r2, [r6, #0]
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	42ab      	cmp	r3, r5
 8005c90:	ddd2      	ble.n	8005c38 <_printf_common+0x3c>
 8005c92:	0022      	movs	r2, r4
 8005c94:	2301      	movs	r3, #1
 8005c96:	9901      	ldr	r1, [sp, #4]
 8005c98:	9800      	ldr	r0, [sp, #0]
 8005c9a:	9f08      	ldr	r7, [sp, #32]
 8005c9c:	3219      	adds	r2, #25
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d1f0      	bne.n	8005c86 <_printf_common+0x8a>
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	4240      	negs	r0, r0
 8005ca8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005caa:	2030      	movs	r0, #48	@ 0x30
 8005cac:	18e1      	adds	r1, r4, r3
 8005cae:	3143      	adds	r1, #67	@ 0x43
 8005cb0:	7008      	strb	r0, [r1, #0]
 8005cb2:	0021      	movs	r1, r4
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	3145      	adds	r1, #69	@ 0x45
 8005cb8:	7809      	ldrb	r1, [r1, #0]
 8005cba:	18a2      	adds	r2, r4, r2
 8005cbc:	3243      	adds	r2, #67	@ 0x43
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	7011      	strb	r1, [r2, #0]
 8005cc2:	e7c1      	b.n	8005c48 <_printf_common+0x4c>
 8005cc4:	0022      	movs	r2, r4
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9901      	ldr	r1, [sp, #4]
 8005cca:	9800      	ldr	r0, [sp, #0]
 8005ccc:	9f08      	ldr	r7, [sp, #32]
 8005cce:	321a      	adds	r2, #26
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d0e6      	beq.n	8005ca4 <_printf_common+0xa8>
 8005cd6:	3601      	adds	r6, #1
 8005cd8:	e7d1      	b.n	8005c7e <_printf_common+0x82>
	...

08005cdc <_printf_i>:
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cde:	b08b      	sub	sp, #44	@ 0x2c
 8005ce0:	9206      	str	r2, [sp, #24]
 8005ce2:	000a      	movs	r2, r1
 8005ce4:	3243      	adds	r2, #67	@ 0x43
 8005ce6:	9307      	str	r3, [sp, #28]
 8005ce8:	9005      	str	r0, [sp, #20]
 8005cea:	9203      	str	r2, [sp, #12]
 8005cec:	7e0a      	ldrb	r2, [r1, #24]
 8005cee:	000c      	movs	r4, r1
 8005cf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cf2:	2a78      	cmp	r2, #120	@ 0x78
 8005cf4:	d809      	bhi.n	8005d0a <_printf_i+0x2e>
 8005cf6:	2a62      	cmp	r2, #98	@ 0x62
 8005cf8:	d80b      	bhi.n	8005d12 <_printf_i+0x36>
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	d100      	bne.n	8005d00 <_printf_i+0x24>
 8005cfe:	e0bc      	b.n	8005e7a <_printf_i+0x19e>
 8005d00:	497b      	ldr	r1, [pc, #492]	@ (8005ef0 <_printf_i+0x214>)
 8005d02:	9104      	str	r1, [sp, #16]
 8005d04:	2a58      	cmp	r2, #88	@ 0x58
 8005d06:	d100      	bne.n	8005d0a <_printf_i+0x2e>
 8005d08:	e090      	b.n	8005e2c <_printf_i+0x150>
 8005d0a:	0025      	movs	r5, r4
 8005d0c:	3542      	adds	r5, #66	@ 0x42
 8005d0e:	702a      	strb	r2, [r5, #0]
 8005d10:	e022      	b.n	8005d58 <_printf_i+0x7c>
 8005d12:	0010      	movs	r0, r2
 8005d14:	3863      	subs	r0, #99	@ 0x63
 8005d16:	2815      	cmp	r0, #21
 8005d18:	d8f7      	bhi.n	8005d0a <_printf_i+0x2e>
 8005d1a:	f7fa f9fd 	bl	8000118 <__gnu_thumb1_case_shi>
 8005d1e:	0016      	.short	0x0016
 8005d20:	fff6001f 	.word	0xfff6001f
 8005d24:	fff6fff6 	.word	0xfff6fff6
 8005d28:	001ffff6 	.word	0x001ffff6
 8005d2c:	fff6fff6 	.word	0xfff6fff6
 8005d30:	fff6fff6 	.word	0xfff6fff6
 8005d34:	003600a1 	.word	0x003600a1
 8005d38:	fff60080 	.word	0xfff60080
 8005d3c:	00b2fff6 	.word	0x00b2fff6
 8005d40:	0036fff6 	.word	0x0036fff6
 8005d44:	fff6fff6 	.word	0xfff6fff6
 8005d48:	0084      	.short	0x0084
 8005d4a:	0025      	movs	r5, r4
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	3542      	adds	r5, #66	@ 0x42
 8005d50:	1d11      	adds	r1, r2, #4
 8005d52:	6019      	str	r1, [r3, #0]
 8005d54:	6813      	ldr	r3, [r2, #0]
 8005d56:	702b      	strb	r3, [r5, #0]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0a0      	b.n	8005e9e <_printf_i+0x1c2>
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	6809      	ldr	r1, [r1, #0]
 8005d60:	1d02      	adds	r2, r0, #4
 8005d62:	060d      	lsls	r5, r1, #24
 8005d64:	d50b      	bpl.n	8005d7e <_printf_i+0xa2>
 8005d66:	6806      	ldr	r6, [r0, #0]
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	2e00      	cmp	r6, #0
 8005d6c:	da03      	bge.n	8005d76 <_printf_i+0x9a>
 8005d6e:	232d      	movs	r3, #45	@ 0x2d
 8005d70:	9a03      	ldr	r2, [sp, #12]
 8005d72:	4276      	negs	r6, r6
 8005d74:	7013      	strb	r3, [r2, #0]
 8005d76:	4b5e      	ldr	r3, [pc, #376]	@ (8005ef0 <_printf_i+0x214>)
 8005d78:	270a      	movs	r7, #10
 8005d7a:	9304      	str	r3, [sp, #16]
 8005d7c:	e018      	b.n	8005db0 <_printf_i+0xd4>
 8005d7e:	6806      	ldr	r6, [r0, #0]
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	0649      	lsls	r1, r1, #25
 8005d84:	d5f1      	bpl.n	8005d6a <_printf_i+0x8e>
 8005d86:	b236      	sxth	r6, r6
 8005d88:	e7ef      	b.n	8005d6a <_printf_i+0x8e>
 8005d8a:	6808      	ldr	r0, [r1, #0]
 8005d8c:	6819      	ldr	r1, [r3, #0]
 8005d8e:	c940      	ldmia	r1!, {r6}
 8005d90:	0605      	lsls	r5, r0, #24
 8005d92:	d402      	bmi.n	8005d9a <_printf_i+0xbe>
 8005d94:	0640      	lsls	r0, r0, #25
 8005d96:	d500      	bpl.n	8005d9a <_printf_i+0xbe>
 8005d98:	b2b6      	uxth	r6, r6
 8005d9a:	6019      	str	r1, [r3, #0]
 8005d9c:	4b54      	ldr	r3, [pc, #336]	@ (8005ef0 <_printf_i+0x214>)
 8005d9e:	270a      	movs	r7, #10
 8005da0:	9304      	str	r3, [sp, #16]
 8005da2:	2a6f      	cmp	r2, #111	@ 0x6f
 8005da4:	d100      	bne.n	8005da8 <_printf_i+0xcc>
 8005da6:	3f02      	subs	r7, #2
 8005da8:	0023      	movs	r3, r4
 8005daa:	2200      	movs	r2, #0
 8005dac:	3343      	adds	r3, #67	@ 0x43
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	6863      	ldr	r3, [r4, #4]
 8005db2:	60a3      	str	r3, [r4, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	db03      	blt.n	8005dc0 <_printf_i+0xe4>
 8005db8:	2104      	movs	r1, #4
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	6022      	str	r2, [r4, #0]
 8005dc0:	2e00      	cmp	r6, #0
 8005dc2:	d102      	bne.n	8005dca <_printf_i+0xee>
 8005dc4:	9d03      	ldr	r5, [sp, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00c      	beq.n	8005de4 <_printf_i+0x108>
 8005dca:	9d03      	ldr	r5, [sp, #12]
 8005dcc:	0030      	movs	r0, r6
 8005dce:	0039      	movs	r1, r7
 8005dd0:	f7fa fa32 	bl	8000238 <__aeabi_uidivmod>
 8005dd4:	9b04      	ldr	r3, [sp, #16]
 8005dd6:	3d01      	subs	r5, #1
 8005dd8:	5c5b      	ldrb	r3, [r3, r1]
 8005dda:	702b      	strb	r3, [r5, #0]
 8005ddc:	0033      	movs	r3, r6
 8005dde:	0006      	movs	r6, r0
 8005de0:	429f      	cmp	r7, r3
 8005de2:	d9f3      	bls.n	8005dcc <_printf_i+0xf0>
 8005de4:	2f08      	cmp	r7, #8
 8005de6:	d109      	bne.n	8005dfc <_printf_i+0x120>
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	07db      	lsls	r3, r3, #31
 8005dec:	d506      	bpl.n	8005dfc <_printf_i+0x120>
 8005dee:	6862      	ldr	r2, [r4, #4]
 8005df0:	6923      	ldr	r3, [r4, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	dc02      	bgt.n	8005dfc <_printf_i+0x120>
 8005df6:	2330      	movs	r3, #48	@ 0x30
 8005df8:	3d01      	subs	r5, #1
 8005dfa:	702b      	strb	r3, [r5, #0]
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	1b5b      	subs	r3, r3, r5
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	9b07      	ldr	r3, [sp, #28]
 8005e04:	0021      	movs	r1, r4
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	9805      	ldr	r0, [sp, #20]
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	aa09      	add	r2, sp, #36	@ 0x24
 8005e0e:	f7ff fef5 	bl	8005bfc <_printf_common>
 8005e12:	3001      	adds	r0, #1
 8005e14:	d148      	bne.n	8005ea8 <_printf_i+0x1cc>
 8005e16:	2001      	movs	r0, #1
 8005e18:	4240      	negs	r0, r0
 8005e1a:	b00b      	add	sp, #44	@ 0x2c
 8005e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1e:	2220      	movs	r2, #32
 8005e20:	6809      	ldr	r1, [r1, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	2278      	movs	r2, #120	@ 0x78
 8005e28:	4932      	ldr	r1, [pc, #200]	@ (8005ef4 <_printf_i+0x218>)
 8005e2a:	9104      	str	r1, [sp, #16]
 8005e2c:	0021      	movs	r1, r4
 8005e2e:	3145      	adds	r1, #69	@ 0x45
 8005e30:	700a      	strb	r2, [r1, #0]
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	6822      	ldr	r2, [r4, #0]
 8005e36:	c940      	ldmia	r1!, {r6}
 8005e38:	0610      	lsls	r0, r2, #24
 8005e3a:	d402      	bmi.n	8005e42 <_printf_i+0x166>
 8005e3c:	0650      	lsls	r0, r2, #25
 8005e3e:	d500      	bpl.n	8005e42 <_printf_i+0x166>
 8005e40:	b2b6      	uxth	r6, r6
 8005e42:	6019      	str	r1, [r3, #0]
 8005e44:	07d3      	lsls	r3, r2, #31
 8005e46:	d502      	bpl.n	8005e4e <_printf_i+0x172>
 8005e48:	2320      	movs	r3, #32
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	d001      	beq.n	8005e56 <_printf_i+0x17a>
 8005e52:	2710      	movs	r7, #16
 8005e54:	e7a8      	b.n	8005da8 <_printf_i+0xcc>
 8005e56:	2220      	movs	r2, #32
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	4393      	bics	r3, r2
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	e7f8      	b.n	8005e52 <_printf_i+0x176>
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	680d      	ldr	r5, [r1, #0]
 8005e64:	1d10      	adds	r0, r2, #4
 8005e66:	6949      	ldr	r1, [r1, #20]
 8005e68:	6018      	str	r0, [r3, #0]
 8005e6a:	6813      	ldr	r3, [r2, #0]
 8005e6c:	062e      	lsls	r6, r5, #24
 8005e6e:	d501      	bpl.n	8005e74 <_printf_i+0x198>
 8005e70:	6019      	str	r1, [r3, #0]
 8005e72:	e002      	b.n	8005e7a <_printf_i+0x19e>
 8005e74:	066d      	lsls	r5, r5, #25
 8005e76:	d5fb      	bpl.n	8005e70 <_printf_i+0x194>
 8005e78:	8019      	strh	r1, [r3, #0]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9d03      	ldr	r5, [sp, #12]
 8005e7e:	6123      	str	r3, [r4, #16]
 8005e80:	e7bf      	b.n	8005e02 <_printf_i+0x126>
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	1d11      	adds	r1, r2, #4
 8005e86:	6019      	str	r1, [r3, #0]
 8005e88:	6815      	ldr	r5, [r2, #0]
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	0028      	movs	r0, r5
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	f000 f998 	bl	80061c4 <memchr>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d001      	beq.n	8005e9c <_printf_i+0x1c0>
 8005e98:	1b40      	subs	r0, r0, r5
 8005e9a:	6060      	str	r0, [r4, #4]
 8005e9c:	6863      	ldr	r3, [r4, #4]
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	9a03      	ldr	r2, [sp, #12]
 8005ea4:	7013      	strb	r3, [r2, #0]
 8005ea6:	e7ac      	b.n	8005e02 <_printf_i+0x126>
 8005ea8:	002a      	movs	r2, r5
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	9906      	ldr	r1, [sp, #24]
 8005eae:	9805      	ldr	r0, [sp, #20]
 8005eb0:	9d07      	ldr	r5, [sp, #28]
 8005eb2:	47a8      	blx	r5
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d0ae      	beq.n	8005e16 <_printf_i+0x13a>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	d415      	bmi.n	8005eea <_printf_i+0x20e>
 8005ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	daa9      	bge.n	8005e1a <_printf_i+0x13e>
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	e7a7      	b.n	8005e1a <_printf_i+0x13e>
 8005eca:	0022      	movs	r2, r4
 8005ecc:	2301      	movs	r3, #1
 8005ece:	9906      	ldr	r1, [sp, #24]
 8005ed0:	9805      	ldr	r0, [sp, #20]
 8005ed2:	9e07      	ldr	r6, [sp, #28]
 8005ed4:	3219      	adds	r2, #25
 8005ed6:	47b0      	blx	r6
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d09c      	beq.n	8005e16 <_printf_i+0x13a>
 8005edc:	3501      	adds	r5, #1
 8005ede:	68e3      	ldr	r3, [r4, #12]
 8005ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	42ab      	cmp	r3, r5
 8005ee6:	dcf0      	bgt.n	8005eca <_printf_i+0x1ee>
 8005ee8:	e7e9      	b.n	8005ebe <_printf_i+0x1e2>
 8005eea:	2500      	movs	r5, #0
 8005eec:	e7f7      	b.n	8005ede <_printf_i+0x202>
 8005eee:	46c0      	nop			@ (mov r8, r8)
 8005ef0:	080069f5 	.word	0x080069f5
 8005ef4:	08006a06 	.word	0x08006a06

08005ef8 <__sflush_r>:
 8005ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005efa:	220c      	movs	r2, #12
 8005efc:	5e8b      	ldrsh	r3, [r1, r2]
 8005efe:	0005      	movs	r5, r0
 8005f00:	000c      	movs	r4, r1
 8005f02:	071a      	lsls	r2, r3, #28
 8005f04:	d456      	bmi.n	8005fb4 <__sflush_r+0xbc>
 8005f06:	684a      	ldr	r2, [r1, #4]
 8005f08:	2a00      	cmp	r2, #0
 8005f0a:	dc02      	bgt.n	8005f12 <__sflush_r+0x1a>
 8005f0c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	dd4e      	ble.n	8005fb0 <__sflush_r+0xb8>
 8005f12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005f14:	2f00      	cmp	r7, #0
 8005f16:	d04b      	beq.n	8005fb0 <__sflush_r+0xb8>
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2080      	movs	r0, #128	@ 0x80
 8005f1c:	682e      	ldr	r6, [r5, #0]
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	001a      	movs	r2, r3
 8005f22:	0140      	lsls	r0, r0, #5
 8005f24:	6a21      	ldr	r1, [r4, #32]
 8005f26:	4002      	ands	r2, r0
 8005f28:	4203      	tst	r3, r0
 8005f2a:	d033      	beq.n	8005f94 <__sflush_r+0x9c>
 8005f2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f2e:	89a3      	ldrh	r3, [r4, #12]
 8005f30:	075b      	lsls	r3, r3, #29
 8005f32:	d506      	bpl.n	8005f42 <__sflush_r+0x4a>
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	1ad2      	subs	r2, r2, r3
 8005f38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <__sflush_r+0x4a>
 8005f3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f40:	1ad2      	subs	r2, r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	0028      	movs	r0, r5
 8005f46:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005f48:	6a21      	ldr	r1, [r4, #32]
 8005f4a:	47b8      	blx	r7
 8005f4c:	89a2      	ldrh	r2, [r4, #12]
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d106      	bne.n	8005f60 <__sflush_r+0x68>
 8005f52:	6829      	ldr	r1, [r5, #0]
 8005f54:	291d      	cmp	r1, #29
 8005f56:	d846      	bhi.n	8005fe6 <__sflush_r+0xee>
 8005f58:	4b29      	ldr	r3, [pc, #164]	@ (8006000 <__sflush_r+0x108>)
 8005f5a:	410b      	asrs	r3, r1
 8005f5c:	07db      	lsls	r3, r3, #31
 8005f5e:	d442      	bmi.n	8005fe6 <__sflush_r+0xee>
 8005f60:	2300      	movs	r3, #0
 8005f62:	6063      	str	r3, [r4, #4]
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	04d2      	lsls	r2, r2, #19
 8005f6a:	d505      	bpl.n	8005f78 <__sflush_r+0x80>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <__sflush_r+0x7e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d100      	bne.n	8005f78 <__sflush_r+0x80>
 8005f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f7a:	602e      	str	r6, [r5, #0]
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	d017      	beq.n	8005fb0 <__sflush_r+0xb8>
 8005f80:	0023      	movs	r3, r4
 8005f82:	3344      	adds	r3, #68	@ 0x44
 8005f84:	4299      	cmp	r1, r3
 8005f86:	d002      	beq.n	8005f8e <__sflush_r+0x96>
 8005f88:	0028      	movs	r0, r5
 8005f8a:	f7ff fa99 	bl	80054c0 <_free_r>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f92:	e00d      	b.n	8005fb0 <__sflush_r+0xb8>
 8005f94:	2301      	movs	r3, #1
 8005f96:	0028      	movs	r0, r5
 8005f98:	47b8      	blx	r7
 8005f9a:	0002      	movs	r2, r0
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d1c6      	bne.n	8005f2e <__sflush_r+0x36>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0c3      	beq.n	8005f2e <__sflush_r+0x36>
 8005fa6:	2b1d      	cmp	r3, #29
 8005fa8:	d001      	beq.n	8005fae <__sflush_r+0xb6>
 8005faa:	2b16      	cmp	r3, #22
 8005fac:	d11a      	bne.n	8005fe4 <__sflush_r+0xec>
 8005fae:	602e      	str	r6, [r5, #0]
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e01e      	b.n	8005ff2 <__sflush_r+0xfa>
 8005fb4:	690e      	ldr	r6, [r1, #16]
 8005fb6:	2e00      	cmp	r6, #0
 8005fb8:	d0fa      	beq.n	8005fb0 <__sflush_r+0xb8>
 8005fba:	680f      	ldr	r7, [r1, #0]
 8005fbc:	600e      	str	r6, [r1, #0]
 8005fbe:	1bba      	subs	r2, r7, r6
 8005fc0:	9201      	str	r2, [sp, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	079b      	lsls	r3, r3, #30
 8005fc6:	d100      	bne.n	8005fca <__sflush_r+0xd2>
 8005fc8:	694a      	ldr	r2, [r1, #20]
 8005fca:	60a2      	str	r2, [r4, #8]
 8005fcc:	9b01      	ldr	r3, [sp, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	ddee      	ble.n	8005fb0 <__sflush_r+0xb8>
 8005fd2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005fd4:	0032      	movs	r2, r6
 8005fd6:	001f      	movs	r7, r3
 8005fd8:	0028      	movs	r0, r5
 8005fda:	9b01      	ldr	r3, [sp, #4]
 8005fdc:	6a21      	ldr	r1, [r4, #32]
 8005fde:	47b8      	blx	r7
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	dc07      	bgt.n	8005ff4 <__sflush_r+0xfc>
 8005fe4:	89a2      	ldrh	r2, [r4, #12]
 8005fe6:	2340      	movs	r3, #64	@ 0x40
 8005fe8:	2001      	movs	r0, #1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	4240      	negs	r0, r0
 8005ff2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ff4:	9b01      	ldr	r3, [sp, #4]
 8005ff6:	1836      	adds	r6, r6, r0
 8005ff8:	1a1b      	subs	r3, r3, r0
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	e7e6      	b.n	8005fcc <__sflush_r+0xd4>
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	dfbffffe 	.word	0xdfbffffe

08006004 <_fflush_r>:
 8006004:	690b      	ldr	r3, [r1, #16]
 8006006:	b570      	push	{r4, r5, r6, lr}
 8006008:	0005      	movs	r5, r0
 800600a:	000c      	movs	r4, r1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d102      	bne.n	8006016 <_fflush_r+0x12>
 8006010:	2500      	movs	r5, #0
 8006012:	0028      	movs	r0, r5
 8006014:	bd70      	pop	{r4, r5, r6, pc}
 8006016:	2800      	cmp	r0, #0
 8006018:	d004      	beq.n	8006024 <_fflush_r+0x20>
 800601a:	6a03      	ldr	r3, [r0, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <_fflush_r+0x20>
 8006020:	f7fe fffe 	bl	8005020 <__sinit>
 8006024:	220c      	movs	r2, #12
 8006026:	5ea3      	ldrsh	r3, [r4, r2]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d0f1      	beq.n	8006010 <_fflush_r+0xc>
 800602c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800602e:	07d2      	lsls	r2, r2, #31
 8006030:	d404      	bmi.n	800603c <_fflush_r+0x38>
 8006032:	059b      	lsls	r3, r3, #22
 8006034:	d402      	bmi.n	800603c <_fflush_r+0x38>
 8006036:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006038:	f7ff fa37 	bl	80054aa <__retarget_lock_acquire_recursive>
 800603c:	0028      	movs	r0, r5
 800603e:	0021      	movs	r1, r4
 8006040:	f7ff ff5a 	bl	8005ef8 <__sflush_r>
 8006044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006046:	0005      	movs	r5, r0
 8006048:	07db      	lsls	r3, r3, #31
 800604a:	d4e2      	bmi.n	8006012 <_fflush_r+0xe>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	059b      	lsls	r3, r3, #22
 8006050:	d4df      	bmi.n	8006012 <_fflush_r+0xe>
 8006052:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006054:	f7ff fa2a 	bl	80054ac <__retarget_lock_release_recursive>
 8006058:	e7db      	b.n	8006012 <_fflush_r+0xe>
	...

0800605c <__swhatbuf_r>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	000e      	movs	r6, r1
 8006060:	001d      	movs	r5, r3
 8006062:	230e      	movs	r3, #14
 8006064:	5ec9      	ldrsh	r1, [r1, r3]
 8006066:	0014      	movs	r4, r2
 8006068:	b096      	sub	sp, #88	@ 0x58
 800606a:	2900      	cmp	r1, #0
 800606c:	da0c      	bge.n	8006088 <__swhatbuf_r+0x2c>
 800606e:	89b2      	ldrh	r2, [r6, #12]
 8006070:	2380      	movs	r3, #128	@ 0x80
 8006072:	0011      	movs	r1, r2
 8006074:	4019      	ands	r1, r3
 8006076:	421a      	tst	r2, r3
 8006078:	d114      	bne.n	80060a4 <__swhatbuf_r+0x48>
 800607a:	2380      	movs	r3, #128	@ 0x80
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	2000      	movs	r0, #0
 8006080:	6029      	str	r1, [r5, #0]
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	b016      	add	sp, #88	@ 0x58
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	466a      	mov	r2, sp
 800608a:	f000 f865 	bl	8006158 <_fstat_r>
 800608e:	2800      	cmp	r0, #0
 8006090:	dbed      	blt.n	800606e <__swhatbuf_r+0x12>
 8006092:	23f0      	movs	r3, #240	@ 0xf0
 8006094:	9901      	ldr	r1, [sp, #4]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	4019      	ands	r1, r3
 800609a:	4b04      	ldr	r3, [pc, #16]	@ (80060ac <__swhatbuf_r+0x50>)
 800609c:	18c9      	adds	r1, r1, r3
 800609e:	424b      	negs	r3, r1
 80060a0:	4159      	adcs	r1, r3
 80060a2:	e7ea      	b.n	800607a <__swhatbuf_r+0x1e>
 80060a4:	2100      	movs	r1, #0
 80060a6:	2340      	movs	r3, #64	@ 0x40
 80060a8:	e7e9      	b.n	800607e <__swhatbuf_r+0x22>
 80060aa:	46c0      	nop			@ (mov r8, r8)
 80060ac:	ffffe000 	.word	0xffffe000

080060b0 <__smakebuf_r>:
 80060b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060b2:	2602      	movs	r6, #2
 80060b4:	898b      	ldrh	r3, [r1, #12]
 80060b6:	0005      	movs	r5, r0
 80060b8:	000c      	movs	r4, r1
 80060ba:	b085      	sub	sp, #20
 80060bc:	4233      	tst	r3, r6
 80060be:	d007      	beq.n	80060d0 <__smakebuf_r+0x20>
 80060c0:	0023      	movs	r3, r4
 80060c2:	3347      	adds	r3, #71	@ 0x47
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	2301      	movs	r3, #1
 80060ca:	6163      	str	r3, [r4, #20]
 80060cc:	b005      	add	sp, #20
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d0:	ab03      	add	r3, sp, #12
 80060d2:	aa02      	add	r2, sp, #8
 80060d4:	f7ff ffc2 	bl	800605c <__swhatbuf_r>
 80060d8:	9f02      	ldr	r7, [sp, #8]
 80060da:	9001      	str	r0, [sp, #4]
 80060dc:	0039      	movs	r1, r7
 80060de:	0028      	movs	r0, r5
 80060e0:	f7ff fa5a 	bl	8005598 <_malloc_r>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d108      	bne.n	80060fa <__smakebuf_r+0x4a>
 80060e8:	220c      	movs	r2, #12
 80060ea:	5ea3      	ldrsh	r3, [r4, r2]
 80060ec:	059a      	lsls	r2, r3, #22
 80060ee:	d4ed      	bmi.n	80060cc <__smakebuf_r+0x1c>
 80060f0:	2203      	movs	r2, #3
 80060f2:	4393      	bics	r3, r2
 80060f4:	431e      	orrs	r6, r3
 80060f6:	81a6      	strh	r6, [r4, #12]
 80060f8:	e7e2      	b.n	80060c0 <__smakebuf_r+0x10>
 80060fa:	2380      	movs	r3, #128	@ 0x80
 80060fc:	89a2      	ldrh	r2, [r4, #12]
 80060fe:	6020      	str	r0, [r4, #0]
 8006100:	4313      	orrs	r3, r2
 8006102:	81a3      	strh	r3, [r4, #12]
 8006104:	9b03      	ldr	r3, [sp, #12]
 8006106:	6120      	str	r0, [r4, #16]
 8006108:	6167      	str	r7, [r4, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00c      	beq.n	8006128 <__smakebuf_r+0x78>
 800610e:	0028      	movs	r0, r5
 8006110:	230e      	movs	r3, #14
 8006112:	5ee1      	ldrsh	r1, [r4, r3]
 8006114:	f000 f832 	bl	800617c <_isatty_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	d005      	beq.n	8006128 <__smakebuf_r+0x78>
 800611c:	2303      	movs	r3, #3
 800611e:	89a2      	ldrh	r2, [r4, #12]
 8006120:	439a      	bics	r2, r3
 8006122:	3b02      	subs	r3, #2
 8006124:	4313      	orrs	r3, r2
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	9a01      	ldr	r2, [sp, #4]
 800612c:	4313      	orrs	r3, r2
 800612e:	81a3      	strh	r3, [r4, #12]
 8006130:	e7cc      	b.n	80060cc <__smakebuf_r+0x1c>

08006132 <memmove>:
 8006132:	b510      	push	{r4, lr}
 8006134:	4288      	cmp	r0, r1
 8006136:	d806      	bhi.n	8006146 <memmove+0x14>
 8006138:	2300      	movs	r3, #0
 800613a:	429a      	cmp	r2, r3
 800613c:	d008      	beq.n	8006150 <memmove+0x1e>
 800613e:	5ccc      	ldrb	r4, [r1, r3]
 8006140:	54c4      	strb	r4, [r0, r3]
 8006142:	3301      	adds	r3, #1
 8006144:	e7f9      	b.n	800613a <memmove+0x8>
 8006146:	188b      	adds	r3, r1, r2
 8006148:	4298      	cmp	r0, r3
 800614a:	d2f5      	bcs.n	8006138 <memmove+0x6>
 800614c:	3a01      	subs	r2, #1
 800614e:	d200      	bcs.n	8006152 <memmove+0x20>
 8006150:	bd10      	pop	{r4, pc}
 8006152:	5c8b      	ldrb	r3, [r1, r2]
 8006154:	5483      	strb	r3, [r0, r2]
 8006156:	e7f9      	b.n	800614c <memmove+0x1a>

08006158 <_fstat_r>:
 8006158:	2300      	movs	r3, #0
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	4d06      	ldr	r5, [pc, #24]	@ (8006178 <_fstat_r+0x20>)
 800615e:	0004      	movs	r4, r0
 8006160:	0008      	movs	r0, r1
 8006162:	0011      	movs	r1, r2
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	f7fb f8df 	bl	8001328 <_fstat>
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	d103      	bne.n	8006176 <_fstat_r+0x1e>
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d000      	beq.n	8006176 <_fstat_r+0x1e>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd70      	pop	{r4, r5, r6, pc}
 8006178:	200002c0 	.word	0x200002c0

0800617c <_isatty_r>:
 800617c:	2300      	movs	r3, #0
 800617e:	b570      	push	{r4, r5, r6, lr}
 8006180:	4d06      	ldr	r5, [pc, #24]	@ (800619c <_isatty_r+0x20>)
 8006182:	0004      	movs	r4, r0
 8006184:	0008      	movs	r0, r1
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	f7fb f8dc 	bl	8001344 <_isatty>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d103      	bne.n	8006198 <_isatty_r+0x1c>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d000      	beq.n	8006198 <_isatty_r+0x1c>
 8006196:	6023      	str	r3, [r4, #0]
 8006198:	bd70      	pop	{r4, r5, r6, pc}
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	200002c0 	.word	0x200002c0

080061a0 <_sbrk_r>:
 80061a0:	2300      	movs	r3, #0
 80061a2:	b570      	push	{r4, r5, r6, lr}
 80061a4:	4d06      	ldr	r5, [pc, #24]	@ (80061c0 <_sbrk_r+0x20>)
 80061a6:	0004      	movs	r4, r0
 80061a8:	0008      	movs	r0, r1
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	f7fb f8de 	bl	800136c <_sbrk>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d103      	bne.n	80061bc <_sbrk_r+0x1c>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d000      	beq.n	80061bc <_sbrk_r+0x1c>
 80061ba:	6023      	str	r3, [r4, #0]
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	200002c0 	.word	0x200002c0

080061c4 <memchr>:
 80061c4:	b2c9      	uxtb	r1, r1
 80061c6:	1882      	adds	r2, r0, r2
 80061c8:	4290      	cmp	r0, r2
 80061ca:	d101      	bne.n	80061d0 <memchr+0xc>
 80061cc:	2000      	movs	r0, #0
 80061ce:	4770      	bx	lr
 80061d0:	7803      	ldrb	r3, [r0, #0]
 80061d2:	428b      	cmp	r3, r1
 80061d4:	d0fb      	beq.n	80061ce <memchr+0xa>
 80061d6:	3001      	adds	r0, #1
 80061d8:	e7f6      	b.n	80061c8 <memchr+0x4>

080061da <_realloc_r>:
 80061da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061dc:	0006      	movs	r6, r0
 80061de:	000c      	movs	r4, r1
 80061e0:	0015      	movs	r5, r2
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d105      	bne.n	80061f2 <_realloc_r+0x18>
 80061e6:	0011      	movs	r1, r2
 80061e8:	f7ff f9d6 	bl	8005598 <_malloc_r>
 80061ec:	0004      	movs	r4, r0
 80061ee:	0020      	movs	r0, r4
 80061f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	d103      	bne.n	80061fe <_realloc_r+0x24>
 80061f6:	f7ff f963 	bl	80054c0 <_free_r>
 80061fa:	2400      	movs	r4, #0
 80061fc:	e7f7      	b.n	80061ee <_realloc_r+0x14>
 80061fe:	f000 f81b 	bl	8006238 <_malloc_usable_size_r>
 8006202:	0007      	movs	r7, r0
 8006204:	4285      	cmp	r5, r0
 8006206:	d802      	bhi.n	800620e <_realloc_r+0x34>
 8006208:	0843      	lsrs	r3, r0, #1
 800620a:	42ab      	cmp	r3, r5
 800620c:	d3ef      	bcc.n	80061ee <_realloc_r+0x14>
 800620e:	0029      	movs	r1, r5
 8006210:	0030      	movs	r0, r6
 8006212:	f7ff f9c1 	bl	8005598 <_malloc_r>
 8006216:	9001      	str	r0, [sp, #4]
 8006218:	2800      	cmp	r0, #0
 800621a:	d0ee      	beq.n	80061fa <_realloc_r+0x20>
 800621c:	002a      	movs	r2, r5
 800621e:	42bd      	cmp	r5, r7
 8006220:	d900      	bls.n	8006224 <_realloc_r+0x4a>
 8006222:	003a      	movs	r2, r7
 8006224:	0021      	movs	r1, r4
 8006226:	9801      	ldr	r0, [sp, #4]
 8006228:	f7ff f941 	bl	80054ae <memcpy>
 800622c:	0021      	movs	r1, r4
 800622e:	0030      	movs	r0, r6
 8006230:	f7ff f946 	bl	80054c0 <_free_r>
 8006234:	9c01      	ldr	r4, [sp, #4]
 8006236:	e7da      	b.n	80061ee <_realloc_r+0x14>

08006238 <_malloc_usable_size_r>:
 8006238:	1f0b      	subs	r3, r1, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	1f18      	subs	r0, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	da01      	bge.n	8006246 <_malloc_usable_size_r+0xe>
 8006242:	580b      	ldr	r3, [r1, r0]
 8006244:	18c0      	adds	r0, r0, r3
 8006246:	4770      	bx	lr

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
