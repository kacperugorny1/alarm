
Alarm_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005138  08005138  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005140  08005140  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08005148  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000078  080051c0  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  080051c0  000073d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4df  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fa  00000000  00000000  00014587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00016888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a01  00000000  00000000  00017568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b4  00000000  00000000  00017f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011244  00000000  00000000  0002f81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c04b  00000000  00000000  00040a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccaac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  000ccaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d08cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ee4 	.word	0x08004ee4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004ee4 	.word	0x08004ee4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b0a5      	sub	sp, #148	@ 0x94
 80005f4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fbc3 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f857 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f94d 	bl	800089c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000602:	f000 f8bd 	bl	8000780 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000606:	f000 f8e9 	bl	80007dc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800060a:	f000 f91d 	bl	8000848 <MX_USART1_UART_Init>
//  flash_write_multiple_word(0x08060000, (uint32_t *)data_in, 16);

  //READOUT
  {
	char data_out[64];
	flash_read_multiple_words(0x08060000, (uint32_t *)data_out, 16);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2210      	movs	r2, #16
 8000612:	4619      	mov	r1, r3
 8000614:	4822      	ldr	r0, [pc, #136]	@ (80006a0 <main+0xb0>)
 8000616:	f002 fbdb 	bl	8002dd0 <flash_read_multiple_words>
	//PARSING TO VARIABLES
	state_machine_init(data_out);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fe97 	bl	8003350 <state_machine_init>
  }
  lcd_init(hi2c1);
 8000622:	4c20      	ldr	r4, [pc, #128]	@ (80006a4 <main+0xb4>)
 8000624:	4668      	mov	r0, sp
 8000626:	f104 0310 	add.w	r3, r4, #16
 800062a:	2244      	movs	r2, #68	@ 0x44
 800062c:	4619      	mov	r1, r3
 800062e:	f003 fedc 	bl	80043ea <memcpy>
 8000632:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000636:	f002 fd69 	bl	800310c <lcd_init>
  printf("Hello\n");
 800063a:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <main+0xb8>)
 800063c:	f003 fd46 	bl	80040cc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char x = check_keyboard();
 8000640:	f002 fc8c 	bl	8002f5c <check_keyboard>
 8000644:	4603      	mov	r3, r0
 8000646:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  if(x){
 800064a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800064e:	2b00      	cmp	r3, #0
 8000650:	d020      	beq.n	8000694 <main+0xa4>
		  if(x < 10) x += '0';
 8000652:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000656:	2b09      	cmp	r3, #9
 8000658:	d805      	bhi.n	8000666 <main+0x76>
 800065a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800065e:	3330      	adds	r3, #48	@ 0x30
 8000660:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000664:	e016      	b.n	8000694 <main+0xa4>
		  else if(x == 10) x = '*';
 8000666:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800066a:	2b0a      	cmp	r3, #10
 800066c:	d103      	bne.n	8000676 <main+0x86>
 800066e:	232a      	movs	r3, #42	@ 0x2a
 8000670:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000674:	e00e      	b.n	8000694 <main+0xa4>
		  else if(x == 11) x = '0';
 8000676:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800067a:	2b0b      	cmp	r3, #11
 800067c:	d103      	bne.n	8000686 <main+0x96>
 800067e:	2330      	movs	r3, #48	@ 0x30
 8000680:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000684:	e006      	b.n	8000694 <main+0xa4>
		  else if(x == 12) x = '#';
 8000686:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800068a:	2b0c      	cmp	r3, #12
 800068c:	d102      	bne.n	8000694 <main+0xa4>
 800068e:	2323      	movs	r3, #35	@ 0x23
 8000690:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  }
	  state_machine_run(x);
 8000694:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000698:	4618      	mov	r0, r3
 800069a:	f002 feb5 	bl	8003408 <state_machine_run>
  {
 800069e:	e7cf      	b.n	8000640 <main+0x50>
 80006a0:	08060000 	.word	0x08060000
 80006a4:	20000094 	.word	0x20000094
 80006a8:	08004efc 	.word	0x08004efc

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	@ 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	@ 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fe1a 	bl	80042f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	4a27      	ldr	r2, [pc, #156]	@ (8000778 <SystemClock_Config+0xcc>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e0:	4b25      	ldr	r3, [pc, #148]	@ (8000778 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a21      	ldr	r2, [pc, #132]	@ (800077c <SystemClock_Config+0xd0>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800071c:	2310      	movs	r3, #16
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 8000720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000726:	2304      	movs	r3, #4
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072a:	2304      	movs	r3, #4
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	4618      	mov	r0, r3
 8000734:	f001 faf4 	bl	8001d20 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800073e:	f000 f927 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2103      	movs	r1, #3
 800075e:	4618      	mov	r0, r3
 8000760:	f001 fd56 	bl	8002210 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800076a:	f000 f911 	bl	8000990 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3750      	adds	r7, #80	@ 0x50
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_I2C1_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <MX_I2C1_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_I2C1_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_I2C1_Init+0x50>)
 80007be:	f000 fe11 	bl	80013e4 <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 f8e2 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000094 	.word	0x20000094
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MX_SPI2_Init+0x64>)
 80007e2:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <MX_SPI2_Init+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_SPI2_Init+0x64>)
 80007e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_SPI2_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_SPI2_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_SPI2_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_SPI2_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_SPI2_Init+0x64>)
 8000808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800080c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_SPI2_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_SPI2_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_SPI2_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_SPI2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_SPI2_Init+0x64>)
 8000828:	220a      	movs	r2, #10
 800082a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_SPI2_Init+0x64>)
 800082e:	f001 fecf 	bl	80025d0 <HAL_SPI_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000838:	f000 f8aa 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000e8 	.word	0x200000e8
 8000844:	40003800 	.word	0x40003800

08000848 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	@ (8000898 <MX_USART1_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USART1_UART_Init+0x4c>)
 8000880:	f001 ff2f 	bl	80026e2 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f881 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000140 	.word	0x20000140
 8000898:	40011000 	.word	0x40011000

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a25      	ldr	r2, [pc, #148]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a17      	ldr	r2, [pc, #92]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_GPIO_Init+0xb4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2154      	movs	r1, #84	@ 0x54
 800090a:	4812      	ldr	r0, [pc, #72]	@ (8000954 <MX_GPIO_Init+0xb8>)
 800090c:	f000 fd50 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin
                           Alarm_Signal_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin
 8000910:	f248 032b 	movw	r3, #32811	@ 0x802b
 8000914:	60fb      	str	r3, [r7, #12]
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <MX_GPIO_Init+0xb8>)
 8000926:	f000 fba7 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin;
 800092a:	2354      	movs	r3, #84	@ 0x54
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_GPIO_Init+0xb8>)
 8000942:	f000 fb99 	bl	8001078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40020000 	.word	0x40020000

08000958 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e009      	b.n	800097e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	60ba      	str	r2, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe14 	bl	80005a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf1      	blt.n	800096a <_write+0x12>
  }
  return len;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12b      	bne.n	8000a66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a2a:	23c0      	movs	r3, #192	@ 0xc0
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2e:	2312      	movs	r3, #18
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	@ (8000a78 <HAL_I2C_MspInit+0x8c>)
 8000a46:	f000 fb17 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	@ 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400

08000a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	@ (8000b00 <HAL_SPI_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12c      	bne.n	8000af8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_SPI_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	@ (8000b04 <HAL_SPI_MspInit+0x88>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_SPI_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_SPI_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_SPI_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_SPI_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000ad6:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_SPI_MspInit+0x8c>)
 8000af4:	f000 fac0 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40003800 	.word	0x40003800
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	@ (8000b90 <HAL_UART_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12c      	bne.n	8000b88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a17      	ldr	r2, [pc, #92]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b38:	f043 0310 	orr.w	r3, r3, #16
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b84:	f000 fa78 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3728      	adds	r7, #40	@ 0x28
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40011000 	.word	0x40011000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 f917 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e00a      	b.n	8000c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0c:	f3af 8000 	nop.w
 8000c10:	4601      	mov	r1, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	60ba      	str	r2, [r7, #8]
 8000c18:	b2ca      	uxtb	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dbf0      	blt.n	8000c0c <_read+0x12>
  }

  return len;
 8000c2a:	687b      	ldr	r3, [r7, #4]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_isatty>:

int _isatty(int file)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c74:	2301      	movs	r3, #1
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b085      	sub	sp, #20
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f003 fb60 	bl	8004390 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20020000 	.word	0x20020000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	20000188 	.word	0x20000188
 8000d04:	200003d8 	.word	0x200003d8

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d30:	f7ff ffea 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	@ (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f003 fb1f 	bl	800439c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5e:	f7ff fc47 	bl	80005f0 <main>
  bx  lr    
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d70:	08005148 	.word	0x08005148
  ldr r2, =_sbss
 8000d74:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d78:	200003d4 	.word	0x200003d4

08000d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc0 <HAL_Init+0x40>)
 8000d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc0 <HAL_Init+0x40>)
 8000d96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_Init+0x40>)
 8000da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f931 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fdf2 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023c00 	.word	0x40023c00

08000dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f93b 	bl	800105e <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f911 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000008 	.word	0x20000008

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	2000018c 	.word	0x2000018c

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2000018c 	.word	0x2000018c

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <__NVIC_SetPriorityGrouping>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ede:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	60d3      	str	r3, [r2, #12]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_GetPriorityGrouping>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <__NVIC_GetPriorityGrouping+0x18>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	0a1b      	lsrs	r3, r3, #8
 8000efe:	f003 0307 	and.w	r3, r3, #7
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_SetPriority>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	@ (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	@ (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	@ 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <SysTick_Config>:
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f7ff ff8e 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	@ (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff47 	bl	8000eac <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff5c 	bl	8000ef4 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff8e 	bl	8000f64 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffb0 	bl	8000fcc <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e159      	b.n	8001348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 8148 	bne.w	8001342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a2 	beq.w	8001342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b57      	ldr	r3, [pc, #348]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a56      	ldr	r2, [pc, #344]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b54      	ldr	r3, [pc, #336]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a52      	ldr	r2, [pc, #328]	@ (8001364 <HAL_GPIO_Init+0x2ec>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a49      	ldr	r2, [pc, #292]	@ (8001368 <HAL_GPIO_Init+0x2f0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x202>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a48      	ldr	r2, [pc, #288]	@ (800136c <HAL_GPIO_Init+0x2f4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x1fe>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <HAL_GPIO_Init+0x2f8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a46      	ldr	r2, [pc, #280]	@ (8001374 <HAL_GPIO_Init+0x2fc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x1f6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a45      	ldr	r2, [pc, #276]	@ (8001378 <HAL_GPIO_Init+0x300>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x1f2>
 8001266:	2304      	movs	r3, #4
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x204>
 800126a:	2307      	movs	r3, #7
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x204>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x204>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x204>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x204>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	@ (8001364 <HAL_GPIO_Init+0x2ec>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_GPIO_Init+0x304>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a2f      	ldr	r2, [pc, #188]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a24      	ldr	r2, [pc, #144]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b23      	ldr	r3, [pc, #140]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <HAL_GPIO_Init+0x304>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <HAL_GPIO_Init+0x304>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <HAL_GPIO_Init+0x304>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f aea2 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e12b      	b.n	800164e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff faee 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2224      	movs	r2, #36	@ 0x24
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001436:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001446:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001448:	f001 f89a 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 800144c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a81      	ldr	r2, [pc, #516]	@ (8001658 <HAL_I2C_Init+0x274>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d807      	bhi.n	8001468 <HAL_I2C_Init+0x84>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4a80      	ldr	r2, [pc, #512]	@ (800165c <HAL_I2C_Init+0x278>)
 800145c:	4293      	cmp	r3, r2
 800145e:	bf94      	ite	ls
 8001460:	2301      	movls	r3, #1
 8001462:	2300      	movhi	r3, #0
 8001464:	b2db      	uxtb	r3, r3
 8001466:	e006      	b.n	8001476 <HAL_I2C_Init+0x92>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4a7d      	ldr	r2, [pc, #500]	@ (8001660 <HAL_I2C_Init+0x27c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0e7      	b.n	800164e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4a78      	ldr	r2, [pc, #480]	@ (8001664 <HAL_I2C_Init+0x280>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0c9b      	lsrs	r3, r3, #18
 8001488:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001658 <HAL_I2C_Init+0x274>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d802      	bhi.n	80014b8 <HAL_I2C_Init+0xd4>
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3301      	adds	r3, #1
 80014b6:	e009      	b.n	80014cc <HAL_I2C_Init+0xe8>
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	4a69      	ldr	r2, [pc, #420]	@ (8001668 <HAL_I2C_Init+0x284>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	099b      	lsrs	r3, r3, #6
 80014ca:	3301      	adds	r3, #1
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	6812      	ldr	r2, [r2, #0]
 80014d0:	430b      	orrs	r3, r1
 80014d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	495c      	ldr	r1, [pc, #368]	@ (8001658 <HAL_I2C_Init+0x274>)
 80014e8:	428b      	cmp	r3, r1
 80014ea:	d819      	bhi.n	8001520 <HAL_I2C_Init+0x13c>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e59      	subs	r1, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fa:	1c59      	adds	r1, r3, #1
 80014fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001500:	400b      	ands	r3, r1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00a      	beq.n	800151c <HAL_I2C_Init+0x138>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e59      	subs	r1, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fbb1 f3f3 	udiv	r3, r1, r3
 8001514:	3301      	adds	r3, #1
 8001516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151a:	e051      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 800151c:	2304      	movs	r3, #4
 800151e:	e04f      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d111      	bne.n	800154c <HAL_I2C_Init+0x168>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e012      	b.n	8001572 <HAL_I2C_Init+0x18e>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	2b00      	cmp	r3, #0
 800156a:	bf0c      	ite	eq
 800156c:	2301      	moveq	r3, #1
 800156e:	2300      	movne	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Init+0x196>
 8001576:	2301      	movs	r3, #1
 8001578:	e022      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10e      	bne.n	80015a0 <HAL_I2C_Init+0x1bc>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e58      	subs	r0, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6859      	ldr	r1, [r3, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	440b      	add	r3, r1
 8001590:	fbb0 f3f3 	udiv	r3, r0, r3
 8001594:	3301      	adds	r3, #1
 8001596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800159e:	e00f      	b.n	80015c0 <HAL_I2C_Init+0x1dc>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	6809      	ldr	r1, [r1, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6911      	ldr	r1, [r2, #16]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68d2      	ldr	r2, [r2, #12]
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	000186a0 	.word	0x000186a0
 800165c:	001e847f 	.word	0x001e847f
 8001660:	003d08ff 	.word	0x003d08ff
 8001664:	431bde83 	.word	0x431bde83
 8001668:	10624dd3 	.word	0x10624dd3

0800166c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	460b      	mov	r3, r1
 800167a:	817b      	strh	r3, [r7, #10]
 800167c:	4613      	mov	r3, r2
 800167e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff fbe4 	bl	8000e4c <HAL_GetTick>
 8001684:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b20      	cmp	r3, #32
 8001690:	f040 80e0 	bne.w	8001854 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2319      	movs	r3, #25
 800169a:	2201      	movs	r2, #1
 800169c:	4970      	ldr	r1, [pc, #448]	@ (8001860 <HAL_I2C_Master_Transmit+0x1f4>)
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f964 	bl	800196c <I2C_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
 80016ac:	e0d3      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_I2C_Master_Transmit+0x50>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e0cc      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d007      	beq.n	80016e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2221      	movs	r2, #33	@ 0x21
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2210      	movs	r2, #16
 80016fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	893a      	ldrh	r2, [r7, #8]
 8001712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a50      	ldr	r2, [pc, #320]	@ (8001864 <HAL_I2C_Master_Transmit+0x1f8>)
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001724:	8979      	ldrh	r1, [r7, #10]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f89c 	bl	8001868 <I2C_MasterRequestWrite>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e08d      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001750:	e066      	b.n	8001820 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 fa22 	bl	8001ba0 <I2C_WaitOnTXEFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	2b04      	cmp	r3, #4
 8001768:	d107      	bne.n	800177a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001778:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06b      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001782:	781a      	ldrb	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d11b      	bne.n	80017f4 <HAL_I2C_Master_Transmit+0x188>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d017      	beq.n	80017f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	6a39      	ldr	r1, [r7, #32]
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 fa19 	bl	8001c30 <I2C_WaitOnBTFFlagUntilTimeout>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00d      	beq.n	8001820 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	2b04      	cmp	r3, #4
 800180a:	d107      	bne.n	800181c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800181a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e01a      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001824:	2b00      	cmp	r3, #0
 8001826:	d194      	bne.n	8001752 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	e000      	b.n	8001856 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001854:	2302      	movs	r3, #2
  }
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	00100002 	.word	0x00100002
 8001864:	ffff0000 	.word	0xffff0000

08001868 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	460b      	mov	r3, r1
 8001876:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b08      	cmp	r3, #8
 8001882:	d006      	beq.n	8001892 <I2C_MasterRequestWrite+0x2a>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d003      	beq.n	8001892 <I2C_MasterRequestWrite+0x2a>
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001890:	d108      	bne.n	80018a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	e00b      	b.n	80018bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d107      	bne.n	80018bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f84f 	bl	800196c <I2C_WaitOnFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00d      	beq.n	80018f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e2:	d103      	bne.n	80018ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e035      	b.n	800195c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018f8:	d108      	bne.n	800190c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018fa:	897b      	ldrh	r3, [r7, #10]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	e01b      	b.n	8001944 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800190c:	897b      	ldrh	r3, [r7, #10]
 800190e:	11db      	asrs	r3, r3, #7
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f003 0306 	and.w	r3, r3, #6
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f063 030f 	orn	r3, r3, #15
 800191c:	b2da      	uxtb	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	490e      	ldr	r1, [pc, #56]	@ (8001964 <I2C_MasterRequestWrite+0xfc>)
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f898 	bl	8001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e010      	b.n	800195c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800193a:	897b      	ldrh	r3, [r7, #10]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4907      	ldr	r1, [pc, #28]	@ (8001968 <I2C_MasterRequestWrite+0x100>)
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f888 	bl	8001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	00010008 	.word	0x00010008
 8001968:	00010002 	.word	0x00010002

0800196c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	4613      	mov	r3, r2
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800197c:	e048      	b.n	8001a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001984:	d044      	beq.n	8001a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001986:	f7ff fa61 	bl	8000e4c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d302      	bcc.n	800199c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d139      	bne.n	8001a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10d      	bne.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	43da      	mvns	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	4013      	ands	r3, r2
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	e00c      	b.n	80019dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	43da      	mvns	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4013      	ands	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d116      	bne.n	8001a10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f043 0220 	orr.w	r2, r3, #32
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e023      	b.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d10d      	bne.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	43da      	mvns	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	4013      	ands	r3, r2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	e00c      	b.n	8001a50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4013      	ands	r3, r2
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d093      	beq.n	800197e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a6e:	e071      	b.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7e:	d123      	bne.n	8001ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	f043 0204 	orr.w	r2, r3, #4
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e067      	b.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ace:	d041      	beq.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad0:	f7ff f9bc 	bl	8000e4c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d302      	bcc.n	8001ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d136      	bne.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	0c1b      	lsrs	r3, r3, #16
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d10c      	bne.n	8001b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4013      	ands	r3, r2
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	e00b      	b.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	43da      	mvns	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	4013      	ands	r3, r2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e021      	b.n	8001b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10c      	bne.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	e00b      	b.n	8001b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4013      	ands	r3, r2
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f47f af6d 	bne.w	8001a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bac:	e034      	b.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f886 	bl	8001cc0 <I2C_IsAcknowledgeFailed>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e034      	b.n	8001c28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d028      	beq.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc6:	f7ff f941 	bl	8000e4c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11d      	bne.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	2b80      	cmp	r3, #128	@ 0x80
 8001be8:	d016      	beq.n	8001c18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f043 0220 	orr.w	r2, r3, #32
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e007      	b.n	8001c28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c22:	2b80      	cmp	r3, #128	@ 0x80
 8001c24:	d1c3      	bne.n	8001bae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c3c:	e034      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f83e 	bl	8001cc0 <I2C_IsAcknowledgeFailed>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e034      	b.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d028      	beq.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c56:	f7ff f8f9 	bl	8000e4c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d302      	bcc.n	8001c6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d11d      	bne.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d016      	beq.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f043 0220 	orr.w	r2, r3, #32
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e007      	b.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d1c3      	bne.n	8001c3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd6:	d11b      	bne.n	8001d10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001ce0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e267      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d3e:	4b88      	ldr	r3, [pc, #544]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d00c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4b85      	ldr	r3, [pc, #532]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d112      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b82      	ldr	r3, [pc, #520]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b7e      	ldr	r3, [pc, #504]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d157      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e242      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x74>
 8001d86:	4b76      	ldr	r3, [pc, #472]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a75      	ldr	r2, [pc, #468]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b70      	ldr	r3, [pc, #448]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6f      	ldr	r2, [pc, #444]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b6d      	ldr	r3, [pc, #436]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6c      	ldr	r2, [pc, #432]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001db8:	4b69      	ldr	r3, [pc, #420]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a68      	ldr	r2, [pc, #416]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b66      	ldr	r3, [pc, #408]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a65      	ldr	r2, [pc, #404]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f838 	bl	8000e4c <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff f834 	bl	8000e4c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e207      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff f824 	bl	8000e4c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff f820 	bl	8000e4c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	@ 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1f3      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	4b51      	ldr	r3, [pc, #324]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe8>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e36:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e1c7      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b3b      	ldr	r3, [pc, #236]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4937      	ldr	r1, [pc, #220]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	e03a      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <HAL_RCC_OscConfig+0x244>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7fe ffd9 	bl	8000e4c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7fe ffd5 	bl	8000e4c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1a8      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4925      	ldr	r1, [pc, #148]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <HAL_RCC_OscConfig+0x244>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ffb8 	bl	8000e4c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7fe ffb4 	bl	8000e4c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e187      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d036      	beq.n	8001f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_RCC_OscConfig+0x248>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7fe ff98 	bl	8000e4c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7fe ff94 	bl	8000e4c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e167      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_OscConfig+0x240>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x200>
 8001f3e:	e01b      	b.n	8001f78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_OscConfig+0x248>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7fe ff81 	bl	8000e4c <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	e00e      	b.n	8001f6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7fe ff7d 	bl	8000e4c <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d907      	bls.n	8001f6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e150      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	42470000 	.word	0x42470000
 8001f68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	4b88      	ldr	r3, [pc, #544]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ea      	bne.n	8001f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8097 	beq.w	80020b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4b81      	ldr	r3, [pc, #516]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10f      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a7c      	ldr	r2, [pc, #496]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4b77      	ldr	r3, [pc, #476]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc2:	4b74      	ldr	r3, [pc, #464]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a73      	ldr	r2, [pc, #460]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7fe ff3d 	bl	8000e4c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7fe ff39 	bl	8000e4c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e10c      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8002194 <HAL_RCC_OscConfig+0x474>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x2ea>
 8001ffc:	4b64      	ldr	r3, [pc, #400]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002000:	4a63      	ldr	r2, [pc, #396]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	@ 0x70
 8002008:	e01c      	b.n	8002044 <HAL_RCC_OscConfig+0x324>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b05      	cmp	r3, #5
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x30c>
 8002012:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	4a5e      	ldr	r2, [pc, #376]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002018:	f043 0304 	orr.w	r3, r3, #4
 800201c:	6713      	str	r3, [r2, #112]	@ 0x70
 800201e:	4b5c      	ldr	r3, [pc, #368]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002022:	4a5b      	ldr	r2, [pc, #364]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6713      	str	r3, [r2, #112]	@ 0x70
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x324>
 800202c:	4b58      	ldr	r3, [pc, #352]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002030:	4a57      	ldr	r2, [pc, #348]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	6713      	str	r3, [r2, #112]	@ 0x70
 8002038:	4b55      	ldr	r3, [pc, #340]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203c:	4a54      	ldr	r2, [pc, #336]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800203e:	f023 0304 	bic.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d015      	beq.n	8002078 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7fe fefe 	bl	8000e4c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7fe fefa 	bl	8000e4c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0cb      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	4b49      	ldr	r3, [pc, #292]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ee      	beq.n	8002054 <HAL_RCC_OscConfig+0x334>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7fe fee8 	bl	8000e4c <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7fe fee4 	bl	8000e4c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0b5      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	4b3e      	ldr	r3, [pc, #248]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1ee      	bne.n	8002080 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	4a38      	ldr	r2, [pc, #224]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a1 	beq.w	8002200 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d05c      	beq.n	8002184 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d141      	bne.n	8002156 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b31      	ldr	r3, [pc, #196]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe feb8 	bl	8000e4c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe feb4 	bl	8000e4c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e087      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f2:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	019b      	lsls	r3, r3, #6
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	3b01      	subs	r3, #1
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	491b      	ldr	r1, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b1b      	ldr	r3, [pc, #108]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fe8d 	bl	8000e4c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fe89 	bl	8000e4c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e05c      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x416>
 8002154:	e054      	b.n	8002200 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <HAL_RCC_OscConfig+0x478>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fe76 	bl	8000e4c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fe72 	bl	8000e4c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e045      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_RCC_OscConfig+0x470>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x444>
 8002182:	e03d      	b.n	8002200 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e038      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000
 8002198:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800219c:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x4ec>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d028      	beq.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d121      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d11a      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d111      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0cc      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b68      	ldr	r3, [pc, #416]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d90c      	bls.n	800224c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b65      	ldr	r3, [pc, #404]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a58      	ldr	r2, [pc, #352]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a52      	ldr	r2, [pc, #328]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d044      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d119      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e067      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4934      	ldr	r1, [pc, #208]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7fe fda4 	bl	8000e4c <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fda0 	bl	8000e4c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d20c      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f821 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fd04 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08004fec 	.word	0x08004fec
 80023d4:	20000004 	.word	0x20000004
 80023d8:	20000008 	.word	0x20000008

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e0:	b090      	sub	sp, #64	@ 0x40
 80023e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023f4:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d00d      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x40>
 8002400:	2b08      	cmp	r3, #8
 8002402:	f200 80a1 	bhi.w	8002548 <HAL_RCC_GetSysClockFreq+0x16c>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x3a>
 800240e:	e09b      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b53      	ldr	r3, [pc, #332]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x184>)
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002414:	e09b      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002416:	4b53      	ldr	r3, [pc, #332]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x188>)
 8002418:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800241a:	e098      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4b4f      	ldr	r3, [pc, #316]	@ (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002424:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002426:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d028      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	2200      	movs	r2, #0
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	627a      	str	r2, [r7, #36]	@ 0x24
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002444:	2100      	movs	r1, #0
 8002446:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x188>)
 8002448:	fb03 f201 	mul.w	r2, r3, r1
 800244c:	2300      	movs	r3, #0
 800244e:	fb00 f303 	mul.w	r3, r0, r3
 8002452:	4413      	add	r3, r2
 8002454:	4a43      	ldr	r2, [pc, #268]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x188>)
 8002456:	fba0 1202 	umull	r1, r2, r0, r2
 800245a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800245c:	460a      	mov	r2, r1
 800245e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002462:	4413      	add	r3, r2
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002468:	2200      	movs	r2, #0
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	61fa      	str	r2, [r7, #28]
 800246e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002472:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002476:	f7fd ff1b 	bl	80002b0 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4613      	mov	r3, r2
 8002480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002482:	e053      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002484:	4b35      	ldr	r3, [pc, #212]	@ (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	099b      	lsrs	r3, r3, #6
 800248a:	2200      	movs	r2, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	617a      	str	r2, [r7, #20]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002496:	f04f 0b00 	mov.w	fp, #0
 800249a:	4652      	mov	r2, sl
 800249c:	465b      	mov	r3, fp
 800249e:	f04f 0000 	mov.w	r0, #0
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	0159      	lsls	r1, r3, #5
 80024a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ac:	0150      	lsls	r0, r2, #5
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	ebb2 080a 	subs.w	r8, r2, sl
 80024b6:	eb63 090b 	sbc.w	r9, r3, fp
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024ce:	ebb2 0408 	subs.w	r4, r2, r8
 80024d2:	eb63 0509 	sbc.w	r5, r3, r9
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	00eb      	lsls	r3, r5, #3
 80024e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e4:	00e2      	lsls	r2, r4, #3
 80024e6:	4614      	mov	r4, r2
 80024e8:	461d      	mov	r5, r3
 80024ea:	eb14 030a 	adds.w	r3, r4, sl
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	eb45 030b 	adc.w	r3, r5, fp
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002502:	4629      	mov	r1, r5
 8002504:	028b      	lsls	r3, r1, #10
 8002506:	4621      	mov	r1, r4
 8002508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800250c:	4621      	mov	r1, r4
 800250e:	028a      	lsls	r2, r1, #10
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002516:	2200      	movs	r2, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	60fa      	str	r2, [r7, #12]
 800251c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002520:	f7fd fec6 	bl	80002b0 <__aeabi_uldivmod>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4613      	mov	r3, r2
 800252a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_GetSysClockFreq+0x180>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800253c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002546:	e002      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002548:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x184>)
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800254c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002550:	4618      	mov	r0, r3
 8002552:	3740      	adds	r7, #64	@ 0x40
 8002554:	46bd      	mov	sp, r7
 8002556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	00f42400 	.word	0x00f42400
 8002564:	017d7840 	.word	0x017d7840

08002568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_RCC_GetHCLKFreq+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000004 	.word	0x20000004

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002584:	f7ff fff0 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	0a9b      	lsrs	r3, r3, #10
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4903      	ldr	r1, [pc, #12]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800
 80025a4:	08004ffc 	.word	0x08004ffc

080025a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ac:	f7ff ffdc 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	0b5b      	lsrs	r3, r3, #13
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4903      	ldr	r1, [pc, #12]	@ (80025cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	08004ffc 	.word	0x08004ffc

080025d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07b      	b.n	80026da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025f2:	d009      	beq.n	8002608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	e005      	b.n	8002608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fa2a 	bl	8000a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800263e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002650:	431a      	orrs	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268c:	ea42 0103 	orr.w	r1, r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	f003 0104 	and.w	r1, r3, #4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	f003 0210 	and.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e042      	b.n	800277a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fe f9ff 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2224      	movs	r2, #36	@ 0x24
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002724:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f82c 	bl	8002784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800273a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800274a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800275a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b0c0      	sub	sp, #256	@ 0x100
 800278a:	af00      	add	r7, sp, #0
 800278c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800279c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a0:	68d9      	ldr	r1, [r3, #12]
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	ea40 0301 	orr.w	r3, r0, r1
 80027ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	431a      	orrs	r2, r3
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80027dc:	f021 010c 	bic.w	r1, r1, #12
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80027ea:	430b      	orrs	r3, r1
 80027ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fe:	6999      	ldr	r1, [r3, #24]
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	ea40 0301 	orr.w	r3, r0, r1
 800280a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b8f      	ldr	r3, [pc, #572]	@ (8002a50 <UART_SetConfig+0x2cc>)
 8002814:	429a      	cmp	r2, r3
 8002816:	d005      	beq.n	8002824 <UART_SetConfig+0xa0>
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a54 <UART_SetConfig+0x2d0>)
 8002820:	429a      	cmp	r2, r3
 8002822:	d104      	bne.n	800282e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002824:	f7ff fec0 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 8002828:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800282c:	e003      	b.n	8002836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800282e:	f7ff fea7 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8002832:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002840:	f040 810c 	bne.w	8002a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002848:	2200      	movs	r2, #0
 800284a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800284e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002856:	4622      	mov	r2, r4
 8002858:	462b      	mov	r3, r5
 800285a:	1891      	adds	r1, r2, r2
 800285c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800285e:	415b      	adcs	r3, r3
 8002860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002866:	4621      	mov	r1, r4
 8002868:	eb12 0801 	adds.w	r8, r2, r1
 800286c:	4629      	mov	r1, r5
 800286e:	eb43 0901 	adc.w	r9, r3, r1
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800287e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002886:	4690      	mov	r8, r2
 8002888:	4699      	mov	r9, r3
 800288a:	4623      	mov	r3, r4
 800288c:	eb18 0303 	adds.w	r3, r8, r3
 8002890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002894:	462b      	mov	r3, r5
 8002896:	eb49 0303 	adc.w	r3, r9, r3
 800289a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028b2:	460b      	mov	r3, r1
 80028b4:	18db      	adds	r3, r3, r3
 80028b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80028b8:	4613      	mov	r3, r2
 80028ba:	eb42 0303 	adc.w	r3, r2, r3
 80028be:	657b      	str	r3, [r7, #84]	@ 0x54
 80028c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028c8:	f7fd fcf2 	bl	80002b0 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4b61      	ldr	r3, [pc, #388]	@ (8002a58 <UART_SetConfig+0x2d4>)
 80028d2:	fba3 2302 	umull	r2, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	011c      	lsls	r4, r3, #4
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80028e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80028ec:	4642      	mov	r2, r8
 80028ee:	464b      	mov	r3, r9
 80028f0:	1891      	adds	r1, r2, r2
 80028f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028f4:	415b      	adcs	r3, r3
 80028f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028fc:	4641      	mov	r1, r8
 80028fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002902:	4649      	mov	r1, r9
 8002904:	eb43 0b01 	adc.w	fp, r3, r1
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291c:	4692      	mov	sl, r2
 800291e:	469b      	mov	fp, r3
 8002920:	4643      	mov	r3, r8
 8002922:	eb1a 0303 	adds.w	r3, sl, r3
 8002926:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800292a:	464b      	mov	r3, r9
 800292c:	eb4b 0303 	adc.w	r3, fp, r3
 8002930:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002940:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002948:	460b      	mov	r3, r1
 800294a:	18db      	adds	r3, r3, r3
 800294c:	643b      	str	r3, [r7, #64]	@ 0x40
 800294e:	4613      	mov	r3, r2
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	647b      	str	r3, [r7, #68]	@ 0x44
 8002956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800295a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800295e:	f7fd fca7 	bl	80002b0 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4611      	mov	r1, r2
 8002968:	4b3b      	ldr	r3, [pc, #236]	@ (8002a58 <UART_SetConfig+0x2d4>)
 800296a:	fba3 2301 	umull	r2, r3, r3, r1
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2264      	movs	r2, #100	@ 0x64
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	1acb      	subs	r3, r1, r3
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800297e:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <UART_SetConfig+0x2d4>)
 8002980:	fba3 2302 	umull	r2, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800298c:	441c      	add	r4, r3
 800298e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002998:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800299c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029a0:	4642      	mov	r2, r8
 80029a2:	464b      	mov	r3, r9
 80029a4:	1891      	adds	r1, r2, r2
 80029a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029a8:	415b      	adcs	r3, r3
 80029aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029b0:	4641      	mov	r1, r8
 80029b2:	1851      	adds	r1, r2, r1
 80029b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80029b6:	4649      	mov	r1, r9
 80029b8:	414b      	adcs	r3, r1
 80029ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80029c8:	4659      	mov	r1, fp
 80029ca:	00cb      	lsls	r3, r1, #3
 80029cc:	4651      	mov	r1, sl
 80029ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d2:	4651      	mov	r1, sl
 80029d4:	00ca      	lsls	r2, r1, #3
 80029d6:	4610      	mov	r0, r2
 80029d8:	4619      	mov	r1, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	4642      	mov	r2, r8
 80029de:	189b      	adds	r3, r3, r2
 80029e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029e4:	464b      	mov	r3, r9
 80029e6:	460a      	mov	r2, r1
 80029e8:	eb42 0303 	adc.w	r3, r2, r3
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a04:	460b      	mov	r3, r1
 8002a06:	18db      	adds	r3, r3, r3
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	eb42 0303 	adc.w	r3, r2, r3
 8002a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a1a:	f7fd fc49 	bl	80002b0 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <UART_SetConfig+0x2d4>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	@ 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	@ 0x32
 8002a36:	4a08      	ldr	r2, [pc, #32]	@ (8002a58 <UART_SetConfig+0x2d4>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 0207 	and.w	r2, r3, #7
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4422      	add	r2, r4
 8002a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a4c:	e106      	b.n	8002c5c <UART_SetConfig+0x4d8>
 8002a4e:	bf00      	nop
 8002a50:	40011000 	.word	0x40011000
 8002a54:	40011400 	.word	0x40011400
 8002a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a6e:	4642      	mov	r2, r8
 8002a70:	464b      	mov	r3, r9
 8002a72:	1891      	adds	r1, r2, r2
 8002a74:	6239      	str	r1, [r7, #32]
 8002a76:	415b      	adcs	r3, r3
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a7e:	4641      	mov	r1, r8
 8002a80:	1854      	adds	r4, r2, r1
 8002a82:	4649      	mov	r1, r9
 8002a84:	eb43 0501 	adc.w	r5, r3, r1
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	00eb      	lsls	r3, r5, #3
 8002a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a96:	00e2      	lsls	r2, r4, #3
 8002a98:	4614      	mov	r4, r2
 8002a9a:	461d      	mov	r5, r3
 8002a9c:	4643      	mov	r3, r8
 8002a9e:	18e3      	adds	r3, r4, r3
 8002aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	eb45 0303 	adc.w	r3, r5, r3
 8002aaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002aba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002aca:	4629      	mov	r1, r5
 8002acc:	008b      	lsls	r3, r1, #2
 8002ace:	4621      	mov	r1, r4
 8002ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	008a      	lsls	r2, r1, #2
 8002ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002adc:	f7fd fbe8 	bl	80002b0 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4b60      	ldr	r3, [pc, #384]	@ (8002c68 <UART_SetConfig+0x4e4>)
 8002ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	011c      	lsls	r4, r3, #4
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002af8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	61b9      	str	r1, [r7, #24]
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6139      	str	r1, [r7, #16]
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b44:	464b      	mov	r3, r9
 8002b46:	460a      	mov	r2, r1
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b68:	4649      	mov	r1, r9
 8002b6a:	008b      	lsls	r3, r1, #2
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b72:	4641      	mov	r1, r8
 8002b74:	008a      	lsls	r2, r1, #2
 8002b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b7a:	f7fd fb99 	bl	80002b0 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	4b38      	ldr	r3, [pc, #224]	@ (8002c68 <UART_SetConfig+0x4e4>)
 8002b86:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2264      	movs	r2, #100	@ 0x64
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	1acb      	subs	r3, r1, r3
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	3332      	adds	r3, #50	@ 0x32
 8002b98:	4a33      	ldr	r2, [pc, #204]	@ (8002c68 <UART_SetConfig+0x4e4>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba4:	441c      	add	r4, r3
 8002ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002baa:	2200      	movs	r2, #0
 8002bac:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bae:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	1851      	adds	r1, r2, r1
 8002bc8:	6039      	str	r1, [r7, #0]
 8002bca:	4649      	mov	r1, r9
 8002bcc:	414b      	adcs	r3, r1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bdc:	4659      	mov	r1, fp
 8002bde:	00cb      	lsls	r3, r1, #3
 8002be0:	4651      	mov	r1, sl
 8002be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be6:	4651      	mov	r1, sl
 8002be8:	00ca      	lsls	r2, r1, #3
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	460a      	mov	r2, r1
 8002bfa:	eb42 0303 	adc.w	r3, r2, r3
 8002bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c18:	4649      	mov	r1, r9
 8002c1a:	008b      	lsls	r3, r1, #2
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c22:	4641      	mov	r1, r8
 8002c24:	008a      	lsls	r2, r1, #2
 8002c26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c2a:	f7fd fb41 	bl	80002b0 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <UART_SetConfig+0x4e4>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	2164      	movs	r1, #100	@ 0x64
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	3332      	adds	r3, #50	@ 0x32
 8002c46:	4a08      	ldr	r2, [pc, #32]	@ (8002c68 <UART_SetConfig+0x4e4>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4422      	add	r2, r4
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c68:	51eb851f 	.word	0x51eb851f

08002c6c <flash_write_erase_sector7>:

#include "flash_interface.h"



void flash_write_erase_sector7(){
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY) ;
 8002c70:	bf00      	nop
 8002c72:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <flash_write_erase_sector7+0x6>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7e:	b672      	cpsid	i
}
 8002c80:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 8002c82:	4b1f      	ldr	r3, [pc, #124]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002c84:	4a1f      	ldr	r2, [pc, #124]	@ (8002d04 <flash_write_erase_sector7+0x98>)
 8002c86:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <flash_write_erase_sector7+0x9c>)
 8002c8c:	605a      	str	r2, [r3, #4]

	//SECTOR 7 ERASE
	FLASH->CR |= FLASH_CR_SER;
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2;
 8002c9a:	4b19      	ldr	r3, [pc, #100]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002ca0:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002ca4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6113      	str	r3, [r2, #16]

	while(FLASH->SR & FLASH_SR_BSY) ;
 8002cb2:	bf00      	nop
 8002cb4:	4b12      	ldr	r3, [pc, #72]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f9      	bne.n	8002cb4 <flash_write_erase_sector7+0x48>
	//RETURN TO INIT STATE
	FLASH->CR &= ~FLASH_CR_STRT;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cca:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2);
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cd2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002cd6:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_SER;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cde:	f023 0302 	bic.w	r3, r3, #2
 8002ce2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <flash_write_erase_sector7+0x94>)
 8002cea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf0:	b662      	cpsie	i
}
 8002cf2:	bf00      	nop

	__enable_irq();
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00
 8002d04:	45670123 	.word	0x45670123
 8002d08:	cdef89ab 	.word	0xcdef89ab

08002d0c <flash_write_multiple_word>:



void flash_write_multiple_word(uint32_t addr, uint32_t* data, size_t num){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
	//CHECK IF BUSY
	while(FLASH->SR & FLASH_SR_BSY) ;
 8002d18:	bf00      	nop
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f9      	bne.n	8002d1a <flash_write_multiple_word+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d26:	b672      	cpsid	i
}
 8002d28:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 8002d2a:	4b26      	ldr	r3, [pc, #152]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d2c:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <flash_write_multiple_word+0xbc>)
 8002d2e:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8002d30:	4b24      	ldr	r3, [pc, #144]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d32:	4a26      	ldr	r2, [pc, #152]	@ (8002dcc <flash_write_multiple_word+0xc0>)
 8002d34:	605a      	str	r2, [r3, #4]

	//PICK DOUBLE WORD WRITING
	FLASH->CR |= FLASH_CR_PSIZE_1;
 8002d36:	4b23      	ldr	r3, [pc, #140]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	4a22      	ldr	r2, [pc, #136]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d40:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_0;
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d4c:	6113      	str	r3, [r2, #16]

	//ENABLE PROGRAMMING MODE
	FLASH->CR |= FLASH_CR_PG;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6113      	str	r3, [r2, #16]

	for(size_t i = 0; i < num; ++i){
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e00c      	b.n	8002d7a <flash_write_multiple_word+0x6e>
		*((uint32_t *)addr + i) = *(data + i);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	4413      	add	r3, r2
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	0091      	lsls	r1, r2, #2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	440a      	add	r2, r1
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < num; ++i){
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3301      	adds	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d3ee      	bcc.n	8002d60 <flash_write_multiple_word+0x54>

	}

	//WAIT TILL COMPLETES
	while(FLASH->SR & FLASH_SR_BSY) ;
 8002d82:	bf00      	nop
 8002d84:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f9      	bne.n	8002d84 <flash_write_multiple_word+0x78>
	//TURN OFF PROGRAMMING MODE
	FLASH->CR &= ~FLASH_CR_PG;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_1;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	4a08      	ldr	r2, [pc, #32]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002da2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002da6:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_LOCK;
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	4a05      	ldr	r2, [pc, #20]	@ (8002dc4 <flash_write_multiple_word+0xb8>)
 8002dae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002db2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8002db4:	b662      	cpsie	i
}
 8002db6:	bf00      	nop
	__enable_irq();
}
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40023c00 	.word	0x40023c00
 8002dc8:	45670123 	.word	0x45670123
 8002dcc:	cdef89ab 	.word	0xcdef89ab

08002dd0 <flash_read_multiple_words>:




void flash_read_multiple_words(uint32_t addr, uint32_t* data, size_t n){
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
	for(size_t i = 0; i < n; ++i){
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e00d      	b.n	8002dfe <flash_read_multiple_words+0x2e>
		*(data + i) = *((uint32_t*)addr + i);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	009a      	lsls	r2, r3, #2
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4413      	add	r3, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4413      	add	r3, r2
 8002df4:	680a      	ldr	r2, [r1, #0]
 8002df6:	601a      	str	r2, [r3, #0]
	for(size_t i = 0; i < n; ++i){
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3ed      	bcc.n	8002de2 <flash_read_multiple_words+0x12>
	}
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <set_column>:
static char x;
static uint32_t i = 0;
static uint32_t lastDebounceTime[12];
static bool keyState[12] = {};

void set_column(uint8_t col, GPIO_PinState state){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	71fb      	strb	r3, [r7, #7]
 8002e20:	4613      	mov	r3, r2
 8002e22:	71bb      	strb	r3, [r7, #6]
	switch(col){
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d014      	beq.n	8002e54 <set_column+0x40>
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	dc19      	bgt.n	8002e62 <set_column+0x4e>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <set_column+0x24>
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d007      	beq.n	8002e46 <set_column+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
		break;
	}
}
 8002e36:	e014      	b.n	8002e62 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col1_Pin, state);
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	2110      	movs	r1, #16
 8002e3e:	480b      	ldr	r0, [pc, #44]	@ (8002e6c <set_column+0x58>)
 8002e40:	f7fe fab6 	bl	80013b0 <HAL_GPIO_WritePin>
		break;
 8002e44:	e00d      	b.n	8002e62 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col2_Pin, state);
 8002e46:	79bb      	ldrb	r3, [r7, #6]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2140      	movs	r1, #64	@ 0x40
 8002e4c:	4807      	ldr	r0, [pc, #28]	@ (8002e6c <set_column+0x58>)
 8002e4e:	f7fe faaf 	bl	80013b0 <HAL_GPIO_WritePin>
		break;
 8002e52:	e006      	b.n	8002e62 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
 8002e54:	79bb      	ldrb	r3, [r7, #6]
 8002e56:	461a      	mov	r2, r3
 8002e58:	2104      	movs	r1, #4
 8002e5a:	4804      	ldr	r0, [pc, #16]	@ (8002e6c <set_column+0x58>)
 8002e5c:	f7fe faa8 	bl	80013b0 <HAL_GPIO_WritePin>
		break;
 8002e60:	bf00      	nop
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40020000 	.word	0x40020000

08002e70 <handle_key_press>:
void handle_key_press(uint8_t col, uint8_t row){
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	460a      	mov	r2, r1
 8002e7a:	71fb      	strb	r3, [r7, #7]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 1;
 8002e80:	79ba      	ldrb	r2, [r7, #6]
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	441a      	add	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <handle_key_press+0x48>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	54d1      	strb	r1, [r2, r3]
	x = (row) * 3 + col + 1;
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	461a      	mov	r2, r3
 8002e96:	0052      	lsls	r2, r2, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <handle_key_press+0x4c>)
 8002ea8:	701a      	strb	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	200001c8 	.word	0x200001c8
 8002ebc:	20000190 	.word	0x20000190

08002ec0 <handle_key_reset>:
void handle_key_reset(uint8_t col, uint8_t row){
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	460a      	mov	r2, r1
 8002eca:	71fb      	strb	r3, [r7, #7]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 0;
 8002ed0:	79ba      	ldrb	r2, [r7, #6]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	441a      	add	r2, r3
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	4413      	add	r3, r2
 8002edc:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <handle_key_reset+0x30>)
 8002ede:	2100      	movs	r1, #0
 8002ee0:	54d1      	strb	r1, [r2, r3]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200001c8 	.word	0x200001c8

08002ef4 <read_row>:

GPIO_PinState read_row(uint8_t row){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
	switch(row){
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d823      	bhi.n	8002f4c <read_row+0x58>
 8002f04:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <read_row+0x18>)
 8002f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f1d 	.word	0x08002f1d
 8002f10:	08002f29 	.word	0x08002f29
 8002f14:	08002f35 	.word	0x08002f35
 8002f18:	08002f41 	.word	0x08002f41
		case 0:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row1_Pin);
 8002f1c:	2120      	movs	r1, #32
 8002f1e:	480e      	ldr	r0, [pc, #56]	@ (8002f58 <read_row+0x64>)
 8002f20:	f7fe fa2e 	bl	8001380 <HAL_GPIO_ReadPin>
 8002f24:	4603      	mov	r3, r0
 8002f26:	e012      	b.n	8002f4e <read_row+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row2_Pin);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	480b      	ldr	r0, [pc, #44]	@ (8002f58 <read_row+0x64>)
 8002f2c:	f7fe fa28 	bl	8001380 <HAL_GPIO_ReadPin>
 8002f30:	4603      	mov	r3, r0
 8002f32:	e00c      	b.n	8002f4e <read_row+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row3_Pin);
 8002f34:	2102      	movs	r1, #2
 8002f36:	4808      	ldr	r0, [pc, #32]	@ (8002f58 <read_row+0x64>)
 8002f38:	f7fe fa22 	bl	8001380 <HAL_GPIO_ReadPin>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	e006      	b.n	8002f4e <read_row+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row4_Pin);
 8002f40:	2108      	movs	r1, #8
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <read_row+0x64>)
 8002f44:	f7fe fa1c 	bl	8001380 <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	e000      	b.n	8002f4e <read_row+0x5a>
			break;
	}
	return 1;
 8002f4c:	2301      	movs	r3, #1
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40020000 	.word	0x40020000

08002f5c <check_keyboard>:
char check_keyboard(void){
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
	x = 0;
 8002f62:	4b36      	ldr	r3, [pc, #216]	@ (800303c <check_keyboard+0xe0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
	i = 0;
 8002f68:	4b35      	ldr	r3, [pc, #212]	@ (8003040 <check_keyboard+0xe4>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
	for (int col = 0; col < 3; col++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e059      	b.n	8003028 <check_keyboard+0xcc>
	    set_column(col, GPIO_PIN_RESET);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff4a 	bl	8002e14 <set_column>
	    for (int row = 0; row < 4; row++) {
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	e044      	b.n	8003010 <check_keyboard+0xb4>
	    	uint32_t t = HAL_GetTick();
 8002f86:	f7fd ff61 	bl	8000e4c <HAL_GetTick>
 8002f8a:	6078      	str	r0, [r7, #4]
	    	if(t - lastDebounceTime[(row) * 3 + col] > DEBOUNCE_TIME){
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	441a      	add	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	4a2a      	ldr	r2, [pc, #168]	@ (8003044 <check_keyboard+0xe8>)
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	d931      	bls.n	800300a <check_keyboard+0xae>
				if (read_row(row) == GPIO_PIN_RESET) {
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ffa2 	bl	8002ef4 <read_row>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d121      	bne.n	8002ffa <check_keyboard+0x9e>
					if(!keyState[(row) * 3 + col])
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4a21      	ldr	r2, [pc, #132]	@ (8003048 <check_keyboard+0xec>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	f083 0301 	eor.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <check_keyboard+0x84>
						handle_key_press(col, row);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff48 	bl	8002e70 <handle_key_press>
					lastDebounceTime[(row) * 3 + col] = HAL_GetTick();
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	18d4      	adds	r4, r2, r3
 8002fec:	f7fd ff2e 	bl	8000e4c <HAL_GetTick>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <check_keyboard+0xe8>)
 8002ff4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002ff8:	e007      	b.n	800300a <check_keyboard+0xae>
				}
				else{
					handle_key_reset(col, row);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff5b 	bl	8002ec0 <handle_key_reset>
	    for (int row = 0; row < 4; row++) {
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b03      	cmp	r3, #3
 8003014:	ddb7      	ble.n	8002f86 <check_keyboard+0x2a>
				}
	    	}
	    }
	    set_column(col, GPIO_PIN_SET);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fef9 	bl	8002e14 <set_column>
	for (int col = 0; col < 3; col++) {
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3301      	adds	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b02      	cmp	r3, #2
 800302c:	dda2      	ble.n	8002f74 <check_keyboard+0x18>
	}
	return x;
 800302e:	4b03      	ldr	r3, [pc, #12]	@ (800303c <check_keyboard+0xe0>)
 8003030:	781b      	ldrb	r3, [r3, #0]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bd90      	pop	{r4, r7, pc}
 800303a:	bf00      	nop
 800303c:	20000190 	.word	0x20000190
 8003040:	20000194 	.word	0x20000194
 8003044:	20000198 	.word	0x20000198
 8003048:	200001c8 	.word	0x200001c8

0800304c <lcd_send_cmd>:
 */
#include "lcd_driver.h"
static I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f023 030f 	bic.w	r3, r3, #15
 800305c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	f043 030c 	orr.w	r3, r3, #12
 800306a:	b2db      	uxtb	r3, r3
 800306c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	b2db      	uxtb	r3, r3
 8003076:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003078:	7bbb      	ldrb	r3, [r7, #14]
 800307a:	f043 030c 	orr.w	r3, r3, #12
 800307e:	b2db      	uxtb	r3, r3
 8003080:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8003082:	7bbb      	ldrb	r3, [r7, #14]
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	b2db      	uxtb	r3, r3
 800308a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800308c:	f107 0208 	add.w	r2, r7, #8
 8003090:	2364      	movs	r3, #100	@ 0x64
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2304      	movs	r3, #4
 8003096:	214e      	movs	r1, #78	@ 0x4e
 8003098:	4803      	ldr	r0, [pc, #12]	@ (80030a8 <lcd_send_cmd+0x5c>)
 800309a:	f7fe fae7 	bl	800166c <HAL_I2C_Master_Transmit>
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200001d4 	.word	0x200001d4

080030ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	f023 030f 	bic.w	r3, r3, #15
 80030bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	f043 030d 	orr.w	r3, r3, #13
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	f043 0309 	orr.w	r3, r3, #9
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 80030d8:	7bbb      	ldrb	r3, [r7, #14]
 80030da:	f043 030d 	orr.w	r3, r3, #13
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 80030e2:	7bbb      	ldrb	r3, [r7, #14]
 80030e4:	f043 0309 	orr.w	r3, r3, #9
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80030ec:	f107 0208 	add.w	r2, r7, #8
 80030f0:	2364      	movs	r3, #100	@ 0x64
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2304      	movs	r3, #4
 80030f6:	214e      	movs	r1, #78	@ 0x4e
 80030f8:	4803      	ldr	r0, [pc, #12]	@ (8003108 <lcd_send_data+0x5c>)
 80030fa:	f7fe fab7 	bl	800166c <HAL_I2C_Master_Transmit>
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200001d4 	.word	0x200001d4

0800310c <lcd_init>:

void lcd_init (I2C_HandleTypeDef i2c)
{
 800310c:	b084      	sub	sp, #16
 800310e:	b580      	push	{r7, lr}
 8003110:	af00      	add	r7, sp, #0
 8003112:	f107 0c08 	add.w	ip, r7, #8
 8003116:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 800311a:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <lcd_init+0x98>)
 800311c:	4618      	mov	r0, r3
 800311e:	f107 0308 	add.w	r3, r7, #8
 8003122:	2254      	movs	r2, #84	@ 0x54
 8003124:	4619      	mov	r1, r3
 8003126:	f001 f960 	bl	80043ea <memcpy>
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800312a:	2032      	movs	r0, #50	@ 0x32
 800312c:	f7fd fe9a 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003130:	2030      	movs	r0, #48	@ 0x30
 8003132:	f7ff ff8b 	bl	800304c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003136:	2005      	movs	r0, #5
 8003138:	f7fd fe94 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 800313c:	2030      	movs	r0, #48	@ 0x30
 800313e:	f7ff ff85 	bl	800304c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003142:	2001      	movs	r0, #1
 8003144:	f7fd fe8e 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8003148:	2030      	movs	r0, #48	@ 0x30
 800314a:	f7ff ff7f 	bl	800304c <lcd_send_cmd>
	HAL_Delay(10);
 800314e:	200a      	movs	r0, #10
 8003150:	f7fd fe88 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003154:	2020      	movs	r0, #32
 8003156:	f7ff ff79 	bl	800304c <lcd_send_cmd>
	HAL_Delay(10);
 800315a:	200a      	movs	r0, #10
 800315c:	f7fd fe82 	bl	8000e64 <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003160:	2028      	movs	r0, #40	@ 0x28
 8003162:	f7ff ff73 	bl	800304c <lcd_send_cmd>
	HAL_Delay(1);
 8003166:	2001      	movs	r0, #1
 8003168:	f7fd fe7c 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800316c:	2008      	movs	r0, #8
 800316e:	f7ff ff6d 	bl	800304c <lcd_send_cmd>
	HAL_Delay(1);
 8003172:	2001      	movs	r0, #1
 8003174:	f7fd fe76 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003178:	2001      	movs	r0, #1
 800317a:	f7ff ff67 	bl	800304c <lcd_send_cmd>
	HAL_Delay(2);
 800317e:	2002      	movs	r0, #2
 8003180:	f7fd fe70 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003184:	2006      	movs	r0, #6
 8003186:	f7ff ff61 	bl	800304c <lcd_send_cmd>
	HAL_Delay(1);
 800318a:	2001      	movs	r0, #1
 800318c:	f7fd fe6a 	bl	8000e64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003190:	200c      	movs	r0, #12
 8003192:	f7ff ff5b 	bl	800304c <lcd_send_cmd>
}
 8003196:	bf00      	nop
 8003198:	46bd      	mov	sp, r7
 800319a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800319e:	b004      	add	sp, #16
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	200001d4 	.word	0x200001d4

080031a8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80031b0:	e006      	b.n	80031c0 <lcd_send_string+0x18>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff76 	bl	80030ac <lcd_send_data>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f4      	bne.n	80031b2 <lcd_send_string+0xa>
}
 80031c8:	bf00      	nop
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <lcd_clear>:

void lcd_clear(void){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 80031d8:	2100      	movs	r1, #0
 80031da:	2000      	movs	r0, #0
 80031dc:	f000 f80e 	bl	80031fc <lcd_put_cur>
	  lcd_send_string ("                ");
 80031e0:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <lcd_clear+0x24>)
 80031e2:	f7ff ffe1 	bl	80031a8 <lcd_send_string>
	  lcd_put_cur(1, 0);
 80031e6:	2100      	movs	r1, #0
 80031e8:	2001      	movs	r0, #1
 80031ea:	f000 f807 	bl	80031fc <lcd_put_cur>
	  lcd_send_string ("                ");
 80031ee:	4802      	ldr	r0, [pc, #8]	@ (80031f8 <lcd_clear+0x24>)
 80031f0:	f7ff ffda 	bl	80031a8 <lcd_send_string>
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	08004f04 	.word	0x08004f04

080031fc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
	switch (row)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <lcd_put_cur+0x18>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d005      	beq.n	800321e <lcd_put_cur+0x22>
 8003212:	e009      	b.n	8003228 <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800321a:	603b      	str	r3, [r7, #0]
			break;
 800321c:	e004      	b.n	8003228 <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003224:	603b      	str	r3, [r7, #0]
			break;
 8003226:	bf00      	nop
	}
	lcd_send_cmd (col);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff ff0d 	bl	800304c <lcd_send_cmd>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <save_new_state>:
static char pin[9] = "";
static char numbers[48];

static uint32_t countdown_delay;
//HELPER FUNCTIONS
void save_new_state(void){
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b092      	sub	sp, #72	@ 0x48
 8003240:	af00      	add	r7, sp, #0
	char to_save[64];
	memset(to_save, 0, 64);
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	2240      	movs	r2, #64	@ 0x40
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f001 f853 	bl	80042f4 <memset>
	memcpy(to_save, numbers, 48);
 800324e:	4b22      	ldr	r3, [pc, #136]	@ (80032d8 <save_new_state+0x9c>)
 8003250:	1d3c      	adds	r4, r7, #4
 8003252:	461d      	mov	r5, r3
 8003254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800325a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800325c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(to_save + 48, pin, 8);
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	3330      	adds	r3, #48	@ 0x30
 8003268:	2208      	movs	r2, #8
 800326a:	491c      	ldr	r1, [pc, #112]	@ (80032dc <save_new_state+0xa0>)
 800326c:	4618      	mov	r0, r3
 800326e:	f001 f8bc 	bl	80043ea <memcpy>
	snprintf(to_save + 56, 8, "%ld", countdown_delay/1000);
 8003272:	1d38      	adds	r0, r7, #4
 8003274:	3038      	adds	r0, #56	@ 0x38
 8003276:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <save_new_state+0xa4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <save_new_state+0xa8>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	4a19      	ldr	r2, [pc, #100]	@ (80032e8 <save_new_state+0xac>)
 8003284:	2108      	movs	r1, #8
 8003286:	f000 ff29 	bl	80040dc <sniprintf>
	for(size_t i = 0; i < 64; ++i)
 800328a:	2300      	movs	r3, #0
 800328c:	647b      	str	r3, [r7, #68]	@ 0x44
 800328e:	e013      	b.n	80032b8 <save_new_state+0x7c>
		if(to_save[i] == '\0' || to_save[i] == '#') to_save[i] = '*';
 8003290:	1d3a      	adds	r2, r7, #4
 8003292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003294:	4413      	add	r3, r2
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <save_new_state+0x6c>
 800329c:	1d3a      	adds	r2, r7, #4
 800329e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b23      	cmp	r3, #35	@ 0x23
 80032a6:	d104      	bne.n	80032b2 <save_new_state+0x76>
 80032a8:	1d3a      	adds	r2, r7, #4
 80032aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ac:	4413      	add	r3, r2
 80032ae:	222a      	movs	r2, #42	@ 0x2a
 80032b0:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 80032b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032b4:	3301      	adds	r3, #1
 80032b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80032bc:	d9e8      	bls.n	8003290 <save_new_state+0x54>
	flash_write_erase_sector7();
 80032be:	f7ff fcd5 	bl	8002c6c <flash_write_erase_sector7>
	flash_write_multiple_word(0x08060000, (uint32_t *)to_save, 16);
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	2210      	movs	r2, #16
 80032c6:	4619      	mov	r1, r3
 80032c8:	4808      	ldr	r0, [pc, #32]	@ (80032ec <save_new_state+0xb0>)
 80032ca:	f7ff fd1f 	bl	8002d0c <flash_write_multiple_word>

}
 80032ce:	bf00      	nop
 80032d0:	3748      	adds	r7, #72	@ 0x48
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bdb0      	pop	{r4, r5, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000250 	.word	0x20000250
 80032dc:	20000244 	.word	0x20000244
 80032e0:	20000280 	.word	0x20000280
 80032e4:	10624dd3 	.word	0x10624dd3
 80032e8:	08004f30 	.word	0x08004f30
 80032ec:	08060000 	.word	0x08060000

080032f0 <change_state>:

static inline void change_state(alarm_state new_state){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	71fb      	strb	r3, [r7, #7]
	state = new_state;
 80032fa:	4a09      	ldr	r2, [pc, #36]	@ (8003320 <change_state+0x30>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	7013      	strb	r3, [r2, #0]
	memset(str,0,14);
 8003300:	220e      	movs	r2, #14
 8003302:	2100      	movs	r1, #0
 8003304:	4807      	ldr	r0, [pc, #28]	@ (8003324 <change_state+0x34>)
 8003306:	f000 fff5 	bl	80042f4 <memset>
	len = 0;
 800330a:	4b07      	ldr	r3, [pc, #28]	@ (8003328 <change_state+0x38>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
	changed = true;
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <change_state+0x3c>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000
 8003324:	20000228 	.word	0x20000228
 8003328:	20000236 	.word	0x20000236
 800332c:	2000000d 	.word	0x2000000d

08003330 <s_to_ms>:

uint32_t s_to_ms(uint32_t s){return s*1000UL;}
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <state_machine_init>:

//IMPLEMENTATIONS
void state_machine_init(char data_blob[64]){
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	char temp[8];
	for(size_t i = 0; i < 64; ++i)
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e00d      	b.n	800337a <state_machine_init+0x2a>
		if(data_blob[i] == '*') data_blob[i] = '\0';
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	4413      	add	r3, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b2a      	cmp	r3, #42	@ 0x2a
 8003368:	d104      	bne.n	8003374 <state_machine_init+0x24>
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	4413      	add	r3, r2
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b3f      	cmp	r3, #63	@ 0x3f
 800337e:	d9ee      	bls.n	800335e <state_machine_init+0xe>
	memcpy(numbers, data_blob, 48);
 8003380:	4a1e      	ldr	r2, [pc, #120]	@ (80033fc <state_machine_init+0xac>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	461c      	mov	r4, r3
 8003386:	4616      	mov	r6, r2
 8003388:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800338c:	4635      	mov	r5, r6
 800338e:	4623      	mov	r3, r4
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800339a:	3410      	adds	r4, #16
 800339c:	3610      	adds	r6, #16
 800339e:	4564      	cmp	r4, ip
 80033a0:	d1f4      	bne.n	800338c <state_machine_init+0x3c>
	memcpy(pin, data_blob + 48, 8);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3330      	adds	r3, #48	@ 0x30
 80033a6:	2208      	movs	r2, #8
 80033a8:	4619      	mov	r1, r3
 80033aa:	4815      	ldr	r0, [pc, #84]	@ (8003400 <state_machine_init+0xb0>)
 80033ac:	f001 f81d 	bl	80043ea <memcpy>
	memcpy(temp, data_blob + 56, 8);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	6810      	ldr	r0, [r2, #0]
 80033bc:	6851      	ldr	r1, [r2, #4]
 80033be:	c303      	stmia	r3!, {r0, r1}


	countdown_delay = strtol(temp, NULL, 10);
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	220a      	movs	r2, #10
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fd5d 	bl	8003e88 <strtol>
 80033ce:	4603      	mov	r3, r0
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003404 <state_machine_init+0xb4>)
 80033d4:	601a      	str	r2, [r3, #0]
	pin[strlen(pin)] = '#';
 80033d6:	480a      	ldr	r0, [pc, #40]	@ (8003400 <state_machine_init+0xb0>)
 80033d8:	f7fc ff0c 	bl	80001f4 <strlen>
 80033dc:	4603      	mov	r3, r0
 80033de:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <state_machine_init+0xb0>)
 80033e0:	2123      	movs	r1, #35	@ 0x23
 80033e2:	54d1      	strb	r1, [r2, r3]
	countdown_delay = s_to_ms(countdown_delay);
 80033e4:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <state_machine_init+0xb4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ffa1 	bl	8003330 <s_to_ms>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4a04      	ldr	r2, [pc, #16]	@ (8003404 <state_machine_init+0xb4>)
 80033f2:	6013      	str	r3, [r2, #0]

}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fc:	20000250 	.word	0x20000250
 8003400:	20000244 	.word	0x20000244
 8003404:	20000280 	.word	0x20000280

08003408 <state_machine_run>:

void state_machine_run(char input){
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
	if(input){
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00c      	beq.n	8003432 <state_machine_run+0x2a>
		changed = true;
 8003418:	4b1f      	ldr	r3, [pc, #124]	@ (8003498 <state_machine_run+0x90>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
		str[len++] = input;
 800341e:	4b1f      	ldr	r3, [pc, #124]	@ (800349c <state_machine_run+0x94>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	b2d1      	uxtb	r1, r2
 8003426:	4a1d      	ldr	r2, [pc, #116]	@ (800349c <state_machine_run+0x94>)
 8003428:	7011      	strb	r1, [r2, #0]
 800342a:	4619      	mov	r1, r3
 800342c:	4a1c      	ldr	r2, [pc, #112]	@ (80034a0 <state_machine_run+0x98>)
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	5453      	strb	r3, [r2, r1]
	}
	switch(state){
 8003432:	4b1c      	ldr	r3, [pc, #112]	@ (80034a4 <state_machine_run+0x9c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b07      	cmp	r3, #7
 8003438:	d82a      	bhi.n	8003490 <state_machine_run+0x88>
 800343a:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <state_machine_run+0x38>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003467 	.word	0x08003467
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003473 	.word	0x08003473
 800344c:	08003461 	.word	0x08003461
 8003450:	0800348b 	.word	0x0800348b
 8003454:	08003479 	.word	0x08003479
 8003458:	0800347f 	.word	0x0800347f
 800345c:	08003485 	.word	0x08003485
	case DISARMED:
		state_machine_disarmed();
 8003460:	f000 f8d8 	bl	8003614 <state_machine_disarmed>
	  break;
 8003464:	e014      	b.n	8003490 <state_machine_run+0x88>
	case ARMED:
		state_machine_armed();
 8003466:	f000 f81f 	bl	80034a8 <state_machine_armed>
	  break;
 800346a:	e011      	b.n	8003490 <state_machine_run+0x88>
	case ARMED_COUNTDOWN:
		state_machine_countdown();
 800346c:	f000 f998 	bl	80037a0 <state_machine_countdown>
	  break;
 8003470:	e00e      	b.n	8003490 <state_machine_run+0x88>
	case ALERT_SMS:
		state_machine_alert();
 8003472:	f000 fa81 	bl	8003978 <state_machine_alert>
	  break;
 8003476:	e00b      	b.n	8003490 <state_machine_run+0x88>
	case MENAGE_NUMBER:
		state_machine_menage_number();
 8003478:	f000 fb36 	bl	8003ae8 <state_machine_menage_number>
	  break;
 800347c:	e008      	b.n	8003490 <state_machine_run+0x88>
	case REPLACE_NUMBER:
		state_machine_replace_number();
 800347e:	f000 fc2b 	bl	8003cd8 <state_machine_replace_number>
	  break;
 8003482:	e005      	b.n	8003490 <state_machine_run+0x88>
	case SET_ALERT_TIME:
		state_machine_set_alert_time();
 8003484:	f000 fa80 	bl	8003988 <state_machine_set_alert_time>
	  break;
 8003488:	e002      	b.n	8003490 <state_machine_run+0x88>
	case SET_NEW_PIN:
		state_machine_set_new_pin();
 800348a:	f000 fad5 	bl	8003a38 <state_machine_set_new_pin>
	  break;
 800348e:	bf00      	nop
	}
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	2000000d 	.word	0x2000000d
 800349c:	20000236 	.word	0x20000236
 80034a0:	20000228 	.word	0x20000228
 80034a4:	20000000 	.word	0x20000000

080034a8 <state_machine_armed>:

void state_machine_armed(void){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	GPIO_PinState singal_state = HAL_GPIO_ReadPin(Alarm_Signal_GPIO_Port, Alarm_Signal_Pin);
 80034ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034b2:	484d      	ldr	r0, [pc, #308]	@ (80035e8 <state_machine_armed+0x140>)
 80034b4:	f7fd ff64 	bl	8001380 <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
	if(changed == true || !singal_state || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 80034bc:	4b4b      	ldr	r3, [pc, #300]	@ (80035ec <state_machine_armed+0x144>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10c      	bne.n	80034de <state_machine_armed+0x36>
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <state_machine_armed+0x36>
 80034ca:	f7fd fcbf 	bl	8000e4c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b47      	ldr	r3, [pc, #284]	@ (80035f0 <state_machine_armed+0x148>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80034da:	f240 8081 	bls.w	80035e0 <state_machine_armed+0x138>
		if(len == 0 && changed){
 80034de:	4b45      	ldr	r3, [pc, #276]	@ (80035f4 <state_machine_armed+0x14c>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d117      	bne.n	8003516 <state_machine_armed+0x6e>
 80034e6:	4b41      	ldr	r3, [pc, #260]	@ (80035ec <state_machine_armed+0x144>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d013      	beq.n	8003516 <state_machine_armed+0x6e>
			changed = false;
 80034ee:	4b3f      	ldr	r3, [pc, #252]	@ (80035ec <state_machine_armed+0x144>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80034f4:	f7ff fe6e 	bl	80031d4 <lcd_clear>
			lcd_put_cur(0, 0);
 80034f8:	2100      	movs	r1, #0
 80034fa:	2000      	movs	r0, #0
 80034fc:	f7ff fe7e 	bl	80031fc <lcd_put_cur>
			lcd_send_string ("ARMED");
 8003500:	483d      	ldr	r0, [pc, #244]	@ (80035f8 <state_machine_armed+0x150>)
 8003502:	f7ff fe51 	bl	80031a8 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003506:	2100      	movs	r1, #0
 8003508:	2001      	movs	r0, #1
 800350a:	f7ff fe77 	bl	80031fc <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 800350e:	483b      	ldr	r0, [pc, #236]	@ (80035fc <state_machine_armed+0x154>)
 8003510:	f7ff fe4a 	bl	80031a8 <lcd_send_string>
 8003514:	e064      	b.n	80035e0 <state_machine_armed+0x138>
		}
		else if(!singal_state){
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d108      	bne.n	800352e <state_machine_armed+0x86>
			change_state(ARMED_COUNTDOWN);
 800351c:	2001      	movs	r0, #1
 800351e:	f7ff fee7 	bl	80032f0 <change_state>
			countdown_start = HAL_GetTick();
 8003522:	f7fd fc93 	bl	8000e4c <HAL_GetTick>
 8003526:	4603      	mov	r3, r0
 8003528:	4a35      	ldr	r2, [pc, #212]	@ (8003600 <state_machine_armed+0x158>)
 800352a:	6013      	str	r3, [r2, #0]
			}

		}

	}
}
 800352c:	e058      	b.n	80035e0 <state_machine_armed+0x138>
		else if(len != 0){
 800352e:	4b31      	ldr	r3, [pc, #196]	@ (80035f4 <state_machine_armed+0x14c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d054      	beq.n	80035e0 <state_machine_armed+0x138>
			lcd_clear();
 8003536:	f7ff fe4d 	bl	80031d4 <lcd_clear>
			lcd_put_cur(0, 0);
 800353a:	2100      	movs	r1, #0
 800353c:	2000      	movs	r0, #0
 800353e:	f7ff fe5d 	bl	80031fc <lcd_put_cur>
			lcd_send_string("DISARM");
 8003542:	4830      	ldr	r0, [pc, #192]	@ (8003604 <state_machine_armed+0x15c>)
 8003544:	f7ff fe30 	bl	80031a8 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003548:	2100      	movs	r1, #0
 800354a:	2001      	movs	r0, #1
 800354c:	f7ff fe56 	bl	80031fc <lcd_put_cur>
			str[len] = '\0';
 8003550:	4b28      	ldr	r3, [pc, #160]	@ (80035f4 <state_machine_armed+0x14c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b2c      	ldr	r3, [pc, #176]	@ (8003608 <state_machine_armed+0x160>)
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 800355c:	482a      	ldr	r0, [pc, #168]	@ (8003608 <state_machine_armed+0x160>)
 800355e:	f7ff fe23 	bl	80031a8 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8003562:	492a      	ldr	r1, [pc, #168]	@ (800360c <state_machine_armed+0x164>)
 8003564:	4828      	ldr	r0, [pc, #160]	@ (8003608 <state_machine_armed+0x160>)
 8003566:	f7fc fe3b 	bl	80001e0 <strcmp>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <state_machine_armed+0xd0>
				change_state(DISARMED);
 8003570:	2003      	movs	r0, #3
 8003572:	f7ff febd 	bl	80032f0 <change_state>
}
 8003576:	e033      	b.n	80035e0 <state_machine_armed+0x138>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8003578:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <state_machine_armed+0x14c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	4a22      	ldr	r2, [pc, #136]	@ (8003608 <state_machine_armed+0x160>)
 8003580:	5cd3      	ldrb	r3, [r2, r3]
 8003582:	2b23      	cmp	r3, #35	@ 0x23
 8003584:	d00a      	beq.n	800359c <state_machine_armed+0xf4>
 8003586:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <state_machine_armed+0x14c>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b0e      	cmp	r3, #14
 800358c:	d006      	beq.n	800359c <state_machine_armed+0xf4>
 800358e:	4b17      	ldr	r3, [pc, #92]	@ (80035ec <state_machine_armed+0x144>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	f083 0301 	eor.w	r3, r3, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d018      	beq.n	80035ce <state_machine_armed+0x126>
				lcd_clear();
 800359c:	f7ff fe1a 	bl	80031d4 <lcd_clear>
				lcd_put_cur(0, 0);
 80035a0:	2100      	movs	r1, #0
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7ff fe2a 	bl	80031fc <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 80035a8:	4819      	ldr	r0, [pc, #100]	@ (8003610 <state_machine_armed+0x168>)
 80035aa:	f7ff fdfd 	bl	80031a8 <lcd_send_string>
				memset(str,0,14);
 80035ae:	220e      	movs	r2, #14
 80035b0:	2100      	movs	r1, #0
 80035b2:	4815      	ldr	r0, [pc, #84]	@ (8003608 <state_machine_armed+0x160>)
 80035b4:	f000 fe9e 	bl	80042f4 <memset>
				len = 0;
 80035b8:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <state_machine_armed+0x14c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
				changed = true;
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <state_machine_armed+0x144>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 80035c4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80035c8:	f7fd fc4c 	bl	8000e64 <HAL_Delay>
 80035cc:	e008      	b.n	80035e0 <state_machine_armed+0x138>
				timestamp = HAL_GetTick();
 80035ce:	f7fd fc3d 	bl	8000e4c <HAL_GetTick>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4a06      	ldr	r2, [pc, #24]	@ (80035f0 <state_machine_armed+0x148>)
 80035d6:	6013      	str	r3, [r2, #0]
				changed = false;
 80035d8:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <state_machine_armed+0x144>)
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
}
 80035de:	e7ff      	b.n	80035e0 <state_machine_armed+0x138>
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40020000 	.word	0x40020000
 80035ec:	2000000d 	.word	0x2000000d
 80035f0:	20000238 	.word	0x20000238
 80035f4:	20000236 	.word	0x20000236
 80035f8:	08004f34 	.word	0x08004f34
 80035fc:	08004f3c 	.word	0x08004f3c
 8003600:	20000240 	.word	0x20000240
 8003604:	08004f4c 	.word	0x08004f4c
 8003608:	20000228 	.word	0x20000228
 800360c:	20000244 	.word	0x20000244
 8003610:	08004f54 	.word	0x08004f54

08003614 <state_machine_disarmed>:

void state_machine_disarmed(void){
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8003618:	4b55      	ldr	r3, [pc, #340]	@ (8003770 <state_machine_disarmed+0x15c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <state_machine_disarmed+0x20>
 8003620:	f7fd fc14 	bl	8000e4c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	4b53      	ldr	r3, [pc, #332]	@ (8003774 <state_machine_disarmed+0x160>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003630:	f240 809c 	bls.w	800376c <state_machine_disarmed+0x158>
	  if(len == 0 && changed){
 8003634:	4b50      	ldr	r3, [pc, #320]	@ (8003778 <state_machine_disarmed+0x164>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d117      	bne.n	800366c <state_machine_disarmed+0x58>
 800363c:	4b4c      	ldr	r3, [pc, #304]	@ (8003770 <state_machine_disarmed+0x15c>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <state_machine_disarmed+0x58>
		  changed = false;
 8003644:	4b4a      	ldr	r3, [pc, #296]	@ (8003770 <state_machine_disarmed+0x15c>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
		  lcd_clear();
 800364a:	f7ff fdc3 	bl	80031d4 <lcd_clear>
		  lcd_put_cur(0, 0);
 800364e:	2100      	movs	r1, #0
 8003650:	2000      	movs	r0, #0
 8003652:	f7ff fdd3 	bl	80031fc <lcd_put_cur>
		  lcd_send_string ("DISARMED");
 8003656:	4849      	ldr	r0, [pc, #292]	@ (800377c <state_machine_disarmed+0x168>)
 8003658:	f7ff fda6 	bl	80031a8 <lcd_send_string>
		  lcd_put_cur(1, 0);
 800365c:	2100      	movs	r1, #0
 800365e:	2001      	movs	r0, #1
 8003660:	f7ff fdcc 	bl	80031fc <lcd_put_cur>
		  lcd_send_string("PIN TO ARM");
 8003664:	4846      	ldr	r0, [pc, #280]	@ (8003780 <state_machine_disarmed+0x16c>)
 8003666:	f7ff fd9f 	bl	80031a8 <lcd_send_string>
 800366a:	e07f      	b.n	800376c <state_machine_disarmed+0x158>
	  }
	  else if(len != 0){
 800366c:	4b42      	ldr	r3, [pc, #264]	@ (8003778 <state_machine_disarmed+0x164>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d07b      	beq.n	800376c <state_machine_disarmed+0x158>
		  lcd_clear();
 8003674:	f7ff fdae 	bl	80031d4 <lcd_clear>
		  lcd_put_cur(0, 0);
 8003678:	2100      	movs	r1, #0
 800367a:	2000      	movs	r0, #0
 800367c:	f7ff fdbe 	bl	80031fc <lcd_put_cur>
		  lcd_send_string("DISARMED PIN");
 8003680:	4840      	ldr	r0, [pc, #256]	@ (8003784 <state_machine_disarmed+0x170>)
 8003682:	f7ff fd91 	bl	80031a8 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8003686:	2100      	movs	r1, #0
 8003688:	2001      	movs	r0, #1
 800368a:	f7ff fdb7 	bl	80031fc <lcd_put_cur>
		  str[len] = '\0';
 800368e:	4b3a      	ldr	r3, [pc, #232]	@ (8003778 <state_machine_disarmed+0x164>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	4b3c      	ldr	r3, [pc, #240]	@ (8003788 <state_machine_disarmed+0x174>)
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]
		  lcd_send_string(str);
 800369a:	483b      	ldr	r0, [pc, #236]	@ (8003788 <state_machine_disarmed+0x174>)
 800369c:	f7ff fd84 	bl	80031a8 <lcd_send_string>
		  if(strcmp(str,pin) == 0){
 80036a0:	493a      	ldr	r1, [pc, #232]	@ (800378c <state_machine_disarmed+0x178>)
 80036a2:	4839      	ldr	r0, [pc, #228]	@ (8003788 <state_machine_disarmed+0x174>)
 80036a4:	f7fc fd9c 	bl	80001e0 <strcmp>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <state_machine_disarmed+0xa2>
			  change_state(ARMED);
 80036ae:	2000      	movs	r0, #0
 80036b0:	f7ff fe1e 	bl	80032f0 <change_state>
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}
 80036b4:	e05a      	b.n	800376c <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_new_pin) == 0){
 80036b6:	4b36      	ldr	r3, [pc, #216]	@ (8003790 <state_machine_disarmed+0x17c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4619      	mov	r1, r3
 80036bc:	4832      	ldr	r0, [pc, #200]	@ (8003788 <state_machine_disarmed+0x174>)
 80036be:	f7fc fd8f 	bl	80001e0 <strcmp>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <state_machine_disarmed+0xbc>
			  change_state(SET_NEW_PIN);
 80036c8:	2004      	movs	r0, #4
 80036ca:	f7ff fe11 	bl	80032f0 <change_state>
}
 80036ce:	e04d      	b.n	800376c <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_alert_time) == 0){
 80036d0:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <state_machine_disarmed+0x180>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	482c      	ldr	r0, [pc, #176]	@ (8003788 <state_machine_disarmed+0x174>)
 80036d8:	f7fc fd82 	bl	80001e0 <strcmp>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <state_machine_disarmed+0xd6>
			  change_state(SET_ALERT_TIME);
 80036e2:	2007      	movs	r0, #7
 80036e4:	f7ff fe04 	bl	80032f0 <change_state>
}
 80036e8:	e040      	b.n	800376c <state_machine_disarmed+0x158>
		  else if(strcmp(str,menage_number) == 0){
 80036ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003798 <state_machine_disarmed+0x184>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4825      	ldr	r0, [pc, #148]	@ (8003788 <state_machine_disarmed+0x174>)
 80036f2:	f7fc fd75 	bl	80001e0 <strcmp>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <state_machine_disarmed+0xf0>
			  change_state(MENAGE_NUMBER);
 80036fc:	2005      	movs	r0, #5
 80036fe:	f7ff fdf7 	bl	80032f0 <change_state>
}
 8003702:	e033      	b.n	800376c <state_machine_disarmed+0x158>
		  else if(str[len - 1] == '#' || len == 14 || !changed){
 8003704:	4b1c      	ldr	r3, [pc, #112]	@ (8003778 <state_machine_disarmed+0x164>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	3b01      	subs	r3, #1
 800370a:	4a1f      	ldr	r2, [pc, #124]	@ (8003788 <state_machine_disarmed+0x174>)
 800370c:	5cd3      	ldrb	r3, [r2, r3]
 800370e:	2b23      	cmp	r3, #35	@ 0x23
 8003710:	d00a      	beq.n	8003728 <state_machine_disarmed+0x114>
 8003712:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <state_machine_disarmed+0x164>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b0e      	cmp	r3, #14
 8003718:	d006      	beq.n	8003728 <state_machine_disarmed+0x114>
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <state_machine_disarmed+0x15c>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d018      	beq.n	800375a <state_machine_disarmed+0x146>
			  lcd_clear();
 8003728:	f7ff fd54 	bl	80031d4 <lcd_clear>
			  lcd_put_cur(0, 0);
 800372c:	2100      	movs	r1, #0
 800372e:	2000      	movs	r0, #0
 8003730:	f7ff fd64 	bl	80031fc <lcd_put_cur>
			  lcd_send_string ("WRONG PIN");
 8003734:	4819      	ldr	r0, [pc, #100]	@ (800379c <state_machine_disarmed+0x188>)
 8003736:	f7ff fd37 	bl	80031a8 <lcd_send_string>
			  memset(str,0,14);
 800373a:	220e      	movs	r2, #14
 800373c:	2100      	movs	r1, #0
 800373e:	4812      	ldr	r0, [pc, #72]	@ (8003788 <state_machine_disarmed+0x174>)
 8003740:	f000 fdd8 	bl	80042f4 <memset>
			  len = 0;
 8003744:	4b0c      	ldr	r3, [pc, #48]	@ (8003778 <state_machine_disarmed+0x164>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
			  changed = true;
 800374a:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <state_machine_disarmed+0x15c>)
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(3000);
 8003750:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003754:	f7fd fb86 	bl	8000e64 <HAL_Delay>
 8003758:	e008      	b.n	800376c <state_machine_disarmed+0x158>
			  timestamp = HAL_GetTick();
 800375a:	f7fd fb77 	bl	8000e4c <HAL_GetTick>
 800375e:	4603      	mov	r3, r0
 8003760:	4a04      	ldr	r2, [pc, #16]	@ (8003774 <state_machine_disarmed+0x160>)
 8003762:	6013      	str	r3, [r2, #0]
			  changed = false;
 8003764:	4b02      	ldr	r3, [pc, #8]	@ (8003770 <state_machine_disarmed+0x15c>)
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
}
 800376a:	e7ff      	b.n	800376c <state_machine_disarmed+0x158>
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}
 8003770:	2000000d 	.word	0x2000000d
 8003774:	20000238 	.word	0x20000238
 8003778:	20000236 	.word	0x20000236
 800377c:	08004f60 	.word	0x08004f60
 8003780:	08004f6c 	.word	0x08004f6c
 8003784:	08004f78 	.word	0x08004f78
 8003788:	20000228 	.word	0x20000228
 800378c:	20000244 	.word	0x20000244
 8003790:	20000014 	.word	0x20000014
 8003794:	20000010 	.word	0x20000010
 8003798:	20000018 	.word	0x20000018
 800379c:	08004f54 	.word	0x08004f54

080037a0 <state_machine_countdown>:

void state_machine_countdown(void){
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - countdown_start > countdown_delay){
 80037a6:	f7fd fb51 	bl	8000e4c <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4b65      	ldr	r3, [pc, #404]	@ (8003944 <state_machine_countdown+0x1a4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	1ad2      	subs	r2, r2, r3
 80037b2:	4b65      	ldr	r3, [pc, #404]	@ (8003948 <state_machine_countdown+0x1a8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d902      	bls.n	80037c0 <state_machine_countdown+0x20>
		change_state(ALERT_SMS);
 80037ba:	2002      	movs	r0, #2
 80037bc:	f7ff fd98 	bl	80032f0 <change_state>
	}
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL || HAL_GetTick() - timestamp_display_s > 1000){
 80037c0:	4b62      	ldr	r3, [pc, #392]	@ (800394c <state_machine_countdown+0x1ac>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d112      	bne.n	80037ee <state_machine_countdown+0x4e>
 80037c8:	f7fd fb40 	bl	8000e4c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	4b60      	ldr	r3, [pc, #384]	@ (8003950 <state_machine_countdown+0x1b0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80037d8:	d809      	bhi.n	80037ee <state_machine_countdown+0x4e>
 80037da:	f7fd fb37 	bl	8000e4c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003954 <state_machine_countdown+0x1b4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037ea:	f240 80a7 	bls.w	800393c <state_machine_countdown+0x19c>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 80037ee:	4b5a      	ldr	r3, [pc, #360]	@ (8003958 <state_machine_countdown+0x1b8>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d13c      	bne.n	8003870 <state_machine_countdown+0xd0>
 80037f6:	4b55      	ldr	r3, [pc, #340]	@ (800394c <state_machine_countdown+0x1ac>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <state_machine_countdown+0x70>
 80037fe:	f7fd fb25 	bl	8000e4c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	4b53      	ldr	r3, [pc, #332]	@ (8003954 <state_machine_countdown+0x1b4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800380e:	d92f      	bls.n	8003870 <state_machine_countdown+0xd0>
			timestamp_display_s = HAL_GetTick();
 8003810:	f7fd fb1c 	bl	8000e4c <HAL_GetTick>
 8003814:	4603      	mov	r3, r0
 8003816:	4a4f      	ldr	r2, [pc, #316]	@ (8003954 <state_machine_countdown+0x1b4>)
 8003818:	6013      	str	r3, [r2, #0]
			changed = false;
 800381a:	4b4c      	ldr	r3, [pc, #304]	@ (800394c <state_machine_countdown+0x1ac>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003820:	f7ff fcd8 	bl	80031d4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003824:	2100      	movs	r1, #0
 8003826:	2000      	movs	r0, #0
 8003828:	f7ff fce8 	bl	80031fc <lcd_put_cur>
			char buf[14];
			snprintf(buf, 14 ,"COUNTDOWN %lu s",(uint32_t)(countdown_delay/1000 - (HAL_GetTick() - countdown_start)/1000));
 800382c:	4b46      	ldr	r3, [pc, #280]	@ (8003948 <state_machine_countdown+0x1a8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4a      	ldr	r2, [pc, #296]	@ (800395c <state_machine_countdown+0x1bc>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	099c      	lsrs	r4, r3, #6
 8003838:	f7fd fb08 	bl	8000e4c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <state_machine_countdown+0x1a4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	4a45      	ldr	r2, [pc, #276]	@ (800395c <state_machine_countdown+0x1bc>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	1ae3      	subs	r3, r4, r3
 800384e:	4638      	mov	r0, r7
 8003850:	4a43      	ldr	r2, [pc, #268]	@ (8003960 <state_machine_countdown+0x1c0>)
 8003852:	210e      	movs	r1, #14
 8003854:	f000 fc42 	bl	80040dc <sniprintf>
			lcd_send_string (buf);
 8003858:	463b      	mov	r3, r7
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fca4 	bl	80031a8 <lcd_send_string>
			lcd_put_cur(1, 0);
 8003860:	2100      	movs	r1, #0
 8003862:	2001      	movs	r0, #1
 8003864:	f7ff fcca 	bl	80031fc <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8003868:	483e      	ldr	r0, [pc, #248]	@ (8003964 <state_machine_countdown+0x1c4>)
 800386a:	f7ff fc9d 	bl	80031a8 <lcd_send_string>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 800386e:	e065      	b.n	800393c <state_machine_countdown+0x19c>
		}
		else if(len != 0 && (HAL_GetTick() - timestamp > TIME_PER_SYMBOL || changed)){
 8003870:	4b39      	ldr	r3, [pc, #228]	@ (8003958 <state_machine_countdown+0x1b8>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d061      	beq.n	800393c <state_machine_countdown+0x19c>
 8003878:	f7fd fae8 	bl	8000e4c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	4b34      	ldr	r3, [pc, #208]	@ (8003950 <state_machine_countdown+0x1b0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003888:	d803      	bhi.n	8003892 <state_machine_countdown+0xf2>
 800388a:	4b30      	ldr	r3, [pc, #192]	@ (800394c <state_machine_countdown+0x1ac>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d054      	beq.n	800393c <state_machine_countdown+0x19c>
			lcd_clear();
 8003892:	f7ff fc9f 	bl	80031d4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003896:	2100      	movs	r1, #0
 8003898:	2000      	movs	r0, #0
 800389a:	f7ff fcaf 	bl	80031fc <lcd_put_cur>
			lcd_send_string("DISARM");
 800389e:	4832      	ldr	r0, [pc, #200]	@ (8003968 <state_machine_countdown+0x1c8>)
 80038a0:	f7ff fc82 	bl	80031a8 <lcd_send_string>
			lcd_put_cur(1, 0);
 80038a4:	2100      	movs	r1, #0
 80038a6:	2001      	movs	r0, #1
 80038a8:	f7ff fca8 	bl	80031fc <lcd_put_cur>
			str[len] = '\0';
 80038ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <state_machine_countdown+0x1b8>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b2e      	ldr	r3, [pc, #184]	@ (800396c <state_machine_countdown+0x1cc>)
 80038b4:	2100      	movs	r1, #0
 80038b6:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 80038b8:	482c      	ldr	r0, [pc, #176]	@ (800396c <state_machine_countdown+0x1cc>)
 80038ba:	f7ff fc75 	bl	80031a8 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 80038be:	492c      	ldr	r1, [pc, #176]	@ (8003970 <state_machine_countdown+0x1d0>)
 80038c0:	482a      	ldr	r0, [pc, #168]	@ (800396c <state_machine_countdown+0x1cc>)
 80038c2:	f7fc fc8d 	bl	80001e0 <strcmp>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <state_machine_countdown+0x134>
				change_state(DISARMED);
 80038cc:	2003      	movs	r0, #3
 80038ce:	f7ff fd0f 	bl	80032f0 <change_state>
				changed = false;
			}
		}
	}

}
 80038d2:	e033      	b.n	800393c <state_machine_countdown+0x19c>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 80038d4:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <state_machine_countdown+0x1b8>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	4a24      	ldr	r2, [pc, #144]	@ (800396c <state_machine_countdown+0x1cc>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	2b23      	cmp	r3, #35	@ 0x23
 80038e0:	d00a      	beq.n	80038f8 <state_machine_countdown+0x158>
 80038e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <state_machine_countdown+0x1b8>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b0e      	cmp	r3, #14
 80038e8:	d006      	beq.n	80038f8 <state_machine_countdown+0x158>
 80038ea:	4b18      	ldr	r3, [pc, #96]	@ (800394c <state_machine_countdown+0x1ac>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d018      	beq.n	800392a <state_machine_countdown+0x18a>
				lcd_clear();
 80038f8:	f7ff fc6c 	bl	80031d4 <lcd_clear>
				lcd_put_cur(0, 0);
 80038fc:	2100      	movs	r1, #0
 80038fe:	2000      	movs	r0, #0
 8003900:	f7ff fc7c 	bl	80031fc <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8003904:	481b      	ldr	r0, [pc, #108]	@ (8003974 <state_machine_countdown+0x1d4>)
 8003906:	f7ff fc4f 	bl	80031a8 <lcd_send_string>
				memset(str,0,14);
 800390a:	220e      	movs	r2, #14
 800390c:	2100      	movs	r1, #0
 800390e:	4817      	ldr	r0, [pc, #92]	@ (800396c <state_machine_countdown+0x1cc>)
 8003910:	f000 fcf0 	bl	80042f4 <memset>
				len = 0;
 8003914:	4b10      	ldr	r3, [pc, #64]	@ (8003958 <state_machine_countdown+0x1b8>)
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
				changed = true;
 800391a:	4b0c      	ldr	r3, [pc, #48]	@ (800394c <state_machine_countdown+0x1ac>)
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8003920:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003924:	f7fd fa9e 	bl	8000e64 <HAL_Delay>
 8003928:	e008      	b.n	800393c <state_machine_countdown+0x19c>
				timestamp = HAL_GetTick();
 800392a:	f7fd fa8f 	bl	8000e4c <HAL_GetTick>
 800392e:	4603      	mov	r3, r0
 8003930:	4a07      	ldr	r2, [pc, #28]	@ (8003950 <state_machine_countdown+0x1b0>)
 8003932:	6013      	str	r3, [r2, #0]
				changed = false;
 8003934:	4b05      	ldr	r3, [pc, #20]	@ (800394c <state_machine_countdown+0x1ac>)
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
}
 800393a:	e7ff      	b.n	800393c <state_machine_countdown+0x19c>
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}
 8003944:	20000240 	.word	0x20000240
 8003948:	20000280 	.word	0x20000280
 800394c:	2000000d 	.word	0x2000000d
 8003950:	20000238 	.word	0x20000238
 8003954:	2000023c 	.word	0x2000023c
 8003958:	20000236 	.word	0x20000236
 800395c:	10624dd3 	.word	0x10624dd3
 8003960:	08004f88 	.word	0x08004f88
 8003964:	08004f3c 	.word	0x08004f3c
 8003968:	08004f4c 	.word	0x08004f4c
 800396c:	20000228 	.word	0x20000228
 8003970:	20000244 	.word	0x20000244
 8003974:	08004f54 	.word	0x08004f54

08003978 <state_machine_alert>:

void state_machine_alert(void){
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0

	//TODO GSM SEND
	change_state(ARMED);
 800397c:	2000      	movs	r0, #0
 800397e:	f7ff fcb7 	bl	80032f0 <change_state>
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <state_machine_set_alert_time>:

void state_machine_set_alert_time(void){
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	if(changed == true){
 800398c:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <state_machine_set_alert_time+0x9c>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d045      	beq.n	8003a20 <state_machine_set_alert_time+0x98>
		if(len == 0 && changed){
 8003994:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <state_machine_set_alert_time+0xa0>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d110      	bne.n	80039be <state_machine_set_alert_time+0x36>
 800399c:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <state_machine_set_alert_time+0x9c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <state_machine_set_alert_time+0x36>
			changed = false;
 80039a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <state_machine_set_alert_time+0x9c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80039aa:	f7ff fc13 	bl	80031d4 <lcd_clear>
			lcd_put_cur(0, 0);
 80039ae:	2100      	movs	r1, #0
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7ff fc23 	bl	80031fc <lcd_put_cur>
			lcd_send_string ("TIME(S),#=SAVE");
 80039b6:	481d      	ldr	r0, [pc, #116]	@ (8003a2c <state_machine_set_alert_time+0xa4>)
 80039b8:	f7ff fbf6 	bl	80031a8 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 80039bc:	e030      	b.n	8003a20 <state_machine_set_alert_time+0x98>
		else if(len != 0){
 80039be:	4b1a      	ldr	r3, [pc, #104]	@ (8003a28 <state_machine_set_alert_time+0xa0>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02c      	beq.n	8003a20 <state_machine_set_alert_time+0x98>
			lcd_put_cur(1, 0);
 80039c6:	2100      	movs	r1, #0
 80039c8:	2001      	movs	r0, #1
 80039ca:	f7ff fc17 	bl	80031fc <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 80039ce:	4b16      	ldr	r3, [pc, #88]	@ (8003a28 <state_machine_set_alert_time+0xa0>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	4a16      	ldr	r2, [pc, #88]	@ (8003a30 <state_machine_set_alert_time+0xa8>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039da:	d003      	beq.n	80039e4 <state_machine_set_alert_time+0x5c>
 80039dc:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <state_machine_set_alert_time+0xa0>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d902      	bls.n	80039ea <state_machine_set_alert_time+0x62>
				change_state(DISARMED);
 80039e4:	2003      	movs	r0, #3
 80039e6:	f7ff fc83 	bl	80032f0 <change_state>
			lcd_send_string(str);
 80039ea:	4811      	ldr	r0, [pc, #68]	@ (8003a30 <state_machine_set_alert_time+0xa8>)
 80039ec:	f7ff fbdc 	bl	80031a8 <lcd_send_string>
			if(str[len - 1] == '#'){
 80039f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003a28 <state_machine_set_alert_time+0xa0>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a30 <state_machine_set_alert_time+0xa8>)
 80039f8:	5cd3      	ldrb	r3, [r2, r3]
 80039fa:	2b23      	cmp	r3, #35	@ 0x23
 80039fc:	d110      	bne.n	8003a20 <state_machine_set_alert_time+0x98>
				countdown_delay = s_to_ms(strtol(str, NULL, 10));
 80039fe:	220a      	movs	r2, #10
 8003a00:	2100      	movs	r1, #0
 8003a02:	480b      	ldr	r0, [pc, #44]	@ (8003a30 <state_machine_set_alert_time+0xa8>)
 8003a04:	f000 fa40 	bl	8003e88 <strtol>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fc90 	bl	8003330 <s_to_ms>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4a08      	ldr	r2, [pc, #32]	@ (8003a34 <state_machine_set_alert_time+0xac>)
 8003a14:	6013      	str	r3, [r2, #0]
				save_new_state();
 8003a16:	f7ff fc11 	bl	800323c <save_new_state>
				change_state(DISARMED);
 8003a1a:	2003      	movs	r0, #3
 8003a1c:	f7ff fc68 	bl	80032f0 <change_state>
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	2000000d 	.word	0x2000000d
 8003a28:	20000236 	.word	0x20000236
 8003a2c:	08004f98 	.word	0x08004f98
 8003a30:	20000228 	.word	0x20000228
 8003a34:	20000280 	.word	0x20000280

08003a38 <state_machine_set_new_pin>:

void state_machine_set_new_pin(void){
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
	if(changed == true){
 8003a3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ad4 <state_machine_set_new_pin+0x9c>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d045      	beq.n	8003ad0 <state_machine_set_new_pin+0x98>
		if(len == 0 && changed){
 8003a44:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <state_machine_set_new_pin+0xa0>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d110      	bne.n	8003a6e <state_machine_set_new_pin+0x36>
 8003a4c:	4b21      	ldr	r3, [pc, #132]	@ (8003ad4 <state_machine_set_new_pin+0x9c>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00c      	beq.n	8003a6e <state_machine_set_new_pin+0x36>
			changed = false;
 8003a54:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad4 <state_machine_set_new_pin+0x9c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003a5a:	f7ff fbbb 	bl	80031d4 <lcd_clear>
			lcd_put_cur(0, 0);
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2000      	movs	r0, #0
 8003a62:	f7ff fbcb 	bl	80031fc <lcd_put_cur>
			lcd_send_string ("SET PIN,#=SAVE");
 8003a66:	481d      	ldr	r0, [pc, #116]	@ (8003adc <state_machine_set_new_pin+0xa4>)
 8003a68:	f7ff fb9e 	bl	80031a8 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 8003a6c:	e030      	b.n	8003ad0 <state_machine_set_new_pin+0x98>
		else if(len != 0){
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad8 <state_machine_set_new_pin+0xa0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02c      	beq.n	8003ad0 <state_machine_set_new_pin+0x98>
			lcd_put_cur(1, 0);
 8003a76:	2100      	movs	r1, #0
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7ff fbbf 	bl	80031fc <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 8003a7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ad8 <state_machine_set_new_pin+0xa0>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	4a16      	ldr	r2, [pc, #88]	@ (8003ae0 <state_machine_set_new_pin+0xa8>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a8a:	d003      	beq.n	8003a94 <state_machine_set_new_pin+0x5c>
 8003a8c:	4b12      	ldr	r3, [pc, #72]	@ (8003ad8 <state_machine_set_new_pin+0xa0>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	d902      	bls.n	8003a9a <state_machine_set_new_pin+0x62>
				change_state(DISARMED);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f7ff fc2b 	bl	80032f0 <change_state>
			lcd_send_string(str);
 8003a9a:	4811      	ldr	r0, [pc, #68]	@ (8003ae0 <state_machine_set_new_pin+0xa8>)
 8003a9c:	f7ff fb84 	bl	80031a8 <lcd_send_string>
			if(str[len - 1] == '#'){
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <state_machine_set_new_pin+0xa0>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae0 <state_machine_set_new_pin+0xa8>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	2b23      	cmp	r3, #35	@ 0x23
 8003aac:	d110      	bne.n	8003ad0 <state_machine_set_new_pin+0x98>
				memset(pin, 0, 9);
 8003aae:	2209      	movs	r2, #9
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	480c      	ldr	r0, [pc, #48]	@ (8003ae4 <state_machine_set_new_pin+0xac>)
 8003ab4:	f000 fc1e 	bl	80042f4 <memset>
				memcpy(pin,str,len);
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <state_machine_set_new_pin+0xa0>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	4908      	ldr	r1, [pc, #32]	@ (8003ae0 <state_machine_set_new_pin+0xa8>)
 8003ac0:	4808      	ldr	r0, [pc, #32]	@ (8003ae4 <state_machine_set_new_pin+0xac>)
 8003ac2:	f000 fc92 	bl	80043ea <memcpy>
				save_new_state();
 8003ac6:	f7ff fbb9 	bl	800323c <save_new_state>
				change_state(DISARMED);
 8003aca:	2003      	movs	r0, #3
 8003acc:	f7ff fc10 	bl	80032f0 <change_state>
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	2000000d 	.word	0x2000000d
 8003ad8:	20000236 	.word	0x20000236
 8003adc:	08004fa8 	.word	0x08004fa8
 8003ae0:	20000228 	.word	0x20000228
 8003ae4:	20000244 	.word	0x20000244

08003ae8 <state_machine_menage_number>:

void state_machine_menage_number(void){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
	static char code[4] = "";
	bool code_add = false;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
	if(changed == true){
 8003af2:	4b6e      	ldr	r3, [pc, #440]	@ (8003cac <state_machine_menage_number+0x1c4>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80d3 	beq.w	8003ca2 <state_machine_menage_number+0x1ba>
		changed = false;
 8003afc:	4b6b      	ldr	r3, [pc, #428]	@ (8003cac <state_machine_menage_number+0x1c4>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
		if(!*str) id = 0;
 8003b02:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb0 <state_machine_menage_number+0x1c8>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <state_machine_menage_number+0x2a>
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e061      	b.n	8003bd6 <state_machine_menage_number+0xee>
		else if(*str == '8') id = (id + 1) % 3;
 8003b12:	4b67      	ldr	r3, [pc, #412]	@ (8003cb0 <state_machine_menage_number+0x1c8>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b38      	cmp	r3, #56	@ 0x38
 8003b18:	d10f      	bne.n	8003b3a <state_machine_menage_number+0x52>
 8003b1a:	4b66      	ldr	r3, [pc, #408]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	4b65      	ldr	r3, [pc, #404]	@ (8003cb8 <state_machine_menage_number+0x1d0>)
 8003b22:	fb83 3102 	smull	r3, r1, r3, r2
 8003b26:	17d3      	asrs	r3, r2, #31
 8003b28:	1ac9      	subs	r1, r1, r3
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	440b      	add	r3, r1
 8003b30:	1ad1      	subs	r1, r2, r3
 8003b32:	b2ca      	uxtb	r2, r1
 8003b34:	4b5f      	ldr	r3, [pc, #380]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	e04d      	b.n	8003bd6 <state_machine_menage_number+0xee>
		else if(*str == '2' && id > 0) id = id - 1;
 8003b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb0 <state_machine_menage_number+0x1c8>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b32      	cmp	r3, #50	@ 0x32
 8003b40:	d10a      	bne.n	8003b58 <state_machine_menage_number+0x70>
 8003b42:	4b5c      	ldr	r3, [pc, #368]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <state_machine_menage_number+0x70>
 8003b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b58      	ldr	r3, [pc, #352]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e03e      	b.n	8003bd6 <state_machine_menage_number+0xee>
		else if(*str == '2') id = 2;
 8003b58:	4b55      	ldr	r3, [pc, #340]	@ (8003cb0 <state_machine_menage_number+0x1c8>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b32      	cmp	r3, #50	@ 0x32
 8003b5e:	d103      	bne.n	8003b68 <state_machine_menage_number+0x80>
 8003b60:	4b54      	ldr	r3, [pc, #336]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003b62:	2202      	movs	r2, #2
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e036      	b.n	8003bd6 <state_machine_menage_number+0xee>
		else if(*str == '*') change_state(DISARMED);
 8003b68:	4b51      	ldr	r3, [pc, #324]	@ (8003cb0 <state_machine_menage_number+0x1c8>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b6e:	d103      	bne.n	8003b78 <state_machine_menage_number+0x90>
 8003b70:	2003      	movs	r0, #3
 8003b72:	f7ff fbbd 	bl	80032f0 <change_state>
 8003b76:	e02e      	b.n	8003bd6 <state_machine_menage_number+0xee>
		else{
			code[strlen(code)] = *str;
 8003b78:	4850      	ldr	r0, [pc, #320]	@ (8003cbc <state_machine_menage_number+0x1d4>)
 8003b7a:	f7fc fb3b 	bl	80001f4 <strlen>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4a4b      	ldr	r2, [pc, #300]	@ (8003cb0 <state_machine_menage_number+0x1c8>)
 8003b82:	7811      	ldrb	r1, [r2, #0]
 8003b84:	4a4d      	ldr	r2, [pc, #308]	@ (8003cbc <state_machine_menage_number+0x1d4>)
 8003b86:	54d1      	strb	r1, [r2, r3]
			code_add = true;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	75fb      	strb	r3, [r7, #23]
			if(strcmp(code, "7777") == 0)//REPLACE
 8003b8c:	494c      	ldr	r1, [pc, #304]	@ (8003cc0 <state_machine_menage_number+0x1d8>)
 8003b8e:	484b      	ldr	r0, [pc, #300]	@ (8003cbc <state_machine_menage_number+0x1d4>)
 8003b90:	f7fc fb26 	bl	80001e0 <strcmp>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <state_machine_menage_number+0xba>
				change_state(REPLACE_NUMBER);
 8003b9a:	2006      	movs	r0, #6
 8003b9c:	f7ff fba8 	bl	80032f0 <change_state>
 8003ba0:	e019      	b.n	8003bd6 <state_machine_menage_number+0xee>
			else if(strcmp(code,"3333") == 0)//DELETE
 8003ba2:	4948      	ldr	r1, [pc, #288]	@ (8003cc4 <state_machine_menage_number+0x1dc>)
 8003ba4:	4845      	ldr	r0, [pc, #276]	@ (8003cbc <state_machine_menage_number+0x1d4>)
 8003ba6:	f7fc fb1b 	bl	80001e0 <strcmp>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d112      	bne.n	8003bd6 <state_machine_menage_number+0xee>
			{
				for(int i = 0; i < 16; ++i){
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	e00a      	b.n	8003bcc <state_machine_menage_number+0xe4>
					numbers[id*16 + i] = '\0';
 8003bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	011a      	lsls	r2, r3, #4
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4a41      	ldr	r2, [pc, #260]	@ (8003cc8 <state_machine_menage_number+0x1e0>)
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < 16; ++i){
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	ddf1      	ble.n	8003bb6 <state_machine_menage_number+0xce>
				}
				save_new_state();
 8003bd2:	f7ff fb33 	bl	800323c <save_new_state>
			}
		}
		*str = '\0';
 8003bd6:	4b36      	ldr	r3, [pc, #216]	@ (8003cb0 <state_machine_menage_number+0x1c8>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
		len = 0;
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8003ccc <state_machine_menage_number+0x1e4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
		if(!code_add) memset(code,0,4);
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	f083 0301 	eor.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <state_machine_menage_number+0x110>
 8003bee:	2204      	movs	r2, #4
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4832      	ldr	r0, [pc, #200]	@ (8003cbc <state_machine_menage_number+0x1d4>)
 8003bf4:	f000 fb7e 	bl	80042f4 <memset>

		char line[14] = "";
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	811a      	strh	r2, [r3, #8]
		snprintf(line, 14, "->%d.", id + 1);
 8003c06:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	4a30      	ldr	r2, [pc, #192]	@ (8003cd0 <state_machine_menage_number+0x1e8>)
 8003c10:	210e      	movs	r1, #14
 8003c12:	f000 fa63 	bl	80040dc <sniprintf>
		memcpy(line+4, numbers + 16*id, 9);
 8003c16:	463b      	mov	r3, r7
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4a26      	ldr	r2, [pc, #152]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	4611      	mov	r1, r2
 8003c22:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <state_machine_menage_number+0x1e0>)
 8003c24:	4411      	add	r1, r2
 8003c26:	2209      	movs	r2, #9
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fbde 	bl	80043ea <memcpy>
		lcd_clear();
 8003c2e:	f7ff fad1 	bl	80031d4 <lcd_clear>
		lcd_put_cur(0, 0);
 8003c32:	2100      	movs	r1, #0
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7ff fae1 	bl	80031fc <lcd_put_cur>
		lcd_send_string(line);
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fab3 	bl	80031a8 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003c42:	2100      	movs	r1, #0
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7ff fad9 	bl	80031fc <lcd_put_cur>
		snprintf(line, 14, "  %d.", (id + 1)%3 + 1);
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	4b19      	ldr	r3, [pc, #100]	@ (8003cb8 <state_machine_menage_number+0x1d0>)
 8003c52:	fb83 3201 	smull	r3, r2, r3, r1
 8003c56:	17cb      	asrs	r3, r1, #31
 8003c58:	1ad2      	subs	r2, r2, r3
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4413      	add	r3, r2
 8003c60:	1aca      	subs	r2, r1, r3
 8003c62:	1c53      	adds	r3, r2, #1
 8003c64:	4638      	mov	r0, r7
 8003c66:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <state_machine_menage_number+0x1ec>)
 8003c68:	210e      	movs	r1, #14
 8003c6a:	f000 fa37 	bl	80040dc <sniprintf>
		memcpy(line + 4, numbers + 16*((id+1)%3), 9);
 8003c6e:	4638      	mov	r0, r7
 8003c70:	3004      	adds	r0, #4
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <state_machine_menage_number+0x1cc>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	1c59      	adds	r1, r3, #1
 8003c78:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <state_machine_menage_number+0x1d0>)
 8003c7a:	fb83 3201 	smull	r3, r2, r3, r1
 8003c7e:	17cb      	asrs	r3, r1, #31
 8003c80:	1ad2      	subs	r2, r2, r3
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	1aca      	subs	r2, r1, r3
 8003c8a:	0113      	lsls	r3, r2, #4
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <state_machine_menage_number+0x1e0>)
 8003c90:	4413      	add	r3, r2
 8003c92:	2209      	movs	r2, #9
 8003c94:	4619      	mov	r1, r3
 8003c96:	f000 fba8 	bl	80043ea <memcpy>
		lcd_send_string(line);
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fa83 	bl	80031a8 <lcd_send_string>
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000000d 	.word	0x2000000d
 8003cb0:	20000228 	.word	0x20000228
 8003cb4:	20000237 	.word	0x20000237
 8003cb8:	55555556 	.word	0x55555556
 8003cbc:	20000284 	.word	0x20000284
 8003cc0:	08004fb8 	.word	0x08004fb8
 8003cc4:	08004fc0 	.word	0x08004fc0
 8003cc8:	20000250 	.word	0x20000250
 8003ccc:	20000236 	.word	0x20000236
 8003cd0:	08004fc8 	.word	0x08004fc8
 8003cd4:	08004fd0 	.word	0x08004fd0

08003cd8 <state_machine_replace_number>:

void state_machine_replace_number(void){
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
	if(changed == true){
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <state_machine_replace_number+0xa4>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d049      	beq.n	8003d78 <state_machine_replace_number+0xa0>
		changed = false;
 8003ce4:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <state_machine_replace_number+0xa4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8003cea:	f7ff fa73 	bl	80031d4 <lcd_clear>
		lcd_put_cur(0, 0);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7ff fa83 	bl	80031fc <lcd_put_cur>
		lcd_send_string("ADD NUMBER #-save");
 8003cf6:	4822      	ldr	r0, [pc, #136]	@ (8003d80 <state_machine_replace_number+0xa8>)
 8003cf8:	f7ff fa56 	bl	80031a8 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f7ff fa7c 	bl	80031fc <lcd_put_cur>
		str[len] = '\0';
 8003d04:	4b1f      	ldr	r3, [pc, #124]	@ (8003d84 <state_machine_replace_number+0xac>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d88 <state_machine_replace_number+0xb0>)
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]
		lcd_send_string(str);
 8003d10:	481d      	ldr	r0, [pc, #116]	@ (8003d88 <state_machine_replace_number+0xb0>)
 8003d12:	f7ff fa49 	bl	80031a8 <lcd_send_string>

		if(str[len - 1] == '*' || len > 10 || (len != 10 && str[len - 1] == '#')) change_state(MENAGE_NUMBER);
 8003d16:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <state_machine_replace_number+0xac>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d88 <state_machine_replace_number+0xb0>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d22:	d00e      	beq.n	8003d42 <state_machine_replace_number+0x6a>
 8003d24:	4b17      	ldr	r3, [pc, #92]	@ (8003d84 <state_machine_replace_number+0xac>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b0a      	cmp	r3, #10
 8003d2a:	d80a      	bhi.n	8003d42 <state_machine_replace_number+0x6a>
 8003d2c:	4b15      	ldr	r3, [pc, #84]	@ (8003d84 <state_machine_replace_number+0xac>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b0a      	cmp	r3, #10
 8003d32:	d00a      	beq.n	8003d4a <state_machine_replace_number+0x72>
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <state_machine_replace_number+0xac>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	4a13      	ldr	r2, [pc, #76]	@ (8003d88 <state_machine_replace_number+0xb0>)
 8003d3c:	5cd3      	ldrb	r3, [r2, r3]
 8003d3e:	2b23      	cmp	r3, #35	@ 0x23
 8003d40:	d103      	bne.n	8003d4a <state_machine_replace_number+0x72>
 8003d42:	2005      	movs	r0, #5
 8003d44:	f7ff fad4 	bl	80032f0 <change_state>
			memcpy(numbers + id * 16, str, 9);
			save_new_state();
			change_state(MENAGE_NUMBER);
		}
	}
}
 8003d48:	e016      	b.n	8003d78 <state_machine_replace_number+0xa0>
		else if(str[len - 1] == '#'){
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003d84 <state_machine_replace_number+0xac>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a0d      	ldr	r2, [pc, #52]	@ (8003d88 <state_machine_replace_number+0xb0>)
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	2b23      	cmp	r3, #35	@ 0x23
 8003d56:	d10f      	bne.n	8003d78 <state_machine_replace_number+0xa0>
			memcpy(numbers + id * 16, str, 9);
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <state_machine_replace_number+0xb4>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <state_machine_replace_number+0xb8>)
 8003d62:	4413      	add	r3, r2
 8003d64:	2209      	movs	r2, #9
 8003d66:	4908      	ldr	r1, [pc, #32]	@ (8003d88 <state_machine_replace_number+0xb0>)
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fb3e 	bl	80043ea <memcpy>
			save_new_state();
 8003d6e:	f7ff fa65 	bl	800323c <save_new_state>
			change_state(MENAGE_NUMBER);
 8003d72:	2005      	movs	r0, #5
 8003d74:	f7ff fabc 	bl	80032f0 <change_state>
}
 8003d78:	bf00      	nop
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	2000000d 	.word	0x2000000d
 8003d80:	08004fd8 	.word	0x08004fd8
 8003d84:	20000236 	.word	0x20000236
 8003d88:	20000228 	.word	0x20000228
 8003d8c:	20000237 	.word	0x20000237
 8003d90:	20000250 	.word	0x20000250

08003d94 <_strtol_l.constprop.0>:
 8003d94:	2b24      	cmp	r3, #36	@ 0x24
 8003d96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d9a:	4686      	mov	lr, r0
 8003d9c:	4690      	mov	r8, r2
 8003d9e:	d801      	bhi.n	8003da4 <_strtol_l.constprop.0+0x10>
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <_strtol_l.constprop.0+0x1e>
 8003da4:	f000 faf4 	bl	8004390 <__errno>
 8003da8:	2316      	movs	r3, #22
 8003daa:	6003      	str	r3, [r0, #0]
 8003dac:	2000      	movs	r0, #0
 8003dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db2:	4834      	ldr	r0, [pc, #208]	@ (8003e84 <_strtol_l.constprop.0+0xf0>)
 8003db4:	460d      	mov	r5, r1
 8003db6:	462a      	mov	r2, r5
 8003db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dbc:	5d06      	ldrb	r6, [r0, r4]
 8003dbe:	f016 0608 	ands.w	r6, r6, #8
 8003dc2:	d1f8      	bne.n	8003db6 <_strtol_l.constprop.0+0x22>
 8003dc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8003dc6:	d12d      	bne.n	8003e24 <_strtol_l.constprop.0+0x90>
 8003dc8:	782c      	ldrb	r4, [r5, #0]
 8003dca:	2601      	movs	r6, #1
 8003dcc:	1c95      	adds	r5, r2, #2
 8003dce:	f033 0210 	bics.w	r2, r3, #16
 8003dd2:	d109      	bne.n	8003de8 <_strtol_l.constprop.0+0x54>
 8003dd4:	2c30      	cmp	r4, #48	@ 0x30
 8003dd6:	d12a      	bne.n	8003e2e <_strtol_l.constprop.0+0x9a>
 8003dd8:	782a      	ldrb	r2, [r5, #0]
 8003dda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003dde:	2a58      	cmp	r2, #88	@ 0x58
 8003de0:	d125      	bne.n	8003e2e <_strtol_l.constprop.0+0x9a>
 8003de2:	786c      	ldrb	r4, [r5, #1]
 8003de4:	2310      	movs	r3, #16
 8003de6:	3502      	adds	r5, #2
 8003de8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003dec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003df0:	2200      	movs	r2, #0
 8003df2:	fbbc f9f3 	udiv	r9, ip, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	fb03 ca19 	mls	sl, r3, r9, ip
 8003dfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003e00:	2f09      	cmp	r7, #9
 8003e02:	d81b      	bhi.n	8003e3c <_strtol_l.constprop.0+0xa8>
 8003e04:	463c      	mov	r4, r7
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	dd27      	ble.n	8003e5a <_strtol_l.constprop.0+0xc6>
 8003e0a:	1c57      	adds	r7, r2, #1
 8003e0c:	d007      	beq.n	8003e1e <_strtol_l.constprop.0+0x8a>
 8003e0e:	4581      	cmp	r9, r0
 8003e10:	d320      	bcc.n	8003e54 <_strtol_l.constprop.0+0xc0>
 8003e12:	d101      	bne.n	8003e18 <_strtol_l.constprop.0+0x84>
 8003e14:	45a2      	cmp	sl, r4
 8003e16:	db1d      	blt.n	8003e54 <_strtol_l.constprop.0+0xc0>
 8003e18:	fb00 4003 	mla	r0, r0, r3, r4
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e22:	e7eb      	b.n	8003dfc <_strtol_l.constprop.0+0x68>
 8003e24:	2c2b      	cmp	r4, #43	@ 0x2b
 8003e26:	bf04      	itt	eq
 8003e28:	782c      	ldrbeq	r4, [r5, #0]
 8003e2a:	1c95      	addeq	r5, r2, #2
 8003e2c:	e7cf      	b.n	8003dce <_strtol_l.constprop.0+0x3a>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1da      	bne.n	8003de8 <_strtol_l.constprop.0+0x54>
 8003e32:	2c30      	cmp	r4, #48	@ 0x30
 8003e34:	bf0c      	ite	eq
 8003e36:	2308      	moveq	r3, #8
 8003e38:	230a      	movne	r3, #10
 8003e3a:	e7d5      	b.n	8003de8 <_strtol_l.constprop.0+0x54>
 8003e3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003e40:	2f19      	cmp	r7, #25
 8003e42:	d801      	bhi.n	8003e48 <_strtol_l.constprop.0+0xb4>
 8003e44:	3c37      	subs	r4, #55	@ 0x37
 8003e46:	e7de      	b.n	8003e06 <_strtol_l.constprop.0+0x72>
 8003e48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003e4c:	2f19      	cmp	r7, #25
 8003e4e:	d804      	bhi.n	8003e5a <_strtol_l.constprop.0+0xc6>
 8003e50:	3c57      	subs	r4, #87	@ 0x57
 8003e52:	e7d8      	b.n	8003e06 <_strtol_l.constprop.0+0x72>
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	e7e1      	b.n	8003e1e <_strtol_l.constprop.0+0x8a>
 8003e5a:	1c53      	adds	r3, r2, #1
 8003e5c:	d108      	bne.n	8003e70 <_strtol_l.constprop.0+0xdc>
 8003e5e:	2322      	movs	r3, #34	@ 0x22
 8003e60:	f8ce 3000 	str.w	r3, [lr]
 8003e64:	4660      	mov	r0, ip
 8003e66:	f1b8 0f00 	cmp.w	r8, #0
 8003e6a:	d0a0      	beq.n	8003dae <_strtol_l.constprop.0+0x1a>
 8003e6c:	1e69      	subs	r1, r5, #1
 8003e6e:	e006      	b.n	8003e7e <_strtol_l.constprop.0+0xea>
 8003e70:	b106      	cbz	r6, 8003e74 <_strtol_l.constprop.0+0xe0>
 8003e72:	4240      	negs	r0, r0
 8003e74:	f1b8 0f00 	cmp.w	r8, #0
 8003e78:	d099      	beq.n	8003dae <_strtol_l.constprop.0+0x1a>
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d1f6      	bne.n	8003e6c <_strtol_l.constprop.0+0xd8>
 8003e7e:	f8c8 1000 	str.w	r1, [r8]
 8003e82:	e794      	b.n	8003dae <_strtol_l.constprop.0+0x1a>
 8003e84:	08005005 	.word	0x08005005

08003e88 <strtol>:
 8003e88:	4613      	mov	r3, r2
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	4802      	ldr	r0, [pc, #8]	@ (8003e98 <strtol+0x10>)
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	f7ff bf7f 	b.w	8003d94 <_strtol_l.constprop.0>
 8003e96:	bf00      	nop
 8003e98:	20000028 	.word	0x20000028

08003e9c <std>:
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	b510      	push	{r4, lr}
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ea6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003eaa:	6083      	str	r3, [r0, #8]
 8003eac:	8181      	strh	r1, [r0, #12]
 8003eae:	6643      	str	r3, [r0, #100]	@ 0x64
 8003eb0:	81c2      	strh	r2, [r0, #14]
 8003eb2:	6183      	str	r3, [r0, #24]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	305c      	adds	r0, #92	@ 0x5c
 8003eba:	f000 fa1b 	bl	80042f4 <memset>
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <std+0x58>)
 8003ec0:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <std+0x5c>)
 8003ec4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <std+0x60>)
 8003ec8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <std+0x64>)
 8003ecc:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <std+0x68>)
 8003ed0:	6224      	str	r4, [r4, #32]
 8003ed2:	429c      	cmp	r4, r3
 8003ed4:	d006      	beq.n	8003ee4 <std+0x48>
 8003ed6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003eda:	4294      	cmp	r4, r2
 8003edc:	d002      	beq.n	8003ee4 <std+0x48>
 8003ede:	33d0      	adds	r3, #208	@ 0xd0
 8003ee0:	429c      	cmp	r4, r3
 8003ee2:	d105      	bne.n	8003ef0 <std+0x54>
 8003ee4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eec:	f000 ba7a 	b.w	80043e4 <__retarget_lock_init_recursive>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	bf00      	nop
 8003ef4:	08004145 	.word	0x08004145
 8003ef8:	08004167 	.word	0x08004167
 8003efc:	0800419f 	.word	0x0800419f
 8003f00:	080041c3 	.word	0x080041c3
 8003f04:	20000288 	.word	0x20000288

08003f08 <stdio_exit_handler>:
 8003f08:	4a02      	ldr	r2, [pc, #8]	@ (8003f14 <stdio_exit_handler+0xc>)
 8003f0a:	4903      	ldr	r1, [pc, #12]	@ (8003f18 <stdio_exit_handler+0x10>)
 8003f0c:	4803      	ldr	r0, [pc, #12]	@ (8003f1c <stdio_exit_handler+0x14>)
 8003f0e:	f000 b869 	b.w	8003fe4 <_fwalk_sglue>
 8003f12:	bf00      	nop
 8003f14:	2000001c 	.word	0x2000001c
 8003f18:	08004ccd 	.word	0x08004ccd
 8003f1c:	2000002c 	.word	0x2000002c

08003f20 <cleanup_stdio>:
 8003f20:	6841      	ldr	r1, [r0, #4]
 8003f22:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <cleanup_stdio+0x34>)
 8003f24:	4299      	cmp	r1, r3
 8003f26:	b510      	push	{r4, lr}
 8003f28:	4604      	mov	r4, r0
 8003f2a:	d001      	beq.n	8003f30 <cleanup_stdio+0x10>
 8003f2c:	f000 fece 	bl	8004ccc <_fflush_r>
 8003f30:	68a1      	ldr	r1, [r4, #8]
 8003f32:	4b09      	ldr	r3, [pc, #36]	@ (8003f58 <cleanup_stdio+0x38>)
 8003f34:	4299      	cmp	r1, r3
 8003f36:	d002      	beq.n	8003f3e <cleanup_stdio+0x1e>
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 fec7 	bl	8004ccc <_fflush_r>
 8003f3e:	68e1      	ldr	r1, [r4, #12]
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <cleanup_stdio+0x3c>)
 8003f42:	4299      	cmp	r1, r3
 8003f44:	d004      	beq.n	8003f50 <cleanup_stdio+0x30>
 8003f46:	4620      	mov	r0, r4
 8003f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f4c:	f000 bebe 	b.w	8004ccc <_fflush_r>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	bf00      	nop
 8003f54:	20000288 	.word	0x20000288
 8003f58:	200002f0 	.word	0x200002f0
 8003f5c:	20000358 	.word	0x20000358

08003f60 <global_stdio_init.part.0>:
 8003f60:	b510      	push	{r4, lr}
 8003f62:	4b0b      	ldr	r3, [pc, #44]	@ (8003f90 <global_stdio_init.part.0+0x30>)
 8003f64:	4c0b      	ldr	r4, [pc, #44]	@ (8003f94 <global_stdio_init.part.0+0x34>)
 8003f66:	4a0c      	ldr	r2, [pc, #48]	@ (8003f98 <global_stdio_init.part.0+0x38>)
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2104      	movs	r1, #4
 8003f70:	f7ff ff94 	bl	8003e9c <std>
 8003f74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2109      	movs	r1, #9
 8003f7c:	f7ff ff8e 	bl	8003e9c <std>
 8003f80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f84:	2202      	movs	r2, #2
 8003f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8a:	2112      	movs	r1, #18
 8003f8c:	f7ff bf86 	b.w	8003e9c <std>
 8003f90:	200003c0 	.word	0x200003c0
 8003f94:	20000288 	.word	0x20000288
 8003f98:	08003f09 	.word	0x08003f09

08003f9c <__sfp_lock_acquire>:
 8003f9c:	4801      	ldr	r0, [pc, #4]	@ (8003fa4 <__sfp_lock_acquire+0x8>)
 8003f9e:	f000 ba22 	b.w	80043e6 <__retarget_lock_acquire_recursive>
 8003fa2:	bf00      	nop
 8003fa4:	200003c9 	.word	0x200003c9

08003fa8 <__sfp_lock_release>:
 8003fa8:	4801      	ldr	r0, [pc, #4]	@ (8003fb0 <__sfp_lock_release+0x8>)
 8003faa:	f000 ba1d 	b.w	80043e8 <__retarget_lock_release_recursive>
 8003fae:	bf00      	nop
 8003fb0:	200003c9 	.word	0x200003c9

08003fb4 <__sinit>:
 8003fb4:	b510      	push	{r4, lr}
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	f7ff fff0 	bl	8003f9c <__sfp_lock_acquire>
 8003fbc:	6a23      	ldr	r3, [r4, #32]
 8003fbe:	b11b      	cbz	r3, 8003fc8 <__sinit+0x14>
 8003fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc4:	f7ff bff0 	b.w	8003fa8 <__sfp_lock_release>
 8003fc8:	4b04      	ldr	r3, [pc, #16]	@ (8003fdc <__sinit+0x28>)
 8003fca:	6223      	str	r3, [r4, #32]
 8003fcc:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <__sinit+0x2c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f5      	bne.n	8003fc0 <__sinit+0xc>
 8003fd4:	f7ff ffc4 	bl	8003f60 <global_stdio_init.part.0>
 8003fd8:	e7f2      	b.n	8003fc0 <__sinit+0xc>
 8003fda:	bf00      	nop
 8003fdc:	08003f21 	.word	0x08003f21
 8003fe0:	200003c0 	.word	0x200003c0

08003fe4 <_fwalk_sglue>:
 8003fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe8:	4607      	mov	r7, r0
 8003fea:	4688      	mov	r8, r1
 8003fec:	4614      	mov	r4, r2
 8003fee:	2600      	movs	r6, #0
 8003ff0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ff4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ff8:	d505      	bpl.n	8004006 <_fwalk_sglue+0x22>
 8003ffa:	6824      	ldr	r4, [r4, #0]
 8003ffc:	2c00      	cmp	r4, #0
 8003ffe:	d1f7      	bne.n	8003ff0 <_fwalk_sglue+0xc>
 8004000:	4630      	mov	r0, r6
 8004002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004006:	89ab      	ldrh	r3, [r5, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d907      	bls.n	800401c <_fwalk_sglue+0x38>
 800400c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004010:	3301      	adds	r3, #1
 8004012:	d003      	beq.n	800401c <_fwalk_sglue+0x38>
 8004014:	4629      	mov	r1, r5
 8004016:	4638      	mov	r0, r7
 8004018:	47c0      	blx	r8
 800401a:	4306      	orrs	r6, r0
 800401c:	3568      	adds	r5, #104	@ 0x68
 800401e:	e7e9      	b.n	8003ff4 <_fwalk_sglue+0x10>

08004020 <_puts_r>:
 8004020:	6a03      	ldr	r3, [r0, #32]
 8004022:	b570      	push	{r4, r5, r6, lr}
 8004024:	6884      	ldr	r4, [r0, #8]
 8004026:	4605      	mov	r5, r0
 8004028:	460e      	mov	r6, r1
 800402a:	b90b      	cbnz	r3, 8004030 <_puts_r+0x10>
 800402c:	f7ff ffc2 	bl	8003fb4 <__sinit>
 8004030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d405      	bmi.n	8004042 <_puts_r+0x22>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	0598      	lsls	r0, r3, #22
 800403a:	d402      	bmi.n	8004042 <_puts_r+0x22>
 800403c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800403e:	f000 f9d2 	bl	80043e6 <__retarget_lock_acquire_recursive>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	0719      	lsls	r1, r3, #28
 8004046:	d502      	bpl.n	800404e <_puts_r+0x2e>
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d135      	bne.n	80040ba <_puts_r+0x9a>
 800404e:	4621      	mov	r1, r4
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f8f9 	bl	8004248 <__swsetup_r>
 8004056:	b380      	cbz	r0, 80040ba <_puts_r+0x9a>
 8004058:	f04f 35ff 	mov.w	r5, #4294967295
 800405c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800405e:	07da      	lsls	r2, r3, #31
 8004060:	d405      	bmi.n	800406e <_puts_r+0x4e>
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	059b      	lsls	r3, r3, #22
 8004066:	d402      	bmi.n	800406e <_puts_r+0x4e>
 8004068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800406a:	f000 f9bd 	bl	80043e8 <__retarget_lock_release_recursive>
 800406e:	4628      	mov	r0, r5
 8004070:	bd70      	pop	{r4, r5, r6, pc}
 8004072:	2b00      	cmp	r3, #0
 8004074:	da04      	bge.n	8004080 <_puts_r+0x60>
 8004076:	69a2      	ldr	r2, [r4, #24]
 8004078:	429a      	cmp	r2, r3
 800407a:	dc17      	bgt.n	80040ac <_puts_r+0x8c>
 800407c:	290a      	cmp	r1, #10
 800407e:	d015      	beq.n	80040ac <_puts_r+0x8c>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6022      	str	r2, [r4, #0]
 8004086:	7019      	strb	r1, [r3, #0]
 8004088:	68a3      	ldr	r3, [r4, #8]
 800408a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800408e:	3b01      	subs	r3, #1
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	2900      	cmp	r1, #0
 8004094:	d1ed      	bne.n	8004072 <_puts_r+0x52>
 8004096:	2b00      	cmp	r3, #0
 8004098:	da11      	bge.n	80040be <_puts_r+0x9e>
 800409a:	4622      	mov	r2, r4
 800409c:	210a      	movs	r1, #10
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f893 	bl	80041ca <__swbuf_r>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d0d7      	beq.n	8004058 <_puts_r+0x38>
 80040a8:	250a      	movs	r5, #10
 80040aa:	e7d7      	b.n	800405c <_puts_r+0x3c>
 80040ac:	4622      	mov	r2, r4
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 f88b 	bl	80041ca <__swbuf_r>
 80040b4:	3001      	adds	r0, #1
 80040b6:	d1e7      	bne.n	8004088 <_puts_r+0x68>
 80040b8:	e7ce      	b.n	8004058 <_puts_r+0x38>
 80040ba:	3e01      	subs	r6, #1
 80040bc:	e7e4      	b.n	8004088 <_puts_r+0x68>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	220a      	movs	r2, #10
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	e7ee      	b.n	80040a8 <_puts_r+0x88>
	...

080040cc <puts>:
 80040cc:	4b02      	ldr	r3, [pc, #8]	@ (80040d8 <puts+0xc>)
 80040ce:	4601      	mov	r1, r0
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	f7ff bfa5 	b.w	8004020 <_puts_r>
 80040d6:	bf00      	nop
 80040d8:	20000028 	.word	0x20000028

080040dc <sniprintf>:
 80040dc:	b40c      	push	{r2, r3}
 80040de:	b530      	push	{r4, r5, lr}
 80040e0:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <sniprintf+0x64>)
 80040e2:	1e0c      	subs	r4, r1, #0
 80040e4:	681d      	ldr	r5, [r3, #0]
 80040e6:	b09d      	sub	sp, #116	@ 0x74
 80040e8:	da08      	bge.n	80040fc <sniprintf+0x20>
 80040ea:	238b      	movs	r3, #139	@ 0x8b
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	f04f 30ff 	mov.w	r0, #4294967295
 80040f2:	b01d      	add	sp, #116	@ 0x74
 80040f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040f8:	b002      	add	sp, #8
 80040fa:	4770      	bx	lr
 80040fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004100:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004104:	bf14      	ite	ne
 8004106:	f104 33ff 	addne.w	r3, r4, #4294967295
 800410a:	4623      	moveq	r3, r4
 800410c:	9304      	str	r3, [sp, #16]
 800410e:	9307      	str	r3, [sp, #28]
 8004110:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004114:	9002      	str	r0, [sp, #8]
 8004116:	9006      	str	r0, [sp, #24]
 8004118:	f8ad 3016 	strh.w	r3, [sp, #22]
 800411c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800411e:	ab21      	add	r3, sp, #132	@ 0x84
 8004120:	a902      	add	r1, sp, #8
 8004122:	4628      	mov	r0, r5
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	f000 fac3 	bl	80046b0 <_svfiprintf_r>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	bfbc      	itt	lt
 800412e:	238b      	movlt	r3, #139	@ 0x8b
 8004130:	602b      	strlt	r3, [r5, #0]
 8004132:	2c00      	cmp	r4, #0
 8004134:	d0dd      	beq.n	80040f2 <sniprintf+0x16>
 8004136:	9b02      	ldr	r3, [sp, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e7d9      	b.n	80040f2 <sniprintf+0x16>
 800413e:	bf00      	nop
 8004140:	20000028 	.word	0x20000028

08004144 <__sread>:
 8004144:	b510      	push	{r4, lr}
 8004146:	460c      	mov	r4, r1
 8004148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414c:	f000 f8fc 	bl	8004348 <_read_r>
 8004150:	2800      	cmp	r0, #0
 8004152:	bfab      	itete	ge
 8004154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004156:	89a3      	ldrhlt	r3, [r4, #12]
 8004158:	181b      	addge	r3, r3, r0
 800415a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800415e:	bfac      	ite	ge
 8004160:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004162:	81a3      	strhlt	r3, [r4, #12]
 8004164:	bd10      	pop	{r4, pc}

08004166 <__swrite>:
 8004166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800416a:	461f      	mov	r7, r3
 800416c:	898b      	ldrh	r3, [r1, #12]
 800416e:	05db      	lsls	r3, r3, #23
 8004170:	4605      	mov	r5, r0
 8004172:	460c      	mov	r4, r1
 8004174:	4616      	mov	r6, r2
 8004176:	d505      	bpl.n	8004184 <__swrite+0x1e>
 8004178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800417c:	2302      	movs	r3, #2
 800417e:	2200      	movs	r2, #0
 8004180:	f000 f8d0 	bl	8004324 <_lseek_r>
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800418a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800418e:	81a3      	strh	r3, [r4, #12]
 8004190:	4632      	mov	r2, r6
 8004192:	463b      	mov	r3, r7
 8004194:	4628      	mov	r0, r5
 8004196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800419a:	f000 b8e7 	b.w	800436c <_write_r>

0800419e <__sseek>:
 800419e:	b510      	push	{r4, lr}
 80041a0:	460c      	mov	r4, r1
 80041a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a6:	f000 f8bd 	bl	8004324 <_lseek_r>
 80041aa:	1c43      	adds	r3, r0, #1
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	bf15      	itete	ne
 80041b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041ba:	81a3      	strheq	r3, [r4, #12]
 80041bc:	bf18      	it	ne
 80041be:	81a3      	strhne	r3, [r4, #12]
 80041c0:	bd10      	pop	{r4, pc}

080041c2 <__sclose>:
 80041c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c6:	f000 b89d 	b.w	8004304 <_close_r>

080041ca <__swbuf_r>:
 80041ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041cc:	460e      	mov	r6, r1
 80041ce:	4614      	mov	r4, r2
 80041d0:	4605      	mov	r5, r0
 80041d2:	b118      	cbz	r0, 80041dc <__swbuf_r+0x12>
 80041d4:	6a03      	ldr	r3, [r0, #32]
 80041d6:	b90b      	cbnz	r3, 80041dc <__swbuf_r+0x12>
 80041d8:	f7ff feec 	bl	8003fb4 <__sinit>
 80041dc:	69a3      	ldr	r3, [r4, #24]
 80041de:	60a3      	str	r3, [r4, #8]
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	071a      	lsls	r2, r3, #28
 80041e4:	d501      	bpl.n	80041ea <__swbuf_r+0x20>
 80041e6:	6923      	ldr	r3, [r4, #16]
 80041e8:	b943      	cbnz	r3, 80041fc <__swbuf_r+0x32>
 80041ea:	4621      	mov	r1, r4
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 f82b 	bl	8004248 <__swsetup_r>
 80041f2:	b118      	cbz	r0, 80041fc <__swbuf_r+0x32>
 80041f4:	f04f 37ff 	mov.w	r7, #4294967295
 80041f8:	4638      	mov	r0, r7
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	6922      	ldr	r2, [r4, #16]
 8004200:	1a98      	subs	r0, r3, r2
 8004202:	6963      	ldr	r3, [r4, #20]
 8004204:	b2f6      	uxtb	r6, r6
 8004206:	4283      	cmp	r3, r0
 8004208:	4637      	mov	r7, r6
 800420a:	dc05      	bgt.n	8004218 <__swbuf_r+0x4e>
 800420c:	4621      	mov	r1, r4
 800420e:	4628      	mov	r0, r5
 8004210:	f000 fd5c 	bl	8004ccc <_fflush_r>
 8004214:	2800      	cmp	r0, #0
 8004216:	d1ed      	bne.n	80041f4 <__swbuf_r+0x2a>
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	6022      	str	r2, [r4, #0]
 8004224:	701e      	strb	r6, [r3, #0]
 8004226:	6962      	ldr	r2, [r4, #20]
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	429a      	cmp	r2, r3
 800422c:	d004      	beq.n	8004238 <__swbuf_r+0x6e>
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	07db      	lsls	r3, r3, #31
 8004232:	d5e1      	bpl.n	80041f8 <__swbuf_r+0x2e>
 8004234:	2e0a      	cmp	r6, #10
 8004236:	d1df      	bne.n	80041f8 <__swbuf_r+0x2e>
 8004238:	4621      	mov	r1, r4
 800423a:	4628      	mov	r0, r5
 800423c:	f000 fd46 	bl	8004ccc <_fflush_r>
 8004240:	2800      	cmp	r0, #0
 8004242:	d0d9      	beq.n	80041f8 <__swbuf_r+0x2e>
 8004244:	e7d6      	b.n	80041f4 <__swbuf_r+0x2a>
	...

08004248 <__swsetup_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4b29      	ldr	r3, [pc, #164]	@ (80042f0 <__swsetup_r+0xa8>)
 800424c:	4605      	mov	r5, r0
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	460c      	mov	r4, r1
 8004252:	b118      	cbz	r0, 800425c <__swsetup_r+0x14>
 8004254:	6a03      	ldr	r3, [r0, #32]
 8004256:	b90b      	cbnz	r3, 800425c <__swsetup_r+0x14>
 8004258:	f7ff feac 	bl	8003fb4 <__sinit>
 800425c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004260:	0719      	lsls	r1, r3, #28
 8004262:	d422      	bmi.n	80042aa <__swsetup_r+0x62>
 8004264:	06da      	lsls	r2, r3, #27
 8004266:	d407      	bmi.n	8004278 <__swsetup_r+0x30>
 8004268:	2209      	movs	r2, #9
 800426a:	602a      	str	r2, [r5, #0]
 800426c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	f04f 30ff 	mov.w	r0, #4294967295
 8004276:	e033      	b.n	80042e0 <__swsetup_r+0x98>
 8004278:	0758      	lsls	r0, r3, #29
 800427a:	d512      	bpl.n	80042a2 <__swsetup_r+0x5a>
 800427c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800427e:	b141      	cbz	r1, 8004292 <__swsetup_r+0x4a>
 8004280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004284:	4299      	cmp	r1, r3
 8004286:	d002      	beq.n	800428e <__swsetup_r+0x46>
 8004288:	4628      	mov	r0, r5
 800428a:	f000 f8bd 	bl	8004408 <_free_r>
 800428e:	2300      	movs	r3, #0
 8004290:	6363      	str	r3, [r4, #52]	@ 0x34
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004298:	81a3      	strh	r3, [r4, #12]
 800429a:	2300      	movs	r3, #0
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	6923      	ldr	r3, [r4, #16]
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	f043 0308 	orr.w	r3, r3, #8
 80042a8:	81a3      	strh	r3, [r4, #12]
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	b94b      	cbnz	r3, 80042c2 <__swsetup_r+0x7a>
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b8:	d003      	beq.n	80042c2 <__swsetup_r+0x7a>
 80042ba:	4621      	mov	r1, r4
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 fd53 	bl	8004d68 <__smakebuf_r>
 80042c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c6:	f013 0201 	ands.w	r2, r3, #1
 80042ca:	d00a      	beq.n	80042e2 <__swsetup_r+0x9a>
 80042cc:	2200      	movs	r2, #0
 80042ce:	60a2      	str	r2, [r4, #8]
 80042d0:	6962      	ldr	r2, [r4, #20]
 80042d2:	4252      	negs	r2, r2
 80042d4:	61a2      	str	r2, [r4, #24]
 80042d6:	6922      	ldr	r2, [r4, #16]
 80042d8:	b942      	cbnz	r2, 80042ec <__swsetup_r+0xa4>
 80042da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042de:	d1c5      	bne.n	800426c <__swsetup_r+0x24>
 80042e0:	bd38      	pop	{r3, r4, r5, pc}
 80042e2:	0799      	lsls	r1, r3, #30
 80042e4:	bf58      	it	pl
 80042e6:	6962      	ldrpl	r2, [r4, #20]
 80042e8:	60a2      	str	r2, [r4, #8]
 80042ea:	e7f4      	b.n	80042d6 <__swsetup_r+0x8e>
 80042ec:	2000      	movs	r0, #0
 80042ee:	e7f7      	b.n	80042e0 <__swsetup_r+0x98>
 80042f0:	20000028 	.word	0x20000028

080042f4 <memset>:
 80042f4:	4402      	add	r2, r0
 80042f6:	4603      	mov	r3, r0
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d100      	bne.n	80042fe <memset+0xa>
 80042fc:	4770      	bx	lr
 80042fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004302:	e7f9      	b.n	80042f8 <memset+0x4>

08004304 <_close_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4d06      	ldr	r5, [pc, #24]	@ (8004320 <_close_r+0x1c>)
 8004308:	2300      	movs	r3, #0
 800430a:	4604      	mov	r4, r0
 800430c:	4608      	mov	r0, r1
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	f7fc fc90 	bl	8000c34 <_close>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	d102      	bne.n	800431e <_close_r+0x1a>
 8004318:	682b      	ldr	r3, [r5, #0]
 800431a:	b103      	cbz	r3, 800431e <_close_r+0x1a>
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	bd38      	pop	{r3, r4, r5, pc}
 8004320:	200003c4 	.word	0x200003c4

08004324 <_lseek_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4d07      	ldr	r5, [pc, #28]	@ (8004344 <_lseek_r+0x20>)
 8004328:	4604      	mov	r4, r0
 800432a:	4608      	mov	r0, r1
 800432c:	4611      	mov	r1, r2
 800432e:	2200      	movs	r2, #0
 8004330:	602a      	str	r2, [r5, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	f7fc fca5 	bl	8000c82 <_lseek>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	d102      	bne.n	8004342 <_lseek_r+0x1e>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	b103      	cbz	r3, 8004342 <_lseek_r+0x1e>
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	bd38      	pop	{r3, r4, r5, pc}
 8004344:	200003c4 	.word	0x200003c4

08004348 <_read_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d07      	ldr	r5, [pc, #28]	@ (8004368 <_read_r+0x20>)
 800434c:	4604      	mov	r4, r0
 800434e:	4608      	mov	r0, r1
 8004350:	4611      	mov	r1, r2
 8004352:	2200      	movs	r2, #0
 8004354:	602a      	str	r2, [r5, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	f7fc fc4f 	bl	8000bfa <_read>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_read_r+0x1e>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_read_r+0x1e>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	200003c4 	.word	0x200003c4

0800436c <_write_r>:
 800436c:	b538      	push	{r3, r4, r5, lr}
 800436e:	4d07      	ldr	r5, [pc, #28]	@ (800438c <_write_r+0x20>)
 8004370:	4604      	mov	r4, r0
 8004372:	4608      	mov	r0, r1
 8004374:	4611      	mov	r1, r2
 8004376:	2200      	movs	r2, #0
 8004378:	602a      	str	r2, [r5, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	f7fc faec 	bl	8000958 <_write>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d102      	bne.n	800438a <_write_r+0x1e>
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	b103      	cbz	r3, 800438a <_write_r+0x1e>
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	bd38      	pop	{r3, r4, r5, pc}
 800438c:	200003c4 	.word	0x200003c4

08004390 <__errno>:
 8004390:	4b01      	ldr	r3, [pc, #4]	@ (8004398 <__errno+0x8>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000028 	.word	0x20000028

0800439c <__libc_init_array>:
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	4d0d      	ldr	r5, [pc, #52]	@ (80043d4 <__libc_init_array+0x38>)
 80043a0:	4c0d      	ldr	r4, [pc, #52]	@ (80043d8 <__libc_init_array+0x3c>)
 80043a2:	1b64      	subs	r4, r4, r5
 80043a4:	10a4      	asrs	r4, r4, #2
 80043a6:	2600      	movs	r6, #0
 80043a8:	42a6      	cmp	r6, r4
 80043aa:	d109      	bne.n	80043c0 <__libc_init_array+0x24>
 80043ac:	4d0b      	ldr	r5, [pc, #44]	@ (80043dc <__libc_init_array+0x40>)
 80043ae:	4c0c      	ldr	r4, [pc, #48]	@ (80043e0 <__libc_init_array+0x44>)
 80043b0:	f000 fd98 	bl	8004ee4 <_init>
 80043b4:	1b64      	subs	r4, r4, r5
 80043b6:	10a4      	asrs	r4, r4, #2
 80043b8:	2600      	movs	r6, #0
 80043ba:	42a6      	cmp	r6, r4
 80043bc:	d105      	bne.n	80043ca <__libc_init_array+0x2e>
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c4:	4798      	blx	r3
 80043c6:	3601      	adds	r6, #1
 80043c8:	e7ee      	b.n	80043a8 <__libc_init_array+0xc>
 80043ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ce:	4798      	blx	r3
 80043d0:	3601      	adds	r6, #1
 80043d2:	e7f2      	b.n	80043ba <__libc_init_array+0x1e>
 80043d4:	08005140 	.word	0x08005140
 80043d8:	08005140 	.word	0x08005140
 80043dc:	08005140 	.word	0x08005140
 80043e0:	08005144 	.word	0x08005144

080043e4 <__retarget_lock_init_recursive>:
 80043e4:	4770      	bx	lr

080043e6 <__retarget_lock_acquire_recursive>:
 80043e6:	4770      	bx	lr

080043e8 <__retarget_lock_release_recursive>:
 80043e8:	4770      	bx	lr

080043ea <memcpy>:
 80043ea:	440a      	add	r2, r1
 80043ec:	4291      	cmp	r1, r2
 80043ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f2:	d100      	bne.n	80043f6 <memcpy+0xc>
 80043f4:	4770      	bx	lr
 80043f6:	b510      	push	{r4, lr}
 80043f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004400:	4291      	cmp	r1, r2
 8004402:	d1f9      	bne.n	80043f8 <memcpy+0xe>
 8004404:	bd10      	pop	{r4, pc}
	...

08004408 <_free_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4605      	mov	r5, r0
 800440c:	2900      	cmp	r1, #0
 800440e:	d041      	beq.n	8004494 <_free_r+0x8c>
 8004410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004414:	1f0c      	subs	r4, r1, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfb8      	it	lt
 800441a:	18e4      	addlt	r4, r4, r3
 800441c:	f000 f8e0 	bl	80045e0 <__malloc_lock>
 8004420:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <_free_r+0x90>)
 8004422:	6813      	ldr	r3, [r2, #0]
 8004424:	b933      	cbnz	r3, 8004434 <_free_r+0x2c>
 8004426:	6063      	str	r3, [r4, #4]
 8004428:	6014      	str	r4, [r2, #0]
 800442a:	4628      	mov	r0, r5
 800442c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004430:	f000 b8dc 	b.w	80045ec <__malloc_unlock>
 8004434:	42a3      	cmp	r3, r4
 8004436:	d908      	bls.n	800444a <_free_r+0x42>
 8004438:	6820      	ldr	r0, [r4, #0]
 800443a:	1821      	adds	r1, r4, r0
 800443c:	428b      	cmp	r3, r1
 800443e:	bf01      	itttt	eq
 8004440:	6819      	ldreq	r1, [r3, #0]
 8004442:	685b      	ldreq	r3, [r3, #4]
 8004444:	1809      	addeq	r1, r1, r0
 8004446:	6021      	streq	r1, [r4, #0]
 8004448:	e7ed      	b.n	8004426 <_free_r+0x1e>
 800444a:	461a      	mov	r2, r3
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	b10b      	cbz	r3, 8004454 <_free_r+0x4c>
 8004450:	42a3      	cmp	r3, r4
 8004452:	d9fa      	bls.n	800444a <_free_r+0x42>
 8004454:	6811      	ldr	r1, [r2, #0]
 8004456:	1850      	adds	r0, r2, r1
 8004458:	42a0      	cmp	r0, r4
 800445a:	d10b      	bne.n	8004474 <_free_r+0x6c>
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	4401      	add	r1, r0
 8004460:	1850      	adds	r0, r2, r1
 8004462:	4283      	cmp	r3, r0
 8004464:	6011      	str	r1, [r2, #0]
 8004466:	d1e0      	bne.n	800442a <_free_r+0x22>
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	6053      	str	r3, [r2, #4]
 800446e:	4408      	add	r0, r1
 8004470:	6010      	str	r0, [r2, #0]
 8004472:	e7da      	b.n	800442a <_free_r+0x22>
 8004474:	d902      	bls.n	800447c <_free_r+0x74>
 8004476:	230c      	movs	r3, #12
 8004478:	602b      	str	r3, [r5, #0]
 800447a:	e7d6      	b.n	800442a <_free_r+0x22>
 800447c:	6820      	ldr	r0, [r4, #0]
 800447e:	1821      	adds	r1, r4, r0
 8004480:	428b      	cmp	r3, r1
 8004482:	bf04      	itt	eq
 8004484:	6819      	ldreq	r1, [r3, #0]
 8004486:	685b      	ldreq	r3, [r3, #4]
 8004488:	6063      	str	r3, [r4, #4]
 800448a:	bf04      	itt	eq
 800448c:	1809      	addeq	r1, r1, r0
 800448e:	6021      	streq	r1, [r4, #0]
 8004490:	6054      	str	r4, [r2, #4]
 8004492:	e7ca      	b.n	800442a <_free_r+0x22>
 8004494:	bd38      	pop	{r3, r4, r5, pc}
 8004496:	bf00      	nop
 8004498:	200003d0 	.word	0x200003d0

0800449c <sbrk_aligned>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4e0f      	ldr	r6, [pc, #60]	@ (80044dc <sbrk_aligned+0x40>)
 80044a0:	460c      	mov	r4, r1
 80044a2:	6831      	ldr	r1, [r6, #0]
 80044a4:	4605      	mov	r5, r0
 80044a6:	b911      	cbnz	r1, 80044ae <sbrk_aligned+0x12>
 80044a8:	f000 fcd6 	bl	8004e58 <_sbrk_r>
 80044ac:	6030      	str	r0, [r6, #0]
 80044ae:	4621      	mov	r1, r4
 80044b0:	4628      	mov	r0, r5
 80044b2:	f000 fcd1 	bl	8004e58 <_sbrk_r>
 80044b6:	1c43      	adds	r3, r0, #1
 80044b8:	d103      	bne.n	80044c2 <sbrk_aligned+0x26>
 80044ba:	f04f 34ff 	mov.w	r4, #4294967295
 80044be:	4620      	mov	r0, r4
 80044c0:	bd70      	pop	{r4, r5, r6, pc}
 80044c2:	1cc4      	adds	r4, r0, #3
 80044c4:	f024 0403 	bic.w	r4, r4, #3
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d0f8      	beq.n	80044be <sbrk_aligned+0x22>
 80044cc:	1a21      	subs	r1, r4, r0
 80044ce:	4628      	mov	r0, r5
 80044d0:	f000 fcc2 	bl	8004e58 <_sbrk_r>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d1f2      	bne.n	80044be <sbrk_aligned+0x22>
 80044d8:	e7ef      	b.n	80044ba <sbrk_aligned+0x1e>
 80044da:	bf00      	nop
 80044dc:	200003cc 	.word	0x200003cc

080044e0 <_malloc_r>:
 80044e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e4:	1ccd      	adds	r5, r1, #3
 80044e6:	f025 0503 	bic.w	r5, r5, #3
 80044ea:	3508      	adds	r5, #8
 80044ec:	2d0c      	cmp	r5, #12
 80044ee:	bf38      	it	cc
 80044f0:	250c      	movcc	r5, #12
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	4606      	mov	r6, r0
 80044f6:	db01      	blt.n	80044fc <_malloc_r+0x1c>
 80044f8:	42a9      	cmp	r1, r5
 80044fa:	d904      	bls.n	8004506 <_malloc_r+0x26>
 80044fc:	230c      	movs	r3, #12
 80044fe:	6033      	str	r3, [r6, #0]
 8004500:	2000      	movs	r0, #0
 8004502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045dc <_malloc_r+0xfc>
 800450a:	f000 f869 	bl	80045e0 <__malloc_lock>
 800450e:	f8d8 3000 	ldr.w	r3, [r8]
 8004512:	461c      	mov	r4, r3
 8004514:	bb44      	cbnz	r4, 8004568 <_malloc_r+0x88>
 8004516:	4629      	mov	r1, r5
 8004518:	4630      	mov	r0, r6
 800451a:	f7ff ffbf 	bl	800449c <sbrk_aligned>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	4604      	mov	r4, r0
 8004522:	d158      	bne.n	80045d6 <_malloc_r+0xf6>
 8004524:	f8d8 4000 	ldr.w	r4, [r8]
 8004528:	4627      	mov	r7, r4
 800452a:	2f00      	cmp	r7, #0
 800452c:	d143      	bne.n	80045b6 <_malloc_r+0xd6>
 800452e:	2c00      	cmp	r4, #0
 8004530:	d04b      	beq.n	80045ca <_malloc_r+0xea>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	4639      	mov	r1, r7
 8004536:	4630      	mov	r0, r6
 8004538:	eb04 0903 	add.w	r9, r4, r3
 800453c:	f000 fc8c 	bl	8004e58 <_sbrk_r>
 8004540:	4581      	cmp	r9, r0
 8004542:	d142      	bne.n	80045ca <_malloc_r+0xea>
 8004544:	6821      	ldr	r1, [r4, #0]
 8004546:	1a6d      	subs	r5, r5, r1
 8004548:	4629      	mov	r1, r5
 800454a:	4630      	mov	r0, r6
 800454c:	f7ff ffa6 	bl	800449c <sbrk_aligned>
 8004550:	3001      	adds	r0, #1
 8004552:	d03a      	beq.n	80045ca <_malloc_r+0xea>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	442b      	add	r3, r5
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	f8d8 3000 	ldr.w	r3, [r8]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	bb62      	cbnz	r2, 80045bc <_malloc_r+0xdc>
 8004562:	f8c8 7000 	str.w	r7, [r8]
 8004566:	e00f      	b.n	8004588 <_malloc_r+0xa8>
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	1b52      	subs	r2, r2, r5
 800456c:	d420      	bmi.n	80045b0 <_malloc_r+0xd0>
 800456e:	2a0b      	cmp	r2, #11
 8004570:	d917      	bls.n	80045a2 <_malloc_r+0xc2>
 8004572:	1961      	adds	r1, r4, r5
 8004574:	42a3      	cmp	r3, r4
 8004576:	6025      	str	r5, [r4, #0]
 8004578:	bf18      	it	ne
 800457a:	6059      	strne	r1, [r3, #4]
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	bf08      	it	eq
 8004580:	f8c8 1000 	streq.w	r1, [r8]
 8004584:	5162      	str	r2, [r4, r5]
 8004586:	604b      	str	r3, [r1, #4]
 8004588:	4630      	mov	r0, r6
 800458a:	f000 f82f 	bl	80045ec <__malloc_unlock>
 800458e:	f104 000b 	add.w	r0, r4, #11
 8004592:	1d23      	adds	r3, r4, #4
 8004594:	f020 0007 	bic.w	r0, r0, #7
 8004598:	1ac2      	subs	r2, r0, r3
 800459a:	bf1c      	itt	ne
 800459c:	1a1b      	subne	r3, r3, r0
 800459e:	50a3      	strne	r3, [r4, r2]
 80045a0:	e7af      	b.n	8004502 <_malloc_r+0x22>
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	bf0c      	ite	eq
 80045a8:	f8c8 2000 	streq.w	r2, [r8]
 80045ac:	605a      	strne	r2, [r3, #4]
 80045ae:	e7eb      	b.n	8004588 <_malloc_r+0xa8>
 80045b0:	4623      	mov	r3, r4
 80045b2:	6864      	ldr	r4, [r4, #4]
 80045b4:	e7ae      	b.n	8004514 <_malloc_r+0x34>
 80045b6:	463c      	mov	r4, r7
 80045b8:	687f      	ldr	r7, [r7, #4]
 80045ba:	e7b6      	b.n	800452a <_malloc_r+0x4a>
 80045bc:	461a      	mov	r2, r3
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	d1fb      	bne.n	80045bc <_malloc_r+0xdc>
 80045c4:	2300      	movs	r3, #0
 80045c6:	6053      	str	r3, [r2, #4]
 80045c8:	e7de      	b.n	8004588 <_malloc_r+0xa8>
 80045ca:	230c      	movs	r3, #12
 80045cc:	6033      	str	r3, [r6, #0]
 80045ce:	4630      	mov	r0, r6
 80045d0:	f000 f80c 	bl	80045ec <__malloc_unlock>
 80045d4:	e794      	b.n	8004500 <_malloc_r+0x20>
 80045d6:	6005      	str	r5, [r0, #0]
 80045d8:	e7d6      	b.n	8004588 <_malloc_r+0xa8>
 80045da:	bf00      	nop
 80045dc:	200003d0 	.word	0x200003d0

080045e0 <__malloc_lock>:
 80045e0:	4801      	ldr	r0, [pc, #4]	@ (80045e8 <__malloc_lock+0x8>)
 80045e2:	f7ff bf00 	b.w	80043e6 <__retarget_lock_acquire_recursive>
 80045e6:	bf00      	nop
 80045e8:	200003c8 	.word	0x200003c8

080045ec <__malloc_unlock>:
 80045ec:	4801      	ldr	r0, [pc, #4]	@ (80045f4 <__malloc_unlock+0x8>)
 80045ee:	f7ff befb 	b.w	80043e8 <__retarget_lock_release_recursive>
 80045f2:	bf00      	nop
 80045f4:	200003c8 	.word	0x200003c8

080045f8 <__ssputs_r>:
 80045f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fc:	688e      	ldr	r6, [r1, #8]
 80045fe:	461f      	mov	r7, r3
 8004600:	42be      	cmp	r6, r7
 8004602:	680b      	ldr	r3, [r1, #0]
 8004604:	4682      	mov	sl, r0
 8004606:	460c      	mov	r4, r1
 8004608:	4690      	mov	r8, r2
 800460a:	d82d      	bhi.n	8004668 <__ssputs_r+0x70>
 800460c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004610:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004614:	d026      	beq.n	8004664 <__ssputs_r+0x6c>
 8004616:	6965      	ldr	r5, [r4, #20]
 8004618:	6909      	ldr	r1, [r1, #16]
 800461a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800461e:	eba3 0901 	sub.w	r9, r3, r1
 8004622:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004626:	1c7b      	adds	r3, r7, #1
 8004628:	444b      	add	r3, r9
 800462a:	106d      	asrs	r5, r5, #1
 800462c:	429d      	cmp	r5, r3
 800462e:	bf38      	it	cc
 8004630:	461d      	movcc	r5, r3
 8004632:	0553      	lsls	r3, r2, #21
 8004634:	d527      	bpl.n	8004686 <__ssputs_r+0x8e>
 8004636:	4629      	mov	r1, r5
 8004638:	f7ff ff52 	bl	80044e0 <_malloc_r>
 800463c:	4606      	mov	r6, r0
 800463e:	b360      	cbz	r0, 800469a <__ssputs_r+0xa2>
 8004640:	6921      	ldr	r1, [r4, #16]
 8004642:	464a      	mov	r2, r9
 8004644:	f7ff fed1 	bl	80043ea <memcpy>
 8004648:	89a3      	ldrh	r3, [r4, #12]
 800464a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800464e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	6126      	str	r6, [r4, #16]
 8004656:	6165      	str	r5, [r4, #20]
 8004658:	444e      	add	r6, r9
 800465a:	eba5 0509 	sub.w	r5, r5, r9
 800465e:	6026      	str	r6, [r4, #0]
 8004660:	60a5      	str	r5, [r4, #8]
 8004662:	463e      	mov	r6, r7
 8004664:	42be      	cmp	r6, r7
 8004666:	d900      	bls.n	800466a <__ssputs_r+0x72>
 8004668:	463e      	mov	r6, r7
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	4632      	mov	r2, r6
 800466e:	4641      	mov	r1, r8
 8004670:	f000 fbb6 	bl	8004de0 <memmove>
 8004674:	68a3      	ldr	r3, [r4, #8]
 8004676:	1b9b      	subs	r3, r3, r6
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	4433      	add	r3, r6
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	2000      	movs	r0, #0
 8004682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004686:	462a      	mov	r2, r5
 8004688:	f000 fbf6 	bl	8004e78 <_realloc_r>
 800468c:	4606      	mov	r6, r0
 800468e:	2800      	cmp	r0, #0
 8004690:	d1e0      	bne.n	8004654 <__ssputs_r+0x5c>
 8004692:	6921      	ldr	r1, [r4, #16]
 8004694:	4650      	mov	r0, sl
 8004696:	f7ff feb7 	bl	8004408 <_free_r>
 800469a:	230c      	movs	r3, #12
 800469c:	f8ca 3000 	str.w	r3, [sl]
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e7e9      	b.n	8004682 <__ssputs_r+0x8a>
	...

080046b0 <_svfiprintf_r>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	4698      	mov	r8, r3
 80046b6:	898b      	ldrh	r3, [r1, #12]
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	b09d      	sub	sp, #116	@ 0x74
 80046bc:	4607      	mov	r7, r0
 80046be:	460d      	mov	r5, r1
 80046c0:	4614      	mov	r4, r2
 80046c2:	d510      	bpl.n	80046e6 <_svfiprintf_r+0x36>
 80046c4:	690b      	ldr	r3, [r1, #16]
 80046c6:	b973      	cbnz	r3, 80046e6 <_svfiprintf_r+0x36>
 80046c8:	2140      	movs	r1, #64	@ 0x40
 80046ca:	f7ff ff09 	bl	80044e0 <_malloc_r>
 80046ce:	6028      	str	r0, [r5, #0]
 80046d0:	6128      	str	r0, [r5, #16]
 80046d2:	b930      	cbnz	r0, 80046e2 <_svfiprintf_r+0x32>
 80046d4:	230c      	movs	r3, #12
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	b01d      	add	sp, #116	@ 0x74
 80046de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e2:	2340      	movs	r3, #64	@ 0x40
 80046e4:	616b      	str	r3, [r5, #20]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ea:	2320      	movs	r3, #32
 80046ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f4:	2330      	movs	r3, #48	@ 0x30
 80046f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004894 <_svfiprintf_r+0x1e4>
 80046fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046fe:	f04f 0901 	mov.w	r9, #1
 8004702:	4623      	mov	r3, r4
 8004704:	469a      	mov	sl, r3
 8004706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800470a:	b10a      	cbz	r2, 8004710 <_svfiprintf_r+0x60>
 800470c:	2a25      	cmp	r2, #37	@ 0x25
 800470e:	d1f9      	bne.n	8004704 <_svfiprintf_r+0x54>
 8004710:	ebba 0b04 	subs.w	fp, sl, r4
 8004714:	d00b      	beq.n	800472e <_svfiprintf_r+0x7e>
 8004716:	465b      	mov	r3, fp
 8004718:	4622      	mov	r2, r4
 800471a:	4629      	mov	r1, r5
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff ff6b 	bl	80045f8 <__ssputs_r>
 8004722:	3001      	adds	r0, #1
 8004724:	f000 80a7 	beq.w	8004876 <_svfiprintf_r+0x1c6>
 8004728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800472a:	445a      	add	r2, fp
 800472c:	9209      	str	r2, [sp, #36]	@ 0x24
 800472e:	f89a 3000 	ldrb.w	r3, [sl]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 809f 	beq.w	8004876 <_svfiprintf_r+0x1c6>
 8004738:	2300      	movs	r3, #0
 800473a:	f04f 32ff 	mov.w	r2, #4294967295
 800473e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004742:	f10a 0a01 	add.w	sl, sl, #1
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	9307      	str	r3, [sp, #28]
 800474a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800474e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004750:	4654      	mov	r4, sl
 8004752:	2205      	movs	r2, #5
 8004754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004758:	484e      	ldr	r0, [pc, #312]	@ (8004894 <_svfiprintf_r+0x1e4>)
 800475a:	f7fb fd59 	bl	8000210 <memchr>
 800475e:	9a04      	ldr	r2, [sp, #16]
 8004760:	b9d8      	cbnz	r0, 800479a <_svfiprintf_r+0xea>
 8004762:	06d0      	lsls	r0, r2, #27
 8004764:	bf44      	itt	mi
 8004766:	2320      	movmi	r3, #32
 8004768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800476c:	0711      	lsls	r1, r2, #28
 800476e:	bf44      	itt	mi
 8004770:	232b      	movmi	r3, #43	@ 0x2b
 8004772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004776:	f89a 3000 	ldrb.w	r3, [sl]
 800477a:	2b2a      	cmp	r3, #42	@ 0x2a
 800477c:	d015      	beq.n	80047aa <_svfiprintf_r+0xfa>
 800477e:	9a07      	ldr	r2, [sp, #28]
 8004780:	4654      	mov	r4, sl
 8004782:	2000      	movs	r0, #0
 8004784:	f04f 0c0a 	mov.w	ip, #10
 8004788:	4621      	mov	r1, r4
 800478a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478e:	3b30      	subs	r3, #48	@ 0x30
 8004790:	2b09      	cmp	r3, #9
 8004792:	d94b      	bls.n	800482c <_svfiprintf_r+0x17c>
 8004794:	b1b0      	cbz	r0, 80047c4 <_svfiprintf_r+0x114>
 8004796:	9207      	str	r2, [sp, #28]
 8004798:	e014      	b.n	80047c4 <_svfiprintf_r+0x114>
 800479a:	eba0 0308 	sub.w	r3, r0, r8
 800479e:	fa09 f303 	lsl.w	r3, r9, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	9304      	str	r3, [sp, #16]
 80047a6:	46a2      	mov	sl, r4
 80047a8:	e7d2      	b.n	8004750 <_svfiprintf_r+0xa0>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	1d19      	adds	r1, r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	9103      	str	r1, [sp, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfbb      	ittet	lt
 80047b6:	425b      	neglt	r3, r3
 80047b8:	f042 0202 	orrlt.w	r2, r2, #2
 80047bc:	9307      	strge	r3, [sp, #28]
 80047be:	9307      	strlt	r3, [sp, #28]
 80047c0:	bfb8      	it	lt
 80047c2:	9204      	strlt	r2, [sp, #16]
 80047c4:	7823      	ldrb	r3, [r4, #0]
 80047c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80047c8:	d10a      	bne.n	80047e0 <_svfiprintf_r+0x130>
 80047ca:	7863      	ldrb	r3, [r4, #1]
 80047cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ce:	d132      	bne.n	8004836 <_svfiprintf_r+0x186>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	9203      	str	r2, [sp, #12]
 80047d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047dc:	3402      	adds	r4, #2
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048a4 <_svfiprintf_r+0x1f4>
 80047e4:	7821      	ldrb	r1, [r4, #0]
 80047e6:	2203      	movs	r2, #3
 80047e8:	4650      	mov	r0, sl
 80047ea:	f7fb fd11 	bl	8000210 <memchr>
 80047ee:	b138      	cbz	r0, 8004800 <_svfiprintf_r+0x150>
 80047f0:	9b04      	ldr	r3, [sp, #16]
 80047f2:	eba0 000a 	sub.w	r0, r0, sl
 80047f6:	2240      	movs	r2, #64	@ 0x40
 80047f8:	4082      	lsls	r2, r0
 80047fa:	4313      	orrs	r3, r2
 80047fc:	3401      	adds	r4, #1
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004804:	4824      	ldr	r0, [pc, #144]	@ (8004898 <_svfiprintf_r+0x1e8>)
 8004806:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800480a:	2206      	movs	r2, #6
 800480c:	f7fb fd00 	bl	8000210 <memchr>
 8004810:	2800      	cmp	r0, #0
 8004812:	d036      	beq.n	8004882 <_svfiprintf_r+0x1d2>
 8004814:	4b21      	ldr	r3, [pc, #132]	@ (800489c <_svfiprintf_r+0x1ec>)
 8004816:	bb1b      	cbnz	r3, 8004860 <_svfiprintf_r+0x1b0>
 8004818:	9b03      	ldr	r3, [sp, #12]
 800481a:	3307      	adds	r3, #7
 800481c:	f023 0307 	bic.w	r3, r3, #7
 8004820:	3308      	adds	r3, #8
 8004822:	9303      	str	r3, [sp, #12]
 8004824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004826:	4433      	add	r3, r6
 8004828:	9309      	str	r3, [sp, #36]	@ 0x24
 800482a:	e76a      	b.n	8004702 <_svfiprintf_r+0x52>
 800482c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004830:	460c      	mov	r4, r1
 8004832:	2001      	movs	r0, #1
 8004834:	e7a8      	b.n	8004788 <_svfiprintf_r+0xd8>
 8004836:	2300      	movs	r3, #0
 8004838:	3401      	adds	r4, #1
 800483a:	9305      	str	r3, [sp, #20]
 800483c:	4619      	mov	r1, r3
 800483e:	f04f 0c0a 	mov.w	ip, #10
 8004842:	4620      	mov	r0, r4
 8004844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004848:	3a30      	subs	r2, #48	@ 0x30
 800484a:	2a09      	cmp	r2, #9
 800484c:	d903      	bls.n	8004856 <_svfiprintf_r+0x1a6>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0c6      	beq.n	80047e0 <_svfiprintf_r+0x130>
 8004852:	9105      	str	r1, [sp, #20]
 8004854:	e7c4      	b.n	80047e0 <_svfiprintf_r+0x130>
 8004856:	fb0c 2101 	mla	r1, ip, r1, r2
 800485a:	4604      	mov	r4, r0
 800485c:	2301      	movs	r3, #1
 800485e:	e7f0      	b.n	8004842 <_svfiprintf_r+0x192>
 8004860:	ab03      	add	r3, sp, #12
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	462a      	mov	r2, r5
 8004866:	4b0e      	ldr	r3, [pc, #56]	@ (80048a0 <_svfiprintf_r+0x1f0>)
 8004868:	a904      	add	r1, sp, #16
 800486a:	4638      	mov	r0, r7
 800486c:	f3af 8000 	nop.w
 8004870:	1c42      	adds	r2, r0, #1
 8004872:	4606      	mov	r6, r0
 8004874:	d1d6      	bne.n	8004824 <_svfiprintf_r+0x174>
 8004876:	89ab      	ldrh	r3, [r5, #12]
 8004878:	065b      	lsls	r3, r3, #25
 800487a:	f53f af2d 	bmi.w	80046d8 <_svfiprintf_r+0x28>
 800487e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004880:	e72c      	b.n	80046dc <_svfiprintf_r+0x2c>
 8004882:	ab03      	add	r3, sp, #12
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	462a      	mov	r2, r5
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <_svfiprintf_r+0x1f0>)
 800488a:	a904      	add	r1, sp, #16
 800488c:	4638      	mov	r0, r7
 800488e:	f000 f879 	bl	8004984 <_printf_i>
 8004892:	e7ed      	b.n	8004870 <_svfiprintf_r+0x1c0>
 8004894:	08005105 	.word	0x08005105
 8004898:	0800510f 	.word	0x0800510f
 800489c:	00000000 	.word	0x00000000
 80048a0:	080045f9 	.word	0x080045f9
 80048a4:	0800510b 	.word	0x0800510b

080048a8 <_printf_common>:
 80048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	4616      	mov	r6, r2
 80048ae:	4698      	mov	r8, r3
 80048b0:	688a      	ldr	r2, [r1, #8]
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bfb8      	it	lt
 80048bc:	4613      	movlt	r3, r2
 80048be:	6033      	str	r3, [r6, #0]
 80048c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048c4:	4607      	mov	r7, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	b10a      	cbz	r2, 80048ce <_printf_common+0x26>
 80048ca:	3301      	adds	r3, #1
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0699      	lsls	r1, r3, #26
 80048d2:	bf42      	ittt	mi
 80048d4:	6833      	ldrmi	r3, [r6, #0]
 80048d6:	3302      	addmi	r3, #2
 80048d8:	6033      	strmi	r3, [r6, #0]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d106      	bne.n	80048f0 <_printf_common+0x48>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	6832      	ldr	r2, [r6, #0]
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dc26      	bgt.n	800493e <_printf_common+0x96>
 80048f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	3b00      	subs	r3, #0
 80048f8:	bf18      	it	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	0692      	lsls	r2, r2, #26
 80048fe:	d42b      	bmi.n	8004958 <_printf_common+0xb0>
 8004900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004904:	4641      	mov	r1, r8
 8004906:	4638      	mov	r0, r7
 8004908:	47c8      	blx	r9
 800490a:	3001      	adds	r0, #1
 800490c:	d01e      	beq.n	800494c <_printf_common+0xa4>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	f003 0306 	and.w	r3, r3, #6
 8004916:	2b04      	cmp	r3, #4
 8004918:	bf02      	ittt	eq
 800491a:	68e5      	ldreq	r5, [r4, #12]
 800491c:	6833      	ldreq	r3, [r6, #0]
 800491e:	1aed      	subeq	r5, r5, r3
 8004920:	68a3      	ldr	r3, [r4, #8]
 8004922:	bf0c      	ite	eq
 8004924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004928:	2500      	movne	r5, #0
 800492a:	4293      	cmp	r3, r2
 800492c:	bfc4      	itt	gt
 800492e:	1a9b      	subgt	r3, r3, r2
 8004930:	18ed      	addgt	r5, r5, r3
 8004932:	2600      	movs	r6, #0
 8004934:	341a      	adds	r4, #26
 8004936:	42b5      	cmp	r5, r6
 8004938:	d11a      	bne.n	8004970 <_printf_common+0xc8>
 800493a:	2000      	movs	r0, #0
 800493c:	e008      	b.n	8004950 <_printf_common+0xa8>
 800493e:	2301      	movs	r3, #1
 8004940:	4652      	mov	r2, sl
 8004942:	4641      	mov	r1, r8
 8004944:	4638      	mov	r0, r7
 8004946:	47c8      	blx	r9
 8004948:	3001      	adds	r0, #1
 800494a:	d103      	bne.n	8004954 <_printf_common+0xac>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	3501      	adds	r5, #1
 8004956:	e7c6      	b.n	80048e6 <_printf_common+0x3e>
 8004958:	18e1      	adds	r1, r4, r3
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	2030      	movs	r0, #48	@ 0x30
 800495e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004962:	4422      	add	r2, r4
 8004964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800496c:	3302      	adds	r3, #2
 800496e:	e7c7      	b.n	8004900 <_printf_common+0x58>
 8004970:	2301      	movs	r3, #1
 8004972:	4622      	mov	r2, r4
 8004974:	4641      	mov	r1, r8
 8004976:	4638      	mov	r0, r7
 8004978:	47c8      	blx	r9
 800497a:	3001      	adds	r0, #1
 800497c:	d0e6      	beq.n	800494c <_printf_common+0xa4>
 800497e:	3601      	adds	r6, #1
 8004980:	e7d9      	b.n	8004936 <_printf_common+0x8e>
	...

08004984 <_printf_i>:
 8004984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	7e0f      	ldrb	r7, [r1, #24]
 800498a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800498c:	2f78      	cmp	r7, #120	@ 0x78
 800498e:	4691      	mov	r9, r2
 8004990:	4680      	mov	r8, r0
 8004992:	460c      	mov	r4, r1
 8004994:	469a      	mov	sl, r3
 8004996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800499a:	d807      	bhi.n	80049ac <_printf_i+0x28>
 800499c:	2f62      	cmp	r7, #98	@ 0x62
 800499e:	d80a      	bhi.n	80049b6 <_printf_i+0x32>
 80049a0:	2f00      	cmp	r7, #0
 80049a2:	f000 80d2 	beq.w	8004b4a <_printf_i+0x1c6>
 80049a6:	2f58      	cmp	r7, #88	@ 0x58
 80049a8:	f000 80b9 	beq.w	8004b1e <_printf_i+0x19a>
 80049ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049b4:	e03a      	b.n	8004a2c <_printf_i+0xa8>
 80049b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ba:	2b15      	cmp	r3, #21
 80049bc:	d8f6      	bhi.n	80049ac <_printf_i+0x28>
 80049be:	a101      	add	r1, pc, #4	@ (adr r1, 80049c4 <_printf_i+0x40>)
 80049c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c4:	08004a1d 	.word	0x08004a1d
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	080049ad 	.word	0x080049ad
 80049d0:	080049ad 	.word	0x080049ad
 80049d4:	080049ad 	.word	0x080049ad
 80049d8:	080049ad 	.word	0x080049ad
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	080049ad 	.word	0x080049ad
 80049e4:	080049ad 	.word	0x080049ad
 80049e8:	080049ad 	.word	0x080049ad
 80049ec:	080049ad 	.word	0x080049ad
 80049f0:	08004b31 	.word	0x08004b31
 80049f4:	08004a5b 	.word	0x08004a5b
 80049f8:	08004aeb 	.word	0x08004aeb
 80049fc:	080049ad 	.word	0x080049ad
 8004a00:	080049ad 	.word	0x080049ad
 8004a04:	08004b53 	.word	0x08004b53
 8004a08:	080049ad 	.word	0x080049ad
 8004a0c:	08004a5b 	.word	0x08004a5b
 8004a10:	080049ad 	.word	0x080049ad
 8004a14:	080049ad 	.word	0x080049ad
 8004a18:	08004af3 	.word	0x08004af3
 8004a1c:	6833      	ldr	r3, [r6, #0]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6032      	str	r2, [r6, #0]
 8004a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e09d      	b.n	8004b6c <_printf_i+0x1e8>
 8004a30:	6833      	ldr	r3, [r6, #0]
 8004a32:	6820      	ldr	r0, [r4, #0]
 8004a34:	1d19      	adds	r1, r3, #4
 8004a36:	6031      	str	r1, [r6, #0]
 8004a38:	0606      	lsls	r6, r0, #24
 8004a3a:	d501      	bpl.n	8004a40 <_printf_i+0xbc>
 8004a3c:	681d      	ldr	r5, [r3, #0]
 8004a3e:	e003      	b.n	8004a48 <_printf_i+0xc4>
 8004a40:	0645      	lsls	r5, r0, #25
 8004a42:	d5fb      	bpl.n	8004a3c <_printf_i+0xb8>
 8004a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a48:	2d00      	cmp	r5, #0
 8004a4a:	da03      	bge.n	8004a54 <_printf_i+0xd0>
 8004a4c:	232d      	movs	r3, #45	@ 0x2d
 8004a4e:	426d      	negs	r5, r5
 8004a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a54:	4859      	ldr	r0, [pc, #356]	@ (8004bbc <_printf_i+0x238>)
 8004a56:	230a      	movs	r3, #10
 8004a58:	e011      	b.n	8004a7e <_printf_i+0xfa>
 8004a5a:	6821      	ldr	r1, [r4, #0]
 8004a5c:	6833      	ldr	r3, [r6, #0]
 8004a5e:	0608      	lsls	r0, r1, #24
 8004a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a64:	d402      	bmi.n	8004a6c <_printf_i+0xe8>
 8004a66:	0649      	lsls	r1, r1, #25
 8004a68:	bf48      	it	mi
 8004a6a:	b2ad      	uxthmi	r5, r5
 8004a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a6e:	4853      	ldr	r0, [pc, #332]	@ (8004bbc <_printf_i+0x238>)
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	bf14      	ite	ne
 8004a74:	230a      	movne	r3, #10
 8004a76:	2308      	moveq	r3, #8
 8004a78:	2100      	movs	r1, #0
 8004a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a7e:	6866      	ldr	r6, [r4, #4]
 8004a80:	60a6      	str	r6, [r4, #8]
 8004a82:	2e00      	cmp	r6, #0
 8004a84:	bfa2      	ittt	ge
 8004a86:	6821      	ldrge	r1, [r4, #0]
 8004a88:	f021 0104 	bicge.w	r1, r1, #4
 8004a8c:	6021      	strge	r1, [r4, #0]
 8004a8e:	b90d      	cbnz	r5, 8004a94 <_printf_i+0x110>
 8004a90:	2e00      	cmp	r6, #0
 8004a92:	d04b      	beq.n	8004b2c <_printf_i+0x1a8>
 8004a94:	4616      	mov	r6, r2
 8004a96:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a9a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a9e:	5dc7      	ldrb	r7, [r0, r7]
 8004aa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aa4:	462f      	mov	r7, r5
 8004aa6:	42bb      	cmp	r3, r7
 8004aa8:	460d      	mov	r5, r1
 8004aaa:	d9f4      	bls.n	8004a96 <_printf_i+0x112>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d10b      	bne.n	8004ac8 <_printf_i+0x144>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	07df      	lsls	r7, r3, #31
 8004ab4:	d508      	bpl.n	8004ac8 <_printf_i+0x144>
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	6861      	ldr	r1, [r4, #4]
 8004aba:	4299      	cmp	r1, r3
 8004abc:	bfde      	ittt	le
 8004abe:	2330      	movle	r3, #48	@ 0x30
 8004ac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ac4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ac8:	1b92      	subs	r2, r2, r6
 8004aca:	6122      	str	r2, [r4, #16]
 8004acc:	f8cd a000 	str.w	sl, [sp]
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	aa03      	add	r2, sp, #12
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	f7ff fee6 	bl	80048a8 <_printf_common>
 8004adc:	3001      	adds	r0, #1
 8004ade:	d14a      	bne.n	8004b76 <_printf_i+0x1f2>
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	b004      	add	sp, #16
 8004ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f043 0320 	orr.w	r3, r3, #32
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	4833      	ldr	r0, [pc, #204]	@ (8004bc0 <_printf_i+0x23c>)
 8004af4:	2778      	movs	r7, #120	@ 0x78
 8004af6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	6831      	ldr	r1, [r6, #0]
 8004afe:	061f      	lsls	r7, r3, #24
 8004b00:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b04:	d402      	bmi.n	8004b0c <_printf_i+0x188>
 8004b06:	065f      	lsls	r7, r3, #25
 8004b08:	bf48      	it	mi
 8004b0a:	b2ad      	uxthmi	r5, r5
 8004b0c:	6031      	str	r1, [r6, #0]
 8004b0e:	07d9      	lsls	r1, r3, #31
 8004b10:	bf44      	itt	mi
 8004b12:	f043 0320 	orrmi.w	r3, r3, #32
 8004b16:	6023      	strmi	r3, [r4, #0]
 8004b18:	b11d      	cbz	r5, 8004b22 <_printf_i+0x19e>
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	e7ac      	b.n	8004a78 <_printf_i+0xf4>
 8004b1e:	4827      	ldr	r0, [pc, #156]	@ (8004bbc <_printf_i+0x238>)
 8004b20:	e7e9      	b.n	8004af6 <_printf_i+0x172>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	f023 0320 	bic.w	r3, r3, #32
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	e7f6      	b.n	8004b1a <_printf_i+0x196>
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	e7bd      	b.n	8004aac <_printf_i+0x128>
 8004b30:	6833      	ldr	r3, [r6, #0]
 8004b32:	6825      	ldr	r5, [r4, #0]
 8004b34:	6961      	ldr	r1, [r4, #20]
 8004b36:	1d18      	adds	r0, r3, #4
 8004b38:	6030      	str	r0, [r6, #0]
 8004b3a:	062e      	lsls	r6, r5, #24
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	d501      	bpl.n	8004b44 <_printf_i+0x1c0>
 8004b40:	6019      	str	r1, [r3, #0]
 8004b42:	e002      	b.n	8004b4a <_printf_i+0x1c6>
 8004b44:	0668      	lsls	r0, r5, #25
 8004b46:	d5fb      	bpl.n	8004b40 <_printf_i+0x1bc>
 8004b48:	8019      	strh	r1, [r3, #0]
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	4616      	mov	r6, r2
 8004b50:	e7bc      	b.n	8004acc <_printf_i+0x148>
 8004b52:	6833      	ldr	r3, [r6, #0]
 8004b54:	1d1a      	adds	r2, r3, #4
 8004b56:	6032      	str	r2, [r6, #0]
 8004b58:	681e      	ldr	r6, [r3, #0]
 8004b5a:	6862      	ldr	r2, [r4, #4]
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f7fb fb56 	bl	8000210 <memchr>
 8004b64:	b108      	cbz	r0, 8004b6a <_printf_i+0x1e6>
 8004b66:	1b80      	subs	r0, r0, r6
 8004b68:	6060      	str	r0, [r4, #4]
 8004b6a:	6863      	ldr	r3, [r4, #4]
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b74:	e7aa      	b.n	8004acc <_printf_i+0x148>
 8004b76:	6923      	ldr	r3, [r4, #16]
 8004b78:	4632      	mov	r2, r6
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	4640      	mov	r0, r8
 8004b7e:	47d0      	blx	sl
 8004b80:	3001      	adds	r0, #1
 8004b82:	d0ad      	beq.n	8004ae0 <_printf_i+0x15c>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	079b      	lsls	r3, r3, #30
 8004b88:	d413      	bmi.n	8004bb2 <_printf_i+0x22e>
 8004b8a:	68e0      	ldr	r0, [r4, #12]
 8004b8c:	9b03      	ldr	r3, [sp, #12]
 8004b8e:	4298      	cmp	r0, r3
 8004b90:	bfb8      	it	lt
 8004b92:	4618      	movlt	r0, r3
 8004b94:	e7a6      	b.n	8004ae4 <_printf_i+0x160>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4632      	mov	r2, r6
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	47d0      	blx	sl
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d09d      	beq.n	8004ae0 <_printf_i+0x15c>
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	68e3      	ldr	r3, [r4, #12]
 8004ba8:	9903      	ldr	r1, [sp, #12]
 8004baa:	1a5b      	subs	r3, r3, r1
 8004bac:	42ab      	cmp	r3, r5
 8004bae:	dcf2      	bgt.n	8004b96 <_printf_i+0x212>
 8004bb0:	e7eb      	b.n	8004b8a <_printf_i+0x206>
 8004bb2:	2500      	movs	r5, #0
 8004bb4:	f104 0619 	add.w	r6, r4, #25
 8004bb8:	e7f5      	b.n	8004ba6 <_printf_i+0x222>
 8004bba:	bf00      	nop
 8004bbc:	08005116 	.word	0x08005116
 8004bc0:	08005127 	.word	0x08005127

08004bc4 <__sflush_r>:
 8004bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bcc:	0716      	lsls	r6, r2, #28
 8004bce:	4605      	mov	r5, r0
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	d454      	bmi.n	8004c7e <__sflush_r+0xba>
 8004bd4:	684b      	ldr	r3, [r1, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dc02      	bgt.n	8004be0 <__sflush_r+0x1c>
 8004bda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	dd48      	ble.n	8004c72 <__sflush_r+0xae>
 8004be0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d045      	beq.n	8004c72 <__sflush_r+0xae>
 8004be6:	2300      	movs	r3, #0
 8004be8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004bec:	682f      	ldr	r7, [r5, #0]
 8004bee:	6a21      	ldr	r1, [r4, #32]
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	d030      	beq.n	8004c56 <__sflush_r+0x92>
 8004bf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	0759      	lsls	r1, r3, #29
 8004bfa:	d505      	bpl.n	8004c08 <__sflush_r+0x44>
 8004bfc:	6863      	ldr	r3, [r4, #4]
 8004bfe:	1ad2      	subs	r2, r2, r3
 8004c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c02:	b10b      	cbz	r3, 8004c08 <__sflush_r+0x44>
 8004c04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c06:	1ad2      	subs	r2, r2, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c0c:	6a21      	ldr	r1, [r4, #32]
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b0      	blx	r6
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	d106      	bne.n	8004c26 <__sflush_r+0x62>
 8004c18:	6829      	ldr	r1, [r5, #0]
 8004c1a:	291d      	cmp	r1, #29
 8004c1c:	d82b      	bhi.n	8004c76 <__sflush_r+0xb2>
 8004c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc8 <__sflush_r+0x104>)
 8004c20:	410a      	asrs	r2, r1
 8004c22:	07d6      	lsls	r6, r2, #31
 8004c24:	d427      	bmi.n	8004c76 <__sflush_r+0xb2>
 8004c26:	2200      	movs	r2, #0
 8004c28:	6062      	str	r2, [r4, #4]
 8004c2a:	04d9      	lsls	r1, r3, #19
 8004c2c:	6922      	ldr	r2, [r4, #16]
 8004c2e:	6022      	str	r2, [r4, #0]
 8004c30:	d504      	bpl.n	8004c3c <__sflush_r+0x78>
 8004c32:	1c42      	adds	r2, r0, #1
 8004c34:	d101      	bne.n	8004c3a <__sflush_r+0x76>
 8004c36:	682b      	ldr	r3, [r5, #0]
 8004c38:	b903      	cbnz	r3, 8004c3c <__sflush_r+0x78>
 8004c3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c3e:	602f      	str	r7, [r5, #0]
 8004c40:	b1b9      	cbz	r1, 8004c72 <__sflush_r+0xae>
 8004c42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c46:	4299      	cmp	r1, r3
 8004c48:	d002      	beq.n	8004c50 <__sflush_r+0x8c>
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f7ff fbdc 	bl	8004408 <_free_r>
 8004c50:	2300      	movs	r3, #0
 8004c52:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c54:	e00d      	b.n	8004c72 <__sflush_r+0xae>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4628      	mov	r0, r5
 8004c5a:	47b0      	blx	r6
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	1c50      	adds	r0, r2, #1
 8004c60:	d1c9      	bne.n	8004bf6 <__sflush_r+0x32>
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0c6      	beq.n	8004bf6 <__sflush_r+0x32>
 8004c68:	2b1d      	cmp	r3, #29
 8004c6a:	d001      	beq.n	8004c70 <__sflush_r+0xac>
 8004c6c:	2b16      	cmp	r3, #22
 8004c6e:	d11e      	bne.n	8004cae <__sflush_r+0xea>
 8004c70:	602f      	str	r7, [r5, #0]
 8004c72:	2000      	movs	r0, #0
 8004c74:	e022      	b.n	8004cbc <__sflush_r+0xf8>
 8004c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c7a:	b21b      	sxth	r3, r3
 8004c7c:	e01b      	b.n	8004cb6 <__sflush_r+0xf2>
 8004c7e:	690f      	ldr	r7, [r1, #16]
 8004c80:	2f00      	cmp	r7, #0
 8004c82:	d0f6      	beq.n	8004c72 <__sflush_r+0xae>
 8004c84:	0793      	lsls	r3, r2, #30
 8004c86:	680e      	ldr	r6, [r1, #0]
 8004c88:	bf08      	it	eq
 8004c8a:	694b      	ldreq	r3, [r1, #20]
 8004c8c:	600f      	str	r7, [r1, #0]
 8004c8e:	bf18      	it	ne
 8004c90:	2300      	movne	r3, #0
 8004c92:	eba6 0807 	sub.w	r8, r6, r7
 8004c96:	608b      	str	r3, [r1, #8]
 8004c98:	f1b8 0f00 	cmp.w	r8, #0
 8004c9c:	dde9      	ble.n	8004c72 <__sflush_r+0xae>
 8004c9e:	6a21      	ldr	r1, [r4, #32]
 8004ca0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ca2:	4643      	mov	r3, r8
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	47b0      	blx	r6
 8004caa:	2800      	cmp	r0, #0
 8004cac:	dc08      	bgt.n	8004cc0 <__sflush_r+0xfc>
 8004cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc0:	4407      	add	r7, r0
 8004cc2:	eba8 0800 	sub.w	r8, r8, r0
 8004cc6:	e7e7      	b.n	8004c98 <__sflush_r+0xd4>
 8004cc8:	dfbffffe 	.word	0xdfbffffe

08004ccc <_fflush_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	690b      	ldr	r3, [r1, #16]
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	b913      	cbnz	r3, 8004cdc <_fflush_r+0x10>
 8004cd6:	2500      	movs	r5, #0
 8004cd8:	4628      	mov	r0, r5
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	b118      	cbz	r0, 8004ce6 <_fflush_r+0x1a>
 8004cde:	6a03      	ldr	r3, [r0, #32]
 8004ce0:	b90b      	cbnz	r3, 8004ce6 <_fflush_r+0x1a>
 8004ce2:	f7ff f967 	bl	8003fb4 <__sinit>
 8004ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f3      	beq.n	8004cd6 <_fflush_r+0xa>
 8004cee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cf0:	07d0      	lsls	r0, r2, #31
 8004cf2:	d404      	bmi.n	8004cfe <_fflush_r+0x32>
 8004cf4:	0599      	lsls	r1, r3, #22
 8004cf6:	d402      	bmi.n	8004cfe <_fflush_r+0x32>
 8004cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cfa:	f7ff fb74 	bl	80043e6 <__retarget_lock_acquire_recursive>
 8004cfe:	4628      	mov	r0, r5
 8004d00:	4621      	mov	r1, r4
 8004d02:	f7ff ff5f 	bl	8004bc4 <__sflush_r>
 8004d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d08:	07da      	lsls	r2, r3, #31
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	d4e4      	bmi.n	8004cd8 <_fflush_r+0xc>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	059b      	lsls	r3, r3, #22
 8004d12:	d4e1      	bmi.n	8004cd8 <_fflush_r+0xc>
 8004d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d16:	f7ff fb67 	bl	80043e8 <__retarget_lock_release_recursive>
 8004d1a:	e7dd      	b.n	8004cd8 <_fflush_r+0xc>

08004d1c <__swhatbuf_r>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	460c      	mov	r4, r1
 8004d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d24:	2900      	cmp	r1, #0
 8004d26:	b096      	sub	sp, #88	@ 0x58
 8004d28:	4615      	mov	r5, r2
 8004d2a:	461e      	mov	r6, r3
 8004d2c:	da0d      	bge.n	8004d4a <__swhatbuf_r+0x2e>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	2340      	movne	r3, #64	@ 0x40
 8004d3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d40:	2000      	movs	r0, #0
 8004d42:	6031      	str	r1, [r6, #0]
 8004d44:	602b      	str	r3, [r5, #0]
 8004d46:	b016      	add	sp, #88	@ 0x58
 8004d48:	bd70      	pop	{r4, r5, r6, pc}
 8004d4a:	466a      	mov	r2, sp
 8004d4c:	f000 f862 	bl	8004e14 <_fstat_r>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	dbec      	blt.n	8004d2e <__swhatbuf_r+0x12>
 8004d54:	9901      	ldr	r1, [sp, #4]
 8004d56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d5e:	4259      	negs	r1, r3
 8004d60:	4159      	adcs	r1, r3
 8004d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d66:	e7eb      	b.n	8004d40 <__swhatbuf_r+0x24>

08004d68 <__smakebuf_r>:
 8004d68:	898b      	ldrh	r3, [r1, #12]
 8004d6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d6c:	079d      	lsls	r5, r3, #30
 8004d6e:	4606      	mov	r6, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	d507      	bpl.n	8004d84 <__smakebuf_r+0x1c>
 8004d74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6163      	str	r3, [r4, #20]
 8004d80:	b003      	add	sp, #12
 8004d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d84:	ab01      	add	r3, sp, #4
 8004d86:	466a      	mov	r2, sp
 8004d88:	f7ff ffc8 	bl	8004d1c <__swhatbuf_r>
 8004d8c:	9f00      	ldr	r7, [sp, #0]
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4639      	mov	r1, r7
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff fba4 	bl	80044e0 <_malloc_r>
 8004d98:	b948      	cbnz	r0, 8004dae <__smakebuf_r+0x46>
 8004d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9e:	059a      	lsls	r2, r3, #22
 8004da0:	d4ee      	bmi.n	8004d80 <__smakebuf_r+0x18>
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	f043 0302 	orr.w	r3, r3, #2
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	e7e2      	b.n	8004d74 <__smakebuf_r+0xc>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	6020      	str	r0, [r4, #0]
 8004db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	9b01      	ldr	r3, [sp, #4]
 8004dba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dbe:	b15b      	cbz	r3, 8004dd8 <__smakebuf_r+0x70>
 8004dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f837 	bl	8004e38 <_isatty_r>
 8004dca:	b128      	cbz	r0, 8004dd8 <__smakebuf_r+0x70>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	431d      	orrs	r5, r3
 8004ddc:	81a5      	strh	r5, [r4, #12]
 8004dde:	e7cf      	b.n	8004d80 <__smakebuf_r+0x18>

08004de0 <memmove>:
 8004de0:	4288      	cmp	r0, r1
 8004de2:	b510      	push	{r4, lr}
 8004de4:	eb01 0402 	add.w	r4, r1, r2
 8004de8:	d902      	bls.n	8004df0 <memmove+0x10>
 8004dea:	4284      	cmp	r4, r0
 8004dec:	4623      	mov	r3, r4
 8004dee:	d807      	bhi.n	8004e00 <memmove+0x20>
 8004df0:	1e43      	subs	r3, r0, #1
 8004df2:	42a1      	cmp	r1, r4
 8004df4:	d008      	beq.n	8004e08 <memmove+0x28>
 8004df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dfe:	e7f8      	b.n	8004df2 <memmove+0x12>
 8004e00:	4402      	add	r2, r0
 8004e02:	4601      	mov	r1, r0
 8004e04:	428a      	cmp	r2, r1
 8004e06:	d100      	bne.n	8004e0a <memmove+0x2a>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e12:	e7f7      	b.n	8004e04 <memmove+0x24>

08004e14 <_fstat_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	@ (8004e34 <_fstat_r+0x20>)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	f7fb ff13 	bl	8000c4c <_fstat>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	d102      	bne.n	8004e30 <_fstat_r+0x1c>
 8004e2a:	682b      	ldr	r3, [r5, #0]
 8004e2c:	b103      	cbz	r3, 8004e30 <_fstat_r+0x1c>
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	bd38      	pop	{r3, r4, r5, pc}
 8004e32:	bf00      	nop
 8004e34:	200003c4 	.word	0x200003c4

08004e38 <_isatty_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4d06      	ldr	r5, [pc, #24]	@ (8004e54 <_isatty_r+0x1c>)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4608      	mov	r0, r1
 8004e42:	602b      	str	r3, [r5, #0]
 8004e44:	f7fb ff12 	bl	8000c6c <_isatty>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d102      	bne.n	8004e52 <_isatty_r+0x1a>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	b103      	cbz	r3, 8004e52 <_isatty_r+0x1a>
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	200003c4 	.word	0x200003c4

08004e58 <_sbrk_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d06      	ldr	r5, [pc, #24]	@ (8004e74 <_sbrk_r+0x1c>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	f7fb ff1a 	bl	8000c9c <_sbrk>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_sbrk_r+0x1a>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_sbrk_r+0x1a>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	200003c4 	.word	0x200003c4

08004e78 <_realloc_r>:
 8004e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	4615      	mov	r5, r2
 8004e80:	460c      	mov	r4, r1
 8004e82:	b921      	cbnz	r1, 8004e8e <_realloc_r+0x16>
 8004e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4611      	mov	r1, r2
 8004e8a:	f7ff bb29 	b.w	80044e0 <_malloc_r>
 8004e8e:	b92a      	cbnz	r2, 8004e9c <_realloc_r+0x24>
 8004e90:	f7ff faba 	bl	8004408 <_free_r>
 8004e94:	2400      	movs	r4, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e9c:	f000 f81a 	bl	8004ed4 <_malloc_usable_size_r>
 8004ea0:	4285      	cmp	r5, r0
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	d802      	bhi.n	8004eac <_realloc_r+0x34>
 8004ea6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004eaa:	d8f4      	bhi.n	8004e96 <_realloc_r+0x1e>
 8004eac:	4629      	mov	r1, r5
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f7ff fb16 	bl	80044e0 <_malloc_r>
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d0ec      	beq.n	8004e94 <_realloc_r+0x1c>
 8004eba:	42b5      	cmp	r5, r6
 8004ebc:	462a      	mov	r2, r5
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	bf28      	it	cs
 8004ec2:	4632      	movcs	r2, r6
 8004ec4:	f7ff fa91 	bl	80043ea <memcpy>
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f7ff fa9c 	bl	8004408 <_free_r>
 8004ed0:	463c      	mov	r4, r7
 8004ed2:	e7e0      	b.n	8004e96 <_realloc_r+0x1e>

08004ed4 <_malloc_usable_size_r>:
 8004ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed8:	1f18      	subs	r0, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	bfbc      	itt	lt
 8004ede:	580b      	ldrlt	r3, [r1, r0]
 8004ee0:	18c0      	addlt	r0, r0, r3
 8004ee2:	4770      	bx	lr

08004ee4 <_init>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr

08004ef0 <_fini>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr
