
Alarm_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005560  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  0000708c  2**0
                  CONTENTS
  4 .ARM          00000008  08005980  08005980  00006980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005988  08005988  0000708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00006988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08005990  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  2000008c  08005a1c  0000708c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08005a1c  000074a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6ef  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002685  00000000  00000000  000157ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00017e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a32  00000000  00000000  00018b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017326  00000000  00000000  0001957a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012563  00000000  00000000  000308a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a949  00000000  00000000  00042e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd74c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ba0  00000000  00000000  000cd790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d1330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056e8 	.word	0x080056e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	080056e8 	.word	0x080056e8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b0a5      	sub	sp, #148	@ 0x94
 80005a4:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fb8f 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f857 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f94d 	bl	800084c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b2:	f000 f8bd 	bl	8000730 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005b6:	f000 f8e9 	bl	800078c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80005ba:	f000 f91d 	bl	80007f8 <MX_USART1_UART_Init>
//  flash_write_multiple_word(0x08060000, (uint32_t *)data_in, 16);

  //READOUT
  {
	char data_out[64];
	flash_read_multiple_words(0x08060000, (uint32_t *)data_out, 16);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2210      	movs	r2, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	4822      	ldr	r0, [pc, #136]	@ (8000650 <main+0xb0>)
 80005c6:	f003 f953 	bl	8003870 <flash_read_multiple_words>
	//PARSING TO VARIABLES
	state_machine_init(data_out);
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fe27 	bl	8004220 <state_machine_init>
  }
  lcd_init(hi2c1);
 80005d2:	4c20      	ldr	r4, [pc, #128]	@ (8000654 <main+0xb4>)
 80005d4:	4668      	mov	r0, sp
 80005d6:	f104 0310 	add.w	r3, r4, #16
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	4619      	mov	r1, r3
 80005de:	f004 fc37 	bl	8004e50 <memcpy>
 80005e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005e6:	f003 fae1 	bl	8003bac <lcd_init>
  gsm_init(&huart1);
 80005ea:	481b      	ldr	r0, [pc, #108]	@ (8000658 <main+0xb8>)
 80005ec:	f003 fb76 	bl	8003cdc <gsm_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  x = check_keyboard();
 80005f0:	f003 fa04 	bl	80039fc <check_keyboard>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  if(x){
 80005fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d020      	beq.n	8000644 <main+0xa4>
		  if(x < 10) x += '0';
 8000602:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000606:	2b09      	cmp	r3, #9
 8000608:	d805      	bhi.n	8000616 <main+0x76>
 800060a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800060e:	3330      	adds	r3, #48	@ 0x30
 8000610:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000614:	e016      	b.n	8000644 <main+0xa4>
		  else if(x == 10) x = '*';
 8000616:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800061a:	2b0a      	cmp	r3, #10
 800061c:	d103      	bne.n	8000626 <main+0x86>
 800061e:	232a      	movs	r3, #42	@ 0x2a
 8000620:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000624:	e00e      	b.n	8000644 <main+0xa4>
		  else if(x == 11) x = '0';
 8000626:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800062a:	2b0b      	cmp	r3, #11
 800062c:	d103      	bne.n	8000636 <main+0x96>
 800062e:	2330      	movs	r3, #48	@ 0x30
 8000630:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000634:	e006      	b.n	8000644 <main+0xa4>
		  else if(x == 12) x = '#';
 8000636:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800063a:	2b0c      	cmp	r3, #12
 800063c:	d102      	bne.n	8000644 <main+0xa4>
 800063e:	2323      	movs	r3, #35	@ 0x23
 8000640:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  }
	  state_machine_run(x);
 8000644:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fe45 	bl	80042d8 <state_machine_run>
	  x = check_keyboard();
 800064e:	e7cf      	b.n	80005f0 <main+0x50>
 8000650:	08060000 	.word	0x08060000
 8000654:	200000a8 	.word	0x200000a8
 8000658:	20000154 	.word	0x20000154

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	@ 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fba6 	bl	8004dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	@ (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80006d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fb7e 	bl	8001de4 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ee:	f000 f931 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2103      	movs	r1, #3
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fde0 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f91b 	bl	8000954 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	@ 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <MX_I2C1_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_I2C1_Init+0x50>)
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_I2C1_Init+0x58>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_I2C1_Init+0x50>)
 800074e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_I2C1_Init+0x50>)
 800076e:	f000 fe9b 	bl	80014a8 <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 f8ec 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000a8 	.word	0x200000a8
 8000784:	40005400 	.word	0x40005400
 8000788:	000186a0 	.word	0x000186a0

0800078c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_SPI2_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	@ (80007f4 <MX_SPI2_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_SPI2_Init+0x64>)
 8000798:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800079c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007c0:	2210      	movs	r2, #16
 80007c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007d8:	220a      	movs	r2, #10
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_SPI2_Init+0x64>)
 80007de:	f001 ff59 	bl	8002694 <HAL_SPI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 f8b4 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000fc 	.word	0x200000fc
 80007f4:	40003800 	.word	0x40003800

080007f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <MX_USART1_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART1_UART_Init+0x4c>)
 8000830:	f001 ffb9 	bl	80027a6 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f88b 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000154 	.word	0x20000154
 8000848:	40011000 	.word	0x40011000

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b38      	ldr	r3, [pc, #224]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a37      	ldr	r2, [pc, #220]	@ (8000948 <MX_GPIO_Init+0xfc>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b35      	ldr	r3, [pc, #212]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a30      	ldr	r2, [pc, #192]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <MX_GPIO_Init+0xfc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <MX_GPIO_Init+0xfc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a29      	ldr	r2, [pc, #164]	@ (8000948 <MX_GPIO_Init+0xfc>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b27      	ldr	r3, [pc, #156]	@ (8000948 <MX_GPIO_Init+0xfc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f640 0154 	movw	r1, #2132	@ 0x854
 80008bc:	4823      	ldr	r0, [pc, #140]	@ (800094c <MX_GPIO_Init+0x100>)
 80008be:	f000 fdd9 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SW_CE_GPIO_Port, SPI_SW_CE_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c8:	4821      	ldr	r0, [pc, #132]	@ (8000950 <MX_GPIO_Init+0x104>)
 80008ca:	f000 fdd3 	bl	8001474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin
                           Alarm_Signal_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin
 80008ce:	f248 032b 	movw	r3, #32811	@ 0x802b
 80008d2:	60fb      	str	r3, [r7, #12]
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	481a      	ldr	r0, [pc, #104]	@ (800094c <MX_GPIO_Init+0x100>)
 80008e4:	f000 fc2a 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin SPI_SW_CSN_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_CSN_Pin;
 80008e8:	f640 0354 	movw	r3, #2132	@ 0x854
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4812      	ldr	r0, [pc, #72]	@ (800094c <MX_GPIO_Init+0x100>)
 8000902:	f000 fc1b 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SW_CE_Pin */
  GPIO_InitStruct.Pin = SPI_SW_CE_Pin;
 8000906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_SW_CE_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_GPIO_Init+0x104>)
 8000920:	f000 fc0c 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
 8000924:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <MX_GPIO_Init+0x100>)
 800093a:	f000 fbff 	bl	800113c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_Handler+0x8>

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <HAL_MspInit+0x4c>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <HAL_MspInit+0x4c>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000974:	6453      	str	r3, [r2, #68]	@ 0x44
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <HAL_MspInit+0x4c>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_MspInit+0x4c>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	@ (8000a34 <HAL_I2C_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_I2C_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <HAL_I2C_MspInit+0x88>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_I2C_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ee:	23c0      	movs	r3, #192	@ 0xc0
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fe:	2304      	movs	r3, #4
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <HAL_I2C_MspInit+0x8c>)
 8000a0a:	f000 fb97 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_I2C_MspInit+0x88>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	@ 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40005400 	.word	0x40005400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <HAL_SPI_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_SPI_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a9a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aac:	2305      	movs	r3, #5
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_SPI_MspInit+0x8c>)
 8000ab8:	f000 fb40 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40003800 	.word	0x40003800
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <HAL_UART_MspInit+0x94>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d134      	bne.n	8000b5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <HAL_UART_MspInit+0x98>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <HAL_UART_MspInit+0x98>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b19      	ldr	r3, [pc, #100]	@ (8000b68 <HAL_UART_MspInit+0x98>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <HAL_UART_MspInit+0x98>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <HAL_UART_MspInit+0x98>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_UART_MspInit+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b3c:	2307      	movs	r3, #7
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <HAL_UART_MspInit+0x9c>)
 8000b48:	f000 faf8 	bl	800113c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2025      	movs	r0, #37	@ 0x25
 8000b52:	f000 fa2a 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b56:	2025      	movs	r0, #37	@ 0x25
 8000b58:	f000 fa43 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40011000 	.word	0x40011000
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc6:	f000 f8d1 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <USART1_IRQHandler+0x10>)
 8000bd6:	f001 fe91 	bl	80028fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000154 	.word	0x20000154

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f004 f8f0 	bl	8004df8 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20020000 	.word	0x20020000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	2000019c 	.word	0x2000019c
 8000c4c:	200004a8 	.word	0x200004a8

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 f8af 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc7b 	bl	80005a0 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000cb8:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 8000cbc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000cc0:	200004a8 	.word	0x200004a8

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f94f 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe30 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f967 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f92f 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000004 	.word	0x20000004
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	20000008 	.word	0x20000008

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	2000000c 	.word	0x2000000c
 8000d90:	200001a0 	.word	0x200001a0

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200001a0 	.word	0x200001a0

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	@ (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff29 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff3e 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff31 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001022:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff feb6 	bl	8000d94 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d008      	beq.n	8001048 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e052      	b.n	80010ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0216 	bic.w	r2, r2, #22
 8001056:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001066:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <HAL_DMA_Abort+0x62>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0208 	bic.w	r2, r2, #8
 8001086:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0201 	bic.w	r2, r2, #1
 8001096:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001098:	e013      	b.n	80010c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800109a:	f7ff fe7b 	bl	8000d94 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d90c      	bls.n	80010c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2220      	movs	r2, #32
 80010ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e015      	b.n	80010ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1e4      	bne.n	800109a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d4:	223f      	movs	r2, #63	@ 0x3f
 80010d6:	409a      	lsls	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2201      	movs	r2, #1
 80010e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d004      	beq.n	8001114 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e00c      	b.n	800112e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2205      	movs	r2, #5
 8001118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e159      	b.n	800140c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8148 	bne.w	8001406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a2 	beq.w	8001406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b57      	ldr	r3, [pc, #348]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	4a56      	ldr	r2, [pc, #344]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d2:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <HAL_GPIO_Init+0x2e8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_GPIO_Init+0x2ec>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a49      	ldr	r2, [pc, #292]	@ (800142c <HAL_GPIO_Init+0x2f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x202>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a48      	ldr	r2, [pc, #288]	@ (8001430 <HAL_GPIO_Init+0x2f4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1fe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a47      	ldr	r2, [pc, #284]	@ (8001434 <HAL_GPIO_Init+0x2f8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1fa>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a46      	ldr	r2, [pc, #280]	@ (8001438 <HAL_GPIO_Init+0x2fc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1f6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a45      	ldr	r2, [pc, #276]	@ (800143c <HAL_GPIO_Init+0x300>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1f2>
 800132a:	2304      	movs	r3, #4
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800132e:	2307      	movs	r3, #7
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x2ec>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a2f      	ldr	r2, [pc, #188]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b2d      	ldr	r3, [pc, #180]	@ (8001440 <HAL_GPIO_Init+0x304>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <HAL_GPIO_Init+0x304>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f aea2 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
 8001480:	4613      	mov	r3, r2
 8001482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001490:	e003      	b.n	800149a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	041a      	lsls	r2, r3, #16
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e12b      	b.n	8001712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d106      	bne.n	80014d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fa6e 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2224      	movs	r2, #36	@ 0x24
 80014d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0201 	bic.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800150a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800150c:	f001 f89a 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8001510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a81      	ldr	r2, [pc, #516]	@ (800171c <HAL_I2C_Init+0x274>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d807      	bhi.n	800152c <HAL_I2C_Init+0x84>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4a80      	ldr	r2, [pc, #512]	@ (8001720 <HAL_I2C_Init+0x278>)
 8001520:	4293      	cmp	r3, r2
 8001522:	bf94      	ite	ls
 8001524:	2301      	movls	r3, #1
 8001526:	2300      	movhi	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	e006      	b.n	800153a <HAL_I2C_Init+0x92>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a7d      	ldr	r2, [pc, #500]	@ (8001724 <HAL_I2C_Init+0x27c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	bf94      	ite	ls
 8001534:	2301      	movls	r3, #1
 8001536:	2300      	movhi	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0e7      	b.n	8001712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a78      	ldr	r2, [pc, #480]	@ (8001728 <HAL_I2C_Init+0x280>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a6a      	ldr	r2, [pc, #424]	@ (800171c <HAL_I2C_Init+0x274>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d802      	bhi.n	800157c <HAL_I2C_Init+0xd4>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3301      	adds	r3, #1
 800157a:	e009      	b.n	8001590 <HAL_I2C_Init+0xe8>
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	4a69      	ldr	r2, [pc, #420]	@ (800172c <HAL_I2C_Init+0x284>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	3301      	adds	r3, #1
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	430b      	orrs	r3, r1
 8001596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	495c      	ldr	r1, [pc, #368]	@ (800171c <HAL_I2C_Init+0x274>)
 80015ac:	428b      	cmp	r3, r1
 80015ae:	d819      	bhi.n	80015e4 <HAL_I2C_Init+0x13c>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1e59      	subs	r1, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80015be:	1c59      	adds	r1, r3, #1
 80015c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015c4:	400b      	ands	r3, r1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00a      	beq.n	80015e0 <HAL_I2C_Init+0x138>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1e59      	subs	r1, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015de:	e051      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e04f      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <HAL_I2C_Init+0x168>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	e012      	b.n	8001636 <HAL_I2C_Init+0x18e>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	0099      	lsls	r1, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	fbb0 f3f3 	udiv	r3, r0, r3
 8001626:	3301      	adds	r3, #1
 8001628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Init+0x196>
 800163a:	2301      	movs	r3, #1
 800163c:	e022      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10e      	bne.n	8001664 <HAL_I2C_Init+0x1bc>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1e58      	subs	r0, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6859      	ldr	r1, [r3, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	440b      	add	r3, r1
 8001654:	fbb0 f3f3 	udiv	r3, r0, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001662:	e00f      	b.n	8001684 <HAL_I2C_Init+0x1dc>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e58      	subs	r0, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	0099      	lsls	r1, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	6809      	ldr	r1, [r1, #0]
 8001688:	4313      	orrs	r3, r2
 800168a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6911      	ldr	r1, [r2, #16]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68d2      	ldr	r2, [r2, #12]
 80016be:	4311      	orrs	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	000186a0 	.word	0x000186a0
 8001720:	001e847f 	.word	0x001e847f
 8001724:	003d08ff 	.word	0x003d08ff
 8001728:	431bde83 	.word	0x431bde83
 800172c:	10624dd3 	.word	0x10624dd3

08001730 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	461a      	mov	r2, r3
 800173c:	460b      	mov	r3, r1
 800173e:	817b      	strh	r3, [r7, #10]
 8001740:	4613      	mov	r3, r2
 8001742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fb26 	bl	8000d94 <HAL_GetTick>
 8001748:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b20      	cmp	r3, #32
 8001754:	f040 80e0 	bne.w	8001918 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2319      	movs	r3, #25
 800175e:	2201      	movs	r2, #1
 8001760:	4970      	ldr	r1, [pc, #448]	@ (8001924 <HAL_I2C_Master_Transmit+0x1f4>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f964 	bl	8001a30 <I2C_WaitOnFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800176e:	2302      	movs	r3, #2
 8001770:	e0d3      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_I2C_Master_Transmit+0x50>
 800177c:	2302      	movs	r3, #2
 800177e:	e0cc      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b01      	cmp	r3, #1
 8001794:	d007      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0201 	orr.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2221      	movs	r2, #33	@ 0x21
 80017ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2210      	movs	r2, #16
 80017c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	893a      	ldrh	r2, [r7, #8]
 80017d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4a50      	ldr	r2, [pc, #320]	@ (8001928 <HAL_I2C_Master_Transmit+0x1f8>)
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017e8:	8979      	ldrh	r1, [r7, #10]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f89c 	bl	800192c <I2C_MasterRequestWrite>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e08d      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001814:	e066      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6a39      	ldr	r1, [r7, #32]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fa22 	bl	8001c64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	2b04      	cmp	r3, #4
 800182c:	d107      	bne.n	800183e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06b      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b04      	cmp	r3, #4
 800187e:	d11b      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x188>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	6a39      	ldr	r1, [r7, #32]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fa19 	bl	8001cf4 <I2C_WaitOnBTFFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00d      	beq.n	80018e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d107      	bne.n	80018e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e01a      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d194      	bne.n	8001816 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	00100002 	.word	0x00100002
 8001928:	ffff0000 	.word	0xffff0000

0800192c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	460b      	mov	r3, r1
 800193a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d006      	beq.n	8001956 <I2C_MasterRequestWrite+0x2a>
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d003      	beq.n	8001956 <I2C_MasterRequestWrite+0x2a>
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001954:	d108      	bne.n	8001968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e00b      	b.n	8001980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	2b12      	cmp	r3, #18
 800196e:	d107      	bne.n	8001980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800197e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f84f 	bl	8001a30 <I2C_WaitOnFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00d      	beq.n	80019b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019a6:	d103      	bne.n	80019b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e035      	b.n	8001a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019bc:	d108      	bne.n	80019d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019be:	897b      	ldrh	r3, [r7, #10]
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	e01b      	b.n	8001a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	11db      	asrs	r3, r3, #7
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0306 	and.w	r3, r3, #6
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f063 030f 	orn	r3, r3, #15
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	490e      	ldr	r1, [pc, #56]	@ (8001a28 <I2C_MasterRequestWrite+0xfc>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f898 	bl	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e010      	b.n	8001a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019fe:	897b      	ldrh	r3, [r7, #10]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4907      	ldr	r1, [pc, #28]	@ (8001a2c <I2C_MasterRequestWrite+0x100>)
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 f888 	bl	8001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	00010008 	.word	0x00010008
 8001a2c:	00010002 	.word	0x00010002

08001a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a40:	e048      	b.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d044      	beq.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4a:	f7ff f9a3 	bl	8000d94 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d302      	bcc.n	8001a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d139      	bne.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10d      	bne.n	8001a86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	43da      	mvns	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	4013      	ands	r3, r2
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	e00c      	b.n	8001aa0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4013      	ands	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d116      	bne.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f043 0220 	orr.w	r2, r3, #32
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e023      	b.n	8001b1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	0c1b      	lsrs	r3, r3, #16
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10d      	bne.n	8001afa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	e00c      	b.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	43da      	mvns	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	4013      	ands	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d093      	beq.n	8001a42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b32:	e071      	b.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b42:	d123      	bne.n	8001b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e067      	b.n	8001c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d041      	beq.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b94:	f7ff f8fe 	bl	8000d94 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d302      	bcc.n	8001baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d136      	bne.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10c      	bne.n	8001bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bf14      	ite	ne
 8001bc6:	2301      	movne	r3, #1
 8001bc8:	2300      	moveq	r3, #0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e00b      	b.n	8001be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d016      	beq.n	8001c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f043 0220 	orr.w	r2, r3, #32
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e021      	b.n	8001c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	0c1b      	lsrs	r3, r3, #16
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10c      	bne.n	8001c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e00b      	b.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4013      	ands	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f af6d 	bne.w	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c70:	e034      	b.n	8001cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f886 	bl	8001d84 <I2C_IsAcknowledgeFailed>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e034      	b.n	8001cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d028      	beq.n	8001cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7ff f883 	bl	8000d94 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11d      	bne.n	8001cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001caa:	2b80      	cmp	r3, #128	@ 0x80
 8001cac:	d016      	beq.n	8001cdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	f043 0220 	orr.w	r2, r3, #32
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e007      	b.n	8001cec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	2b80      	cmp	r3, #128	@ 0x80
 8001ce8:	d1c3      	bne.n	8001c72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d00:	e034      	b.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f83e 	bl	8001d84 <I2C_IsAcknowledgeFailed>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e034      	b.n	8001d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d028      	beq.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1a:	f7ff f83b 	bl	8000d94 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d302      	bcc.n	8001d30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d11d      	bne.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d016      	beq.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e007      	b.n	8001d7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d1c3      	bne.n	8001d02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d9a:	d11b      	bne.n	8001dd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001da4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f043 0204 	orr.w	r2, r3, #4
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e267      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d075      	beq.n	8001eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e02:	4b88      	ldr	r3, [pc, #544]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d00c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b85      	ldr	r3, [pc, #532]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d112      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4b82      	ldr	r3, [pc, #520]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	4b7e      	ldr	r3, [pc, #504]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d05b      	beq.n	8001eec <HAL_RCC_OscConfig+0x108>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d157      	bne.n	8001eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e242      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_OscConfig+0x74>
 8001e4a:	4b76      	ldr	r3, [pc, #472]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a75      	ldr	r2, [pc, #468]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x98>
 8001e62:	4b70      	ldr	r3, [pc, #448]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6f      	ldr	r2, [pc, #444]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6c      	ldr	r2, [pc, #432]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xb0>
 8001e7c:	4b69      	ldr	r3, [pc, #420]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a68      	ldr	r2, [pc, #416]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b66      	ldr	r3, [pc, #408]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a65      	ldr	r2, [pc, #404]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe ff7a 	bl	8000d94 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7fe ff76 	bl	8000d94 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e207      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xc0>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe ff66 	bl	8000d94 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe ff62 	bl	8000d94 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e1f3      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	4b51      	ldr	r3, [pc, #324]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0xe8>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d063      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001efa:	4b4a      	ldr	r3, [pc, #296]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00b      	beq.n	8001f1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b44      	ldr	r3, [pc, #272]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1e:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1c7      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4937      	ldr	r1, [pc, #220]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	e03a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f54:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe ff1b 	bl	8000d94 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f62:	f7fe ff17 	bl	8000d94 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1a8      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4925      	ldr	r1, [pc, #148]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	600b      	str	r3, [r1, #0]
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <HAL_RCC_OscConfig+0x244>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fefa 	bl	8000d94 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7fe fef6 	bl	8000d94 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e187      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d036      	beq.n	800203c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b15      	ldr	r3, [pc, #84]	@ (800202c <HAL_RCC_OscConfig+0x248>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7fe feda 	bl	8000d94 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fed6 	bl	8000d94 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e167      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x200>
 8002002:	e01b      	b.n	800203c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <HAL_RCC_OscConfig+0x248>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200a:	f7fe fec3 	bl	8000d94 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	e00e      	b.n	8002030 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7fe febf 	bl	8000d94 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d907      	bls.n	8002030 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e150      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002024:	40023800 	.word	0x40023800
 8002028:	42470000 	.word	0x42470000
 800202c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ea      	bne.n	8002012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 8097 	beq.w	8002178 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b81      	ldr	r3, [pc, #516]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b7d      	ldr	r3, [pc, #500]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	4a7c      	ldr	r2, [pc, #496]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	@ 0x40
 800206a:	4b7a      	ldr	r3, [pc, #488]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b77      	ldr	r3, [pc, #476]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b74      	ldr	r3, [pc, #464]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a73      	ldr	r2, [pc, #460]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe fe7f 	bl	8000d94 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7fe fe7b 	bl	8000d94 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e10c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <HAL_RCC_OscConfig+0x474>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x2ea>
 80020c0:	4b64      	ldr	r3, [pc, #400]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c4:	4a63      	ldr	r2, [pc, #396]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x30c>
 80020d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020da:	4a5e      	ldr	r2, [pc, #376]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x324>
 80020f0:	4b58      	ldr	r3, [pc, #352]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f4:	4a57      	ldr	r2, [pc, #348]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fc:	4b55      	ldr	r3, [pc, #340]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002100:	4a54      	ldr	r2, [pc, #336]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 0304 	bic.w	r3, r3, #4
 8002106:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d015      	beq.n	800213c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7fe fe40 	bl	8000d94 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fe3c 	bl	8000d94 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0cb      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0ee      	beq.n	8002118 <HAL_RCC_OscConfig+0x334>
 800213a:	e014      	b.n	8002166 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe fe2a 	bl	8000d94 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	e00a      	b.n	800215a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe fe26 	bl	8000d94 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0b5      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	4b3e      	ldr	r3, [pc, #248]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1ee      	bne.n	8002144 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	4a38      	ldr	r2, [pc, #224]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80a1 	beq.w	80022c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002182:	4b34      	ldr	r3, [pc, #208]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b08      	cmp	r3, #8
 800218c:	d05c      	beq.n	8002248 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d141      	bne.n	800221a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002196:	4b31      	ldr	r3, [pc, #196]	@ (800225c <HAL_RCC_OscConfig+0x478>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe fdfa 	bl	8000d94 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fdf6 	bl	8000d94 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e087      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	4b27      	ldr	r3, [pc, #156]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	061b      	lsls	r3, r3, #24
 80021e6:	491b      	ldr	r1, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_RCC_OscConfig+0x478>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe fdcf 	bl	8000d94 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe fdcb 	bl	8000d94 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e05c      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x416>
 8002218:	e054      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b10      	ldr	r3, [pc, #64]	@ (800225c <HAL_RCC_OscConfig+0x478>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe fdb8 	bl	8000d94 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe fdb4 	bl	8000d94 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e045      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_RCC_OscConfig+0x470>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x444>
 8002246:	e03d      	b.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e038      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
 8002254:	40023800 	.word	0x40023800
 8002258:	40007000 	.word	0x40007000
 800225c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002260:	4b1b      	ldr	r3, [pc, #108]	@ (80022d0 <HAL_RCC_OscConfig+0x4ec>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d028      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d121      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d11a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002290:	4013      	ands	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002296:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002298:	4293      	cmp	r3, r2
 800229a:	d111      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	3b01      	subs	r3, #1
 80022aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800

080022d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0cc      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b68      	ldr	r3, [pc, #416]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d90c      	bls.n	8002310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b65      	ldr	r3, [pc, #404]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002332:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a52      	ldr	r2, [pc, #328]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800234a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d119      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d003      	beq.n	8002392 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b3f      	ldr	r3, [pc, #252]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e06f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e067      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b37      	ldr	r3, [pc, #220]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4934      	ldr	r1, [pc, #208]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fce6 	bl	8000d94 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fce2 	bl	8000d94 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e04f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20c      	bcs.n	800241c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b22      	ldr	r3, [pc, #136]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_ClockConfig+0x1b8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc46 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00
 8002490:	40023800 	.word	0x40023800
 8002494:	08005834 	.word	0x08005834
 8002498:	20000004 	.word	0x20000004
 800249c:	20000008 	.word	0x20000008

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b090      	sub	sp, #64	@ 0x40
 80024a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d00d      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x40>
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	f200 80a1 	bhi.w	800260c <HAL_RCC_GetSysClockFreq+0x16c>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0x3a>
 80024d2:	e09b      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b53      	ldr	r3, [pc, #332]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x184>)
 80024d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024d8:	e09b      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024da:	4b53      	ldr	r3, [pc, #332]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x188>)
 80024dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80024de:	e098      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d028      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	2200      	movs	r2, #0
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	627a      	str	r2, [r7, #36]	@ 0x24
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002508:	2100      	movs	r1, #0
 800250a:	4b47      	ldr	r3, [pc, #284]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x188>)
 800250c:	fb03 f201 	mul.w	r2, r3, r1
 8002510:	2300      	movs	r3, #0
 8002512:	fb00 f303 	mul.w	r3, r0, r3
 8002516:	4413      	add	r3, r2
 8002518:	4a43      	ldr	r2, [pc, #268]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x188>)
 800251a:	fba0 1202 	umull	r1, r2, r0, r2
 800251e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002520:	460a      	mov	r2, r1
 8002522:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002526:	4413      	add	r3, r2
 8002528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252c:	2200      	movs	r2, #0
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	61fa      	str	r2, [r7, #28]
 8002532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002536:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800253a:	f7fd feb9 	bl	80002b0 <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4613      	mov	r3, r2
 8002544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002546:	e053      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002548:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	2200      	movs	r2, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	617a      	str	r2, [r7, #20]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800255a:	f04f 0b00 	mov.w	fp, #0
 800255e:	4652      	mov	r2, sl
 8002560:	465b      	mov	r3, fp
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002570:	0150      	lsls	r0, r2, #5
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	ebb2 080a 	subs.w	r8, r2, sl
 800257a:	eb63 090b 	sbc.w	r9, r3, fp
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800258a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800258e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002592:	ebb2 0408 	subs.w	r4, r2, r8
 8002596:	eb63 0509 	sbc.w	r5, r3, r9
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	00eb      	lsls	r3, r5, #3
 80025a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a8:	00e2      	lsls	r2, r4, #3
 80025aa:	4614      	mov	r4, r2
 80025ac:	461d      	mov	r5, r3
 80025ae:	eb14 030a 	adds.w	r3, r4, sl
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	eb45 030b 	adc.w	r3, r5, fp
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c6:	4629      	mov	r1, r5
 80025c8:	028b      	lsls	r3, r1, #10
 80025ca:	4621      	mov	r1, r4
 80025cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d0:	4621      	mov	r1, r4
 80025d2:	028a      	lsls	r2, r1, #10
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	2200      	movs	r2, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	60fa      	str	r2, [r7, #12]
 80025e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025e4:	f7fd fe64 	bl	80002b0 <__aeabi_uldivmod>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4613      	mov	r3, r2
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002600:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800260a:	e002      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x184>)
 800260e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002614:	4618      	mov	r0, r3
 8002616:	3740      	adds	r7, #64	@ 0x40
 8002618:	46bd      	mov	sp, r7
 800261a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	00f42400 	.word	0x00f42400
 8002628:	017d7840 	.word	0x017d7840

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	@ (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a9b      	lsrs	r3, r3, #10
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4903      	ldr	r1, [pc, #12]	@ (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	08005844 	.word	0x08005844

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002670:	f7ff ffdc 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4903      	ldr	r1, [pc, #12]	@ (8002690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	08005844 	.word	0x08005844

08002694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07b      	b.n	800279e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d108      	bne.n	80026c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026b6:	d009      	beq.n	80026cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
 80026be:	e005      	b.n	80026cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f9aa 	bl	8000a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002750:	ea42 0103 	orr.w	r1, r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	f003 0104 	and.w	r1, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	f003 0210 	and.w	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e042      	b.n	800283e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d106      	bne.n	80027d2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7fe f97f 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2224      	movs	r2, #36	@ 0x24
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fd1a 	bl	8003224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800280e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800281e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	4613      	mov	r3, r2
 8002852:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	d121      	bne.n	80028a4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_UART_Transmit_IT+0x26>
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e01a      	b.n	80028a6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2221      	movs	r2, #33	@ 0x21
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800289e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	4613      	mov	r3, r2
 80028be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d112      	bne.n	80028f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_UART_Receive_IT+0x26>
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e00b      	b.n	80028f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	461a      	mov	r2, r3
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fac7 	bl	8002e7c <UART_Start_Receive_IT>
 80028ee:	4603      	mov	r3, r0
 80028f0:	e000      	b.n	80028f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b0ba      	sub	sp, #232	@ 0xe8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800292e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800293a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_UART_IRQHandler+0x66>
 800294e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fba4 	bl	80030a8 <UART_Receive_IT>
      return;
 8002960:	e273      	b.n	8002e4a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80de 	beq.w	8002b28 <HAL_UART_IRQHandler+0x22c>
 800296c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d106      	bne.n	8002986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800297c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80d1 	beq.w	8002b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <HAL_UART_IRQHandler+0xae>
 8002992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_UART_IRQHandler+0xd2>
 80029b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f043 0202 	orr.w	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <HAL_UART_IRQHandler+0xf6>
 80029da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f043 0204 	orr.w	r2, r3, #4
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d011      	beq.n	8002a22 <HAL_UART_IRQHandler+0x126>
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f043 0208 	orr.w	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 820a 	beq.w	8002e40 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_UART_IRQHandler+0x14e>
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 fb2f 	bl	80030a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a54:	2b40      	cmp	r3, #64	@ 0x40
 8002a56:	bf0c      	ite	eq
 8002a58:	2301      	moveq	r3, #1
 8002a5a:	2300      	movne	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <HAL_UART_IRQHandler+0x17a>
 8002a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d04f      	beq.n	8002b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fa3a 	bl	8002ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a86:	2b40      	cmp	r3, #64	@ 0x40
 8002a88:	d141      	bne.n	8002b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3314      	adds	r3, #20
 8002a90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002aba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002ac6:	e841 2300 	strex	r3, r2, [r1]
 8002aca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1d9      	bne.n	8002a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d013      	beq.n	8002b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	4a8a      	ldr	r2, [pc, #552]	@ (8002d0c <HAL_UART_IRQHandler+0x410>)
 8002ae4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fb03 	bl	80010f6 <HAL_DMA_Abort_IT>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b00:	4610      	mov	r0, r2
 8002b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b04:	e00e      	b.n	8002b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f9a2 	bl	8002e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0c:	e00a      	b.n	8002b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f99e 	bl	8002e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	e006      	b.n	8002b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f99a 	bl	8002e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b22:	e18d      	b.n	8002e40 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	bf00      	nop
    return;
 8002b26:	e18b      	b.n	8002e40 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	f040 8167 	bne.w	8002e00 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8160 	beq.w	8002e00 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8159 	beq.w	8002e00 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6e:	2b40      	cmp	r3, #64	@ 0x40
 8002b70:	f040 80ce 	bne.w	8002d10 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a9 	beq.w	8002cdc <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b92:	429a      	cmp	r2, r3
 8002b94:	f080 80a2 	bcs.w	8002cdc <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	f000 8088 	beq.w	8002cbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bbc:	e853 3f00 	ldrex	r3, [r3]
 8002bc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002bda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1d9      	bne.n	8002bae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3314      	adds	r3, #20
 8002c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c2a:	e841 2300 	strex	r3, r2, [r1]
 8002c2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e1      	bne.n	8002bfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c40:	e853 3f00 	ldrex	r3, [r3]
 8002c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3314      	adds	r3, #20
 8002c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1e3      	bne.n	8002c36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c8e:	f023 0310 	bic.w	r3, r3, #16
 8002c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ca0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ca2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ca6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e3      	bne.n	8002c7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe f9ac 	bl	8001016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f8c5 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002cda:	e0b3      	b.n	8002e44 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ce0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f040 80ad 	bne.w	8002e44 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cf4:	f040 80a6 	bne.w	8002e44 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8ad 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
      return;
 8002d0a:	e09b      	b.n	8002e44 <HAL_UART_IRQHandler+0x548>
 8002d0c:	08002fb7 	.word	0x08002fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 808e 	beq.w	8002e48 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8089 	beq.w	8002e48 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e3      	bne.n	8002d36 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3314      	adds	r3, #20
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	e853 3f00 	ldrex	r3, [r3]
 8002d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d92:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e3      	bne.n	8002d6e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	e853 3f00 	ldrex	r3, [r3]
 8002dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	330c      	adds	r3, #12
 8002dd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002dd8:	61fa      	str	r2, [r7, #28]
 8002dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	69b9      	ldr	r1, [r7, #24]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	617b      	str	r3, [r7, #20]
   return(result);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e3      	bne.n	8002db4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f833 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dfe:	e023      	b.n	8002e48 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <HAL_UART_IRQHandler+0x524>
 8002e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8dd 	bl	8002fd8 <UART_Transmit_IT>
    return;
 8002e1e:	e014      	b.n	8002e4a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_UART_IRQHandler+0x54e>
 8002e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f91d 	bl	8003078 <UART_EndTransmit_IT>
    return;
 8002e3e:	e004      	b.n	8002e4a <HAL_UART_IRQHandler+0x54e>
    return;
 8002e40:	bf00      	nop
 8002e42:	e002      	b.n	8002e4a <HAL_UART_IRQHandler+0x54e>
      return;
 8002e44:	bf00      	nop
 8002e46:	e000      	b.n	8002e4a <HAL_UART_IRQHandler+0x54e>
      return;
 8002e48:	bf00      	nop
  }
}
 8002e4a:	37e8      	adds	r7, #232	@ 0xe8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2222      	movs	r2, #34	@ 0x22
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ec0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0220 	orr.w	r2, r2, #32
 8002ee0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b095      	sub	sp, #84	@ 0x54
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	330c      	adds	r3, #12
 8002efe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f18:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f20:	e841 2300 	strex	r3, r2, [r1]
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e5      	bne.n	8002ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3314      	adds	r3, #20
 8002f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	e853 3f00 	ldrex	r3, [r3]
 8002f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e5      	bne.n	8002f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d119      	bne.n	8002f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f023 0310 	bic.w	r3, r3, #16
 8002f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	330c      	adds	r3, #12
 8002f86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f88:	61ba      	str	r2, [r7, #24]
 8002f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6979      	ldr	r1, [r7, #20]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	613b      	str	r3, [r7, #16]
   return(result);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002faa:	bf00      	nop
 8002fac:	3754      	adds	r7, #84	@ 0x54
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff ff40 	bl	8002e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b21      	cmp	r3, #33	@ 0x21
 8002fea:	d13e      	bne.n	800306a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff4:	d114      	bne.n	8003020 <UART_Transmit_IT+0x48>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d110      	bne.n	8003020 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003012:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	1c9a      	adds	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	621a      	str	r2, [r3, #32]
 800301e:	e008      	b.n	8003032 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	1c59      	adds	r1, r3, #1
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6211      	str	r1, [r2, #32]
 800302a:	781a      	ldrb	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	4619      	mov	r1, r3
 8003040:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003054:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003064:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
  }
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800308e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fee5 	bl	8003e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	@ 0x30
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b22      	cmp	r3, #34	@ 0x22
 80030c2:	f040 80aa 	bne.w	800321a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ce:	d115      	bne.n	80030fc <UART_Receive_IT+0x54>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80030fa:	e024      	b.n	8003146 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310a:	d007      	beq.n	800311c <UART_Receive_IT+0x74>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <UART_Receive_IT+0x82>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b2da      	uxtb	r2, r3
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	e008      	b.n	800313c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003136:	b2da      	uxtb	r2, r3
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4619      	mov	r1, r3
 8003154:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003156:	2b00      	cmp	r3, #0
 8003158:	d15d      	bne.n	8003216 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0220 	bic.w	r2, r2, #32
 8003168:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003178:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0201 	bic.w	r2, r2, #1
 8003188:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	2b01      	cmp	r3, #1
 800319e:	d135      	bne.n	800320c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	613b      	str	r3, [r7, #16]
   return(result);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f023 0310 	bic.w	r3, r3, #16
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c6:	623a      	str	r2, [r7, #32]
 80031c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	69f9      	ldr	r1, [r7, #28]
 80031cc:	6a3a      	ldr	r2, [r7, #32]
 80031ce:	e841 2300 	strex	r3, r2, [r1]
 80031d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e5      	bne.n	80031a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d10a      	bne.n	80031fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fe2d 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
 800320a:	e002      	b.n	8003212 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fe59 	bl	8003ec4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	e002      	b.n	800321c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e000      	b.n	800321c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3730      	adds	r7, #48	@ 0x30
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003228:	b0c0      	sub	sp, #256	@ 0x100
 800322a:	af00      	add	r7, sp, #0
 800322c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003240:	68d9      	ldr	r1, [r3, #12]
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	ea40 0301 	orr.w	r3, r0, r1
 800324c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	431a      	orrs	r2, r3
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	431a      	orrs	r2, r3
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800327c:	f021 010c 	bic.w	r1, r1, #12
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800328a:	430b      	orrs	r3, r1
 800328c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800329a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329e:	6999      	ldr	r1, [r3, #24]
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	ea40 0301 	orr.w	r3, r0, r1
 80032aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b8f      	ldr	r3, [pc, #572]	@ (80034f0 <UART_SetConfig+0x2cc>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d005      	beq.n	80032c4 <UART_SetConfig+0xa0>
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	4b8d      	ldr	r3, [pc, #564]	@ (80034f4 <UART_SetConfig+0x2d0>)
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d104      	bne.n	80032ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c4:	f7ff f9d2 	bl	800266c <HAL_RCC_GetPCLK2Freq>
 80032c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032cc:	e003      	b.n	80032d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ce:	f7ff f9b9 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 80032d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e0:	f040 810c 	bne.w	80034fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	1891      	adds	r1, r2, r2
 80032fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032fe:	415b      	adcs	r3, r3
 8003300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003306:	4621      	mov	r1, r4
 8003308:	eb12 0801 	adds.w	r8, r2, r1
 800330c:	4629      	mov	r1, r5
 800330e:	eb43 0901 	adc.w	r9, r3, r1
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800331e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003326:	4690      	mov	r8, r2
 8003328:	4699      	mov	r9, r3
 800332a:	4623      	mov	r3, r4
 800332c:	eb18 0303 	adds.w	r3, r8, r3
 8003330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003334:	462b      	mov	r3, r5
 8003336:	eb49 0303 	adc.w	r3, r9, r3
 800333a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800334a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800334e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003352:	460b      	mov	r3, r1
 8003354:	18db      	adds	r3, r3, r3
 8003356:	653b      	str	r3, [r7, #80]	@ 0x50
 8003358:	4613      	mov	r3, r2
 800335a:	eb42 0303 	adc.w	r3, r2, r3
 800335e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003368:	f7fc ffa2 	bl	80002b0 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4b61      	ldr	r3, [pc, #388]	@ (80034f8 <UART_SetConfig+0x2d4>)
 8003372:	fba3 2302 	umull	r2, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	011c      	lsls	r4, r3, #4
 800337a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003384:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800338c:	4642      	mov	r2, r8
 800338e:	464b      	mov	r3, r9
 8003390:	1891      	adds	r1, r2, r2
 8003392:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003394:	415b      	adcs	r3, r3
 8003396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800339c:	4641      	mov	r1, r8
 800339e:	eb12 0a01 	adds.w	sl, r2, r1
 80033a2:	4649      	mov	r1, r9
 80033a4:	eb43 0b01 	adc.w	fp, r3, r1
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033bc:	4692      	mov	sl, r2
 80033be:	469b      	mov	fp, r3
 80033c0:	4643      	mov	r3, r8
 80033c2:	eb1a 0303 	adds.w	r3, sl, r3
 80033c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033ca:	464b      	mov	r3, r9
 80033cc:	eb4b 0303 	adc.w	r3, fp, r3
 80033d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033e8:	460b      	mov	r3, r1
 80033ea:	18db      	adds	r3, r3, r3
 80033ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80033ee:	4613      	mov	r3, r2
 80033f0:	eb42 0303 	adc.w	r3, r2, r3
 80033f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033fe:	f7fc ff57 	bl	80002b0 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4611      	mov	r1, r2
 8003408:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <UART_SetConfig+0x2d4>)
 800340a:	fba3 2301 	umull	r2, r3, r3, r1
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2264      	movs	r2, #100	@ 0x64
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	1acb      	subs	r3, r1, r3
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800341e:	4b36      	ldr	r3, [pc, #216]	@ (80034f8 <UART_SetConfig+0x2d4>)
 8003420:	fba3 2302 	umull	r2, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800342c:	441c      	add	r4, r3
 800342e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003432:	2200      	movs	r2, #0
 8003434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003438:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800343c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003440:	4642      	mov	r2, r8
 8003442:	464b      	mov	r3, r9
 8003444:	1891      	adds	r1, r2, r2
 8003446:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003448:	415b      	adcs	r3, r3
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800344c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003450:	4641      	mov	r1, r8
 8003452:	1851      	adds	r1, r2, r1
 8003454:	6339      	str	r1, [r7, #48]	@ 0x30
 8003456:	4649      	mov	r1, r9
 8003458:	414b      	adcs	r3, r1
 800345a:	637b      	str	r3, [r7, #52]	@ 0x34
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003468:	4659      	mov	r1, fp
 800346a:	00cb      	lsls	r3, r1, #3
 800346c:	4651      	mov	r1, sl
 800346e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003472:	4651      	mov	r1, sl
 8003474:	00ca      	lsls	r2, r1, #3
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	4603      	mov	r3, r0
 800347c:	4642      	mov	r2, r8
 800347e:	189b      	adds	r3, r3, r2
 8003480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003484:	464b      	mov	r3, r9
 8003486:	460a      	mov	r2, r1
 8003488:	eb42 0303 	adc.w	r3, r2, r3
 800348c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800349c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034a4:	460b      	mov	r3, r1
 80034a6:	18db      	adds	r3, r3, r3
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034aa:	4613      	mov	r3, r2
 80034ac:	eb42 0303 	adc.w	r3, r2, r3
 80034b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034ba:	f7fc fef9 	bl	80002b0 <__aeabi_uldivmod>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <UART_SetConfig+0x2d4>)
 80034c4:	fba3 1302 	umull	r1, r3, r3, r2
 80034c8:	095b      	lsrs	r3, r3, #5
 80034ca:	2164      	movs	r1, #100	@ 0x64
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	3332      	adds	r3, #50	@ 0x32
 80034d6:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <UART_SetConfig+0x2d4>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	f003 0207 	and.w	r2, r3, #7
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4422      	add	r2, r4
 80034ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034ec:	e106      	b.n	80036fc <UART_SetConfig+0x4d8>
 80034ee:	bf00      	nop
 80034f0:	40011000 	.word	0x40011000
 80034f4:	40011400 	.word	0x40011400
 80034f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003500:	2200      	movs	r2, #0
 8003502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003506:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800350a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800350e:	4642      	mov	r2, r8
 8003510:	464b      	mov	r3, r9
 8003512:	1891      	adds	r1, r2, r2
 8003514:	6239      	str	r1, [r7, #32]
 8003516:	415b      	adcs	r3, r3
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
 800351a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800351e:	4641      	mov	r1, r8
 8003520:	1854      	adds	r4, r2, r1
 8003522:	4649      	mov	r1, r9
 8003524:	eb43 0501 	adc.w	r5, r3, r1
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	00eb      	lsls	r3, r5, #3
 8003532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003536:	00e2      	lsls	r2, r4, #3
 8003538:	4614      	mov	r4, r2
 800353a:	461d      	mov	r5, r3
 800353c:	4643      	mov	r3, r8
 800353e:	18e3      	adds	r3, r4, r3
 8003540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003544:	464b      	mov	r3, r9
 8003546:	eb45 0303 	adc.w	r3, r5, r3
 800354a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800355a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800356a:	4629      	mov	r1, r5
 800356c:	008b      	lsls	r3, r1, #2
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003574:	4621      	mov	r1, r4
 8003576:	008a      	lsls	r2, r1, #2
 8003578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800357c:	f7fc fe98 	bl	80002b0 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4b60      	ldr	r3, [pc, #384]	@ (8003708 <UART_SetConfig+0x4e4>)
 8003586:	fba3 2302 	umull	r2, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	011c      	lsls	r4, r3, #4
 800358e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003598:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800359c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	1891      	adds	r1, r2, r2
 80035a6:	61b9      	str	r1, [r7, #24]
 80035a8:	415b      	adcs	r3, r3
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b0:	4641      	mov	r1, r8
 80035b2:	1851      	adds	r1, r2, r1
 80035b4:	6139      	str	r1, [r7, #16]
 80035b6:	4649      	mov	r1, r9
 80035b8:	414b      	adcs	r3, r1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035c8:	4659      	mov	r1, fp
 80035ca:	00cb      	lsls	r3, r1, #3
 80035cc:	4651      	mov	r1, sl
 80035ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d2:	4651      	mov	r1, sl
 80035d4:	00ca      	lsls	r2, r1, #3
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	4642      	mov	r2, r8
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035e4:	464b      	mov	r3, r9
 80035e6:	460a      	mov	r2, r1
 80035e8:	eb42 0303 	adc.w	r3, r2, r3
 80035ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003608:	4649      	mov	r1, r9
 800360a:	008b      	lsls	r3, r1, #2
 800360c:	4641      	mov	r1, r8
 800360e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003612:	4641      	mov	r1, r8
 8003614:	008a      	lsls	r2, r1, #2
 8003616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800361a:	f7fc fe49 	bl	80002b0 <__aeabi_uldivmod>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4611      	mov	r1, r2
 8003624:	4b38      	ldr	r3, [pc, #224]	@ (8003708 <UART_SetConfig+0x4e4>)
 8003626:	fba3 2301 	umull	r2, r3, r3, r1
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2264      	movs	r2, #100	@ 0x64
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	1acb      	subs	r3, r1, r3
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	3332      	adds	r3, #50	@ 0x32
 8003638:	4a33      	ldr	r2, [pc, #204]	@ (8003708 <UART_SetConfig+0x4e4>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003644:	441c      	add	r4, r3
 8003646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800364a:	2200      	movs	r2, #0
 800364c:	673b      	str	r3, [r7, #112]	@ 0x70
 800364e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003650:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	1891      	adds	r1, r2, r2
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	415b      	adcs	r3, r3
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003664:	4641      	mov	r1, r8
 8003666:	1851      	adds	r1, r2, r1
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	4649      	mov	r1, r9
 800366c:	414b      	adcs	r3, r1
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800367c:	4659      	mov	r1, fp
 800367e:	00cb      	lsls	r3, r1, #3
 8003680:	4651      	mov	r1, sl
 8003682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003686:	4651      	mov	r1, sl
 8003688:	00ca      	lsls	r2, r1, #3
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	4603      	mov	r3, r0
 8003690:	4642      	mov	r2, r8
 8003692:	189b      	adds	r3, r3, r2
 8003694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003696:	464b      	mov	r3, r9
 8003698:	460a      	mov	r2, r1
 800369a:	eb42 0303 	adc.w	r3, r2, r3
 800369e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80036aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036b8:	4649      	mov	r1, r9
 80036ba:	008b      	lsls	r3, r1, #2
 80036bc:	4641      	mov	r1, r8
 80036be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c2:	4641      	mov	r1, r8
 80036c4:	008a      	lsls	r2, r1, #2
 80036c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036ca:	f7fc fdf1 	bl	80002b0 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003708 <UART_SetConfig+0x4e4>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	@ 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	3332      	adds	r3, #50	@ 0x32
 80036e6:	4a08      	ldr	r2, [pc, #32]	@ (8003708 <UART_SetConfig+0x4e4>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	f003 020f 	and.w	r2, r3, #15
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4422      	add	r2, r4
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003702:	46bd      	mov	sp, r7
 8003704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003708:	51eb851f 	.word	0x51eb851f

0800370c <flash_write_erase_sector7>:

#include "flash_interface.h"



void flash_write_erase_sector7(){
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY) ;
 8003710:	bf00      	nop
 8003712:	4b23      	ldr	r3, [pc, #140]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <flash_write_erase_sector7+0x6>
  __ASM volatile ("cpsid i" : : : "memory");
 800371e:	b672      	cpsid	i
}
 8003720:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 8003722:	4b1f      	ldr	r3, [pc, #124]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003724:	4a1f      	ldr	r2, [pc, #124]	@ (80037a4 <flash_write_erase_sector7+0x98>)
 8003726:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8003728:	4b1d      	ldr	r3, [pc, #116]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 800372a:	4a1f      	ldr	r2, [pc, #124]	@ (80037a8 <flash_write_erase_sector7+0x9c>)
 800372c:	605a      	str	r2, [r3, #4]

	//SECTOR 7 ERASE
	FLASH->CR |= FLASH_CR_SER;
 800372e:	4b1c      	ldr	r3, [pc, #112]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	4a1b      	ldr	r2, [pc, #108]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2;
 800373a:	4b19      	ldr	r3, [pc, #100]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	4a18      	ldr	r2, [pc, #96]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003740:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8003744:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;
 8003746:	4b16      	ldr	r3, [pc, #88]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	4a15      	ldr	r2, [pc, #84]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003750:	6113      	str	r3, [r2, #16]

	while(FLASH->SR & FLASH_SR_BSY) ;
 8003752:	bf00      	nop
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f9      	bne.n	8003754 <flash_write_erase_sector7+0x48>
	//RETURN TO INIT STATE
	FLASH->CR &= ~FLASH_CR_STRT;
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	4a0e      	ldr	r2, [pc, #56]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800376a:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2);
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	4a0b      	ldr	r2, [pc, #44]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003772:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003776:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_SER;
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	4a08      	ldr	r2, [pc, #32]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 800377e:	f023 0302 	bic.w	r3, r3, #2
 8003782:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4a05      	ldr	r2, [pc, #20]	@ (80037a0 <flash_write_erase_sector7+0x94>)
 800378a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800378e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8003790:	b662      	cpsie	i
}
 8003792:	bf00      	nop

	__enable_irq();
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40023c00 	.word	0x40023c00
 80037a4:	45670123 	.word	0x45670123
 80037a8:	cdef89ab 	.word	0xcdef89ab

080037ac <flash_write_multiple_word>:



void flash_write_multiple_word(uint32_t addr, uint32_t* data, size_t num){
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
	//CHECK IF BUSY
	while(FLASH->SR & FLASH_SR_BSY) ;
 80037b8:	bf00      	nop
 80037ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f9      	bne.n	80037ba <flash_write_multiple_word+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 80037c6:	b672      	cpsid	i
}
 80037c8:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 80037ca:	4b26      	ldr	r3, [pc, #152]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037cc:	4a26      	ldr	r2, [pc, #152]	@ (8003868 <flash_write_multiple_word+0xbc>)
 80037ce:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 80037d0:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037d2:	4a26      	ldr	r2, [pc, #152]	@ (800386c <flash_write_multiple_word+0xc0>)
 80037d4:	605a      	str	r2, [r3, #4]

	//PICK DOUBLE WORD WRITING
	FLASH->CR |= FLASH_CR_PSIZE_1;
 80037d6:	4b23      	ldr	r3, [pc, #140]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4a22      	ldr	r2, [pc, #136]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037e0:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_0;
 80037e2:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037ec:	6113      	str	r3, [r2, #16]

	//ENABLE PROGRAMMING MODE
	FLASH->CR |= FLASH_CR_PG;
 80037ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <flash_write_multiple_word+0xb8>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6113      	str	r3, [r2, #16]

	for(size_t i = 0; i < num; ++i){
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	e00c      	b.n	800381a <flash_write_multiple_word+0x6e>
		*((uint32_t *)addr + i) = *(data + i);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	4413      	add	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	0091      	lsls	r1, r2, #2
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	440a      	add	r2, r1
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < num; ++i){
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3301      	adds	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d3ee      	bcc.n	8003800 <flash_write_multiple_word+0x54>
	}

	//WAIT TILL COMPLETES
	while(FLASH->SR & FLASH_SR_BSY) ;
 8003822:	bf00      	nop
 8003824:	4b0f      	ldr	r3, [pc, #60]	@ (8003864 <flash_write_multiple_word+0xb8>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <flash_write_multiple_word+0x78>
	//TURN OFF PROGRAMMING MODE
	FLASH->CR &= ~FLASH_CR_PG;
 8003830:	4b0c      	ldr	r3, [pc, #48]	@ (8003864 <flash_write_multiple_word+0xb8>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	4a0b      	ldr	r2, [pc, #44]	@ (8003864 <flash_write_multiple_word+0xb8>)
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_1;
 800383c:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <flash_write_multiple_word+0xb8>)
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	4a08      	ldr	r2, [pc, #32]	@ (8003864 <flash_write_multiple_word+0xb8>)
 8003842:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003846:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_LOCK;
 8003848:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <flash_write_multiple_word+0xb8>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	4a05      	ldr	r2, [pc, #20]	@ (8003864 <flash_write_multiple_word+0xb8>)
 800384e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003852:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8003854:	b662      	cpsie	i
}
 8003856:	bf00      	nop
	__enable_irq();
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40023c00 	.word	0x40023c00
 8003868:	45670123 	.word	0x45670123
 800386c:	cdef89ab 	.word	0xcdef89ab

08003870 <flash_read_multiple_words>:




void flash_read_multiple_words(uint32_t addr, uint32_t* data, size_t n){
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
	for(size_t i = 0; i < n; ++i){
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e00d      	b.n	800389e <flash_read_multiple_words+0x2e>
		*(data + i) = *((uint32_t*)addr + i);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	009a      	lsls	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	4619      	mov	r1, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	4413      	add	r3, r2
 8003894:	680a      	ldr	r2, [r1, #0]
 8003896:	601a      	str	r2, [r3, #0]
	for(size_t i = 0; i < n; ++i){
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	3301      	adds	r3, #1
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3ed      	bcc.n	8003882 <flash_read_multiple_words+0x12>
	}
}
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <set_column>:
static char x;
static uint32_t i = 0;
static uint32_t lastDebounceTime[12];
static bool keyState[12] = {};

void set_column(uint8_t col, GPIO_PinState state){
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	460a      	mov	r2, r1
 80038be:	71fb      	strb	r3, [r7, #7]
 80038c0:	4613      	mov	r3, r2
 80038c2:	71bb      	strb	r3, [r7, #6]
	switch(col){
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d014      	beq.n	80038f4 <set_column+0x40>
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	dc19      	bgt.n	8003902 <set_column+0x4e>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <set_column+0x24>
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d007      	beq.n	80038e6 <set_column+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
		break;
	}
}
 80038d6:	e014      	b.n	8003902 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col1_Pin, state);
 80038d8:	79bb      	ldrb	r3, [r7, #6]
 80038da:	461a      	mov	r2, r3
 80038dc:	2110      	movs	r1, #16
 80038de:	480b      	ldr	r0, [pc, #44]	@ (800390c <set_column+0x58>)
 80038e0:	f7fd fdc8 	bl	8001474 <HAL_GPIO_WritePin>
		break;
 80038e4:	e00d      	b.n	8003902 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col2_Pin, state);
 80038e6:	79bb      	ldrb	r3, [r7, #6]
 80038e8:	461a      	mov	r2, r3
 80038ea:	2140      	movs	r1, #64	@ 0x40
 80038ec:	4807      	ldr	r0, [pc, #28]	@ (800390c <set_column+0x58>)
 80038ee:	f7fd fdc1 	bl	8001474 <HAL_GPIO_WritePin>
		break;
 80038f2:	e006      	b.n	8003902 <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
 80038f4:	79bb      	ldrb	r3, [r7, #6]
 80038f6:	461a      	mov	r2, r3
 80038f8:	2104      	movs	r1, #4
 80038fa:	4804      	ldr	r0, [pc, #16]	@ (800390c <set_column+0x58>)
 80038fc:	f7fd fdba 	bl	8001474 <HAL_GPIO_WritePin>
		break;
 8003900:	bf00      	nop
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40020000 	.word	0x40020000

08003910 <handle_key_press>:
void handle_key_press(uint8_t col, uint8_t row){
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	460a      	mov	r2, r1
 800391a:	71fb      	strb	r3, [r7, #7]
 800391c:	4613      	mov	r3, r2
 800391e:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 1;
 8003920:	79ba      	ldrb	r2, [r7, #6]
 8003922:	4613      	mov	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	441a      	add	r2, r3
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	4413      	add	r3, r2
 800392c:	4a0a      	ldr	r2, [pc, #40]	@ (8003958 <handle_key_press+0x48>)
 800392e:	2101      	movs	r1, #1
 8003930:	54d1      	strb	r1, [r2, r3]
	x = (row) * 3 + col + 1;
 8003932:	79bb      	ldrb	r3, [r7, #6]
 8003934:	461a      	mov	r2, r3
 8003936:	0052      	lsls	r2, r2, #1
 8003938:	4413      	add	r3, r2
 800393a:	b2da      	uxtb	r2, r3
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	4413      	add	r3, r2
 8003940:	b2db      	uxtb	r3, r3
 8003942:	3301      	adds	r3, #1
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <handle_key_press+0x4c>)
 8003948:	701a      	strb	r2, [r3, #0]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200001dc 	.word	0x200001dc
 800395c:	200001a4 	.word	0x200001a4

08003960 <handle_key_reset>:
void handle_key_reset(uint8_t col, uint8_t row){
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	460a      	mov	r2, r1
 800396a:	71fb      	strb	r3, [r7, #7]
 800396c:	4613      	mov	r3, r2
 800396e:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 0;
 8003970:	79ba      	ldrb	r2, [r7, #6]
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	441a      	add	r2, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	4413      	add	r3, r2
 800397c:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <handle_key_reset+0x30>)
 800397e:	2100      	movs	r1, #0
 8003980:	54d1      	strb	r1, [r2, r3]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	200001dc 	.word	0x200001dc

08003994 <read_row>:

GPIO_PinState read_row(uint8_t row){
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	switch(row){
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d823      	bhi.n	80039ec <read_row+0x58>
 80039a4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <read_row+0x18>)
 80039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039aa:	bf00      	nop
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039c9 	.word	0x080039c9
 80039b4:	080039d5 	.word	0x080039d5
 80039b8:	080039e1 	.word	0x080039e1
		case 0:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row1_Pin);
 80039bc:	2120      	movs	r1, #32
 80039be:	480e      	ldr	r0, [pc, #56]	@ (80039f8 <read_row+0x64>)
 80039c0:	f7fd fd40 	bl	8001444 <HAL_GPIO_ReadPin>
 80039c4:	4603      	mov	r3, r0
 80039c6:	e012      	b.n	80039ee <read_row+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row2_Pin);
 80039c8:	2101      	movs	r1, #1
 80039ca:	480b      	ldr	r0, [pc, #44]	@ (80039f8 <read_row+0x64>)
 80039cc:	f7fd fd3a 	bl	8001444 <HAL_GPIO_ReadPin>
 80039d0:	4603      	mov	r3, r0
 80039d2:	e00c      	b.n	80039ee <read_row+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row3_Pin);
 80039d4:	2102      	movs	r1, #2
 80039d6:	4808      	ldr	r0, [pc, #32]	@ (80039f8 <read_row+0x64>)
 80039d8:	f7fd fd34 	bl	8001444 <HAL_GPIO_ReadPin>
 80039dc:	4603      	mov	r3, r0
 80039de:	e006      	b.n	80039ee <read_row+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row4_Pin);
 80039e0:	2108      	movs	r1, #8
 80039e2:	4805      	ldr	r0, [pc, #20]	@ (80039f8 <read_row+0x64>)
 80039e4:	f7fd fd2e 	bl	8001444 <HAL_GPIO_ReadPin>
 80039e8:	4603      	mov	r3, r0
 80039ea:	e000      	b.n	80039ee <read_row+0x5a>
			break;
	}
	return 1;
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40020000 	.word	0x40020000

080039fc <check_keyboard>:
char check_keyboard(void){
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
	x = 0;
 8003a02:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <check_keyboard+0xe0>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
	i = 0;
 8003a08:	4b35      	ldr	r3, [pc, #212]	@ (8003ae0 <check_keyboard+0xe4>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
	for (int col = 0; col < 3; col++) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e059      	b.n	8003ac8 <check_keyboard+0xcc>
	    set_column(col, GPIO_PIN_RESET);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2100      	movs	r1, #0
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff4a 	bl	80038b4 <set_column>
	    for (int row = 0; row < 4; row++) {
 8003a20:	2300      	movs	r3, #0
 8003a22:	60bb      	str	r3, [r7, #8]
 8003a24:	e044      	b.n	8003ab0 <check_keyboard+0xb4>
	    	uint32_t t = HAL_GetTick();
 8003a26:	f7fd f9b5 	bl	8000d94 <HAL_GetTick>
 8003a2a:	6078      	str	r0, [r7, #4]
	    	if(t - lastDebounceTime[(row) * 3 + col] > DEBOUNCE_TIME){
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae4 <check_keyboard+0xe8>)
 8003a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	d931      	bls.n	8003aaa <check_keyboard+0xae>
				if (read_row(row) == GPIO_PIN_RESET) {
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ffa2 	bl	8003994 <read_row>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d121      	bne.n	8003a9a <check_keyboard+0x9e>
					if(!keyState[(row) * 3 + col])
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	441a      	add	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	4a21      	ldr	r2, [pc, #132]	@ (8003ae8 <check_keyboard+0xec>)
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	f083 0301 	eor.w	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <check_keyboard+0x84>
						handle_key_press(col, row);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff48 	bl	8003910 <handle_key_press>
					lastDebounceTime[(row) * 3 + col] = HAL_GetTick();
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	441a      	add	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	18d4      	adds	r4, r2, r3
 8003a8c:	f7fd f982 	bl	8000d94 <HAL_GetTick>
 8003a90:	4603      	mov	r3, r0
 8003a92:	4a14      	ldr	r2, [pc, #80]	@ (8003ae4 <check_keyboard+0xe8>)
 8003a94:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003a98:	e007      	b.n	8003aaa <check_keyboard+0xae>
				}
				else{
					handle_key_reset(col, row);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff5b 	bl	8003960 <handle_key_reset>
	    for (int row = 0; row < 4; row++) {
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	ddb7      	ble.n	8003a26 <check_keyboard+0x2a>
				}
	    	}
	    }
	    set_column(col, GPIO_PIN_SET);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2101      	movs	r1, #1
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fef9 	bl	80038b4 <set_column>
	for (int col = 0; col < 3; col++) {
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	dda2      	ble.n	8003a14 <check_keyboard+0x18>
	}
	return x;
 8003ace:	4b03      	ldr	r3, [pc, #12]	@ (8003adc <check_keyboard+0xe0>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd90      	pop	{r4, r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200001a4 	.word	0x200001a4
 8003ae0:	200001a8 	.word	0x200001a8
 8003ae4:	200001ac 	.word	0x200001ac
 8003ae8:	200001dc 	.word	0x200001dc

08003aec <lcd_send_cmd>:
 */
#include "lcd_driver.h"
static I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	4603      	mov	r3, r0
 8003af4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	f023 030f 	bic.w	r3, r3, #15
 8003afc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	f043 030c 	orr.w	r3, r3, #12
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	f043 0308 	orr.w	r3, r3, #8
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	f043 030c 	orr.w	r3, r3, #12
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8003b22:	7bbb      	ldrb	r3, [r7, #14]
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b2c:	f107 0208 	add.w	r2, r7, #8
 8003b30:	2364      	movs	r3, #100	@ 0x64
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2304      	movs	r3, #4
 8003b36:	214e      	movs	r1, #78	@ 0x4e
 8003b38:	4803      	ldr	r0, [pc, #12]	@ (8003b48 <lcd_send_cmd+0x5c>)
 8003b3a:	f7fd fdf9 	bl	8001730 <HAL_I2C_Master_Transmit>
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200001e8 	.word	0x200001e8

08003b4c <lcd_send_data>:

void lcd_send_data (char data)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f023 030f 	bic.w	r3, r3, #15
 8003b5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	f043 030d 	orr.w	r3, r3, #13
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	f043 0309 	orr.w	r3, r3, #9
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	f043 030d 	orr.w	r3, r3, #13
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8003b82:	7bbb      	ldrb	r3, [r7, #14]
 8003b84:	f043 0309 	orr.w	r3, r3, #9
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003b8c:	f107 0208 	add.w	r2, r7, #8
 8003b90:	2364      	movs	r3, #100	@ 0x64
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2304      	movs	r3, #4
 8003b96:	214e      	movs	r1, #78	@ 0x4e
 8003b98:	4803      	ldr	r0, [pc, #12]	@ (8003ba8 <lcd_send_data+0x5c>)
 8003b9a:	f7fd fdc9 	bl	8001730 <HAL_I2C_Master_Transmit>
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200001e8 	.word	0x200001e8

08003bac <lcd_init>:

void lcd_init (I2C_HandleTypeDef i2c)
{
 8003bac:	b084      	sub	sp, #16
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	f107 0c08 	add.w	ip, r7, #8
 8003bb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 8003bba:	4b22      	ldr	r3, [pc, #136]	@ (8003c44 <lcd_init+0x98>)
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f107 0308 	add.w	r3, r7, #8
 8003bc2:	2254      	movs	r2, #84	@ 0x54
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f001 f943 	bl	8004e50 <memcpy>
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8003bca:	2032      	movs	r0, #50	@ 0x32
 8003bcc:	f7fd f8ee 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x30);
 8003bd0:	2030      	movs	r0, #48	@ 0x30
 8003bd2:	f7ff ff8b 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8003bd6:	2005      	movs	r0, #5
 8003bd8:	f7fd f8e8 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x30);
 8003bdc:	2030      	movs	r0, #48	@ 0x30
 8003bde:	f7ff ff85 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fd f8e2 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x30);
 8003be8:	2030      	movs	r0, #48	@ 0x30
 8003bea:	f7ff ff7f 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(10);
 8003bee:	200a      	movs	r0, #10
 8003bf0:	f7fd f8dc 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8003bf4:	2020      	movs	r0, #32
 8003bf6:	f7ff ff79 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(10);
 8003bfa:	200a      	movs	r0, #10
 8003bfc:	f7fd f8d6 	bl	8000dac <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8003c00:	2028      	movs	r0, #40	@ 0x28
 8003c02:	f7ff ff73 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(1);
 8003c06:	2001      	movs	r0, #1
 8003c08:	f7fd f8d0 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8003c0c:	2008      	movs	r0, #8
 8003c0e:	f7ff ff6d 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(1);
 8003c12:	2001      	movs	r0, #1
 8003c14:	f7fd f8ca 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7ff ff67 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(2);
 8003c1e:	2002      	movs	r0, #2
 8003c20:	f7fd f8c4 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8003c24:	2006      	movs	r0, #6
 8003c26:	f7ff ff61 	bl	8003aec <lcd_send_cmd>
	HAL_Delay(1);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f7fd f8be 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003c30:	200c      	movs	r0, #12
 8003c32:	f7ff ff5b 	bl	8003aec <lcd_send_cmd>
}
 8003c36:	bf00      	nop
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c3e:	b004      	add	sp, #16
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	200001e8 	.word	0x200001e8

08003c48 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8003c50:	e006      	b.n	8003c60 <lcd_send_string+0x18>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff76 	bl	8003b4c <lcd_send_data>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f4      	bne.n	8003c52 <lcd_send_string+0xa>
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <lcd_clear>:

void lcd_clear(void){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 8003c78:	2100      	movs	r1, #0
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f000 f80e 	bl	8003c9c <lcd_put_cur>
	  lcd_send_string ("                ");
 8003c80:	4805      	ldr	r0, [pc, #20]	@ (8003c98 <lcd_clear+0x24>)
 8003c82:	f7ff ffe1 	bl	8003c48 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8003c86:	2100      	movs	r1, #0
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f000 f807 	bl	8003c9c <lcd_put_cur>
	  lcd_send_string ("                ");
 8003c8e:	4802      	ldr	r0, [pc, #8]	@ (8003c98 <lcd_clear+0x24>)
 8003c90:	f7ff ffda 	bl	8003c48 <lcd_send_string>
}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	08005700 	.word	0x08005700

08003c9c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	switch (row)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <lcd_put_cur+0x18>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d005      	beq.n	8003cbe <lcd_put_cur+0x22>
 8003cb2:	e009      	b.n	8003cc8 <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cba:	603b      	str	r3, [r7, #0]
			break;
 8003cbc:	e004      	b.n	8003cc8 <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003cc4:	603b      	str	r3, [r7, #0]
			break;
 8003cc6:	bf00      	nop
	}
	lcd_send_cmd (col);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff0d 	bl	8003aec <lcd_send_cmd>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <gsm_init>:
// 3: ">" received, message body "ALARM!!!\r" is being/has been transmitted. TxCpltCallback for this will trigger sending CTRL+Z.
// 4: CTRL+Z sent. Waiting for final "+CMGS: xx" and/or "OK" response.
static uint8_t msg_num = 0;


void gsm_init(UART_HandleTypeDef* uart){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	SIM800L_uart = uart;
 8003ce4:	4a06      	ldr	r2, [pc, #24]	@ (8003d00 <gsm_init+0x24>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <gsm_init+0x24>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	4904      	ldr	r1, [pc, #16]	@ (8003d04 <gsm_init+0x28>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fddd 	bl	80028b2 <HAL_UART_Receive_IT>
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	2000023c 	.word	0x2000023c
 8003d04:	2000027c 	.word	0x2000027c

08003d08 <advance_queue_and_proceed>:

// Helper function to advance the queue and start next message or stop
static void advance_queue_and_proceed() {
 8003d08:	b598      	push	{r3, r4, r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
    queue_len--;
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <advance_queue_and_proceed+0x78>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b1a      	ldr	r3, [pc, #104]	@ (8003d80 <advance_queue_and_proceed+0x78>)
 8003d16:	701a      	strb	r2, [r3, #0]
    queue_id = (queue_id + 1) % 6;
 8003d18:	4b1a      	ldr	r3, [pc, #104]	@ (8003d84 <advance_queue_and_proceed+0x7c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d88 <advance_queue_and_proceed+0x80>)
 8003d20:	fb83 3102 	smull	r3, r1, r3, r2
 8003d24:	17d3      	asrs	r3, r2, #31
 8003d26:	1ac9      	subs	r1, r1, r3
 8003d28:	460b      	mov	r3, r1
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	440b      	add	r3, r1
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	1ad1      	subs	r1, r2, r3
 8003d32:	b2ca      	uxtb	r2, r1
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <advance_queue_and_proceed+0x7c>)
 8003d36:	701a      	strb	r2, [r3, #0]

    if (queue_len > 0) { // If there are more messages in the queue
 8003d38:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <advance_queue_and_proceed+0x78>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <advance_queue_and_proceed+0x68>
        msg_num = 0; // Reset state for the next message
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <advance_queue_and_proceed+0x84>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
        strcpy(send_buf, "AT+COPS?\r\n"); // Start sequence for next SMS
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <advance_queue_and_proceed+0x88>)
 8003d48:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <advance_queue_and_proceed+0x8c>)
 8003d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d4c:	c303      	stmia	r3!, {r0, r1}
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	3302      	adds	r3, #2
 8003d52:	0c12      	lsrs	r2, r2, #16
 8003d54:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8003d56:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <advance_queue_and_proceed+0x90>)
 8003d58:	681c      	ldr	r4, [r3, #0]
 8003d5a:	480d      	ldr	r0, [pc, #52]	@ (8003d90 <advance_queue_and_proceed+0x88>)
 8003d5c:	f7fc fa4a 	bl	80001f4 <strlen>
 8003d60:	4603      	mov	r3, r0
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	461a      	mov	r2, r3
 8003d66:	490a      	ldr	r1, [pc, #40]	@ (8003d90 <advance_queue_and_proceed+0x88>)
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7fe fd6c 	bl	8002846 <HAL_UART_Transmit_IT>
    } else { // Queue is empty
        msg_sending = false;
        msg_num = 0; // Reset state
    }
}
 8003d6e:	e005      	b.n	8003d7c <advance_queue_and_proceed+0x74>
        msg_sending = false;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <advance_queue_and_proceed+0x94>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
        msg_num = 0; // Reset state
 8003d76:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <advance_queue_and_proceed+0x84>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
}
 8003d7c:	bf00      	nop
 8003d7e:	bd98      	pop	{r3, r4, r7, pc}
 8003d80:	20000298 	.word	0x20000298
 8003d84:	20000299 	.word	0x20000299
 8003d88:	2aaaaaab 	.word	0x2aaaaaab
 8003d8c:	2000029a 	.word	0x2000029a
 8003d90:	20000240 	.word	0x20000240
 8003d94:	08005714 	.word	0x08005714
 8003d98:	2000023c 	.word	0x2000023c
 8003d9c:	2000027d 	.word	0x2000027d

08003da0 <gsm_sms_queue>:

void gsm_sms_queue(char * number){
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	if (number == NULL || *number == '\0') return;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d043      	beq.n	8003e36 <gsm_sms_queue+0x96>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d03f      	beq.n	8003e36 <gsm_sms_queue+0x96>

	if(queue_len < 6) { // Check if queue has space
 8003db6:	4b23      	ldr	r3, [pc, #140]	@ (8003e44 <gsm_sms_queue+0xa4>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d83d      	bhi.n	8003e3a <gsm_sms_queue+0x9a>
		queue[(queue_id + queue_len) % 6] = (uint8_t*)number;
 8003dbe:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <gsm_sms_queue+0xa8>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e44 <gsm_sms_queue+0xa4>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	18d1      	adds	r1, r2, r3
 8003dca:	4b20      	ldr	r3, [pc, #128]	@ (8003e4c <gsm_sms_queue+0xac>)
 8003dcc:	fb83 3201 	smull	r3, r2, r3, r1
 8003dd0:	17cb      	asrs	r3, r1, #31
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	1aca      	subs	r2, r1, r3
 8003dde:	491c      	ldr	r1, [pc, #112]	@ (8003e50 <gsm_sms_queue+0xb0>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		queue_len++;
 8003de6:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <gsm_sms_queue+0xa4>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	3301      	adds	r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <gsm_sms_queue+0xa4>)
 8003df0:	701a      	strb	r2, [r3, #0]
	} else {
		// Queue is full, new number is not added.
		return;
	}

	if(!msg_sending)  { // If not already sending a message, start the process
 8003df2:	4b18      	ldr	r3, [pc, #96]	@ (8003e54 <gsm_sms_queue+0xb4>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	f083 0301 	eor.w	r3, r3, #1
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01d      	beq.n	8003e3c <gsm_sms_queue+0x9c>
		msg_sending = true;
 8003e00:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <gsm_sms_queue+0xb4>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
		msg_num = 0;
 8003e06:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <gsm_sms_queue+0xb8>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
		strcpy(send_buf, "AT+COPS?\r\n");
 8003e0c:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <gsm_sms_queue+0xbc>)
 8003e0e:	4a14      	ldr	r2, [pc, #80]	@ (8003e60 <gsm_sms_queue+0xc0>)
 8003e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e12:	c303      	stmia	r3!, {r0, r1}
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	3302      	adds	r3, #2
 8003e18:	0c12      	lsrs	r2, r2, #16
 8003e1a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8003e1c:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <gsm_sms_queue+0xc4>)
 8003e1e:	681c      	ldr	r4, [r3, #0]
 8003e20:	480e      	ldr	r0, [pc, #56]	@ (8003e5c <gsm_sms_queue+0xbc>)
 8003e22:	f7fc f9e7 	bl	80001f4 <strlen>
 8003e26:	4603      	mov	r3, r0
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	490b      	ldr	r1, [pc, #44]	@ (8003e5c <gsm_sms_queue+0xbc>)
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f7fe fd09 	bl	8002846 <HAL_UART_Transmit_IT>
 8003e34:	e002      	b.n	8003e3c <gsm_sms_queue+0x9c>
	if (number == NULL || *number == '\0') return;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <gsm_sms_queue+0x9c>
		return;
 8003e3a:	bf00      	nop
	}
}
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd90      	pop	{r4, r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000298 	.word	0x20000298
 8003e48:	20000299 	.word	0x20000299
 8003e4c:	2aaaaaab 	.word	0x2aaaaaab
 8003e50:	20000280 	.word	0x20000280
 8003e54:	2000027d 	.word	0x2000027d
 8003e58:	2000029a 	.word	0x2000029a
 8003e5c:	20000240 	.word	0x20000240
 8003e60:	08005714 	.word	0x08005714
 8003e64:	2000023c 	.word	0x2000023c

08003e68 <HAL_UART_TxCpltCallback>:
	HAL_UART_Transmit(SIM800L_uart, (uint8_t*)data, 1, 100);
}


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	if (huart->Instance != SIM800L_uart->Instance) {
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb4 <HAL_UART_TxCpltCallback+0x4c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d115      	bne.n	8003eaa <HAL_UART_TxCpltCallback+0x42>
		return;
	}

	if (msg_sending) {
 8003e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <HAL_UART_TxCpltCallback+0x50>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d012      	beq.n	8003eac <HAL_UART_TxCpltCallback+0x44>
		// This callback signifies that the previous HAL_UART_Transmit_IT has finished.
		// It's primarily used here to send CTRL+Z immediately after the SMS body.
		if (msg_num == 3) { // Message body "ALARM!!!\r" has just finished transmitting
 8003e86:	4b0d      	ldr	r3, [pc, #52]	@ (8003ebc <HAL_UART_TxCpltCallback+0x54>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d10e      	bne.n	8003eac <HAL_UART_TxCpltCallback+0x44>
			msg_num = 4;      // Next state: CTRL+Z is about to be sent.
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <HAL_UART_TxCpltCallback+0x54>)
 8003e90:	2204      	movs	r2, #4
 8003e92:	701a      	strb	r2, [r3, #0]
			send_buf[0] = 0x1A; // CTRL+Z character
 8003e94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec0 <HAL_UART_TxCpltCallback+0x58>)
 8003e96:	221a      	movs	r2, #26
 8003e98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, 1);
 8003e9a:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <HAL_UART_TxCpltCallback+0x4c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4907      	ldr	r1, [pc, #28]	@ (8003ec0 <HAL_UART_TxCpltCallback+0x58>)
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fccf 	bl	8002846 <HAL_UART_Transmit_IT>
 8003ea8:	e000      	b.n	8003eac <HAL_UART_TxCpltCallback+0x44>
		return;
 8003eaa:	bf00      	nop
		}
	}
}
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000023c 	.word	0x2000023c
 8003eb8:	2000027d 	.word	0x2000027d
 8003ebc:	2000029a 	.word	0x2000029a
 8003ec0:	20000240 	.word	0x20000240

08003ec4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	static char buf[100];    // Buffer for received line
	static uint8_t len = 0;  // Current length of data in buf

	if (huart->Instance != SIM800L_uart->Instance) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80040cc <HAL_UART_RxCpltCallback+0x208>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(huart, &new_char, 1);
 8003eda:	2201      	movs	r2, #1
 8003edc:	497c      	ldr	r1, [pc, #496]	@ (80040d0 <HAL_UART_RxCpltCallback+0x20c>)
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe fce7 	bl	80028b2 <HAL_UART_Receive_IT>
		return;
 8003ee4:	e0ef      	b.n	80040c6 <HAL_UART_RxCpltCallback+0x202>
	}

	// Accumulate character if it's not a CR. LF will be the primary line delimiter.
	if (new_char != '\r') {
 8003ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80040d0 <HAL_UART_RxCpltCallback+0x20c>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b0d      	cmp	r3, #13
 8003eec:	d01d      	beq.n	8003f2a <HAL_UART_RxCpltCallback+0x66>
		if (len < (sizeof(buf) - 1)) {
 8003eee:	4b79      	ldr	r3, [pc, #484]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b62      	cmp	r3, #98	@ 0x62
 8003ef4:	d811      	bhi.n	8003f1a <HAL_UART_RxCpltCallback+0x56>
			buf[len++] = new_char;
 8003ef6:	4b77      	ldr	r3, [pc, #476]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	b2d1      	uxtb	r1, r2
 8003efe:	4a75      	ldr	r2, [pc, #468]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003f00:	7011      	strb	r1, [r2, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b72      	ldr	r3, [pc, #456]	@ (80040d0 <HAL_UART_RxCpltCallback+0x20c>)
 8003f06:	7819      	ldrb	r1, [r3, #0]
 8003f08:	4b73      	ldr	r3, [pc, #460]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003f0a:	5499      	strb	r1, [r3, r2]
			buf[len] = '\0'; // Keep null-terminated
 8003f0c:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b71      	ldr	r3, [pc, #452]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]
 8003f18:	e007      	b.n	8003f2a <HAL_UART_RxCpltCallback+0x66>
		} else {
			// Buffer overflow, reset to be safe.
			len = 0;
 8003f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
			memset(buf, 0, sizeof(buf));
 8003f20:	2264      	movs	r2, #100	@ 0x64
 8003f22:	2100      	movs	r1, #0
 8003f24:	486c      	ldr	r0, [pc, #432]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003f26:	f000 ff49 	bl	8004dbc <memset>
		}
	}

	// Check for "> " prompt specifically when waiting for it (state 2)
	if (msg_sending && msg_num == 2) {
 8003f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80040dc <HAL_UART_RxCpltCallback+0x218>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d039      	beq.n	8003fa6 <HAL_UART_RxCpltCallback+0xe2>
 8003f32:	4b6b      	ldr	r3, [pc, #428]	@ (80040e0 <HAL_UART_RxCpltCallback+0x21c>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d135      	bne.n	8003fa6 <HAL_UART_RxCpltCallback+0xe2>
		if (len >= 2 && buf[len-2] == '>' && buf[len-1] == ' ') {
 8003f3a:	4b66      	ldr	r3, [pc, #408]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d931      	bls.n	8003fa6 <HAL_UART_RxCpltCallback+0xe2>
 8003f42:	4b64      	ldr	r3, [pc, #400]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	3b02      	subs	r3, #2
 8003f48:	4a63      	ldr	r2, [pc, #396]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f4e:	d12a      	bne.n	8003fa6 <HAL_UART_RxCpltCallback+0xe2>
 8003f50:	4b60      	ldr	r3, [pc, #384]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	4a60      	ldr	r2, [pc, #384]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d123      	bne.n	8003fa6 <HAL_UART_RxCpltCallback+0xe2>
			// Prompt detected
			msg_num = 3;
 8003f5e:	4b60      	ldr	r3, [pc, #384]	@ (80040e0 <HAL_UART_RxCpltCallback+0x21c>)
 8003f60:	2203      	movs	r2, #3
 8003f62:	701a      	strb	r2, [r3, #0]
			strcpy(send_buf, "ALARM!!!\r"); // SMS content
 8003f64:	4b5f      	ldr	r3, [pc, #380]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 8003f66:	4a60      	ldr	r2, [pc, #384]	@ (80040e8 <HAL_UART_RxCpltCallback+0x224>)
 8003f68:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f6a:	c303      	stmia	r3!, {r0, r1}
 8003f6c:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8003f6e:	4b57      	ldr	r3, [pc, #348]	@ (80040cc <HAL_UART_RxCpltCallback+0x208>)
 8003f70:	681c      	ldr	r4, [r3, #0]
 8003f72:	485c      	ldr	r0, [pc, #368]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 8003f74:	f7fc f93e 	bl	80001f4 <strlen>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4959      	ldr	r1, [pc, #356]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 8003f80:	4620      	mov	r0, r4
 8003f82:	f7fe fc60 	bl	8002846 <HAL_UART_Transmit_IT>
			// TxCpltCallback will handle sending CTRL+Z after this.

			len = 0; // Reset buffer as the prompt has been consumed
 8003f86:	4b53      	ldr	r3, [pc, #332]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
			memset(buf, 0, sizeof(buf));
 8003f8c:	2264      	movs	r2, #100	@ 0x64
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4851      	ldr	r0, [pc, #324]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003f92:	f000 ff13 	bl	8004dbc <memset>
			HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
 8003f96:	4b4d      	ldr	r3, [pc, #308]	@ (80040cc <HAL_UART_RxCpltCallback+0x208>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	494c      	ldr	r1, [pc, #304]	@ (80040d0 <HAL_UART_RxCpltCallback+0x20c>)
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fc87 	bl	80028b2 <HAL_UART_Receive_IT>
			return; // Exit after handling the prompt
 8003fa4:	e08f      	b.n	80040c6 <HAL_UART_RxCpltCallback+0x202>
		}
	}

	// Process full lines on encountering a Newline character
	if (new_char == '\n') {
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80040d0 <HAL_UART_RxCpltCallback+0x20c>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b0a      	cmp	r3, #10
 8003fac:	f040 8084 	bne.w	80040b8 <HAL_UART_RxCpltCallback+0x1f4>
		if (len > 0) { // Process if buffer has content
 8003fb0:	4b48      	ldr	r3, [pc, #288]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d077      	beq.n	80040a8 <HAL_UART_RxCpltCallback+0x1e4>
			if (msg_sending) {
 8003fb8:	4b48      	ldr	r3, [pc, #288]	@ (80040dc <HAL_UART_RxCpltCallback+0x218>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d073      	beq.n	80040a8 <HAL_UART_RxCpltCallback+0x1e4>
				// Optional: Print received line for debugging
				// printf("SIM RX Line (State %d): %s", msg_num, buf);

				if (strstr(buf, "ERROR") != NULL) {
 8003fc0:	494a      	ldr	r1, [pc, #296]	@ (80040ec <HAL_UART_RxCpltCallback+0x228>)
 8003fc2:	4845      	ldr	r0, [pc, #276]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003fc4:	f000 ff02 	bl	8004dcc <strstr>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_UART_RxCpltCallback+0x110>
					// Handle error: Skip current message and try the next.
					advance_queue_and_proceed();
 8003fce:	f7ff fe9b 	bl	8003d08 <advance_queue_and_proceed>
 8003fd2:	e069      	b.n	80040a8 <HAL_UART_RxCpltCallback+0x1e4>
				} else {
					// Handle "OK" and other expected full-line responses based on current state
					switch (msg_num) {
 8003fd4:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_UART_RxCpltCallback+0x21c>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d865      	bhi.n	80040a8 <HAL_UART_RxCpltCallback+0x1e4>
 8003fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe4 <HAL_UART_RxCpltCallback+0x120>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08003ff9 	.word	0x08003ff9
 8003fe8:	08004031 	.word	0x08004031
 8003fec:	080040a9 	.word	0x080040a9
 8003ff0:	080040a9 	.word	0x080040a9
 8003ff4:	08004085 	.word	0x08004085
						case 0: // Waiting for "OK" after AT+COPS?
							if (strstr(buf, "OK") != NULL) {
 8003ff8:	493d      	ldr	r1, [pc, #244]	@ (80040f0 <HAL_UART_RxCpltCallback+0x22c>)
 8003ffa:	4837      	ldr	r0, [pc, #220]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8003ffc:	f000 fee6 	bl	8004dcc <strstr>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d04d      	beq.n	80040a2 <HAL_UART_RxCpltCallback+0x1de>
								msg_num = 1;
 8004006:	4b36      	ldr	r3, [pc, #216]	@ (80040e0 <HAL_UART_RxCpltCallback+0x21c>)
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
								strcpy(send_buf, "AT+CMGF=1\r\n");
 800400c:	4b35      	ldr	r3, [pc, #212]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 800400e:	4a39      	ldr	r2, [pc, #228]	@ (80040f4 <HAL_UART_RxCpltCallback+0x230>)
 8004010:	ca07      	ldmia	r2, {r0, r1, r2}
 8004012:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8004016:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_UART_RxCpltCallback+0x208>)
 8004018:	681c      	ldr	r4, [r3, #0]
 800401a:	4832      	ldr	r0, [pc, #200]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 800401c:	f7fc f8ea 	bl	80001f4 <strlen>
 8004020:	4603      	mov	r3, r0
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	492f      	ldr	r1, [pc, #188]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 8004028:	4620      	mov	r0, r4
 800402a:	f7fe fc0c 	bl	8002846 <HAL_UART_Transmit_IT>
							}
							break;
 800402e:	e038      	b.n	80040a2 <HAL_UART_RxCpltCallback+0x1de>
						case 1: // Waiting for "OK" after AT+CMGF=1
							if (strstr(buf, "OK") != NULL) {
 8004030:	492f      	ldr	r1, [pc, #188]	@ (80040f0 <HAL_UART_RxCpltCallback+0x22c>)
 8004032:	4829      	ldr	r0, [pc, #164]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8004034:	f000 feca 	bl	8004dcc <strstr>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d033      	beq.n	80040a6 <HAL_UART_RxCpltCallback+0x1e2>
								msg_num = 2;
 800403e:	4b28      	ldr	r3, [pc, #160]	@ (80040e0 <HAL_UART_RxCpltCallback+0x21c>)
 8004040:	2202      	movs	r2, #2
 8004042:	701a      	strb	r2, [r3, #0]
								if (queue_len > 0) {
 8004044:	4b2c      	ldr	r3, [pc, #176]	@ (80040f8 <HAL_UART_RxCpltCallback+0x234>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d017      	beq.n	800407c <HAL_UART_RxCpltCallback+0x1b8>
									snprintf(send_buf, sizeof(send_buf), "AT+CMGS=\"+48%s\"\r\n", (char*)queue[queue_id]);
 800404c:	4b2b      	ldr	r3, [pc, #172]	@ (80040fc <HAL_UART_RxCpltCallback+0x238>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4b2b      	ldr	r3, [pc, #172]	@ (8004100 <HAL_UART_RxCpltCallback+0x23c>)
 8004054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004058:	4a2a      	ldr	r2, [pc, #168]	@ (8004104 <HAL_UART_RxCpltCallback+0x240>)
 800405a:	213c      	movs	r1, #60	@ 0x3c
 800405c:	4821      	ldr	r0, [pc, #132]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 800405e:	f000 fe79 	bl	8004d54 <sniprintf>
									HAL_UART_Transmit_IT(SIM800L_uart, (uint8_t*)send_buf, strlen(send_buf));
 8004062:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <HAL_UART_RxCpltCallback+0x208>)
 8004064:	681c      	ldr	r4, [r3, #0]
 8004066:	481f      	ldr	r0, [pc, #124]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 8004068:	f7fc f8c4 	bl	80001f4 <strlen>
 800406c:	4603      	mov	r3, r0
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	491c      	ldr	r1, [pc, #112]	@ (80040e4 <HAL_UART_RxCpltCallback+0x220>)
 8004074:	4620      	mov	r0, r4
 8004076:	f7fe fbe6 	bl	8002846 <HAL_UART_Transmit_IT>
								} else {
									msg_sending = false; // Safety stop
								}
							}
							break;
 800407a:	e014      	b.n	80040a6 <HAL_UART_RxCpltCallback+0x1e2>
									msg_sending = false; // Safety stop
 800407c:	4b17      	ldr	r3, [pc, #92]	@ (80040dc <HAL_UART_RxCpltCallback+0x218>)
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
							break;
 8004082:	e010      	b.n	80040a6 <HAL_UART_RxCpltCallback+0x1e2>
						case 3:
							// In state 3, message body is being sent. Waiting for TxCpltCallback to send CTRL+Z.
							// Ignore echoes or unsolicited messages unless it's an "ERROR".
							break;
						case 4: // Waiting for response after CTRL+Z (expecting "+CMGS: xx" then "OK")
							if (strstr(buf, "OK") != NULL) { // Final confirmation
 8004084:	491a      	ldr	r1, [pc, #104]	@ (80040f0 <HAL_UART_RxCpltCallback+0x22c>)
 8004086:	4814      	ldr	r0, [pc, #80]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 8004088:	f000 fea0 	bl	8004dcc <strstr>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_UART_RxCpltCallback+0x1d4>
								advance_queue_and_proceed();
 8004092:	f7ff fe39 	bl	8003d08 <advance_queue_and_proceed>
							} else if (strstr(buf, "+CMGS:") != NULL) {
								// Intermediate response, wait for final "OK".
							}
							break;
 8004096:	e007      	b.n	80040a8 <HAL_UART_RxCpltCallback+0x1e4>
							} else if (strstr(buf, "+CMGS:") != NULL) {
 8004098:	491b      	ldr	r1, [pc, #108]	@ (8004108 <HAL_UART_RxCpltCallback+0x244>)
 800409a:	480f      	ldr	r0, [pc, #60]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 800409c:	f000 fe96 	bl	8004dcc <strstr>
							break;
 80040a0:	e002      	b.n	80040a8 <HAL_UART_RxCpltCallback+0x1e4>
							break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_UART_RxCpltCallback+0x1e4>
							break;
 80040a6:	bf00      	nop
					}
				}
			}
		}
		// Reset buffer for the next line
		len = 0;
 80040a8:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_UART_RxCpltCallback+0x210>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
		memset(buf, 0, sizeof(buf));
 80040ae:	2264      	movs	r2, #100	@ 0x64
 80040b0:	2100      	movs	r1, #0
 80040b2:	4809      	ldr	r0, [pc, #36]	@ (80040d8 <HAL_UART_RxCpltCallback+0x214>)
 80040b4:	f000 fe82 	bl	8004dbc <memset>
	}

	HAL_UART_Receive_IT(SIM800L_uart, &new_char, 1);
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <HAL_UART_RxCpltCallback+0x208>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	4904      	ldr	r1, [pc, #16]	@ (80040d0 <HAL_UART_RxCpltCallback+0x20c>)
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fbf6 	bl	80028b2 <HAL_UART_Receive_IT>
}
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd90      	pop	{r4, r7, pc}
 80040cc:	2000023c 	.word	0x2000023c
 80040d0:	2000027c 	.word	0x2000027c
 80040d4:	2000029b 	.word	0x2000029b
 80040d8:	2000029c 	.word	0x2000029c
 80040dc:	2000027d 	.word	0x2000027d
 80040e0:	2000029a 	.word	0x2000029a
 80040e4:	20000240 	.word	0x20000240
 80040e8:	08005740 	.word	0x08005740
 80040ec:	0800574c 	.word	0x0800574c
 80040f0:	08005754 	.word	0x08005754
 80040f4:	08005720 	.word	0x08005720
 80040f8:	20000298 	.word	0x20000298
 80040fc:	20000299 	.word	0x20000299
 8004100:	20000280 	.word	0x20000280
 8004104:	0800572c 	.word	0x0800572c
 8004108:	08005758 	.word	0x08005758

0800410c <save_new_state>:
static char pin[9] = "";
static char numbers[48];

static uint32_t countdown_delay;
//HELPER FUNCTIONS
void save_new_state(void){
 800410c:	b5b0      	push	{r4, r5, r7, lr}
 800410e:	b092      	sub	sp, #72	@ 0x48
 8004110:	af00      	add	r7, sp, #0
	char to_save[64];
	memset(to_save, 0, 64);
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	2240      	movs	r2, #64	@ 0x40
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fe4f 	bl	8004dbc <memset>
	memcpy(to_save, numbers, 48);
 800411e:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <save_new_state+0x9c>)
 8004120:	1d3c      	adds	r4, r7, #4
 8004122:	461d      	mov	r5, r3
 8004124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800412a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800412c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(to_save + 48, pin, 8);
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	3330      	adds	r3, #48	@ 0x30
 8004138:	2208      	movs	r2, #8
 800413a:	491c      	ldr	r1, [pc, #112]	@ (80041ac <save_new_state+0xa0>)
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fe87 	bl	8004e50 <memcpy>
	snprintf(to_save + 56, 8, "%ld", countdown_delay/1000);
 8004142:	1d38      	adds	r0, r7, #4
 8004144:	3038      	adds	r0, #56	@ 0x38
 8004146:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <save_new_state+0xa4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1a      	ldr	r2, [pc, #104]	@ (80041b4 <save_new_state+0xa8>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	099b      	lsrs	r3, r3, #6
 8004152:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <save_new_state+0xac>)
 8004154:	2108      	movs	r1, #8
 8004156:	f000 fdfd 	bl	8004d54 <sniprintf>
	for(size_t i = 0; i < 64; ++i)
 800415a:	2300      	movs	r3, #0
 800415c:	647b      	str	r3, [r7, #68]	@ 0x44
 800415e:	e013      	b.n	8004188 <save_new_state+0x7c>
		if(to_save[i] == '\0' || to_save[i] == '#') to_save[i] = '*';
 8004160:	1d3a      	adds	r2, r7, #4
 8004162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004164:	4413      	add	r3, r2
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <save_new_state+0x6c>
 800416c:	1d3a      	adds	r2, r7, #4
 800416e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004170:	4413      	add	r3, r2
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b23      	cmp	r3, #35	@ 0x23
 8004176:	d104      	bne.n	8004182 <save_new_state+0x76>
 8004178:	1d3a      	adds	r2, r7, #4
 800417a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417c:	4413      	add	r3, r2
 800417e:	222a      	movs	r2, #42	@ 0x2a
 8004180:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8004182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004184:	3301      	adds	r3, #1
 8004186:	647b      	str	r3, [r7, #68]	@ 0x44
 8004188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800418a:	2b3f      	cmp	r3, #63	@ 0x3f
 800418c:	d9e8      	bls.n	8004160 <save_new_state+0x54>
	flash_write_erase_sector7();
 800418e:	f7ff fabd 	bl	800370c <flash_write_erase_sector7>
	flash_write_multiple_word(0x08060000, (uint32_t *)to_save, 16);
 8004192:	1d3b      	adds	r3, r7, #4
 8004194:	2210      	movs	r2, #16
 8004196:	4619      	mov	r1, r3
 8004198:	4808      	ldr	r0, [pc, #32]	@ (80041bc <save_new_state+0xb0>)
 800419a:	f7ff fb07 	bl	80037ac <flash_write_multiple_word>

}
 800419e:	bf00      	nop
 80041a0:	3748      	adds	r7, #72	@ 0x48
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bdb0      	pop	{r4, r5, r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000328 	.word	0x20000328
 80041ac:	2000031c 	.word	0x2000031c
 80041b0:	20000358 	.word	0x20000358
 80041b4:	10624dd3 	.word	0x10624dd3
 80041b8:	08005778 	.word	0x08005778
 80041bc:	08060000 	.word	0x08060000

080041c0 <change_state>:

static inline void change_state(alarm_state new_state){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
	state = new_state;
 80041ca:	4a09      	ldr	r2, [pc, #36]	@ (80041f0 <change_state+0x30>)
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	7013      	strb	r3, [r2, #0]
	memset(str,0,14);
 80041d0:	220e      	movs	r2, #14
 80041d2:	2100      	movs	r1, #0
 80041d4:	4807      	ldr	r0, [pc, #28]	@ (80041f4 <change_state+0x34>)
 80041d6:	f000 fdf1 	bl	8004dbc <memset>
	len = 0;
 80041da:	4b07      	ldr	r3, [pc, #28]	@ (80041f8 <change_state+0x38>)
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
	changed = true;
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <change_state+0x3c>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000300 	.word	0x20000300
 80041f8:	2000030e 	.word	0x2000030e
 80041fc:	2000000d 	.word	0x2000000d

08004200 <s_to_ms>:

uint32_t s_to_ms(uint32_t s){return s*1000UL;}
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	4618      	mov	r0, r3
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <state_machine_init>:

//IMPLEMENTATIONS
void state_machine_init(char data_blob[64]){
 8004220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	char temp[8];
	for(size_t i = 0; i < 64; ++i)
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e00d      	b.n	800424a <state_machine_init+0x2a>
		if(data_blob[i] == '*') data_blob[i] = '\0';
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4413      	add	r3, r2
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b2a      	cmp	r3, #42	@ 0x2a
 8004238:	d104      	bne.n	8004244 <state_machine_init+0x24>
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4413      	add	r3, r2
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < 64; ++i)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	3301      	adds	r3, #1
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b3f      	cmp	r3, #63	@ 0x3f
 800424e:	d9ee      	bls.n	800422e <state_machine_init+0xe>
	memcpy(numbers, data_blob, 48);
 8004250:	4a1e      	ldr	r2, [pc, #120]	@ (80042cc <state_machine_init+0xac>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	461c      	mov	r4, r3
 8004256:	4616      	mov	r6, r2
 8004258:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800425c:	4635      	mov	r5, r6
 800425e:	4623      	mov	r3, r4
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800426a:	3410      	adds	r4, #16
 800426c:	3610      	adds	r6, #16
 800426e:	4564      	cmp	r4, ip
 8004270:	d1f4      	bne.n	800425c <state_machine_init+0x3c>
	memcpy(pin, data_blob + 48, 8);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3330      	adds	r3, #48	@ 0x30
 8004276:	2208      	movs	r2, #8
 8004278:	4619      	mov	r1, r3
 800427a:	4815      	ldr	r0, [pc, #84]	@ (80042d0 <state_machine_init+0xb0>)
 800427c:	f000 fde8 	bl	8004e50 <memcpy>
	memcpy(temp, data_blob + 56, 8);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	6810      	ldr	r0, [r2, #0]
 800428c:	6851      	ldr	r1, [r2, #4]
 800428e:	c303      	stmia	r3!, {r0, r1}


	countdown_delay = strtol(temp, NULL, 10);
 8004290:	f107 030c 	add.w	r3, r7, #12
 8004294:	220a      	movs	r2, #10
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fd51 	bl	8004d40 <strtol>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <state_machine_init+0xb4>)
 80042a4:	601a      	str	r2, [r3, #0]
	pin[strlen(pin)] = '#';
 80042a6:	480a      	ldr	r0, [pc, #40]	@ (80042d0 <state_machine_init+0xb0>)
 80042a8:	f7fb ffa4 	bl	80001f4 <strlen>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4a08      	ldr	r2, [pc, #32]	@ (80042d0 <state_machine_init+0xb0>)
 80042b0:	2123      	movs	r1, #35	@ 0x23
 80042b2:	54d1      	strb	r1, [r2, r3]
	countdown_delay = s_to_ms(countdown_delay);
 80042b4:	4b07      	ldr	r3, [pc, #28]	@ (80042d4 <state_machine_init+0xb4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ffa1 	bl	8004200 <s_to_ms>
 80042be:	4603      	mov	r3, r0
 80042c0:	4a04      	ldr	r2, [pc, #16]	@ (80042d4 <state_machine_init+0xb4>)
 80042c2:	6013      	str	r3, [r2, #0]

}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042cc:	20000328 	.word	0x20000328
 80042d0:	2000031c 	.word	0x2000031c
 80042d4:	20000358 	.word	0x20000358

080042d8 <state_machine_run>:

void state_machine_run(char input){
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
	if(input){
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <state_machine_run+0x2a>
		changed = true;
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <state_machine_run+0x40>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
		str[len++] = input;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <state_machine_run+0x44>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	b2d1      	uxtb	r1, r2
 80042f6:	4a09      	ldr	r2, [pc, #36]	@ (800431c <state_machine_run+0x44>)
 80042f8:	7011      	strb	r1, [r2, #0]
 80042fa:	4619      	mov	r1, r3
 80042fc:	4a08      	ldr	r2, [pc, #32]	@ (8004320 <state_machine_run+0x48>)
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	5453      	strb	r3, [r2, r1]
	}
	static void(*state_functions[8])(void) = {state_machine_armed, state_machine_countdown, state_machine_alert,
			state_machine_disarmed, state_machine_set_new_pin, state_machine_menage_number,
			state_machine_replace_number, state_machine_set_alert_time};
	state_functions[state]();
 8004302:	4b08      	ldr	r3, [pc, #32]	@ (8004324 <state_machine_run+0x4c>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4b07      	ldr	r3, [pc, #28]	@ (8004328 <state_machine_run+0x50>)
 800430a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430e:	4798      	blx	r3
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	2000000d 	.word	0x2000000d
 800431c:	2000030e 	.word	0x2000030e
 8004320:	20000300 	.word	0x20000300
 8004324:	20000000 	.word	0x20000000
 8004328:	2000001c 	.word	0x2000001c

0800432c <state_machine_armed>:

void state_machine_armed(void){
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
	GPIO_PinState singal_state = HAL_GPIO_ReadPin(Alarm_Signal_GPIO_Port, Alarm_Signal_Pin);
 8004332:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004336:	484d      	ldr	r0, [pc, #308]	@ (800446c <state_machine_armed+0x140>)
 8004338:	f7fd f884 	bl	8001444 <HAL_GPIO_ReadPin>
 800433c:	4603      	mov	r3, r0
 800433e:	71fb      	strb	r3, [r7, #7]
	if(changed == true || !singal_state || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8004340:	4b4b      	ldr	r3, [pc, #300]	@ (8004470 <state_machine_armed+0x144>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10c      	bne.n	8004362 <state_machine_armed+0x36>
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <state_machine_armed+0x36>
 800434e:	f7fc fd21 	bl	8000d94 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	4b47      	ldr	r3, [pc, #284]	@ (8004474 <state_machine_armed+0x148>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800435e:	f240 8081 	bls.w	8004464 <state_machine_armed+0x138>
		if(len == 0 && changed){
 8004362:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <state_machine_armed+0x14c>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d117      	bne.n	800439a <state_machine_armed+0x6e>
 800436a:	4b41      	ldr	r3, [pc, #260]	@ (8004470 <state_machine_armed+0x144>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d013      	beq.n	800439a <state_machine_armed+0x6e>
			changed = false;
 8004372:	4b3f      	ldr	r3, [pc, #252]	@ (8004470 <state_machine_armed+0x144>)
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8004378:	f7ff fc7c 	bl	8003c74 <lcd_clear>
			lcd_put_cur(0, 0);
 800437c:	2100      	movs	r1, #0
 800437e:	2000      	movs	r0, #0
 8004380:	f7ff fc8c 	bl	8003c9c <lcd_put_cur>
			lcd_send_string ("ARMED");
 8004384:	483d      	ldr	r0, [pc, #244]	@ (800447c <state_machine_armed+0x150>)
 8004386:	f7ff fc5f 	bl	8003c48 <lcd_send_string>
			lcd_put_cur(1, 0);
 800438a:	2100      	movs	r1, #0
 800438c:	2001      	movs	r0, #1
 800438e:	f7ff fc85 	bl	8003c9c <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8004392:	483b      	ldr	r0, [pc, #236]	@ (8004480 <state_machine_armed+0x154>)
 8004394:	f7ff fc58 	bl	8003c48 <lcd_send_string>
 8004398:	e064      	b.n	8004464 <state_machine_armed+0x138>
		}
		else if(!singal_state){
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <state_machine_armed+0x86>
			change_state(ARMED_COUNTDOWN);
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7ff ff0d 	bl	80041c0 <change_state>
			countdown_start = HAL_GetTick();
 80043a6:	f7fc fcf5 	bl	8000d94 <HAL_GetTick>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4a35      	ldr	r2, [pc, #212]	@ (8004484 <state_machine_armed+0x158>)
 80043ae:	6013      	str	r3, [r2, #0]
			}

		}

	}
}
 80043b0:	e058      	b.n	8004464 <state_machine_armed+0x138>
		else if(len != 0){
 80043b2:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <state_machine_armed+0x14c>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d054      	beq.n	8004464 <state_machine_armed+0x138>
			lcd_clear();
 80043ba:	f7ff fc5b 	bl	8003c74 <lcd_clear>
			lcd_put_cur(0, 0);
 80043be:	2100      	movs	r1, #0
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7ff fc6b 	bl	8003c9c <lcd_put_cur>
			lcd_send_string("DISARM");
 80043c6:	4830      	ldr	r0, [pc, #192]	@ (8004488 <state_machine_armed+0x15c>)
 80043c8:	f7ff fc3e 	bl	8003c48 <lcd_send_string>
			lcd_put_cur(1, 0);
 80043cc:	2100      	movs	r1, #0
 80043ce:	2001      	movs	r0, #1
 80043d0:	f7ff fc64 	bl	8003c9c <lcd_put_cur>
			str[len] = '\0';
 80043d4:	4b28      	ldr	r3, [pc, #160]	@ (8004478 <state_machine_armed+0x14c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	4b2c      	ldr	r3, [pc, #176]	@ (800448c <state_machine_armed+0x160>)
 80043dc:	2100      	movs	r1, #0
 80043de:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 80043e0:	482a      	ldr	r0, [pc, #168]	@ (800448c <state_machine_armed+0x160>)
 80043e2:	f7ff fc31 	bl	8003c48 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 80043e6:	492a      	ldr	r1, [pc, #168]	@ (8004490 <state_machine_armed+0x164>)
 80043e8:	4828      	ldr	r0, [pc, #160]	@ (800448c <state_machine_armed+0x160>)
 80043ea:	f7fb fef9 	bl	80001e0 <strcmp>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d103      	bne.n	80043fc <state_machine_armed+0xd0>
				change_state(DISARMED);
 80043f4:	2003      	movs	r0, #3
 80043f6:	f7ff fee3 	bl	80041c0 <change_state>
}
 80043fa:	e033      	b.n	8004464 <state_machine_armed+0x138>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 80043fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <state_machine_armed+0x14c>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	3b01      	subs	r3, #1
 8004402:	4a22      	ldr	r2, [pc, #136]	@ (800448c <state_machine_armed+0x160>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	2b23      	cmp	r3, #35	@ 0x23
 8004408:	d00a      	beq.n	8004420 <state_machine_armed+0xf4>
 800440a:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <state_machine_armed+0x14c>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b0e      	cmp	r3, #14
 8004410:	d006      	beq.n	8004420 <state_machine_armed+0xf4>
 8004412:	4b17      	ldr	r3, [pc, #92]	@ (8004470 <state_machine_armed+0x144>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	f083 0301 	eor.w	r3, r3, #1
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d018      	beq.n	8004452 <state_machine_armed+0x126>
				lcd_clear();
 8004420:	f7ff fc28 	bl	8003c74 <lcd_clear>
				lcd_put_cur(0, 0);
 8004424:	2100      	movs	r1, #0
 8004426:	2000      	movs	r0, #0
 8004428:	f7ff fc38 	bl	8003c9c <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 800442c:	4819      	ldr	r0, [pc, #100]	@ (8004494 <state_machine_armed+0x168>)
 800442e:	f7ff fc0b 	bl	8003c48 <lcd_send_string>
				memset(str,0,14);
 8004432:	220e      	movs	r2, #14
 8004434:	2100      	movs	r1, #0
 8004436:	4815      	ldr	r0, [pc, #84]	@ (800448c <state_machine_armed+0x160>)
 8004438:	f000 fcc0 	bl	8004dbc <memset>
				len = 0;
 800443c:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <state_machine_armed+0x14c>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
				changed = true;
 8004442:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <state_machine_armed+0x144>)
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8004448:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800444c:	f7fc fcae 	bl	8000dac <HAL_Delay>
 8004450:	e008      	b.n	8004464 <state_machine_armed+0x138>
				timestamp = HAL_GetTick();
 8004452:	f7fc fc9f 	bl	8000d94 <HAL_GetTick>
 8004456:	4603      	mov	r3, r0
 8004458:	4a06      	ldr	r2, [pc, #24]	@ (8004474 <state_machine_armed+0x148>)
 800445a:	6013      	str	r3, [r2, #0]
				changed = false;
 800445c:	4b04      	ldr	r3, [pc, #16]	@ (8004470 <state_machine_armed+0x144>)
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
}
 8004462:	e7ff      	b.n	8004464 <state_machine_armed+0x138>
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40020000 	.word	0x40020000
 8004470:	2000000d 	.word	0x2000000d
 8004474:	20000310 	.word	0x20000310
 8004478:	2000030e 	.word	0x2000030e
 800447c:	0800577c 	.word	0x0800577c
 8004480:	08005784 	.word	0x08005784
 8004484:	20000318 	.word	0x20000318
 8004488:	08005794 	.word	0x08005794
 800448c:	20000300 	.word	0x20000300
 8004490:	2000031c 	.word	0x2000031c
 8004494:	0800579c 	.word	0x0800579c

08004498 <state_machine_disarmed>:

void state_machine_disarmed(void){
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 800449c:	4b55      	ldr	r3, [pc, #340]	@ (80045f4 <state_machine_disarmed+0x15c>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <state_machine_disarmed+0x20>
 80044a4:	f7fc fc76 	bl	8000d94 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b53      	ldr	r3, [pc, #332]	@ (80045f8 <state_machine_disarmed+0x160>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80044b4:	f240 809c 	bls.w	80045f0 <state_machine_disarmed+0x158>
	  if(len == 0 && changed){
 80044b8:	4b50      	ldr	r3, [pc, #320]	@ (80045fc <state_machine_disarmed+0x164>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d117      	bne.n	80044f0 <state_machine_disarmed+0x58>
 80044c0:	4b4c      	ldr	r3, [pc, #304]	@ (80045f4 <state_machine_disarmed+0x15c>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d013      	beq.n	80044f0 <state_machine_disarmed+0x58>
		  changed = false;
 80044c8:	4b4a      	ldr	r3, [pc, #296]	@ (80045f4 <state_machine_disarmed+0x15c>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
		  lcd_clear();
 80044ce:	f7ff fbd1 	bl	8003c74 <lcd_clear>
		  lcd_put_cur(0, 0);
 80044d2:	2100      	movs	r1, #0
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7ff fbe1 	bl	8003c9c <lcd_put_cur>
		  lcd_send_string ("DISARMED");
 80044da:	4849      	ldr	r0, [pc, #292]	@ (8004600 <state_machine_disarmed+0x168>)
 80044dc:	f7ff fbb4 	bl	8003c48 <lcd_send_string>
		  lcd_put_cur(1, 0);
 80044e0:	2100      	movs	r1, #0
 80044e2:	2001      	movs	r0, #1
 80044e4:	f7ff fbda 	bl	8003c9c <lcd_put_cur>
		  lcd_send_string("PIN TO ARM");
 80044e8:	4846      	ldr	r0, [pc, #280]	@ (8004604 <state_machine_disarmed+0x16c>)
 80044ea:	f7ff fbad 	bl	8003c48 <lcd_send_string>
 80044ee:	e07f      	b.n	80045f0 <state_machine_disarmed+0x158>
	  }
	  else if(len != 0){
 80044f0:	4b42      	ldr	r3, [pc, #264]	@ (80045fc <state_machine_disarmed+0x164>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d07b      	beq.n	80045f0 <state_machine_disarmed+0x158>
		  lcd_clear();
 80044f8:	f7ff fbbc 	bl	8003c74 <lcd_clear>
		  lcd_put_cur(0, 0);
 80044fc:	2100      	movs	r1, #0
 80044fe:	2000      	movs	r0, #0
 8004500:	f7ff fbcc 	bl	8003c9c <lcd_put_cur>
		  lcd_send_string("DISARMED PIN");
 8004504:	4840      	ldr	r0, [pc, #256]	@ (8004608 <state_machine_disarmed+0x170>)
 8004506:	f7ff fb9f 	bl	8003c48 <lcd_send_string>
		  lcd_put_cur(1, 0);
 800450a:	2100      	movs	r1, #0
 800450c:	2001      	movs	r0, #1
 800450e:	f7ff fbc5 	bl	8003c9c <lcd_put_cur>
		  str[len] = '\0';
 8004512:	4b3a      	ldr	r3, [pc, #232]	@ (80045fc <state_machine_disarmed+0x164>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	4b3c      	ldr	r3, [pc, #240]	@ (800460c <state_machine_disarmed+0x174>)
 800451a:	2100      	movs	r1, #0
 800451c:	5499      	strb	r1, [r3, r2]
		  lcd_send_string(str);
 800451e:	483b      	ldr	r0, [pc, #236]	@ (800460c <state_machine_disarmed+0x174>)
 8004520:	f7ff fb92 	bl	8003c48 <lcd_send_string>
		  if(strcmp(str,pin) == 0){
 8004524:	493a      	ldr	r1, [pc, #232]	@ (8004610 <state_machine_disarmed+0x178>)
 8004526:	4839      	ldr	r0, [pc, #228]	@ (800460c <state_machine_disarmed+0x174>)
 8004528:	f7fb fe5a 	bl	80001e0 <strcmp>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <state_machine_disarmed+0xa2>
			  change_state(ARMED);
 8004532:	2000      	movs	r0, #0
 8004534:	f7ff fe44 	bl	80041c0 <change_state>
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}
 8004538:	e05a      	b.n	80045f0 <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_new_pin) == 0){
 800453a:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <state_machine_disarmed+0x17c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4619      	mov	r1, r3
 8004540:	4832      	ldr	r0, [pc, #200]	@ (800460c <state_machine_disarmed+0x174>)
 8004542:	f7fb fe4d 	bl	80001e0 <strcmp>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d103      	bne.n	8004554 <state_machine_disarmed+0xbc>
			  change_state(SET_NEW_PIN);
 800454c:	2004      	movs	r0, #4
 800454e:	f7ff fe37 	bl	80041c0 <change_state>
}
 8004552:	e04d      	b.n	80045f0 <state_machine_disarmed+0x158>
		  else if(strcmp(str,set_alert_time) == 0){
 8004554:	4b30      	ldr	r3, [pc, #192]	@ (8004618 <state_machine_disarmed+0x180>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	482c      	ldr	r0, [pc, #176]	@ (800460c <state_machine_disarmed+0x174>)
 800455c:	f7fb fe40 	bl	80001e0 <strcmp>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <state_machine_disarmed+0xd6>
			  change_state(SET_ALERT_TIME);
 8004566:	2007      	movs	r0, #7
 8004568:	f7ff fe2a 	bl	80041c0 <change_state>
}
 800456c:	e040      	b.n	80045f0 <state_machine_disarmed+0x158>
		  else if(strcmp(str,menage_number) == 0){
 800456e:	4b2b      	ldr	r3, [pc, #172]	@ (800461c <state_machine_disarmed+0x184>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	4825      	ldr	r0, [pc, #148]	@ (800460c <state_machine_disarmed+0x174>)
 8004576:	f7fb fe33 	bl	80001e0 <strcmp>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <state_machine_disarmed+0xf0>
			  change_state(MENAGE_NUMBER);
 8004580:	2005      	movs	r0, #5
 8004582:	f7ff fe1d 	bl	80041c0 <change_state>
}
 8004586:	e033      	b.n	80045f0 <state_machine_disarmed+0x158>
		  else if(str[len - 1] == '#' || len == 14 || !changed){
 8004588:	4b1c      	ldr	r3, [pc, #112]	@ (80045fc <state_machine_disarmed+0x164>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	3b01      	subs	r3, #1
 800458e:	4a1f      	ldr	r2, [pc, #124]	@ (800460c <state_machine_disarmed+0x174>)
 8004590:	5cd3      	ldrb	r3, [r2, r3]
 8004592:	2b23      	cmp	r3, #35	@ 0x23
 8004594:	d00a      	beq.n	80045ac <state_machine_disarmed+0x114>
 8004596:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <state_machine_disarmed+0x164>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b0e      	cmp	r3, #14
 800459c:	d006      	beq.n	80045ac <state_machine_disarmed+0x114>
 800459e:	4b15      	ldr	r3, [pc, #84]	@ (80045f4 <state_machine_disarmed+0x15c>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f083 0301 	eor.w	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d018      	beq.n	80045de <state_machine_disarmed+0x146>
			  lcd_clear();
 80045ac:	f7ff fb62 	bl	8003c74 <lcd_clear>
			  lcd_put_cur(0, 0);
 80045b0:	2100      	movs	r1, #0
 80045b2:	2000      	movs	r0, #0
 80045b4:	f7ff fb72 	bl	8003c9c <lcd_put_cur>
			  lcd_send_string ("WRONG PIN");
 80045b8:	4819      	ldr	r0, [pc, #100]	@ (8004620 <state_machine_disarmed+0x188>)
 80045ba:	f7ff fb45 	bl	8003c48 <lcd_send_string>
			  memset(str,0,14);
 80045be:	220e      	movs	r2, #14
 80045c0:	2100      	movs	r1, #0
 80045c2:	4812      	ldr	r0, [pc, #72]	@ (800460c <state_machine_disarmed+0x174>)
 80045c4:	f000 fbfa 	bl	8004dbc <memset>
			  len = 0;
 80045c8:	4b0c      	ldr	r3, [pc, #48]	@ (80045fc <state_machine_disarmed+0x164>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
			  changed = true;
 80045ce:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <state_machine_disarmed+0x15c>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(3000);
 80045d4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80045d8:	f7fc fbe8 	bl	8000dac <HAL_Delay>
 80045dc:	e008      	b.n	80045f0 <state_machine_disarmed+0x158>
			  timestamp = HAL_GetTick();
 80045de:	f7fc fbd9 	bl	8000d94 <HAL_GetTick>
 80045e2:	4603      	mov	r3, r0
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <state_machine_disarmed+0x160>)
 80045e6:	6013      	str	r3, [r2, #0]
			  changed = false;
 80045e8:	4b02      	ldr	r3, [pc, #8]	@ (80045f4 <state_machine_disarmed+0x15c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
}
 80045ee:	e7ff      	b.n	80045f0 <state_machine_disarmed+0x158>
 80045f0:	bf00      	nop
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	2000000d 	.word	0x2000000d
 80045f8:	20000310 	.word	0x20000310
 80045fc:	2000030e 	.word	0x2000030e
 8004600:	080057a8 	.word	0x080057a8
 8004604:	080057b4 	.word	0x080057b4
 8004608:	080057c0 	.word	0x080057c0
 800460c:	20000300 	.word	0x20000300
 8004610:	2000031c 	.word	0x2000031c
 8004614:	20000014 	.word	0x20000014
 8004618:	20000010 	.word	0x20000010
 800461c:	20000018 	.word	0x20000018
 8004620:	0800579c 	.word	0x0800579c

08004624 <state_machine_countdown>:

void state_machine_countdown(void){
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - countdown_start > countdown_delay){
 800462a:	f7fc fbb3 	bl	8000d94 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	4b65      	ldr	r3, [pc, #404]	@ (80047c8 <state_machine_countdown+0x1a4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	1ad2      	subs	r2, r2, r3
 8004636:	4b65      	ldr	r3, [pc, #404]	@ (80047cc <state_machine_countdown+0x1a8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d902      	bls.n	8004644 <state_machine_countdown+0x20>
		change_state(ALERT_SMS);
 800463e:	2002      	movs	r0, #2
 8004640:	f7ff fdbe 	bl	80041c0 <change_state>
	}
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL || HAL_GetTick() - timestamp_display_s > 1000){
 8004644:	4b62      	ldr	r3, [pc, #392]	@ (80047d0 <state_machine_countdown+0x1ac>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d112      	bne.n	8004672 <state_machine_countdown+0x4e>
 800464c:	f7fc fba2 	bl	8000d94 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	4b60      	ldr	r3, [pc, #384]	@ (80047d4 <state_machine_countdown+0x1b0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800465c:	d809      	bhi.n	8004672 <state_machine_countdown+0x4e>
 800465e:	f7fc fb99 	bl	8000d94 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	4b5c      	ldr	r3, [pc, #368]	@ (80047d8 <state_machine_countdown+0x1b4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800466e:	f240 80a7 	bls.w	80047c0 <state_machine_countdown+0x19c>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 8004672:	4b5a      	ldr	r3, [pc, #360]	@ (80047dc <state_machine_countdown+0x1b8>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d13c      	bne.n	80046f4 <state_machine_countdown+0xd0>
 800467a:	4b55      	ldr	r3, [pc, #340]	@ (80047d0 <state_machine_countdown+0x1ac>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d108      	bne.n	8004694 <state_machine_countdown+0x70>
 8004682:	f7fc fb87 	bl	8000d94 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	4b53      	ldr	r3, [pc, #332]	@ (80047d8 <state_machine_countdown+0x1b4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004692:	d92f      	bls.n	80046f4 <state_machine_countdown+0xd0>
			timestamp_display_s = HAL_GetTick();
 8004694:	f7fc fb7e 	bl	8000d94 <HAL_GetTick>
 8004698:	4603      	mov	r3, r0
 800469a:	4a4f      	ldr	r2, [pc, #316]	@ (80047d8 <state_machine_countdown+0x1b4>)
 800469c:	6013      	str	r3, [r2, #0]
			changed = false;
 800469e:	4b4c      	ldr	r3, [pc, #304]	@ (80047d0 <state_machine_countdown+0x1ac>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80046a4:	f7ff fae6 	bl	8003c74 <lcd_clear>
			lcd_put_cur(0, 0);
 80046a8:	2100      	movs	r1, #0
 80046aa:	2000      	movs	r0, #0
 80046ac:	f7ff faf6 	bl	8003c9c <lcd_put_cur>
			char buf[14];
			snprintf(buf, 14 ,"COUNTDOWN %lu s",(uint32_t)(countdown_delay/1000 - (HAL_GetTick() - countdown_start)/1000));
 80046b0:	4b46      	ldr	r3, [pc, #280]	@ (80047cc <state_machine_countdown+0x1a8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a4a      	ldr	r2, [pc, #296]	@ (80047e0 <state_machine_countdown+0x1bc>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	099c      	lsrs	r4, r3, #6
 80046bc:	f7fc fb6a 	bl	8000d94 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b41      	ldr	r3, [pc, #260]	@ (80047c8 <state_machine_countdown+0x1a4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	4a45      	ldr	r2, [pc, #276]	@ (80047e0 <state_machine_countdown+0x1bc>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	1ae3      	subs	r3, r4, r3
 80046d2:	4638      	mov	r0, r7
 80046d4:	4a43      	ldr	r2, [pc, #268]	@ (80047e4 <state_machine_countdown+0x1c0>)
 80046d6:	210e      	movs	r1, #14
 80046d8:	f000 fb3c 	bl	8004d54 <sniprintf>
			lcd_send_string (buf);
 80046dc:	463b      	mov	r3, r7
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fab2 	bl	8003c48 <lcd_send_string>
			lcd_put_cur(1, 0);
 80046e4:	2100      	movs	r1, #0
 80046e6:	2001      	movs	r0, #1
 80046e8:	f7ff fad8 	bl	8003c9c <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 80046ec:	483e      	ldr	r0, [pc, #248]	@ (80047e8 <state_machine_countdown+0x1c4>)
 80046ee:	f7ff faab 	bl	8003c48 <lcd_send_string>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 80046f2:	e065      	b.n	80047c0 <state_machine_countdown+0x19c>
		}
		else if(len != 0 && (HAL_GetTick() - timestamp > TIME_PER_SYMBOL || changed)){
 80046f4:	4b39      	ldr	r3, [pc, #228]	@ (80047dc <state_machine_countdown+0x1b8>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d061      	beq.n	80047c0 <state_machine_countdown+0x19c>
 80046fc:	f7fc fb4a 	bl	8000d94 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	4b34      	ldr	r3, [pc, #208]	@ (80047d4 <state_machine_countdown+0x1b0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800470c:	d803      	bhi.n	8004716 <state_machine_countdown+0xf2>
 800470e:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <state_machine_countdown+0x1ac>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d054      	beq.n	80047c0 <state_machine_countdown+0x19c>
			lcd_clear();
 8004716:	f7ff faad 	bl	8003c74 <lcd_clear>
			lcd_put_cur(0, 0);
 800471a:	2100      	movs	r1, #0
 800471c:	2000      	movs	r0, #0
 800471e:	f7ff fabd 	bl	8003c9c <lcd_put_cur>
			lcd_send_string("DISARM");
 8004722:	4832      	ldr	r0, [pc, #200]	@ (80047ec <state_machine_countdown+0x1c8>)
 8004724:	f7ff fa90 	bl	8003c48 <lcd_send_string>
			lcd_put_cur(1, 0);
 8004728:	2100      	movs	r1, #0
 800472a:	2001      	movs	r0, #1
 800472c:	f7ff fab6 	bl	8003c9c <lcd_put_cur>
			str[len] = '\0';
 8004730:	4b2a      	ldr	r3, [pc, #168]	@ (80047dc <state_machine_countdown+0x1b8>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <state_machine_countdown+0x1cc>)
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 800473c:	482c      	ldr	r0, [pc, #176]	@ (80047f0 <state_machine_countdown+0x1cc>)
 800473e:	f7ff fa83 	bl	8003c48 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8004742:	492c      	ldr	r1, [pc, #176]	@ (80047f4 <state_machine_countdown+0x1d0>)
 8004744:	482a      	ldr	r0, [pc, #168]	@ (80047f0 <state_machine_countdown+0x1cc>)
 8004746:	f7fb fd4b 	bl	80001e0 <strcmp>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <state_machine_countdown+0x134>
				change_state(DISARMED);
 8004750:	2003      	movs	r0, #3
 8004752:	f7ff fd35 	bl	80041c0 <change_state>
				changed = false;
			}
		}
	}

}
 8004756:	e033      	b.n	80047c0 <state_machine_countdown+0x19c>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8004758:	4b20      	ldr	r3, [pc, #128]	@ (80047dc <state_machine_countdown+0x1b8>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	3b01      	subs	r3, #1
 800475e:	4a24      	ldr	r2, [pc, #144]	@ (80047f0 <state_machine_countdown+0x1cc>)
 8004760:	5cd3      	ldrb	r3, [r2, r3]
 8004762:	2b23      	cmp	r3, #35	@ 0x23
 8004764:	d00a      	beq.n	800477c <state_machine_countdown+0x158>
 8004766:	4b1d      	ldr	r3, [pc, #116]	@ (80047dc <state_machine_countdown+0x1b8>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b0e      	cmp	r3, #14
 800476c:	d006      	beq.n	800477c <state_machine_countdown+0x158>
 800476e:	4b18      	ldr	r3, [pc, #96]	@ (80047d0 <state_machine_countdown+0x1ac>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f083 0301 	eor.w	r3, r3, #1
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d018      	beq.n	80047ae <state_machine_countdown+0x18a>
				lcd_clear();
 800477c:	f7ff fa7a 	bl	8003c74 <lcd_clear>
				lcd_put_cur(0, 0);
 8004780:	2100      	movs	r1, #0
 8004782:	2000      	movs	r0, #0
 8004784:	f7ff fa8a 	bl	8003c9c <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8004788:	481b      	ldr	r0, [pc, #108]	@ (80047f8 <state_machine_countdown+0x1d4>)
 800478a:	f7ff fa5d 	bl	8003c48 <lcd_send_string>
				memset(str,0,14);
 800478e:	220e      	movs	r2, #14
 8004790:	2100      	movs	r1, #0
 8004792:	4817      	ldr	r0, [pc, #92]	@ (80047f0 <state_machine_countdown+0x1cc>)
 8004794:	f000 fb12 	bl	8004dbc <memset>
				len = 0;
 8004798:	4b10      	ldr	r3, [pc, #64]	@ (80047dc <state_machine_countdown+0x1b8>)
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
				changed = true;
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <state_machine_countdown+0x1ac>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 80047a4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80047a8:	f7fc fb00 	bl	8000dac <HAL_Delay>
 80047ac:	e008      	b.n	80047c0 <state_machine_countdown+0x19c>
				timestamp = HAL_GetTick();
 80047ae:	f7fc faf1 	bl	8000d94 <HAL_GetTick>
 80047b2:	4603      	mov	r3, r0
 80047b4:	4a07      	ldr	r2, [pc, #28]	@ (80047d4 <state_machine_countdown+0x1b0>)
 80047b6:	6013      	str	r3, [r2, #0]
				changed = false;
 80047b8:	4b05      	ldr	r3, [pc, #20]	@ (80047d0 <state_machine_countdown+0x1ac>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	701a      	strb	r2, [r3, #0]
}
 80047be:	e7ff      	b.n	80047c0 <state_machine_countdown+0x19c>
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd90      	pop	{r4, r7, pc}
 80047c8:	20000318 	.word	0x20000318
 80047cc:	20000358 	.word	0x20000358
 80047d0:	2000000d 	.word	0x2000000d
 80047d4:	20000310 	.word	0x20000310
 80047d8:	20000314 	.word	0x20000314
 80047dc:	2000030e 	.word	0x2000030e
 80047e0:	10624dd3 	.word	0x10624dd3
 80047e4:	080057d0 	.word	0x080057d0
 80047e8:	08005784 	.word	0x08005784
 80047ec:	08005794 	.word	0x08005794
 80047f0:	20000300 	.word	0x20000300
 80047f4:	2000031c 	.word	0x2000031c
 80047f8:	0800579c 	.word	0x0800579c

080047fc <state_machine_alert>:

void state_machine_alert(void){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; ++i){
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	e00a      	b.n	800481e <state_machine_alert+0x22>
		gsm_sms_queue(numbers + i*16);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	461a      	mov	r2, r3
 800480e:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <state_machine_alert+0x40>)
 8004810:	4413      	add	r3, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fac4 	bl	8003da0 <gsm_sms_queue>
	for(int i = 0; i < 3; ++i){
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3301      	adds	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b02      	cmp	r3, #2
 8004822:	ddf1      	ble.n	8004808 <state_machine_alert+0xc>
	}
	HAL_Delay(1000);
 8004824:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004828:	f7fc fac0 	bl	8000dac <HAL_Delay>
	change_state(ARMED);
 800482c:	2000      	movs	r0, #0
 800482e:	f7ff fcc7 	bl	80041c0 <change_state>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000328 	.word	0x20000328

08004840 <state_machine_set_alert_time>:

void state_machine_set_alert_time(void){
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
	if(changed == true){
 8004844:	4b25      	ldr	r3, [pc, #148]	@ (80048dc <state_machine_set_alert_time+0x9c>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d045      	beq.n	80048d8 <state_machine_set_alert_time+0x98>
		if(len == 0 && changed){
 800484c:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <state_machine_set_alert_time+0xa0>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d110      	bne.n	8004876 <state_machine_set_alert_time+0x36>
 8004854:	4b21      	ldr	r3, [pc, #132]	@ (80048dc <state_machine_set_alert_time+0x9c>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <state_machine_set_alert_time+0x36>
			changed = false;
 800485c:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <state_machine_set_alert_time+0x9c>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8004862:	f7ff fa07 	bl	8003c74 <lcd_clear>
			lcd_put_cur(0, 0);
 8004866:	2100      	movs	r1, #0
 8004868:	2000      	movs	r0, #0
 800486a:	f7ff fa17 	bl	8003c9c <lcd_put_cur>
			lcd_send_string ("TIME(S),#=SAVE");
 800486e:	481d      	ldr	r0, [pc, #116]	@ (80048e4 <state_machine_set_alert_time+0xa4>)
 8004870:	f7ff f9ea 	bl	8003c48 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 8004874:	e030      	b.n	80048d8 <state_machine_set_alert_time+0x98>
		else if(len != 0){
 8004876:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <state_machine_set_alert_time+0xa0>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02c      	beq.n	80048d8 <state_machine_set_alert_time+0x98>
			lcd_put_cur(1, 0);
 800487e:	2100      	movs	r1, #0
 8004880:	2001      	movs	r0, #1
 8004882:	f7ff fa0b 	bl	8003c9c <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 8004886:	4b16      	ldr	r3, [pc, #88]	@ (80048e0 <state_machine_set_alert_time+0xa0>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	3b01      	subs	r3, #1
 800488c:	4a16      	ldr	r2, [pc, #88]	@ (80048e8 <state_machine_set_alert_time+0xa8>)
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	2b2a      	cmp	r3, #42	@ 0x2a
 8004892:	d003      	beq.n	800489c <state_machine_set_alert_time+0x5c>
 8004894:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <state_machine_set_alert_time+0xa0>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b09      	cmp	r3, #9
 800489a:	d902      	bls.n	80048a2 <state_machine_set_alert_time+0x62>
				change_state(DISARMED);
 800489c:	2003      	movs	r0, #3
 800489e:	f7ff fc8f 	bl	80041c0 <change_state>
			lcd_send_string(str);
 80048a2:	4811      	ldr	r0, [pc, #68]	@ (80048e8 <state_machine_set_alert_time+0xa8>)
 80048a4:	f7ff f9d0 	bl	8003c48 <lcd_send_string>
			if(str[len - 1] == '#'){
 80048a8:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <state_machine_set_alert_time+0xa0>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	4a0e      	ldr	r2, [pc, #56]	@ (80048e8 <state_machine_set_alert_time+0xa8>)
 80048b0:	5cd3      	ldrb	r3, [r2, r3]
 80048b2:	2b23      	cmp	r3, #35	@ 0x23
 80048b4:	d110      	bne.n	80048d8 <state_machine_set_alert_time+0x98>
				countdown_delay = s_to_ms(strtol(str, NULL, 10));
 80048b6:	220a      	movs	r2, #10
 80048b8:	2100      	movs	r1, #0
 80048ba:	480b      	ldr	r0, [pc, #44]	@ (80048e8 <state_machine_set_alert_time+0xa8>)
 80048bc:	f000 fa40 	bl	8004d40 <strtol>
 80048c0:	4603      	mov	r3, r0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff fc9c 	bl	8004200 <s_to_ms>
 80048c8:	4603      	mov	r3, r0
 80048ca:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <state_machine_set_alert_time+0xac>)
 80048cc:	6013      	str	r3, [r2, #0]
				save_new_state();
 80048ce:	f7ff fc1d 	bl	800410c <save_new_state>
				change_state(DISARMED);
 80048d2:	2003      	movs	r0, #3
 80048d4:	f7ff fc74 	bl	80041c0 <change_state>
}
 80048d8:	bf00      	nop
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	2000000d 	.word	0x2000000d
 80048e0:	2000030e 	.word	0x2000030e
 80048e4:	080057e0 	.word	0x080057e0
 80048e8:	20000300 	.word	0x20000300
 80048ec:	20000358 	.word	0x20000358

080048f0 <state_machine_set_new_pin>:

void state_machine_set_new_pin(void){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
	if(changed == true){
 80048f4:	4b25      	ldr	r3, [pc, #148]	@ (800498c <state_machine_set_new_pin+0x9c>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d045      	beq.n	8004988 <state_machine_set_new_pin+0x98>
		if(len == 0 && changed){
 80048fc:	4b24      	ldr	r3, [pc, #144]	@ (8004990 <state_machine_set_new_pin+0xa0>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d110      	bne.n	8004926 <state_machine_set_new_pin+0x36>
 8004904:	4b21      	ldr	r3, [pc, #132]	@ (800498c <state_machine_set_new_pin+0x9c>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <state_machine_set_new_pin+0x36>
			changed = false;
 800490c:	4b1f      	ldr	r3, [pc, #124]	@ (800498c <state_machine_set_new_pin+0x9c>)
 800490e:	2200      	movs	r2, #0
 8004910:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8004912:	f7ff f9af 	bl	8003c74 <lcd_clear>
			lcd_put_cur(0, 0);
 8004916:	2100      	movs	r1, #0
 8004918:	2000      	movs	r0, #0
 800491a:	f7ff f9bf 	bl	8003c9c <lcd_put_cur>
			lcd_send_string ("SET PIN,#=SAVE");
 800491e:	481d      	ldr	r0, [pc, #116]	@ (8004994 <state_machine_set_new_pin+0xa4>)
 8004920:	f7ff f992 	bl	8003c48 <lcd_send_string>

				change_state(DISARMED);
			}
		}
	}
}
 8004924:	e030      	b.n	8004988 <state_machine_set_new_pin+0x98>
		else if(len != 0){
 8004926:	4b1a      	ldr	r3, [pc, #104]	@ (8004990 <state_machine_set_new_pin+0xa0>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02c      	beq.n	8004988 <state_machine_set_new_pin+0x98>
			lcd_put_cur(1, 0);
 800492e:	2100      	movs	r1, #0
 8004930:	2001      	movs	r0, #1
 8004932:	f7ff f9b3 	bl	8003c9c <lcd_put_cur>
			if(str[len - 1] == '*' || len > 9){
 8004936:	4b16      	ldr	r3, [pc, #88]	@ (8004990 <state_machine_set_new_pin+0xa0>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	3b01      	subs	r3, #1
 800493c:	4a16      	ldr	r2, [pc, #88]	@ (8004998 <state_machine_set_new_pin+0xa8>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	2b2a      	cmp	r3, #42	@ 0x2a
 8004942:	d003      	beq.n	800494c <state_machine_set_new_pin+0x5c>
 8004944:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <state_machine_set_new_pin+0xa0>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b09      	cmp	r3, #9
 800494a:	d902      	bls.n	8004952 <state_machine_set_new_pin+0x62>
				change_state(DISARMED);
 800494c:	2003      	movs	r0, #3
 800494e:	f7ff fc37 	bl	80041c0 <change_state>
			lcd_send_string(str);
 8004952:	4811      	ldr	r0, [pc, #68]	@ (8004998 <state_machine_set_new_pin+0xa8>)
 8004954:	f7ff f978 	bl	8003c48 <lcd_send_string>
			if(str[len - 1] == '#'){
 8004958:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <state_machine_set_new_pin+0xa0>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	3b01      	subs	r3, #1
 800495e:	4a0e      	ldr	r2, [pc, #56]	@ (8004998 <state_machine_set_new_pin+0xa8>)
 8004960:	5cd3      	ldrb	r3, [r2, r3]
 8004962:	2b23      	cmp	r3, #35	@ 0x23
 8004964:	d110      	bne.n	8004988 <state_machine_set_new_pin+0x98>
				memset(pin, 0, 9);
 8004966:	2209      	movs	r2, #9
 8004968:	2100      	movs	r1, #0
 800496a:	480c      	ldr	r0, [pc, #48]	@ (800499c <state_machine_set_new_pin+0xac>)
 800496c:	f000 fa26 	bl	8004dbc <memset>
				memcpy(pin,str,len);
 8004970:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <state_machine_set_new_pin+0xa0>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	4908      	ldr	r1, [pc, #32]	@ (8004998 <state_machine_set_new_pin+0xa8>)
 8004978:	4808      	ldr	r0, [pc, #32]	@ (800499c <state_machine_set_new_pin+0xac>)
 800497a:	f000 fa69 	bl	8004e50 <memcpy>
				save_new_state();
 800497e:	f7ff fbc5 	bl	800410c <save_new_state>
				change_state(DISARMED);
 8004982:	2003      	movs	r0, #3
 8004984:	f7ff fc1c 	bl	80041c0 <change_state>
}
 8004988:	bf00      	nop
 800498a:	bd80      	pop	{r7, pc}
 800498c:	2000000d 	.word	0x2000000d
 8004990:	2000030e 	.word	0x2000030e
 8004994:	080057f0 	.word	0x080057f0
 8004998:	20000300 	.word	0x20000300
 800499c:	2000031c 	.word	0x2000031c

080049a0 <state_machine_menage_number>:

void state_machine_menage_number(void){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
	static char code[4] = "";
	bool code_add = false;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]
	if(changed == true){
 80049aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004b64 <state_machine_menage_number+0x1c4>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80d3 	beq.w	8004b5a <state_machine_menage_number+0x1ba>
		changed = false;
 80049b4:	4b6b      	ldr	r3, [pc, #428]	@ (8004b64 <state_machine_menage_number+0x1c4>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
		if(!*str) id = 0;
 80049ba:	4b6b      	ldr	r3, [pc, #428]	@ (8004b68 <state_machine_menage_number+0x1c8>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <state_machine_menage_number+0x2a>
 80049c2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	e061      	b.n	8004a8e <state_machine_menage_number+0xee>
		else if(*str == '8') id = (id + 1) % 3;
 80049ca:	4b67      	ldr	r3, [pc, #412]	@ (8004b68 <state_machine_menage_number+0x1c8>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b38      	cmp	r3, #56	@ 0x38
 80049d0:	d10f      	bne.n	80049f2 <state_machine_menage_number+0x52>
 80049d2:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	4b65      	ldr	r3, [pc, #404]	@ (8004b70 <state_machine_menage_number+0x1d0>)
 80049da:	fb83 3102 	smull	r3, r1, r3, r2
 80049de:	17d3      	asrs	r3, r2, #31
 80049e0:	1ac9      	subs	r1, r1, r3
 80049e2:	460b      	mov	r3, r1
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	440b      	add	r3, r1
 80049e8:	1ad1      	subs	r1, r2, r3
 80049ea:	b2ca      	uxtb	r2, r1
 80049ec:	4b5f      	ldr	r3, [pc, #380]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e04d      	b.n	8004a8e <state_machine_menage_number+0xee>
		else if(*str == '2' && id > 0) id = id - 1;
 80049f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b68 <state_machine_menage_number+0x1c8>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b32      	cmp	r3, #50	@ 0x32
 80049f8:	d10a      	bne.n	8004a10 <state_machine_menage_number+0x70>
 80049fa:	4b5c      	ldr	r3, [pc, #368]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d006      	beq.n	8004a10 <state_machine_menage_number+0x70>
 8004a02:	4b5a      	ldr	r3, [pc, #360]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b58      	ldr	r3, [pc, #352]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e03e      	b.n	8004a8e <state_machine_menage_number+0xee>
		else if(*str == '2') id = 2;
 8004a10:	4b55      	ldr	r3, [pc, #340]	@ (8004b68 <state_machine_menage_number+0x1c8>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b32      	cmp	r3, #50	@ 0x32
 8004a16:	d103      	bne.n	8004a20 <state_machine_menage_number+0x80>
 8004a18:	4b54      	ldr	r3, [pc, #336]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e036      	b.n	8004a8e <state_machine_menage_number+0xee>
		else if(*str == '*') change_state(DISARMED);
 8004a20:	4b51      	ldr	r3, [pc, #324]	@ (8004b68 <state_machine_menage_number+0x1c8>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a26:	d103      	bne.n	8004a30 <state_machine_menage_number+0x90>
 8004a28:	2003      	movs	r0, #3
 8004a2a:	f7ff fbc9 	bl	80041c0 <change_state>
 8004a2e:	e02e      	b.n	8004a8e <state_machine_menage_number+0xee>
		else{
			code[strlen(code)] = *str;
 8004a30:	4850      	ldr	r0, [pc, #320]	@ (8004b74 <state_machine_menage_number+0x1d4>)
 8004a32:	f7fb fbdf 	bl	80001f4 <strlen>
 8004a36:	4603      	mov	r3, r0
 8004a38:	4a4b      	ldr	r2, [pc, #300]	@ (8004b68 <state_machine_menage_number+0x1c8>)
 8004a3a:	7811      	ldrb	r1, [r2, #0]
 8004a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b74 <state_machine_menage_number+0x1d4>)
 8004a3e:	54d1      	strb	r1, [r2, r3]
			code_add = true;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
			if(strcmp(code, "7777") == 0)//REPLACE
 8004a44:	494c      	ldr	r1, [pc, #304]	@ (8004b78 <state_machine_menage_number+0x1d8>)
 8004a46:	484b      	ldr	r0, [pc, #300]	@ (8004b74 <state_machine_menage_number+0x1d4>)
 8004a48:	f7fb fbca 	bl	80001e0 <strcmp>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <state_machine_menage_number+0xba>
				change_state(REPLACE_NUMBER);
 8004a52:	2006      	movs	r0, #6
 8004a54:	f7ff fbb4 	bl	80041c0 <change_state>
 8004a58:	e019      	b.n	8004a8e <state_machine_menage_number+0xee>
			else if(strcmp(code,"3333") == 0)//DELETE
 8004a5a:	4948      	ldr	r1, [pc, #288]	@ (8004b7c <state_machine_menage_number+0x1dc>)
 8004a5c:	4845      	ldr	r0, [pc, #276]	@ (8004b74 <state_machine_menage_number+0x1d4>)
 8004a5e:	f7fb fbbf 	bl	80001e0 <strcmp>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d112      	bne.n	8004a8e <state_machine_menage_number+0xee>
			{
				for(int i = 0; i < 16; ++i){
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e00a      	b.n	8004a84 <state_machine_menage_number+0xe4>
					numbers[id*16 + i] = '\0';
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	011a      	lsls	r2, r3, #4
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	4a41      	ldr	r2, [pc, #260]	@ (8004b80 <state_machine_menage_number+0x1e0>)
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < 16; ++i){
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	ddf1      	ble.n	8004a6e <state_machine_menage_number+0xce>
				}
				save_new_state();
 8004a8a:	f7ff fb3f 	bl	800410c <save_new_state>
			}
		}
		*str = '\0';
 8004a8e:	4b36      	ldr	r3, [pc, #216]	@ (8004b68 <state_machine_menage_number+0x1c8>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
		len = 0;
 8004a94:	4b3b      	ldr	r3, [pc, #236]	@ (8004b84 <state_machine_menage_number+0x1e4>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
		if(!code_add) memset(code,0,4);
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	f083 0301 	eor.w	r3, r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <state_machine_menage_number+0x110>
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4832      	ldr	r0, [pc, #200]	@ (8004b74 <state_machine_menage_number+0x1d4>)
 8004aac:	f000 f986 	bl	8004dbc <memset>

		char line[14] = "";
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	605a      	str	r2, [r3, #4]
 8004abc:	811a      	strh	r2, [r3, #8]
		snprintf(line, 14, "->%d.", id + 1);
 8004abe:	4b2b      	ldr	r3, [pc, #172]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	4a30      	ldr	r2, [pc, #192]	@ (8004b88 <state_machine_menage_number+0x1e8>)
 8004ac8:	210e      	movs	r1, #14
 8004aca:	f000 f943 	bl	8004d54 <sniprintf>
		memcpy(line+4, numbers + 16*id, 9);
 8004ace:	463b      	mov	r3, r7
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4a26      	ldr	r2, [pc, #152]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	0112      	lsls	r2, r2, #4
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4a29      	ldr	r2, [pc, #164]	@ (8004b80 <state_machine_menage_number+0x1e0>)
 8004adc:	4411      	add	r1, r2
 8004ade:	2209      	movs	r2, #9
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f9b5 	bl	8004e50 <memcpy>
		lcd_clear();
 8004ae6:	f7ff f8c5 	bl	8003c74 <lcd_clear>
		lcd_put_cur(0, 0);
 8004aea:	2100      	movs	r1, #0
 8004aec:	2000      	movs	r0, #0
 8004aee:	f7ff f8d5 	bl	8003c9c <lcd_put_cur>
		lcd_send_string(line);
 8004af2:	463b      	mov	r3, r7
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff f8a7 	bl	8003c48 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004afa:	2100      	movs	r1, #0
 8004afc:	2001      	movs	r0, #1
 8004afe:	f7ff f8cd 	bl	8003c9c <lcd_put_cur>
		snprintf(line, 14, "  %d.", (id + 1)%3 + 1);
 8004b02:	4b1a      	ldr	r3, [pc, #104]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	4b19      	ldr	r3, [pc, #100]	@ (8004b70 <state_machine_menage_number+0x1d0>)
 8004b0a:	fb83 3201 	smull	r3, r2, r3, r1
 8004b0e:	17cb      	asrs	r3, r1, #31
 8004b10:	1ad2      	subs	r2, r2, r3
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	1aca      	subs	r2, r1, r3
 8004b1a:	1c53      	adds	r3, r2, #1
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b8c <state_machine_menage_number+0x1ec>)
 8004b20:	210e      	movs	r1, #14
 8004b22:	f000 f917 	bl	8004d54 <sniprintf>
		memcpy(line + 4, numbers + 16*((id+1)%3), 9);
 8004b26:	4638      	mov	r0, r7
 8004b28:	3004      	adds	r0, #4
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <state_machine_menage_number+0x1cc>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	4b0f      	ldr	r3, [pc, #60]	@ (8004b70 <state_machine_menage_number+0x1d0>)
 8004b32:	fb83 3201 	smull	r3, r2, r3, r1
 8004b36:	17cb      	asrs	r3, r1, #31
 8004b38:	1ad2      	subs	r2, r2, r3
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	4413      	add	r3, r2
 8004b40:	1aca      	subs	r2, r1, r3
 8004b42:	0113      	lsls	r3, r2, #4
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b0e      	ldr	r3, [pc, #56]	@ (8004b80 <state_machine_menage_number+0x1e0>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	2209      	movs	r2, #9
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f000 f97f 	bl	8004e50 <memcpy>
		lcd_send_string(line);
 8004b52:	463b      	mov	r3, r7
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff f877 	bl	8003c48 <lcd_send_string>
	}
}
 8004b5a:	bf00      	nop
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000000d 	.word	0x2000000d
 8004b68:	20000300 	.word	0x20000300
 8004b6c:	2000030f 	.word	0x2000030f
 8004b70:	55555556 	.word	0x55555556
 8004b74:	2000035c 	.word	0x2000035c
 8004b78:	08005800 	.word	0x08005800
 8004b7c:	08005808 	.word	0x08005808
 8004b80:	20000328 	.word	0x20000328
 8004b84:	2000030e 	.word	0x2000030e
 8004b88:	08005810 	.word	0x08005810
 8004b8c:	08005818 	.word	0x08005818

08004b90 <state_machine_replace_number>:

void state_machine_replace_number(void){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	if(changed == true){
 8004b94:	4b27      	ldr	r3, [pc, #156]	@ (8004c34 <state_machine_replace_number+0xa4>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d049      	beq.n	8004c30 <state_machine_replace_number+0xa0>
		changed = false;
 8004b9c:	4b25      	ldr	r3, [pc, #148]	@ (8004c34 <state_machine_replace_number+0xa4>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8004ba2:	f7ff f867 	bl	8003c74 <lcd_clear>
		lcd_put_cur(0, 0);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7ff f877 	bl	8003c9c <lcd_put_cur>
		lcd_send_string("ADD NUMBER #-save");
 8004bae:	4822      	ldr	r0, [pc, #136]	@ (8004c38 <state_machine_replace_number+0xa8>)
 8004bb0:	f7ff f84a 	bl	8003c48 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	2001      	movs	r0, #1
 8004bb8:	f7ff f870 	bl	8003c9c <lcd_put_cur>
		str[len] = '\0';
 8004bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8004c3c <state_machine_replace_number+0xac>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <state_machine_replace_number+0xb0>)
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	5499      	strb	r1, [r3, r2]
		lcd_send_string(str);
 8004bc8:	481d      	ldr	r0, [pc, #116]	@ (8004c40 <state_machine_replace_number+0xb0>)
 8004bca:	f7ff f83d 	bl	8003c48 <lcd_send_string>

		if(str[len - 1] == '*' || len > 10 || (len != 10 && str[len - 1] == '#')) change_state(MENAGE_NUMBER);
 8004bce:	4b1b      	ldr	r3, [pc, #108]	@ (8004c3c <state_machine_replace_number+0xac>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c40 <state_machine_replace_number+0xb0>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bda:	d00e      	beq.n	8004bfa <state_machine_replace_number+0x6a>
 8004bdc:	4b17      	ldr	r3, [pc, #92]	@ (8004c3c <state_machine_replace_number+0xac>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b0a      	cmp	r3, #10
 8004be2:	d80a      	bhi.n	8004bfa <state_machine_replace_number+0x6a>
 8004be4:	4b15      	ldr	r3, [pc, #84]	@ (8004c3c <state_machine_replace_number+0xac>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b0a      	cmp	r3, #10
 8004bea:	d00a      	beq.n	8004c02 <state_machine_replace_number+0x72>
 8004bec:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <state_machine_replace_number+0xac>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	4a13      	ldr	r2, [pc, #76]	@ (8004c40 <state_machine_replace_number+0xb0>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	2b23      	cmp	r3, #35	@ 0x23
 8004bf8:	d103      	bne.n	8004c02 <state_machine_replace_number+0x72>
 8004bfa:	2005      	movs	r0, #5
 8004bfc:	f7ff fae0 	bl	80041c0 <change_state>
			memcpy(numbers + id * 16, str, 9);
			save_new_state();
			change_state(MENAGE_NUMBER);
		}
	}
}
 8004c00:	e016      	b.n	8004c30 <state_machine_replace_number+0xa0>
		else if(str[len - 1] == '#'){
 8004c02:	4b0e      	ldr	r3, [pc, #56]	@ (8004c3c <state_machine_replace_number+0xac>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	4a0d      	ldr	r2, [pc, #52]	@ (8004c40 <state_machine_replace_number+0xb0>)
 8004c0a:	5cd3      	ldrb	r3, [r2, r3]
 8004c0c:	2b23      	cmp	r3, #35	@ 0x23
 8004c0e:	d10f      	bne.n	8004c30 <state_machine_replace_number+0xa0>
			memcpy(numbers + id * 16, str, 9);
 8004c10:	4b0c      	ldr	r3, [pc, #48]	@ (8004c44 <state_machine_replace_number+0xb4>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b0b      	ldr	r3, [pc, #44]	@ (8004c48 <state_machine_replace_number+0xb8>)
 8004c1a:	4413      	add	r3, r2
 8004c1c:	2209      	movs	r2, #9
 8004c1e:	4908      	ldr	r1, [pc, #32]	@ (8004c40 <state_machine_replace_number+0xb0>)
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f915 	bl	8004e50 <memcpy>
			save_new_state();
 8004c26:	f7ff fa71 	bl	800410c <save_new_state>
			change_state(MENAGE_NUMBER);
 8004c2a:	2005      	movs	r0, #5
 8004c2c:	f7ff fac8 	bl	80041c0 <change_state>
}
 8004c30:	bf00      	nop
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000000d 	.word	0x2000000d
 8004c38:	08005820 	.word	0x08005820
 8004c3c:	2000030e 	.word	0x2000030e
 8004c40:	20000300 	.word	0x20000300
 8004c44:	2000030f 	.word	0x2000030f
 8004c48:	20000328 	.word	0x20000328

08004c4c <_strtol_l.constprop.0>:
 8004c4c:	2b24      	cmp	r3, #36	@ 0x24
 8004c4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c52:	4686      	mov	lr, r0
 8004c54:	4690      	mov	r8, r2
 8004c56:	d801      	bhi.n	8004c5c <_strtol_l.constprop.0+0x10>
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d106      	bne.n	8004c6a <_strtol_l.constprop.0+0x1e>
 8004c5c:	f000 f8cc 	bl	8004df8 <__errno>
 8004c60:	2316      	movs	r3, #22
 8004c62:	6003      	str	r3, [r0, #0]
 8004c64:	2000      	movs	r0, #0
 8004c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6a:	4834      	ldr	r0, [pc, #208]	@ (8004d3c <_strtol_l.constprop.0+0xf0>)
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	462a      	mov	r2, r5
 8004c70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c74:	5d06      	ldrb	r6, [r0, r4]
 8004c76:	f016 0608 	ands.w	r6, r6, #8
 8004c7a:	d1f8      	bne.n	8004c6e <_strtol_l.constprop.0+0x22>
 8004c7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004c7e:	d12d      	bne.n	8004cdc <_strtol_l.constprop.0+0x90>
 8004c80:	782c      	ldrb	r4, [r5, #0]
 8004c82:	2601      	movs	r6, #1
 8004c84:	1c95      	adds	r5, r2, #2
 8004c86:	f033 0210 	bics.w	r2, r3, #16
 8004c8a:	d109      	bne.n	8004ca0 <_strtol_l.constprop.0+0x54>
 8004c8c:	2c30      	cmp	r4, #48	@ 0x30
 8004c8e:	d12a      	bne.n	8004ce6 <_strtol_l.constprop.0+0x9a>
 8004c90:	782a      	ldrb	r2, [r5, #0]
 8004c92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004c96:	2a58      	cmp	r2, #88	@ 0x58
 8004c98:	d125      	bne.n	8004ce6 <_strtol_l.constprop.0+0x9a>
 8004c9a:	786c      	ldrb	r4, [r5, #1]
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	3502      	adds	r5, #2
 8004ca0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004ca4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ca8:	2200      	movs	r2, #0
 8004caa:	fbbc f9f3 	udiv	r9, ip, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	fb03 ca19 	mls	sl, r3, r9, ip
 8004cb4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004cb8:	2f09      	cmp	r7, #9
 8004cba:	d81b      	bhi.n	8004cf4 <_strtol_l.constprop.0+0xa8>
 8004cbc:	463c      	mov	r4, r7
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	dd27      	ble.n	8004d12 <_strtol_l.constprop.0+0xc6>
 8004cc2:	1c57      	adds	r7, r2, #1
 8004cc4:	d007      	beq.n	8004cd6 <_strtol_l.constprop.0+0x8a>
 8004cc6:	4581      	cmp	r9, r0
 8004cc8:	d320      	bcc.n	8004d0c <_strtol_l.constprop.0+0xc0>
 8004cca:	d101      	bne.n	8004cd0 <_strtol_l.constprop.0+0x84>
 8004ccc:	45a2      	cmp	sl, r4
 8004cce:	db1d      	blt.n	8004d0c <_strtol_l.constprop.0+0xc0>
 8004cd0:	fb00 4003 	mla	r0, r0, r3, r4
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cda:	e7eb      	b.n	8004cb4 <_strtol_l.constprop.0+0x68>
 8004cdc:	2c2b      	cmp	r4, #43	@ 0x2b
 8004cde:	bf04      	itt	eq
 8004ce0:	782c      	ldrbeq	r4, [r5, #0]
 8004ce2:	1c95      	addeq	r5, r2, #2
 8004ce4:	e7cf      	b.n	8004c86 <_strtol_l.constprop.0+0x3a>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1da      	bne.n	8004ca0 <_strtol_l.constprop.0+0x54>
 8004cea:	2c30      	cmp	r4, #48	@ 0x30
 8004cec:	bf0c      	ite	eq
 8004cee:	2308      	moveq	r3, #8
 8004cf0:	230a      	movne	r3, #10
 8004cf2:	e7d5      	b.n	8004ca0 <_strtol_l.constprop.0+0x54>
 8004cf4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004cf8:	2f19      	cmp	r7, #25
 8004cfa:	d801      	bhi.n	8004d00 <_strtol_l.constprop.0+0xb4>
 8004cfc:	3c37      	subs	r4, #55	@ 0x37
 8004cfe:	e7de      	b.n	8004cbe <_strtol_l.constprop.0+0x72>
 8004d00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004d04:	2f19      	cmp	r7, #25
 8004d06:	d804      	bhi.n	8004d12 <_strtol_l.constprop.0+0xc6>
 8004d08:	3c57      	subs	r4, #87	@ 0x57
 8004d0a:	e7d8      	b.n	8004cbe <_strtol_l.constprop.0+0x72>
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d10:	e7e1      	b.n	8004cd6 <_strtol_l.constprop.0+0x8a>
 8004d12:	1c53      	adds	r3, r2, #1
 8004d14:	d108      	bne.n	8004d28 <_strtol_l.constprop.0+0xdc>
 8004d16:	2322      	movs	r3, #34	@ 0x22
 8004d18:	f8ce 3000 	str.w	r3, [lr]
 8004d1c:	4660      	mov	r0, ip
 8004d1e:	f1b8 0f00 	cmp.w	r8, #0
 8004d22:	d0a0      	beq.n	8004c66 <_strtol_l.constprop.0+0x1a>
 8004d24:	1e69      	subs	r1, r5, #1
 8004d26:	e006      	b.n	8004d36 <_strtol_l.constprop.0+0xea>
 8004d28:	b106      	cbz	r6, 8004d2c <_strtol_l.constprop.0+0xe0>
 8004d2a:	4240      	negs	r0, r0
 8004d2c:	f1b8 0f00 	cmp.w	r8, #0
 8004d30:	d099      	beq.n	8004c66 <_strtol_l.constprop.0+0x1a>
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	d1f6      	bne.n	8004d24 <_strtol_l.constprop.0+0xd8>
 8004d36:	f8c8 1000 	str.w	r1, [r8]
 8004d3a:	e794      	b.n	8004c66 <_strtol_l.constprop.0+0x1a>
 8004d3c:	0800584d 	.word	0x0800584d

08004d40 <strtol>:
 8004d40:	4613      	mov	r3, r2
 8004d42:	460a      	mov	r2, r1
 8004d44:	4601      	mov	r1, r0
 8004d46:	4802      	ldr	r0, [pc, #8]	@ (8004d50 <strtol+0x10>)
 8004d48:	6800      	ldr	r0, [r0, #0]
 8004d4a:	f7ff bf7f 	b.w	8004c4c <_strtol_l.constprop.0>
 8004d4e:	bf00      	nop
 8004d50:	2000003c 	.word	0x2000003c

08004d54 <sniprintf>:
 8004d54:	b40c      	push	{r2, r3}
 8004d56:	b530      	push	{r4, r5, lr}
 8004d58:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <sniprintf+0x64>)
 8004d5a:	1e0c      	subs	r4, r1, #0
 8004d5c:	681d      	ldr	r5, [r3, #0]
 8004d5e:	b09d      	sub	sp, #116	@ 0x74
 8004d60:	da08      	bge.n	8004d74 <sniprintf+0x20>
 8004d62:	238b      	movs	r3, #139	@ 0x8b
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6a:	b01d      	add	sp, #116	@ 0x74
 8004d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d70:	b002      	add	sp, #8
 8004d72:	4770      	bx	lr
 8004d74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d78:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d7c:	bf14      	ite	ne
 8004d7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d82:	4623      	moveq	r3, r4
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d8c:	9002      	str	r0, [sp, #8]
 8004d8e:	9006      	str	r0, [sp, #24]
 8004d90:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d96:	ab21      	add	r3, sp, #132	@ 0x84
 8004d98:	a902      	add	r1, sp, #8
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	f000 f9b9 	bl	8005114 <_svfiprintf_r>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	bfbc      	itt	lt
 8004da6:	238b      	movlt	r3, #139	@ 0x8b
 8004da8:	602b      	strlt	r3, [r5, #0]
 8004daa:	2c00      	cmp	r4, #0
 8004dac:	d0dd      	beq.n	8004d6a <sniprintf+0x16>
 8004dae:	9b02      	ldr	r3, [sp, #8]
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	e7d9      	b.n	8004d6a <sniprintf+0x16>
 8004db6:	bf00      	nop
 8004db8:	2000003c 	.word	0x2000003c

08004dbc <memset>:
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <memset+0xa>
 8004dc4:	4770      	bx	lr
 8004dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dca:	e7f9      	b.n	8004dc0 <memset+0x4>

08004dcc <strstr>:
 8004dcc:	780a      	ldrb	r2, [r1, #0]
 8004dce:	b570      	push	{r4, r5, r6, lr}
 8004dd0:	b96a      	cbnz	r2, 8004dee <strstr+0x22>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d109      	bne.n	8004dec <strstr+0x20>
 8004dd8:	460c      	mov	r4, r1
 8004dda:	4605      	mov	r5, r0
 8004ddc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f6      	beq.n	8004dd2 <strstr+0x6>
 8004de4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004de8:	429e      	cmp	r6, r3
 8004dea:	d0f7      	beq.n	8004ddc <strstr+0x10>
 8004dec:	3001      	adds	r0, #1
 8004dee:	7803      	ldrb	r3, [r0, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ef      	bne.n	8004dd4 <strstr+0x8>
 8004df4:	4618      	mov	r0, r3
 8004df6:	e7ec      	b.n	8004dd2 <strstr+0x6>

08004df8 <__errno>:
 8004df8:	4b01      	ldr	r3, [pc, #4]	@ (8004e00 <__errno+0x8>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	2000003c 	.word	0x2000003c

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4d0d      	ldr	r5, [pc, #52]	@ (8004e3c <__libc_init_array+0x38>)
 8004e08:	4c0d      	ldr	r4, [pc, #52]	@ (8004e40 <__libc_init_array+0x3c>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	4d0b      	ldr	r5, [pc, #44]	@ (8004e44 <__libc_init_array+0x40>)
 8004e16:	4c0c      	ldr	r4, [pc, #48]	@ (8004e48 <__libc_init_array+0x44>)
 8004e18:	f000 fc66 	bl	80056e8 <_init>
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2600      	movs	r6, #0
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	08005988 	.word	0x08005988
 8004e40:	08005988 	.word	0x08005988
 8004e44:	08005988 	.word	0x08005988
 8004e48:	0800598c 	.word	0x0800598c

08004e4c <__retarget_lock_acquire_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <__retarget_lock_release_recursive>:
 8004e4e:	4770      	bx	lr

08004e50 <memcpy>:
 8004e50:	440a      	add	r2, r1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e58:	d100      	bne.n	8004e5c <memcpy+0xc>
 8004e5a:	4770      	bx	lr
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e66:	4291      	cmp	r1, r2
 8004e68:	d1f9      	bne.n	8004e5e <memcpy+0xe>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <_free_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4605      	mov	r5, r0
 8004e70:	2900      	cmp	r1, #0
 8004e72:	d041      	beq.n	8004ef8 <_free_r+0x8c>
 8004e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e78:	1f0c      	subs	r4, r1, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfb8      	it	lt
 8004e7e:	18e4      	addlt	r4, r4, r3
 8004e80:	f000 f8e0 	bl	8005044 <__malloc_lock>
 8004e84:	4a1d      	ldr	r2, [pc, #116]	@ (8004efc <_free_r+0x90>)
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	b933      	cbnz	r3, 8004e98 <_free_r+0x2c>
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	6014      	str	r4, [r2, #0]
 8004e8e:	4628      	mov	r0, r5
 8004e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e94:	f000 b8dc 	b.w	8005050 <__malloc_unlock>
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d908      	bls.n	8004eae <_free_r+0x42>
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	1821      	adds	r1, r4, r0
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf01      	itttt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	1809      	addeq	r1, r1, r0
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	e7ed      	b.n	8004e8a <_free_r+0x1e>
 8004eae:	461a      	mov	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b10b      	cbz	r3, 8004eb8 <_free_r+0x4c>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d9fa      	bls.n	8004eae <_free_r+0x42>
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	1850      	adds	r0, r2, r1
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d10b      	bne.n	8004ed8 <_free_r+0x6c>
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	4401      	add	r1, r0
 8004ec4:	1850      	adds	r0, r2, r1
 8004ec6:	4283      	cmp	r3, r0
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	d1e0      	bne.n	8004e8e <_free_r+0x22>
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	4408      	add	r0, r1
 8004ed4:	6010      	str	r0, [r2, #0]
 8004ed6:	e7da      	b.n	8004e8e <_free_r+0x22>
 8004ed8:	d902      	bls.n	8004ee0 <_free_r+0x74>
 8004eda:	230c      	movs	r3, #12
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	e7d6      	b.n	8004e8e <_free_r+0x22>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf04      	itt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	bf04      	itt	eq
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6054      	str	r4, [r2, #4]
 8004ef6:	e7ca      	b.n	8004e8e <_free_r+0x22>
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	200004a4 	.word	0x200004a4

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0f      	ldr	r6, [pc, #60]	@ (8004f40 <sbrk_aligned+0x40>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 fba6 	bl	800565c <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 fba1 	bl	800565c <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d103      	bne.n	8004f26 <sbrk_aligned+0x26>
 8004f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f22:	4620      	mov	r0, r4
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	1cc4      	adds	r4, r0, #3
 8004f28:	f024 0403 	bic.w	r4, r4, #3
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d0f8      	beq.n	8004f22 <sbrk_aligned+0x22>
 8004f30:	1a21      	subs	r1, r4, r0
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fb92 	bl	800565c <_sbrk_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d1f2      	bne.n	8004f22 <sbrk_aligned+0x22>
 8004f3c:	e7ef      	b.n	8004f1e <sbrk_aligned+0x1e>
 8004f3e:	bf00      	nop
 8004f40:	200004a0 	.word	0x200004a0

08004f44 <_malloc_r>:
 8004f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f48:	1ccd      	adds	r5, r1, #3
 8004f4a:	f025 0503 	bic.w	r5, r5, #3
 8004f4e:	3508      	adds	r5, #8
 8004f50:	2d0c      	cmp	r5, #12
 8004f52:	bf38      	it	cc
 8004f54:	250c      	movcc	r5, #12
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	4606      	mov	r6, r0
 8004f5a:	db01      	blt.n	8004f60 <_malloc_r+0x1c>
 8004f5c:	42a9      	cmp	r1, r5
 8004f5e:	d904      	bls.n	8004f6a <_malloc_r+0x26>
 8004f60:	230c      	movs	r3, #12
 8004f62:	6033      	str	r3, [r6, #0]
 8004f64:	2000      	movs	r0, #0
 8004f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005040 <_malloc_r+0xfc>
 8004f6e:	f000 f869 	bl	8005044 <__malloc_lock>
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	461c      	mov	r4, r3
 8004f78:	bb44      	cbnz	r4, 8004fcc <_malloc_r+0x88>
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbf 	bl	8004f00 <sbrk_aligned>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	4604      	mov	r4, r0
 8004f86:	d158      	bne.n	800503a <_malloc_r+0xf6>
 8004f88:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8c:	4627      	mov	r7, r4
 8004f8e:	2f00      	cmp	r7, #0
 8004f90:	d143      	bne.n	800501a <_malloc_r+0xd6>
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d04b      	beq.n	800502e <_malloc_r+0xea>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	eb04 0903 	add.w	r9, r4, r3
 8004fa0:	f000 fb5c 	bl	800565c <_sbrk_r>
 8004fa4:	4581      	cmp	r9, r0
 8004fa6:	d142      	bne.n	800502e <_malloc_r+0xea>
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	1a6d      	subs	r5, r5, r1
 8004fac:	4629      	mov	r1, r5
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f7ff ffa6 	bl	8004f00 <sbrk_aligned>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d03a      	beq.n	800502e <_malloc_r+0xea>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	442b      	add	r3, r5
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	bb62      	cbnz	r2, 8005020 <_malloc_r+0xdc>
 8004fc6:	f8c8 7000 	str.w	r7, [r8]
 8004fca:	e00f      	b.n	8004fec <_malloc_r+0xa8>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	1b52      	subs	r2, r2, r5
 8004fd0:	d420      	bmi.n	8005014 <_malloc_r+0xd0>
 8004fd2:	2a0b      	cmp	r2, #11
 8004fd4:	d917      	bls.n	8005006 <_malloc_r+0xc2>
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	bf18      	it	ne
 8004fde:	6059      	strne	r1, [r3, #4]
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	bf08      	it	eq
 8004fe4:	f8c8 1000 	streq.w	r1, [r8]
 8004fe8:	5162      	str	r2, [r4, r5]
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f82f 	bl	8005050 <__malloc_unlock>
 8004ff2:	f104 000b 	add.w	r0, r4, #11
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	f020 0007 	bic.w	r0, r0, #7
 8004ffc:	1ac2      	subs	r2, r0, r3
 8004ffe:	bf1c      	itt	ne
 8005000:	1a1b      	subne	r3, r3, r0
 8005002:	50a3      	strne	r3, [r4, r2]
 8005004:	e7af      	b.n	8004f66 <_malloc_r+0x22>
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	42a3      	cmp	r3, r4
 800500a:	bf0c      	ite	eq
 800500c:	f8c8 2000 	streq.w	r2, [r8]
 8005010:	605a      	strne	r2, [r3, #4]
 8005012:	e7eb      	b.n	8004fec <_malloc_r+0xa8>
 8005014:	4623      	mov	r3, r4
 8005016:	6864      	ldr	r4, [r4, #4]
 8005018:	e7ae      	b.n	8004f78 <_malloc_r+0x34>
 800501a:	463c      	mov	r4, r7
 800501c:	687f      	ldr	r7, [r7, #4]
 800501e:	e7b6      	b.n	8004f8e <_malloc_r+0x4a>
 8005020:	461a      	mov	r2, r3
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	42a3      	cmp	r3, r4
 8005026:	d1fb      	bne.n	8005020 <_malloc_r+0xdc>
 8005028:	2300      	movs	r3, #0
 800502a:	6053      	str	r3, [r2, #4]
 800502c:	e7de      	b.n	8004fec <_malloc_r+0xa8>
 800502e:	230c      	movs	r3, #12
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	4630      	mov	r0, r6
 8005034:	f000 f80c 	bl	8005050 <__malloc_unlock>
 8005038:	e794      	b.n	8004f64 <_malloc_r+0x20>
 800503a:	6005      	str	r5, [r0, #0]
 800503c:	e7d6      	b.n	8004fec <_malloc_r+0xa8>
 800503e:	bf00      	nop
 8005040:	200004a4 	.word	0x200004a4

08005044 <__malloc_lock>:
 8005044:	4801      	ldr	r0, [pc, #4]	@ (800504c <__malloc_lock+0x8>)
 8005046:	f7ff bf01 	b.w	8004e4c <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	2000049c 	.word	0x2000049c

08005050 <__malloc_unlock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_unlock+0x8>)
 8005052:	f7ff befc 	b.w	8004e4e <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	2000049c 	.word	0x2000049c

0800505c <__ssputs_r>:
 800505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005060:	688e      	ldr	r6, [r1, #8]
 8005062:	461f      	mov	r7, r3
 8005064:	42be      	cmp	r6, r7
 8005066:	680b      	ldr	r3, [r1, #0]
 8005068:	4682      	mov	sl, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4690      	mov	r8, r2
 800506e:	d82d      	bhi.n	80050cc <__ssputs_r+0x70>
 8005070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005078:	d026      	beq.n	80050c8 <__ssputs_r+0x6c>
 800507a:	6965      	ldr	r5, [r4, #20]
 800507c:	6909      	ldr	r1, [r1, #16]
 800507e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005082:	eba3 0901 	sub.w	r9, r3, r1
 8005086:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800508a:	1c7b      	adds	r3, r7, #1
 800508c:	444b      	add	r3, r9
 800508e:	106d      	asrs	r5, r5, #1
 8005090:	429d      	cmp	r5, r3
 8005092:	bf38      	it	cc
 8005094:	461d      	movcc	r5, r3
 8005096:	0553      	lsls	r3, r2, #21
 8005098:	d527      	bpl.n	80050ea <__ssputs_r+0x8e>
 800509a:	4629      	mov	r1, r5
 800509c:	f7ff ff52 	bl	8004f44 <_malloc_r>
 80050a0:	4606      	mov	r6, r0
 80050a2:	b360      	cbz	r0, 80050fe <__ssputs_r+0xa2>
 80050a4:	6921      	ldr	r1, [r4, #16]
 80050a6:	464a      	mov	r2, r9
 80050a8:	f7ff fed2 	bl	8004e50 <memcpy>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	6126      	str	r6, [r4, #16]
 80050ba:	6165      	str	r5, [r4, #20]
 80050bc:	444e      	add	r6, r9
 80050be:	eba5 0509 	sub.w	r5, r5, r9
 80050c2:	6026      	str	r6, [r4, #0]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	463e      	mov	r6, r7
 80050c8:	42be      	cmp	r6, r7
 80050ca:	d900      	bls.n	80050ce <__ssputs_r+0x72>
 80050cc:	463e      	mov	r6, r7
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	4632      	mov	r2, r6
 80050d2:	4641      	mov	r1, r8
 80050d4:	f000 faa8 	bl	8005628 <memmove>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	1b9b      	subs	r3, r3, r6
 80050dc:	60a3      	str	r3, [r4, #8]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	4433      	add	r3, r6
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	462a      	mov	r2, r5
 80050ec:	f000 fac6 	bl	800567c <_realloc_r>
 80050f0:	4606      	mov	r6, r0
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1e0      	bne.n	80050b8 <__ssputs_r+0x5c>
 80050f6:	6921      	ldr	r1, [r4, #16]
 80050f8:	4650      	mov	r0, sl
 80050fa:	f7ff feb7 	bl	8004e6c <_free_r>
 80050fe:	230c      	movs	r3, #12
 8005100:	f8ca 3000 	str.w	r3, [sl]
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	e7e9      	b.n	80050e6 <__ssputs_r+0x8a>
	...

08005114 <_svfiprintf_r>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4698      	mov	r8, r3
 800511a:	898b      	ldrh	r3, [r1, #12]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	b09d      	sub	sp, #116	@ 0x74
 8005120:	4607      	mov	r7, r0
 8005122:	460d      	mov	r5, r1
 8005124:	4614      	mov	r4, r2
 8005126:	d510      	bpl.n	800514a <_svfiprintf_r+0x36>
 8005128:	690b      	ldr	r3, [r1, #16]
 800512a:	b973      	cbnz	r3, 800514a <_svfiprintf_r+0x36>
 800512c:	2140      	movs	r1, #64	@ 0x40
 800512e:	f7ff ff09 	bl	8004f44 <_malloc_r>
 8005132:	6028      	str	r0, [r5, #0]
 8005134:	6128      	str	r0, [r5, #16]
 8005136:	b930      	cbnz	r0, 8005146 <_svfiprintf_r+0x32>
 8005138:	230c      	movs	r3, #12
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	b01d      	add	sp, #116	@ 0x74
 8005142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005146:	2340      	movs	r3, #64	@ 0x40
 8005148:	616b      	str	r3, [r5, #20]
 800514a:	2300      	movs	r3, #0
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	2320      	movs	r3, #32
 8005150:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005154:	f8cd 800c 	str.w	r8, [sp, #12]
 8005158:	2330      	movs	r3, #48	@ 0x30
 800515a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052f8 <_svfiprintf_r+0x1e4>
 800515e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005162:	f04f 0901 	mov.w	r9, #1
 8005166:	4623      	mov	r3, r4
 8005168:	469a      	mov	sl, r3
 800516a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800516e:	b10a      	cbz	r2, 8005174 <_svfiprintf_r+0x60>
 8005170:	2a25      	cmp	r2, #37	@ 0x25
 8005172:	d1f9      	bne.n	8005168 <_svfiprintf_r+0x54>
 8005174:	ebba 0b04 	subs.w	fp, sl, r4
 8005178:	d00b      	beq.n	8005192 <_svfiprintf_r+0x7e>
 800517a:	465b      	mov	r3, fp
 800517c:	4622      	mov	r2, r4
 800517e:	4629      	mov	r1, r5
 8005180:	4638      	mov	r0, r7
 8005182:	f7ff ff6b 	bl	800505c <__ssputs_r>
 8005186:	3001      	adds	r0, #1
 8005188:	f000 80a7 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800518c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800518e:	445a      	add	r2, fp
 8005190:	9209      	str	r2, [sp, #36]	@ 0x24
 8005192:	f89a 3000 	ldrb.w	r3, [sl]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 809f 	beq.w	80052da <_svfiprintf_r+0x1c6>
 800519c:	2300      	movs	r3, #0
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051a6:	f10a 0a01 	add.w	sl, sl, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	9307      	str	r3, [sp, #28]
 80051ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051b4:	4654      	mov	r4, sl
 80051b6:	2205      	movs	r2, #5
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	484e      	ldr	r0, [pc, #312]	@ (80052f8 <_svfiprintf_r+0x1e4>)
 80051be:	f7fb f827 	bl	8000210 <memchr>
 80051c2:	9a04      	ldr	r2, [sp, #16]
 80051c4:	b9d8      	cbnz	r0, 80051fe <_svfiprintf_r+0xea>
 80051c6:	06d0      	lsls	r0, r2, #27
 80051c8:	bf44      	itt	mi
 80051ca:	2320      	movmi	r3, #32
 80051cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d0:	0711      	lsls	r1, r2, #28
 80051d2:	bf44      	itt	mi
 80051d4:	232b      	movmi	r3, #43	@ 0x2b
 80051d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051da:	f89a 3000 	ldrb.w	r3, [sl]
 80051de:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e0:	d015      	beq.n	800520e <_svfiprintf_r+0xfa>
 80051e2:	9a07      	ldr	r2, [sp, #28]
 80051e4:	4654      	mov	r4, sl
 80051e6:	2000      	movs	r0, #0
 80051e8:	f04f 0c0a 	mov.w	ip, #10
 80051ec:	4621      	mov	r1, r4
 80051ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051f2:	3b30      	subs	r3, #48	@ 0x30
 80051f4:	2b09      	cmp	r3, #9
 80051f6:	d94b      	bls.n	8005290 <_svfiprintf_r+0x17c>
 80051f8:	b1b0      	cbz	r0, 8005228 <_svfiprintf_r+0x114>
 80051fa:	9207      	str	r2, [sp, #28]
 80051fc:	e014      	b.n	8005228 <_svfiprintf_r+0x114>
 80051fe:	eba0 0308 	sub.w	r3, r0, r8
 8005202:	fa09 f303 	lsl.w	r3, r9, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	46a2      	mov	sl, r4
 800520c:	e7d2      	b.n	80051b4 <_svfiprintf_r+0xa0>
 800520e:	9b03      	ldr	r3, [sp, #12]
 8005210:	1d19      	adds	r1, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	9103      	str	r1, [sp, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfbb      	ittet	lt
 800521a:	425b      	neglt	r3, r3
 800521c:	f042 0202 	orrlt.w	r2, r2, #2
 8005220:	9307      	strge	r3, [sp, #28]
 8005222:	9307      	strlt	r3, [sp, #28]
 8005224:	bfb8      	it	lt
 8005226:	9204      	strlt	r2, [sp, #16]
 8005228:	7823      	ldrb	r3, [r4, #0]
 800522a:	2b2e      	cmp	r3, #46	@ 0x2e
 800522c:	d10a      	bne.n	8005244 <_svfiprintf_r+0x130>
 800522e:	7863      	ldrb	r3, [r4, #1]
 8005230:	2b2a      	cmp	r3, #42	@ 0x2a
 8005232:	d132      	bne.n	800529a <_svfiprintf_r+0x186>
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	1d1a      	adds	r2, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	9203      	str	r2, [sp, #12]
 800523c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005240:	3402      	adds	r4, #2
 8005242:	9305      	str	r3, [sp, #20]
 8005244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005308 <_svfiprintf_r+0x1f4>
 8005248:	7821      	ldrb	r1, [r4, #0]
 800524a:	2203      	movs	r2, #3
 800524c:	4650      	mov	r0, sl
 800524e:	f7fa ffdf 	bl	8000210 <memchr>
 8005252:	b138      	cbz	r0, 8005264 <_svfiprintf_r+0x150>
 8005254:	9b04      	ldr	r3, [sp, #16]
 8005256:	eba0 000a 	sub.w	r0, r0, sl
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	4082      	lsls	r2, r0
 800525e:	4313      	orrs	r3, r2
 8005260:	3401      	adds	r4, #1
 8005262:	9304      	str	r3, [sp, #16]
 8005264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005268:	4824      	ldr	r0, [pc, #144]	@ (80052fc <_svfiprintf_r+0x1e8>)
 800526a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800526e:	2206      	movs	r2, #6
 8005270:	f7fa ffce 	bl	8000210 <memchr>
 8005274:	2800      	cmp	r0, #0
 8005276:	d036      	beq.n	80052e6 <_svfiprintf_r+0x1d2>
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <_svfiprintf_r+0x1ec>)
 800527a:	bb1b      	cbnz	r3, 80052c4 <_svfiprintf_r+0x1b0>
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	3307      	adds	r3, #7
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	3308      	adds	r3, #8
 8005286:	9303      	str	r3, [sp, #12]
 8005288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528a:	4433      	add	r3, r6
 800528c:	9309      	str	r3, [sp, #36]	@ 0x24
 800528e:	e76a      	b.n	8005166 <_svfiprintf_r+0x52>
 8005290:	fb0c 3202 	mla	r2, ip, r2, r3
 8005294:	460c      	mov	r4, r1
 8005296:	2001      	movs	r0, #1
 8005298:	e7a8      	b.n	80051ec <_svfiprintf_r+0xd8>
 800529a:	2300      	movs	r3, #0
 800529c:	3401      	adds	r4, #1
 800529e:	9305      	str	r3, [sp, #20]
 80052a0:	4619      	mov	r1, r3
 80052a2:	f04f 0c0a 	mov.w	ip, #10
 80052a6:	4620      	mov	r0, r4
 80052a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ac:	3a30      	subs	r2, #48	@ 0x30
 80052ae:	2a09      	cmp	r2, #9
 80052b0:	d903      	bls.n	80052ba <_svfiprintf_r+0x1a6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0c6      	beq.n	8005244 <_svfiprintf_r+0x130>
 80052b6:	9105      	str	r1, [sp, #20]
 80052b8:	e7c4      	b.n	8005244 <_svfiprintf_r+0x130>
 80052ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80052be:	4604      	mov	r4, r0
 80052c0:	2301      	movs	r3, #1
 80052c2:	e7f0      	b.n	80052a6 <_svfiprintf_r+0x192>
 80052c4:	ab03      	add	r3, sp, #12
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	462a      	mov	r2, r5
 80052ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052cc:	a904      	add	r1, sp, #16
 80052ce:	4638      	mov	r0, r7
 80052d0:	f3af 8000 	nop.w
 80052d4:	1c42      	adds	r2, r0, #1
 80052d6:	4606      	mov	r6, r0
 80052d8:	d1d6      	bne.n	8005288 <_svfiprintf_r+0x174>
 80052da:	89ab      	ldrh	r3, [r5, #12]
 80052dc:	065b      	lsls	r3, r3, #25
 80052de:	f53f af2d 	bmi.w	800513c <_svfiprintf_r+0x28>
 80052e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052e4:	e72c      	b.n	8005140 <_svfiprintf_r+0x2c>
 80052e6:	ab03      	add	r3, sp, #12
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	462a      	mov	r2, r5
 80052ec:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <_svfiprintf_r+0x1f0>)
 80052ee:	a904      	add	r1, sp, #16
 80052f0:	4638      	mov	r0, r7
 80052f2:	f000 f879 	bl	80053e8 <_printf_i>
 80052f6:	e7ed      	b.n	80052d4 <_svfiprintf_r+0x1c0>
 80052f8:	0800594d 	.word	0x0800594d
 80052fc:	08005957 	.word	0x08005957
 8005300:	00000000 	.word	0x00000000
 8005304:	0800505d 	.word	0x0800505d
 8005308:	08005953 	.word	0x08005953

0800530c <_printf_common>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	4616      	mov	r6, r2
 8005312:	4698      	mov	r8, r3
 8005314:	688a      	ldr	r2, [r1, #8]
 8005316:	690b      	ldr	r3, [r1, #16]
 8005318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800531c:	4293      	cmp	r3, r2
 800531e:	bfb8      	it	lt
 8005320:	4613      	movlt	r3, r2
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005328:	4607      	mov	r7, r0
 800532a:	460c      	mov	r4, r1
 800532c:	b10a      	cbz	r2, 8005332 <_printf_common+0x26>
 800532e:	3301      	adds	r3, #1
 8005330:	6033      	str	r3, [r6, #0]
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	0699      	lsls	r1, r3, #26
 8005336:	bf42      	ittt	mi
 8005338:	6833      	ldrmi	r3, [r6, #0]
 800533a:	3302      	addmi	r3, #2
 800533c:	6033      	strmi	r3, [r6, #0]
 800533e:	6825      	ldr	r5, [r4, #0]
 8005340:	f015 0506 	ands.w	r5, r5, #6
 8005344:	d106      	bne.n	8005354 <_printf_common+0x48>
 8005346:	f104 0a19 	add.w	sl, r4, #25
 800534a:	68e3      	ldr	r3, [r4, #12]
 800534c:	6832      	ldr	r2, [r6, #0]
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	42ab      	cmp	r3, r5
 8005352:	dc26      	bgt.n	80053a2 <_printf_common+0x96>
 8005354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	3b00      	subs	r3, #0
 800535c:	bf18      	it	ne
 800535e:	2301      	movne	r3, #1
 8005360:	0692      	lsls	r2, r2, #26
 8005362:	d42b      	bmi.n	80053bc <_printf_common+0xb0>
 8005364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005368:	4641      	mov	r1, r8
 800536a:	4638      	mov	r0, r7
 800536c:	47c8      	blx	r9
 800536e:	3001      	adds	r0, #1
 8005370:	d01e      	beq.n	80053b0 <_printf_common+0xa4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	2b04      	cmp	r3, #4
 800537c:	bf02      	ittt	eq
 800537e:	68e5      	ldreq	r5, [r4, #12]
 8005380:	6833      	ldreq	r3, [r6, #0]
 8005382:	1aed      	subeq	r5, r5, r3
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	bf0c      	ite	eq
 8005388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800538c:	2500      	movne	r5, #0
 800538e:	4293      	cmp	r3, r2
 8005390:	bfc4      	itt	gt
 8005392:	1a9b      	subgt	r3, r3, r2
 8005394:	18ed      	addgt	r5, r5, r3
 8005396:	2600      	movs	r6, #0
 8005398:	341a      	adds	r4, #26
 800539a:	42b5      	cmp	r5, r6
 800539c:	d11a      	bne.n	80053d4 <_printf_common+0xc8>
 800539e:	2000      	movs	r0, #0
 80053a0:	e008      	b.n	80053b4 <_printf_common+0xa8>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4641      	mov	r1, r8
 80053a8:	4638      	mov	r0, r7
 80053aa:	47c8      	blx	r9
 80053ac:	3001      	adds	r0, #1
 80053ae:	d103      	bne.n	80053b8 <_printf_common+0xac>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	3501      	adds	r5, #1
 80053ba:	e7c6      	b.n	800534a <_printf_common+0x3e>
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	2030      	movs	r0, #48	@ 0x30
 80053c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053c6:	4422      	add	r2, r4
 80053c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053d0:	3302      	adds	r3, #2
 80053d2:	e7c7      	b.n	8005364 <_printf_common+0x58>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4622      	mov	r2, r4
 80053d8:	4641      	mov	r1, r8
 80053da:	4638      	mov	r0, r7
 80053dc:	47c8      	blx	r9
 80053de:	3001      	adds	r0, #1
 80053e0:	d0e6      	beq.n	80053b0 <_printf_common+0xa4>
 80053e2:	3601      	adds	r6, #1
 80053e4:	e7d9      	b.n	800539a <_printf_common+0x8e>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	7e0f      	ldrb	r7, [r1, #24]
 80053ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053f0:	2f78      	cmp	r7, #120	@ 0x78
 80053f2:	4691      	mov	r9, r2
 80053f4:	4680      	mov	r8, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	469a      	mov	sl, r3
 80053fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053fe:	d807      	bhi.n	8005410 <_printf_i+0x28>
 8005400:	2f62      	cmp	r7, #98	@ 0x62
 8005402:	d80a      	bhi.n	800541a <_printf_i+0x32>
 8005404:	2f00      	cmp	r7, #0
 8005406:	f000 80d2 	beq.w	80055ae <_printf_i+0x1c6>
 800540a:	2f58      	cmp	r7, #88	@ 0x58
 800540c:	f000 80b9 	beq.w	8005582 <_printf_i+0x19a>
 8005410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005418:	e03a      	b.n	8005490 <_printf_i+0xa8>
 800541a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800541e:	2b15      	cmp	r3, #21
 8005420:	d8f6      	bhi.n	8005410 <_printf_i+0x28>
 8005422:	a101      	add	r1, pc, #4	@ (adr r1, 8005428 <_printf_i+0x40>)
 8005424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005428:	08005481 	.word	0x08005481
 800542c:	08005495 	.word	0x08005495
 8005430:	08005411 	.word	0x08005411
 8005434:	08005411 	.word	0x08005411
 8005438:	08005411 	.word	0x08005411
 800543c:	08005411 	.word	0x08005411
 8005440:	08005495 	.word	0x08005495
 8005444:	08005411 	.word	0x08005411
 8005448:	08005411 	.word	0x08005411
 800544c:	08005411 	.word	0x08005411
 8005450:	08005411 	.word	0x08005411
 8005454:	08005595 	.word	0x08005595
 8005458:	080054bf 	.word	0x080054bf
 800545c:	0800554f 	.word	0x0800554f
 8005460:	08005411 	.word	0x08005411
 8005464:	08005411 	.word	0x08005411
 8005468:	080055b7 	.word	0x080055b7
 800546c:	08005411 	.word	0x08005411
 8005470:	080054bf 	.word	0x080054bf
 8005474:	08005411 	.word	0x08005411
 8005478:	08005411 	.word	0x08005411
 800547c:	08005557 	.word	0x08005557
 8005480:	6833      	ldr	r3, [r6, #0]
 8005482:	1d1a      	adds	r2, r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800548c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005490:	2301      	movs	r3, #1
 8005492:	e09d      	b.n	80055d0 <_printf_i+0x1e8>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	6031      	str	r1, [r6, #0]
 800549c:	0606      	lsls	r6, r0, #24
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0xbc>
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	e003      	b.n	80054ac <_printf_i+0xc4>
 80054a4:	0645      	lsls	r5, r0, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0xb8>
 80054a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054ac:	2d00      	cmp	r5, #0
 80054ae:	da03      	bge.n	80054b8 <_printf_i+0xd0>
 80054b0:	232d      	movs	r3, #45	@ 0x2d
 80054b2:	426d      	negs	r5, r5
 80054b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b8:	4859      	ldr	r0, [pc, #356]	@ (8005620 <_printf_i+0x238>)
 80054ba:	230a      	movs	r3, #10
 80054bc:	e011      	b.n	80054e2 <_printf_i+0xfa>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	0608      	lsls	r0, r1, #24
 80054c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c8:	d402      	bmi.n	80054d0 <_printf_i+0xe8>
 80054ca:	0649      	lsls	r1, r1, #25
 80054cc:	bf48      	it	mi
 80054ce:	b2ad      	uxthmi	r5, r5
 80054d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80054d2:	4853      	ldr	r0, [pc, #332]	@ (8005620 <_printf_i+0x238>)
 80054d4:	6033      	str	r3, [r6, #0]
 80054d6:	bf14      	ite	ne
 80054d8:	230a      	movne	r3, #10
 80054da:	2308      	moveq	r3, #8
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054e2:	6866      	ldr	r6, [r4, #4]
 80054e4:	60a6      	str	r6, [r4, #8]
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	bfa2      	ittt	ge
 80054ea:	6821      	ldrge	r1, [r4, #0]
 80054ec:	f021 0104 	bicge.w	r1, r1, #4
 80054f0:	6021      	strge	r1, [r4, #0]
 80054f2:	b90d      	cbnz	r5, 80054f8 <_printf_i+0x110>
 80054f4:	2e00      	cmp	r6, #0
 80054f6:	d04b      	beq.n	8005590 <_printf_i+0x1a8>
 80054f8:	4616      	mov	r6, r2
 80054fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fe:	fb03 5711 	mls	r7, r3, r1, r5
 8005502:	5dc7      	ldrb	r7, [r0, r7]
 8005504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005508:	462f      	mov	r7, r5
 800550a:	42bb      	cmp	r3, r7
 800550c:	460d      	mov	r5, r1
 800550e:	d9f4      	bls.n	80054fa <_printf_i+0x112>
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10b      	bne.n	800552c <_printf_i+0x144>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	07df      	lsls	r7, r3, #31
 8005518:	d508      	bpl.n	800552c <_printf_i+0x144>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	6861      	ldr	r1, [r4, #4]
 800551e:	4299      	cmp	r1, r3
 8005520:	bfde      	ittt	le
 8005522:	2330      	movle	r3, #48	@ 0x30
 8005524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552c:	1b92      	subs	r2, r2, r6
 800552e:	6122      	str	r2, [r4, #16]
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	464b      	mov	r3, r9
 8005536:	aa03      	add	r2, sp, #12
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7ff fee6 	bl	800530c <_printf_common>
 8005540:	3001      	adds	r0, #1
 8005542:	d14a      	bne.n	80055da <_printf_i+0x1f2>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	b004      	add	sp, #16
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f043 0320 	orr.w	r3, r3, #32
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	4833      	ldr	r0, [pc, #204]	@ (8005624 <_printf_i+0x23c>)
 8005558:	2778      	movs	r7, #120	@ 0x78
 800555a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	6831      	ldr	r1, [r6, #0]
 8005562:	061f      	lsls	r7, r3, #24
 8005564:	f851 5b04 	ldr.w	r5, [r1], #4
 8005568:	d402      	bmi.n	8005570 <_printf_i+0x188>
 800556a:	065f      	lsls	r7, r3, #25
 800556c:	bf48      	it	mi
 800556e:	b2ad      	uxthmi	r5, r5
 8005570:	6031      	str	r1, [r6, #0]
 8005572:	07d9      	lsls	r1, r3, #31
 8005574:	bf44      	itt	mi
 8005576:	f043 0320 	orrmi.w	r3, r3, #32
 800557a:	6023      	strmi	r3, [r4, #0]
 800557c:	b11d      	cbz	r5, 8005586 <_printf_i+0x19e>
 800557e:	2310      	movs	r3, #16
 8005580:	e7ac      	b.n	80054dc <_printf_i+0xf4>
 8005582:	4827      	ldr	r0, [pc, #156]	@ (8005620 <_printf_i+0x238>)
 8005584:	e7e9      	b.n	800555a <_printf_i+0x172>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	f023 0320 	bic.w	r3, r3, #32
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	e7f6      	b.n	800557e <_printf_i+0x196>
 8005590:	4616      	mov	r6, r2
 8005592:	e7bd      	b.n	8005510 <_printf_i+0x128>
 8005594:	6833      	ldr	r3, [r6, #0]
 8005596:	6825      	ldr	r5, [r4, #0]
 8005598:	6961      	ldr	r1, [r4, #20]
 800559a:	1d18      	adds	r0, r3, #4
 800559c:	6030      	str	r0, [r6, #0]
 800559e:	062e      	lsls	r6, r5, #24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	d501      	bpl.n	80055a8 <_printf_i+0x1c0>
 80055a4:	6019      	str	r1, [r3, #0]
 80055a6:	e002      	b.n	80055ae <_printf_i+0x1c6>
 80055a8:	0668      	lsls	r0, r5, #25
 80055aa:	d5fb      	bpl.n	80055a4 <_printf_i+0x1bc>
 80055ac:	8019      	strh	r1, [r3, #0]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	4616      	mov	r6, r2
 80055b4:	e7bc      	b.n	8005530 <_printf_i+0x148>
 80055b6:	6833      	ldr	r3, [r6, #0]
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	6032      	str	r2, [r6, #0]
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7fa fe24 	bl	8000210 <memchr>
 80055c8:	b108      	cbz	r0, 80055ce <_printf_i+0x1e6>
 80055ca:	1b80      	subs	r0, r0, r6
 80055cc:	6060      	str	r0, [r4, #4]
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	2300      	movs	r3, #0
 80055d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d8:	e7aa      	b.n	8005530 <_printf_i+0x148>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	4632      	mov	r2, r6
 80055de:	4649      	mov	r1, r9
 80055e0:	4640      	mov	r0, r8
 80055e2:	47d0      	blx	sl
 80055e4:	3001      	adds	r0, #1
 80055e6:	d0ad      	beq.n	8005544 <_printf_i+0x15c>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	d413      	bmi.n	8005616 <_printf_i+0x22e>
 80055ee:	68e0      	ldr	r0, [r4, #12]
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	4298      	cmp	r0, r3
 80055f4:	bfb8      	it	lt
 80055f6:	4618      	movlt	r0, r3
 80055f8:	e7a6      	b.n	8005548 <_printf_i+0x160>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4632      	mov	r2, r6
 80055fe:	4649      	mov	r1, r9
 8005600:	4640      	mov	r0, r8
 8005602:	47d0      	blx	sl
 8005604:	3001      	adds	r0, #1
 8005606:	d09d      	beq.n	8005544 <_printf_i+0x15c>
 8005608:	3501      	adds	r5, #1
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	9903      	ldr	r1, [sp, #12]
 800560e:	1a5b      	subs	r3, r3, r1
 8005610:	42ab      	cmp	r3, r5
 8005612:	dcf2      	bgt.n	80055fa <_printf_i+0x212>
 8005614:	e7eb      	b.n	80055ee <_printf_i+0x206>
 8005616:	2500      	movs	r5, #0
 8005618:	f104 0619 	add.w	r6, r4, #25
 800561c:	e7f5      	b.n	800560a <_printf_i+0x222>
 800561e:	bf00      	nop
 8005620:	0800595e 	.word	0x0800595e
 8005624:	0800596f 	.word	0x0800596f

08005628 <memmove>:
 8005628:	4288      	cmp	r0, r1
 800562a:	b510      	push	{r4, lr}
 800562c:	eb01 0402 	add.w	r4, r1, r2
 8005630:	d902      	bls.n	8005638 <memmove+0x10>
 8005632:	4284      	cmp	r4, r0
 8005634:	4623      	mov	r3, r4
 8005636:	d807      	bhi.n	8005648 <memmove+0x20>
 8005638:	1e43      	subs	r3, r0, #1
 800563a:	42a1      	cmp	r1, r4
 800563c:	d008      	beq.n	8005650 <memmove+0x28>
 800563e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005646:	e7f8      	b.n	800563a <memmove+0x12>
 8005648:	4402      	add	r2, r0
 800564a:	4601      	mov	r1, r0
 800564c:	428a      	cmp	r2, r1
 800564e:	d100      	bne.n	8005652 <memmove+0x2a>
 8005650:	bd10      	pop	{r4, pc}
 8005652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800565a:	e7f7      	b.n	800564c <memmove+0x24>

0800565c <_sbrk_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d06      	ldr	r5, [pc, #24]	@ (8005678 <_sbrk_r+0x1c>)
 8005660:	2300      	movs	r3, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fb fabc 	bl	8000be4 <_sbrk>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_sbrk_r+0x1a>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_sbrk_r+0x1a>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	20000498 	.word	0x20000498

0800567c <_realloc_r>:
 800567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005680:	4680      	mov	r8, r0
 8005682:	4615      	mov	r5, r2
 8005684:	460c      	mov	r4, r1
 8005686:	b921      	cbnz	r1, 8005692 <_realloc_r+0x16>
 8005688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800568c:	4611      	mov	r1, r2
 800568e:	f7ff bc59 	b.w	8004f44 <_malloc_r>
 8005692:	b92a      	cbnz	r2, 80056a0 <_realloc_r+0x24>
 8005694:	f7ff fbea 	bl	8004e6c <_free_r>
 8005698:	2400      	movs	r4, #0
 800569a:	4620      	mov	r0, r4
 800569c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a0:	f000 f81a 	bl	80056d8 <_malloc_usable_size_r>
 80056a4:	4285      	cmp	r5, r0
 80056a6:	4606      	mov	r6, r0
 80056a8:	d802      	bhi.n	80056b0 <_realloc_r+0x34>
 80056aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056ae:	d8f4      	bhi.n	800569a <_realloc_r+0x1e>
 80056b0:	4629      	mov	r1, r5
 80056b2:	4640      	mov	r0, r8
 80056b4:	f7ff fc46 	bl	8004f44 <_malloc_r>
 80056b8:	4607      	mov	r7, r0
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d0ec      	beq.n	8005698 <_realloc_r+0x1c>
 80056be:	42b5      	cmp	r5, r6
 80056c0:	462a      	mov	r2, r5
 80056c2:	4621      	mov	r1, r4
 80056c4:	bf28      	it	cs
 80056c6:	4632      	movcs	r2, r6
 80056c8:	f7ff fbc2 	bl	8004e50 <memcpy>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4640      	mov	r0, r8
 80056d0:	f7ff fbcc 	bl	8004e6c <_free_r>
 80056d4:	463c      	mov	r4, r7
 80056d6:	e7e0      	b.n	800569a <_realloc_r+0x1e>

080056d8 <_malloc_usable_size_r>:
 80056d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056dc:	1f18      	subs	r0, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bfbc      	itt	lt
 80056e2:	580b      	ldrlt	r3, [r1, r0]
 80056e4:	18c0      	addlt	r0, r0, r3
 80056e6:	4770      	bx	lr

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
