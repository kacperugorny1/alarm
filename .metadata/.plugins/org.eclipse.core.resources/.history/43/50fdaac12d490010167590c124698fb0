/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#include "keyboard.h"
#include "lcd_driver.h"
#include "state_machine.h"
#include "flash_interface.h"
#include "sim800l_driver.h"
#include "expander.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

alarm_state state = DISARMED;
#define MFRC522_REG_COMMAND         0x01
#define MFRC522_REG_COMIEN          0x02
#define MFRC522_REG_DIVIEN          0x03
#define MFRC522_REG_COMIRQ          0x04
#define MFRC522_REG_DIVIRQ          0x05
#define MFRC522_REG_ERROR           0x06
#define MFRC522_REG_FIFO_DATA       0x09
#define MFRC522_REG_FIFO_LEVEL      0x0A
#define MFRC522_REG_BIT_FRAMING     0x0D
#define MFRC522_REG_TX_CONTROL      0x14
#define MFRC522_REG_T_MODE          0x2A
#define MFRC522_REG_T_PRESCALER     0x2B
#define MFRC522_REG_T_RELOAD_H      0x2C
#define MFRC522_REG_T_RELOAD_L      0x2D

// MFRC522 Commands
#define MFRC522_CMD_IDLE            0x00
#define MFRC522_CMD_TRANSCEIVE      0x0C
#define MFRC522_CMD_SOFT_RESET      0x0F

// PICC Commands
#define PICC_REQIDL                 0x26
#define PICC_ANTICOLL               0x93

// Pin Definitions
#define SPI_SW_NSS_Pin              GPIO_PIN_11
#define SPI_SW_NSS_GPIO_Port        GPIOA

// Function to select the MFRC522
static void MFRC522_NSS_Select() {
    HAL_GPIO_WritePin(SPI_SW_NSS_GPIO_Port, SPI_SW_NSS_Pin, GPIO_PIN_RESET);
}

// Function to deselect the MFRC522
static void MFRC522_NSS_Deselect() {
    HAL_GPIO_WritePin(SPI_SW_NSS_GPIO_Port, SPI_SW_NSS_Pin, GPIO_PIN_SET);
}

// Function to write a byte to a register
void MFRC522_Write_Reg(uint8_t reg, uint8_t value) {
    MFRC522_NSS_Select();
    uint8_t tx_data[2];
    tx_data[0] = (reg << 1) & 0x7E; // Address format for write
    tx_data[1] = value;
    HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
    MFRC522_NSS_Deselect();
}

// ***** CORRECTED FUNCTION *****
// Function to read a byte from a register
uint8_t MFRC522_Read_Reg(uint8_t reg) {
    uint8_t tx_byte;
    uint8_t rx_byte;

    // Set the address for reading
    tx_byte = ((reg << 1) & 0x7E) | 0x80;

    MFRC522_NSS_Select();
    // Transmit the register address
    HAL_SPI_Transmit(&hspi2, &tx_byte, 1, 100);
    // Receive the data by transmitting a dummy byte
    HAL_SPI_Receive(&hspi2, &rx_byte, 1, 100);
    MFRC522_NSS_Deselect();

    return rx_byte;
}

// Initialize the MFRC522
void MFRC522_Init(void) {
    MFRC522_NSS_Deselect();
    MFRC522_Write_Reg(MFRC522_REG_COMMAND, MFRC522_CMD_SOFT_RESET);
    HAL_Delay(50); // Wait for reset to complete

    MFRC522_Write_Reg(MFRC522_REG_T_MODE, 0x8D);
    MFRC522_Write_Reg(MFRC522_REG_T_PRESCALER, 0x3E);
    MFRC522_Write_Reg(MFRC522_REG_T_RELOAD_L, 30);
    MFRC522_Write_Reg(MFRC522_REG_T_RELOAD_H, 0);
    MFRC522_Write_Reg(MFRC522_REG_TX_CONTROL, 0x83); // Turn antenna on
}

// Check for a card and read its UID
// Returns 1 if card is found, 0 otherwise
uint8_t MFRC522_CheckForCard(uint8_t* uid) {
    uint8_t status;
    uint8_t buffer[16];
    uint8_t buffer_size = sizeof(buffer);

    // 1. Send Request Command
    MFRC522_Write_Reg(MFRC522_REG_BIT_FRAMING, 0x07); // TX last bits = 7
    buffer[0] = PICC_REQIDL;

    MFRC522_Write_Reg(MFRC522_REG_COMMAND, MFRC522_CMD_TRANSCEIVE);
    MFRC522_Write_Reg(MFRC522_REG_COMIEN, 0x80 | 0x20); // Enable IRQ for Tx and Rx
    MFRC522_Write_Reg(MFRC522_REG_FIFO_DATA, buffer[0]);
    MFRC522_Write_Reg(MFRC522_REG_COMMAND, MFRC522_CMD_IDLE); // Stop current command

    // Simple polling for IRQ (you can improve this with an EXTI interrupt)
    for (uint16_t i = 0; i < 2000; i++) {
        uint8_t irq = MFRC522_Read_Reg(MFRC522_REG_COMIRQ);
        if (irq & 0x20) { // Rx IRQ
            MFRC522_Write_Reg(MFRC522_REG_COMMAND, MFRC522_CMD_IDLE);
            uint8_t fifo_len = MFRC522_Read_Reg(MFRC522_REG_FIFO_LEVEL);
            if (fifo_len == 2) { // Should receive 2 bytes (ATQA)
                // 2. Anti-Collision
                MFRC522_Write_Reg(MFRC522_REG_BIT_FRAMING, 0x00);
                buffer[0] = PICC_ANTICOLL;
                buffer[1] = 0x20;

                MFRC522_Write_Reg(MFRC522_REG_COMMAND, MFRC522_CMD_TRANSCEIVE);
                for(int j=0; j<2; j++) MFRC522_Write_Reg(MFRC522_REG_FIFO_DATA, buffer[j]);

                // Again, simple poll for IRQ
                 for (uint16_t k = 0; k < 2000; k++) {
                     irq = MFRC522_Read_Reg(MFRC522_REG_COMIRQ);
                     if(irq & 0x20) {
                        fifo_len = MFRC522_Read_Reg(MFRC522_REG_FIFO_LEVEL);
                        if (fifo_len == 5) { // UID + BCC
                            for(int l=0; l<4; l++) {
                                uid[l] = MFRC522_Read_Reg(MFRC522_REG_FIFO_DATA);
                            }
                            return 1; // Card found and UID read
                        }
                     }
                 }
            }
        }
    }
    return 0; // No card found
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */


  //INIT WRITE next 4 lines
//  HAL_Delay(1000);
//  char data_in[65] = "************************************************1235****120*****";
//  flash_write_erase_sector7();
//  flash_write_multiple_word(0x08060000, (uint32_t *)data_in, 16);

  //READOUT
  {
	char data_out[72];
	flash_read_multiple_words(0x08060000, (uint32_t *)data_out, 18);
	//PARSING TO VARIABLES
	state_machine_init(data_out);
	lcd_init(&hi2c1);
	gsm_init(&huart1);
	mcp_init(&hi2c1);
  }

  MFRC522_Init();
  printf("MFRC522 Initialized. Waiting for card...\r\n");

  uint8_t card_uid[4];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (MFRC522_CheckForCard(card_uid)) {
	        printf("Card Detected! UID: %02X:%02X:%02X:%02X\r\n",
	                card_uid[0], card_uid[1], card_uid[2], card_uid[3]);
	        HAL_Delay(1000); // Wait a second before checking again
	      }
	  HAL_Delay(100); // Small delay to prevent busy-waiting
	  /*
	  static char x;
	  x = check_keyboard();
	  if(x){
		  if(x < 10) x += '0';
		  else if(x == 10) x = '*';
		  else if(x == 11) x = '0';
		  else if(x == 12) x = '#';
	  }
	  state_machine_run(x);
	   */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 256;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_NSS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin
                           Alarm_Signal_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin SPI_SW_NSS_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin|SPI_SW_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : SPI_IRQ_Pin */
  GPIO_InitStruct.Pin = SPI_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SPI_IRQ_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
  {
    ITM_SendChar(*ptr++);
  }
  return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
