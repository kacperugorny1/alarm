
Alarm_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08003c84  08003c84  00004c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec0  08003ec0  00004ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec8  08003ec8  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ecc  08003ecc  00004ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003ed0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000006c  08003f3c  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08003f3c  0000534c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009869  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d71  00000000  00000000  0000e905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00010678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000796  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166e0  00000000  00000000  000117fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dba0  00000000  00000000  00027ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ee1  00000000  00000000  00035a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd95f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000bd9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000c074c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c6c 	.word	0x08003c6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08003c6c 	.word	0x08003c6c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b0b5      	sub	sp, #212	@ 0xd4
 8000594:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 faf9 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f86b 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f937 	bl	8000810 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a2:	f000 f8d1 	bl	8000748 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005a6:	f000 f8fd 	bl	80007a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  char data_in[65] = "000000072144293400000006096035800000000665249258codecodetimetime";
 80005aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000664 <main+0xd4>)
 80005ac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005b0:	4611      	mov	r1, r2
 80005b2:	2241      	movs	r2, #65	@ 0x41
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 ff0d 	bl	80033d4 <memcpy>

  char data_out[64];

  lcd_init(hi2c1);
 80005ba:	4c2b      	ldr	r4, [pc, #172]	@ (8000668 <main+0xd8>)
 80005bc:	4668      	mov	r0, sp
 80005be:	f104 0310 	add.w	r3, r4, #16
 80005c2:	2244      	movs	r2, #68	@ 0x44
 80005c4:	4619      	mov	r1, r3
 80005c6:	f002 ff05 	bl	80033d4 <memcpy>
 80005ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005ce:	f002 f9cb 	bl	8002968 <lcd_init>
  state_machine_init(4, "1235");
 80005d2:	4926      	ldr	r1, [pc, #152]	@ (800066c <main+0xdc>)
 80005d4:	2004      	movs	r0, #4
 80005d6:	f002 fa6d 	bl	8002ab4 <state_machine_init>
  flash_write_erase_sector7();
 80005da:	f001 ff75 	bl	80024c8 <flash_write_erase_sector7>
  flash_write_multiple_word(0x08060000, (uint32_t *)data_in, 16);
 80005de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005e2:	2210      	movs	r2, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4822      	ldr	r0, [pc, #136]	@ (8000670 <main+0xe0>)
 80005e8:	f001 ffbe 	bl	8002568 <flash_write_multiple_word>
  flash_read_n_words(0x08060000, (uint32_t *)data_out, 16);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2210      	movs	r2, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	481f      	ldr	r0, [pc, #124]	@ (8000670 <main+0xe0>)
 80005f4:	f002 f81a 	bl	800262c <flash_read_n_words>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char x = check_keyboard();
 80005f8:	f002 f8de 	bl	80027b8 <check_keyboard>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	  if(x){
 8000602:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000606:	2b00      	cmp	r3, #0
 8000608:	d027      	beq.n	800065a <main+0xca>
		  if(x < 10) x += '0';
 800060a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800060e:	2b09      	cmp	r3, #9
 8000610:	d805      	bhi.n	800061e <main+0x8e>
 8000612:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000616:	3330      	adds	r3, #48	@ 0x30
 8000618:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800061c:	e016      	b.n	800064c <main+0xbc>
		  else if(x == 10) x = '*';
 800061e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000622:	2b0a      	cmp	r3, #10
 8000624:	d103      	bne.n	800062e <main+0x9e>
 8000626:	232a      	movs	r3, #42	@ 0x2a
 8000628:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800062c:	e00e      	b.n	800064c <main+0xbc>
		  else if(x == 11) x = '0';
 800062e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000632:	2b0b      	cmp	r3, #11
 8000634:	d103      	bne.n	800063e <main+0xae>
 8000636:	2330      	movs	r3, #48	@ 0x30
 8000638:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800063c:	e006      	b.n	800064c <main+0xbc>
		  else if(x == 12) x = '#';
 800063e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000642:	2b0c      	cmp	r3, #12
 8000644:	d102      	bne.n	800064c <main+0xbc>
 8000646:	2323      	movs	r3, #35	@ 0x23
 8000648:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		  state_machine_run(x, true);
 800064c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000650:	2101      	movs	r1, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fa4c 	bl	8002af0 <state_machine_run>
 8000658:	e7ce      	b.n	80005f8 <main+0x68>
	  }
	  else state_machine_run(0, false);
 800065a:	2100      	movs	r1, #0
 800065c:	2000      	movs	r0, #0
 800065e:	f002 fa47 	bl	8002af0 <state_machine_run>
  {
 8000662:	e7c9      	b.n	80005f8 <main+0x68>
 8000664:	08003c8c 	.word	0x08003c8c
 8000668:	20000088 	.word	0x20000088
 800066c:	08003c84 	.word	0x08003c84
 8000670:	08060000 	.word	0x08060000

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	@ 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	@ 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fe72 	bl	800336c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b28      	ldr	r3, [pc, #160]	@ (8000740 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a27      	ldr	r2, [pc, #156]	@ (8000740 <SystemClock_Config+0xcc>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a8:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <SystemClock_Config+0xd0>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006e4:	2310      	movs	r3, #16
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 256;
 80006e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f2:	2304      	movs	r3, #4
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fa16 	bl	8001b2c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000706:	f000 f8e1 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2302      	movs	r3, #2
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2103      	movs	r1, #3
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fc78 	bl	800201c <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000732:	f000 f8cb 	bl	80008cc <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	@ 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f000 fd33 	bl	80011f0 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 f89c 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000088 	.word	0x20000088
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	@ (800080c <MX_SPI2_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_SPI2_Init+0x64>)
 80007f6:	f001 fddd 	bl	80023b4 <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000800:	f000 f864 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000dc 	.word	0x200000dc
 800080c:	40003800 	.word	0x40003800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_GPIO_Init+0xb4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2154      	movs	r1, #84	@ 0x54
 800087e:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 8000880:	f000 fc9c 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Keyboard_row2_Pin Keyboard_row3_Pin Keyboard_row4_Pin Keyboard_row1_Pin
                           Alarm_Signal_Pin */
  GPIO_InitStruct.Pin = Keyboard_row2_Pin|Keyboard_row3_Pin|Keyboard_row4_Pin|Keyboard_row1_Pin
 8000884:	f248 032b 	movw	r3, #32811	@ 0x802b
 8000888:	60fb      	str	r3, [r7, #12]
                          |Alarm_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 800089a:	f000 faf3 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Keyboard_col3_Pin Keyboard_col1_Pin Keyboard_col2_Pin */
  GPIO_InitStruct.Pin = Keyboard_col3_Pin|Keyboard_col1_Pin|Keyboard_col2_Pin;
 800089e:	2354      	movs	r3, #84	@ 0x54
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_GPIO_Init+0xb8>)
 80008b6:	f000 fae5 	bl	8000e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a19      	ldr	r2, [pc, #100]	@ (80009ac <HAL_I2C_MspInit+0x84>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12b      	bne.n	80009a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <HAL_I2C_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a17      	ldr	r2, [pc, #92]	@ (80009b0 <HAL_I2C_MspInit+0x88>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <HAL_I2C_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000966:	23c0      	movs	r3, #192	@ 0xc0
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800096a:	2312      	movs	r3, #18
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000976:	2304      	movs	r3, #4
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <HAL_I2C_MspInit+0x8c>)
 8000982:	f000 fa7f 	bl	8000e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <HAL_I2C_MspInit+0x88>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <HAL_I2C_MspInit+0x88>)
 8000990:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_I2C_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40005400 	.word	0x40005400
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400

080009b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	@ 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a19      	ldr	r2, [pc, #100]	@ (8000a3c <HAL_SPI_MspInit+0x84>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12c      	bne.n	8000a34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <HAL_SPI_MspInit+0x88>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	4a17      	ldr	r2, [pc, #92]	@ (8000a40 <HAL_SPI_MspInit+0x88>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <HAL_SPI_MspInit+0x88>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <HAL_SPI_MspInit+0x88>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a10      	ldr	r2, [pc, #64]	@ (8000a40 <HAL_SPI_MspInit+0x88>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <HAL_SPI_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000a12:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a24:	2305      	movs	r3, #5
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <HAL_SPI_MspInit+0x8c>)
 8000a30:	f000 fa28 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	@ 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40003800 	.word	0x40003800
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 f8c7 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f002 fc50 	bl	800337c <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000134 	.word	0x20000134
 8000b10:	20000350 	.word	0x20000350

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b66:	f002 fc0f 	bl	8003388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd11 	bl	8000590 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b7c:	08003ed0 	.word	0x08003ed0
  ldr r2, =_sbss
 8000b80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b84:	2000034c 	.word	0x2000034c

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f931 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f000 f808 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe8a 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x58>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f93b 	bl	8000e6a <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00e      	b.n	8000c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d80a      	bhi.n	8000c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f000 f911 	bl	8000e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <HAL_InitTick+0x5c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000004 	.word	0x20000004
 8000c28:	2000000c 	.word	0x2000000c
 8000c2c:	20000008 	.word	0x20000008

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000000c 	.word	0x2000000c
 8000c54:	20000138 	.word	0x20000138

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000138 	.word	0x20000138

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	@ (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	@ (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	@ 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	@ 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	@ (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff47 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e44:	f7ff ff5c 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	6978      	ldr	r0, [r7, #20]
 8000e50:	f7ff ff8e 	bl	8000d70 <NVIC_EncodePriority>
 8000e54:	4602      	mov	r2, r0
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff5d 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffb0 	bl	8000dd8 <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
 8000e9e:	e159      	b.n	8001154 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	f040 8148 	bne.w	800114e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d005      	beq.n	8000ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d130      	bne.n	8000f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	091b      	lsrs	r3, r3, #4
 8000f22:	f003 0201 	and.w	r2, r3, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d017      	beq.n	8000f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d123      	bne.n	8000fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	08da      	lsrs	r2, r3, #3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3208      	adds	r2, #8
 8000fc2:	69b9      	ldr	r1, [r7, #24]
 8000fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0203 	and.w	r2, r3, #3
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001004:	2b00      	cmp	r3, #0
 8001006:	f000 80a2 	beq.w	800114e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b57      	ldr	r3, [pc, #348]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	4a56      	ldr	r2, [pc, #344]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001018:	6453      	str	r3, [r2, #68]	@ 0x44
 800101a:	4b54      	ldr	r3, [pc, #336]	@ (800116c <HAL_GPIO_Init+0x2e8>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001026:	4a52      	ldr	r2, [pc, #328]	@ (8001170 <HAL_GPIO_Init+0x2ec>)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	3302      	adds	r3, #2
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	@ (8001174 <HAL_GPIO_Init+0x2f0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x202>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	@ (8001178 <HAL_GPIO_Init+0x2f4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x1fe>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a47      	ldr	r2, [pc, #284]	@ (800117c <HAL_GPIO_Init+0x2f8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x1fa>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a46      	ldr	r2, [pc, #280]	@ (8001180 <HAL_GPIO_Init+0x2fc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x1f6>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a45      	ldr	r2, [pc, #276]	@ (8001184 <HAL_GPIO_Init+0x300>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x1f2>
 8001072:	2304      	movs	r3, #4
 8001074:	e008      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001076:	2307      	movs	r3, #7
 8001078:	e006      	b.n	8001088 <HAL_GPIO_Init+0x204>
 800107a:	2303      	movs	r3, #3
 800107c:	e004      	b.n	8001088 <HAL_GPIO_Init+0x204>
 800107e:	2302      	movs	r3, #2
 8001080:	e002      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x204>
 8001086:	2300      	movs	r3, #0
 8001088:	69fa      	ldr	r2, [r7, #28]
 800108a:	f002 0203 	and.w	r2, r2, #3
 800108e:	0092      	lsls	r2, r2, #2
 8001090:	4093      	lsls	r3, r2
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001098:	4935      	ldr	r1, [pc, #212]	@ (8001170 <HAL_GPIO_Init+0x2ec>)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b38      	ldr	r3, [pc, #224]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f4:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010fa:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <HAL_GPIO_Init+0x304>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111e:	4a1a      	ldr	r2, [pc, #104]	@ (8001188 <HAL_GPIO_Init+0x304>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001124:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_GPIO_Init+0x304>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001148:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <HAL_GPIO_Init+0x304>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3301      	adds	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	f67f aea2 	bls.w	8000ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40013800 	.word	0x40013800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020400 	.word	0x40020400
 800117c:	40020800 	.word	0x40020800
 8001180:	40020c00 	.word	0x40020c00
 8001184:	40021000 	.word	0x40021000
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e12b      	b.n	800145a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d106      	bne.n	800121c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fb86 	bl	8000928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2224      	movs	r2, #36	@ 0x24
 8001220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001254:	f001 f89a 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8001258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a81      	ldr	r2, [pc, #516]	@ (8001464 <HAL_I2C_Init+0x274>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d807      	bhi.n	8001274 <HAL_I2C_Init+0x84>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a80      	ldr	r2, [pc, #512]	@ (8001468 <HAL_I2C_Init+0x278>)
 8001268:	4293      	cmp	r3, r2
 800126a:	bf94      	ite	ls
 800126c:	2301      	movls	r3, #1
 800126e:	2300      	movhi	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	e006      	b.n	8001282 <HAL_I2C_Init+0x92>
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4a7d      	ldr	r2, [pc, #500]	@ (800146c <HAL_I2C_Init+0x27c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	bf94      	ite	ls
 800127c:	2301      	movls	r3, #1
 800127e:	2300      	movhi	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0e7      	b.n	800145a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4a78      	ldr	r2, [pc, #480]	@ (8001470 <HAL_I2C_Init+0x280>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	0c9b      	lsrs	r3, r3, #18
 8001294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001464 <HAL_I2C_Init+0x274>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d802      	bhi.n	80012c4 <HAL_I2C_Init+0xd4>
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	3301      	adds	r3, #1
 80012c2:	e009      	b.n	80012d8 <HAL_I2C_Init+0xe8>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4a69      	ldr	r2, [pc, #420]	@ (8001474 <HAL_I2C_Init+0x284>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	099b      	lsrs	r3, r3, #6
 80012d6:	3301      	adds	r3, #1
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	430b      	orrs	r3, r1
 80012de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	495c      	ldr	r1, [pc, #368]	@ (8001464 <HAL_I2C_Init+0x274>)
 80012f4:	428b      	cmp	r3, r1
 80012f6:	d819      	bhi.n	800132c <HAL_I2C_Init+0x13c>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1e59      	subs	r1, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fbb1 f3f3 	udiv	r3, r1, r3
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800130c:	400b      	ands	r3, r1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00a      	beq.n	8001328 <HAL_I2C_Init+0x138>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1e59      	subs	r1, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001320:	3301      	adds	r3, #1
 8001322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001326:	e051      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 8001328:	2304      	movs	r3, #4
 800132a:	e04f      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d111      	bne.n	8001358 <HAL_I2C_Init+0x168>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1e58      	subs	r0, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	440b      	add	r3, r1
 8001342:	fbb0 f3f3 	udiv	r3, r0, r3
 8001346:	3301      	adds	r3, #1
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	e012      	b.n	800137e <HAL_I2C_Init+0x18e>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	1e58      	subs	r0, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	0099      	lsls	r1, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	fbb0 f3f3 	udiv	r3, r0, r3
 800136e:	3301      	adds	r3, #1
 8001370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_I2C_Init+0x196>
 8001382:	2301      	movs	r3, #1
 8001384:	e022      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10e      	bne.n	80013ac <HAL_I2C_Init+0x1bc>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1e58      	subs	r0, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6859      	ldr	r1, [r3, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013aa:	e00f      	b.n	80013cc <HAL_I2C_Init+0x1dc>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1e58      	subs	r0, r3, #1
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6859      	ldr	r1, [r3, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	0099      	lsls	r1, r3, #2
 80013bc:	440b      	add	r3, r1
 80013be:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	6809      	ldr	r1, [r1, #0]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69da      	ldr	r2, [r3, #28]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6911      	ldr	r1, [r2, #16]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68d2      	ldr	r2, [r2, #12]
 8001406:	4311      	orrs	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	430b      	orrs	r3, r1
 800140e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2220      	movs	r2, #32
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	000186a0 	.word	0x000186a0
 8001468:	001e847f 	.word	0x001e847f
 800146c:	003d08ff 	.word	0x003d08ff
 8001470:	431bde83 	.word	0x431bde83
 8001474:	10624dd3 	.word	0x10624dd3

08001478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af02      	add	r7, sp, #8
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	461a      	mov	r2, r3
 8001484:	460b      	mov	r3, r1
 8001486:	817b      	strh	r3, [r7, #10]
 8001488:	4613      	mov	r3, r2
 800148a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff fbe4 	bl	8000c58 <HAL_GetTick>
 8001490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b20      	cmp	r3, #32
 800149c:	f040 80e0 	bne.w	8001660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2319      	movs	r3, #25
 80014a6:	2201      	movs	r2, #1
 80014a8:	4970      	ldr	r1, [pc, #448]	@ (800166c <HAL_I2C_Master_Transmit+0x1f4>)
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f964 	bl	8001778 <I2C_WaitOnFlagUntilTimeout>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014b6:	2302      	movs	r3, #2
 80014b8:	e0d3      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_I2C_Master_Transmit+0x50>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e0cc      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d007      	beq.n	80014ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2221      	movs	r2, #33	@ 0x21
 8001502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2210      	movs	r2, #16
 800150a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	893a      	ldrh	r2, [r7, #8]
 800151e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4a50      	ldr	r2, [pc, #320]	@ (8001670 <HAL_I2C_Master_Transmit+0x1f8>)
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001530:	8979      	ldrh	r1, [r7, #10]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	6a3a      	ldr	r2, [r7, #32]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f89c 	bl	8001674 <I2C_MasterRequestWrite>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e08d      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800155c:	e066      	b.n	800162c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 fa22 	bl	80019ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00d      	beq.n	800158a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	2b04      	cmp	r3, #4
 8001574:	d107      	bne.n	8001586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e06b      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	781a      	ldrb	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3b01      	subs	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d11b      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x188>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d017      	beq.n	8001600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	6a39      	ldr	r1, [r7, #32]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 fa19 	bl	8001a3c <I2C_WaitOnBTFFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00d      	beq.n	800162c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	2b04      	cmp	r3, #4
 8001616:	d107      	bne.n	8001628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e01a      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	d194      	bne.n	800155e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2220      	movs	r2, #32
 8001648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	e000      	b.n	8001662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001660:	2302      	movs	r3, #2
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	00100002 	.word	0x00100002
 8001670:	ffff0000 	.word	0xffff0000

08001674 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af02      	add	r7, sp, #8
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	460b      	mov	r3, r1
 8001682:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d006      	beq.n	800169e <I2C_MasterRequestWrite+0x2a>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d003      	beq.n	800169e <I2C_MasterRequestWrite+0x2a>
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800169c:	d108      	bne.n	80016b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00b      	b.n	80016c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	2b12      	cmp	r3, #18
 80016b6:	d107      	bne.n	80016c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f84f 	bl	8001778 <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00d      	beq.n	80016fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ee:	d103      	bne.n	80016f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e035      	b.n	8001768 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001704:	d108      	bne.n	8001718 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001714:	611a      	str	r2, [r3, #16]
 8001716:	e01b      	b.n	8001750 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	11db      	asrs	r3, r3, #7
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0306 	and.w	r3, r3, #6
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f063 030f 	orn	r3, r3, #15
 8001728:	b2da      	uxtb	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	490e      	ldr	r1, [pc, #56]	@ (8001770 <I2C_MasterRequestWrite+0xfc>)
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f898 	bl	800186c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e010      	b.n	8001768 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4907      	ldr	r1, [pc, #28]	@ (8001774 <I2C_MasterRequestWrite+0x100>)
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f888 	bl	800186c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	00010008 	.word	0x00010008
 8001774:	00010002 	.word	0x00010002

08001778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001788:	e048      	b.n	800181c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d044      	beq.n	800181c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001792:	f7ff fa61 	bl	8000c58 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d302      	bcc.n	80017a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d139      	bne.n	800181c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10d      	bne.n	80017ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	43da      	mvns	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4013      	ands	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	e00c      	b.n	80017e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	43da      	mvns	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	4013      	ands	r3, r2
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d116      	bne.n	800181c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e023      	b.n	8001864 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10d      	bne.n	8001842 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	43da      	mvns	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4013      	ands	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	e00c      	b.n	800185c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	43da      	mvns	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	4013      	ands	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	429a      	cmp	r2, r3
 8001860:	d093      	beq.n	800178a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800187a:	e071      	b.n	8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800188a:	d123      	bne.n	80018d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800189a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80018a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	f043 0204 	orr.w	r2, r3, #4
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e067      	b.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018da:	d041      	beq.n	8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018dc:	f7ff f9bc 	bl	8000c58 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d302      	bcc.n	80018f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d136      	bne.n	8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10c      	bne.n	8001916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4013      	ands	r3, r2
 8001908:	b29b      	uxth	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	bf14      	ite	ne
 800190e:	2301      	movne	r3, #1
 8001910:	2300      	moveq	r3, #0
 8001912:	b2db      	uxtb	r3, r3
 8001914:	e00b      	b.n	800192e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	43da      	mvns	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4013      	ands	r3, r2
 8001922:	b29b      	uxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d016      	beq.n	8001960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e021      	b.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0c1b      	lsrs	r3, r3, #16
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10c      	bne.n	8001984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	43da      	mvns	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4013      	ands	r3, r2
 8001976:	b29b      	uxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	e00b      	b.n	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4013      	ands	r3, r2
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf14      	ite	ne
 8001996:	2301      	movne	r3, #1
 8001998:	2300      	moveq	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	f47f af6d 	bne.w	800187c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019b8:	e034      	b.n	8001a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f886 	bl	8001acc <I2C_IsAcknowledgeFailed>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e034      	b.n	8001a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d028      	beq.n	8001a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019d2:	f7ff f941 	bl	8000c58 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11d      	bne.n	8001a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f2:	2b80      	cmp	r3, #128	@ 0x80
 80019f4:	d016      	beq.n	8001a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	f043 0220 	orr.w	r2, r3, #32
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e007      	b.n	8001a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2e:	2b80      	cmp	r3, #128	@ 0x80
 8001a30:	d1c3      	bne.n	80019ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a48:	e034      	b.n	8001ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f83e 	bl	8001acc <I2C_IsAcknowledgeFailed>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e034      	b.n	8001ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d028      	beq.n	8001ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a62:	f7ff f8f9 	bl	8000c58 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d302      	bcc.n	8001a78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11d      	bne.n	8001ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d016      	beq.n	8001ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f043 0220 	orr.w	r2, r3, #32
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e007      	b.n	8001ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d1c3      	bne.n	8001a4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae2:	d11b      	bne.n	8001b1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001aec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f043 0204 	orr.w	r2, r3, #4
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e267      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d075      	beq.n	8001c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b4a:	4b88      	ldr	r3, [pc, #544]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d00c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b85      	ldr	r3, [pc, #532]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b82      	ldr	r3, [pc, #520]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b6e:	d10b      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	4b7e      	ldr	r3, [pc, #504]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d05b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x108>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d157      	bne.n	8001c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e242      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x74>
 8001b92:	4b76      	ldr	r3, [pc, #472]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a75      	ldr	r2, [pc, #468]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b70      	ldr	r3, [pc, #448]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6f      	ldr	r2, [pc, #444]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6c      	ldr	r2, [pc, #432]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001bc4:	4b69      	ldr	r3, [pc, #420]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a68      	ldr	r2, [pc, #416]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b66      	ldr	r3, [pc, #408]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a65      	ldr	r2, [pc, #404]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff f838 	bl	8000c58 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f834 	bl	8000c58 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e207      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xc0>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f824 	bl	8000c58 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff f820 	bl	8000c58 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1f3      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0xe8>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c42:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b47      	ldr	r3, [pc, #284]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b44      	ldr	r3, [pc, #272]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1c7      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4937      	ldr	r1, [pc, #220]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7fe ffd9 	bl	8000c58 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7fe ffd5 	bl	8000c58 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1a8      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4925      	ldr	r1, [pc, #148]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ffb8 	bl	8000c58 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7fe ffb4 	bl	8000c58 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e187      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d036      	beq.n	8001d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7fe ff98 	bl	8000c58 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7fe ff94 	bl	8000c58 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e167      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x200>
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7fe ff81 	bl	8000c58 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	e00e      	b.n	8001d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7fe ff7d 	bl	8000c58 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d907      	bls.n	8001d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e150      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	42470000 	.word	0x42470000
 8001d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b88      	ldr	r3, [pc, #544]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ea      	bne.n	8001d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8097 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b81      	ldr	r3, [pc, #516]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b7d      	ldr	r3, [pc, #500]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a7c      	ldr	r2, [pc, #496]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b77      	ldr	r3, [pc, #476]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b74      	ldr	r3, [pc, #464]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a73      	ldr	r2, [pc, #460]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7fe ff3d 	bl	8000c58 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7fe ff39 	bl	8000c58 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e10c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2ea>
 8001e08:	4b64      	ldr	r3, [pc, #400]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a63      	ldr	r2, [pc, #396]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x30c>
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a5e      	ldr	r2, [pc, #376]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e38:	4b58      	ldr	r3, [pc, #352]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a57      	ldr	r2, [pc, #348]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	4b55      	ldr	r3, [pc, #340]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a54      	ldr	r2, [pc, #336]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7fe fefe 	bl	8000c58 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7fe fefa 	bl	8000c58 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0cb      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCC_OscConfig+0x334>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7fe fee8 	bl	8000c58 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe fee4 	bl	8000c58 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0b5      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ee      	bne.n	8001e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b39      	ldr	r3, [pc, #228]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a38      	ldr	r2, [pc, #224]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a1 	beq.w	800200c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eca:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d05c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d141      	bne.n	8001f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7fe feb8 	bl	8000c58 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe feb4 	bl	8000c58 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e087      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	491b      	ldr	r1, [pc, #108]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fe8d 	bl	8000c58 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe fe89 	bl	8000c58 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e05c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x416>
 8001f60:	e054      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe fe76 	bl	8000c58 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fe72 	bl	8000c58 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e045      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x444>
 8001f8e:	e03d      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e038      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_RCC_OscConfig+0x4ec>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d028      	beq.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d121      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11a      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0cc      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b68      	ldr	r3, [pc, #416]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d90c      	bls.n	8002058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b65      	ldr	r3, [pc, #404]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b63      	ldr	r3, [pc, #396]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002070:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a58      	ldr	r2, [pc, #352]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800207a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b50      	ldr	r3, [pc, #320]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	494d      	ldr	r1, [pc, #308]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d044      	beq.n	800213c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b47      	ldr	r3, [pc, #284]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d003      	beq.n	80020da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	4b3f      	ldr	r3, [pc, #252]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e067      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4934      	ldr	r1, [pc, #208]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210c:	f7fe fda4 	bl	8000c58 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7fe fda0 	bl	8000c58 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e04f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d20c      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4916      	ldr	r1, [pc, #88]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490e      	ldr	r1, [pc, #56]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a2:	f000 f821 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490a      	ldr	r1, [pc, #40]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fd04 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023c00 	.word	0x40023c00
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08003d74 	.word	0x08003d74
 80021e0:	20000004 	.word	0x20000004
 80021e4:	20000008 	.word	0x20000008

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ec:	b090      	sub	sp, #64	@ 0x40
 80021ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002200:	4b59      	ldr	r3, [pc, #356]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d00d      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x40>
 800220c:	2b08      	cmp	r3, #8
 800220e:	f200 80a1 	bhi.w	8002354 <HAL_RCC_GetSysClockFreq+0x16c>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002216:	2b04      	cmp	r3, #4
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x3a>
 800221a:	e09b      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_RCC_GetSysClockFreq+0x184>)
 800221e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002220:	e09b      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002222:	4b53      	ldr	r3, [pc, #332]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002224:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002226:	e098      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002228:	4b4f      	ldr	r3, [pc, #316]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002230:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002232:	4b4d      	ldr	r3, [pc, #308]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d028      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223e:	4b4a      	ldr	r3, [pc, #296]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	2200      	movs	r2, #0
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	627a      	str	r2, [r7, #36]	@ 0x24
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002250:	2100      	movs	r1, #0
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002254:	fb03 f201 	mul.w	r2, r3, r1
 8002258:	2300      	movs	r3, #0
 800225a:	fb00 f303 	mul.w	r3, r0, r3
 800225e:	4413      	add	r3, r2
 8002260:	4a43      	ldr	r2, [pc, #268]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x188>)
 8002262:	fba0 1202 	umull	r1, r2, r0, r2
 8002266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002268:	460a      	mov	r2, r1
 800226a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800226c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800226e:	4413      	add	r3, r2
 8002270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002274:	2200      	movs	r2, #0
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	61fa      	str	r2, [r7, #28]
 800227a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800227e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002282:	f7fe f80d 	bl	80002a0 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4613      	mov	r3, r2
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800228e:	e053      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002290:	4b35      	ldr	r3, [pc, #212]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	2200      	movs	r2, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	617a      	str	r2, [r7, #20]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022a2:	f04f 0b00 	mov.w	fp, #0
 80022a6:	4652      	mov	r2, sl
 80022a8:	465b      	mov	r3, fp
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b8:	0150      	lsls	r0, r2, #5
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	ebb2 080a 	subs.w	r8, r2, sl
 80022c2:	eb63 090b 	sbc.w	r9, r3, fp
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022da:	ebb2 0408 	subs.w	r4, r2, r8
 80022de:	eb63 0509 	sbc.w	r5, r3, r9
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	00eb      	lsls	r3, r5, #3
 80022ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f0:	00e2      	lsls	r2, r4, #3
 80022f2:	4614      	mov	r4, r2
 80022f4:	461d      	mov	r5, r3
 80022f6:	eb14 030a 	adds.w	r3, r4, sl
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	eb45 030b 	adc.w	r3, r5, fp
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800230e:	4629      	mov	r1, r5
 8002310:	028b      	lsls	r3, r1, #10
 8002312:	4621      	mov	r1, r4
 8002314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002318:	4621      	mov	r1, r4
 800231a:	028a      	lsls	r2, r1, #10
 800231c:	4610      	mov	r0, r2
 800231e:	4619      	mov	r1, r3
 8002320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002322:	2200      	movs	r2, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	60fa      	str	r2, [r7, #12]
 8002328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800232c:	f7fd ffb8 	bl	80002a0 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4613      	mov	r3, r2
 8002336:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x180>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	3301      	adds	r3, #1
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002348:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800234a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002352:	e002      	b.n	800235a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <HAL_RCC_GetSysClockFreq+0x184>)
 8002356:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002358:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800235c:	4618      	mov	r0, r3
 800235e:	3740      	adds	r7, #64	@ 0x40
 8002360:	46bd      	mov	sp, r7
 8002362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	00f42400 	.word	0x00f42400
 8002370:	017d7840 	.word	0x017d7840

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_RCC_GetHCLKFreq+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002390:	f7ff fff0 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0a9b      	lsrs	r3, r3, #10
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	@ (80023b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08003d84 	.word	0x08003d84

080023b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07b      	b.n	80024be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d108      	bne.n	80023e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023d6:	d009      	beq.n	80023ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
 80023de:	e005      	b.n	80023ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fad6 	bl	80009b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002470:	ea42 0103 	orr.w	r1, r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	f003 0104 	and.w	r1, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	f003 0210 	and.w	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69da      	ldr	r2, [r3, #28]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <flash_write_erase_sector7>:

#include "flash_interface.h"



void flash_write_erase_sector7(){
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY) ;
 80024cc:	bf00      	nop
 80024ce:	4b23      	ldr	r3, [pc, #140]	@ (800255c <flash_write_erase_sector7+0x94>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f9      	bne.n	80024ce <flash_write_erase_sector7+0x6>
  __ASM volatile ("cpsid i" : : : "memory");
 80024da:	b672      	cpsid	i
}
 80024dc:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 80024de:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <flash_write_erase_sector7+0x94>)
 80024e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002560 <flash_write_erase_sector7+0x98>)
 80024e2:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <flash_write_erase_sector7+0x94>)
 80024e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <flash_write_erase_sector7+0x9c>)
 80024e8:	605a      	str	r2, [r3, #4]

	//SECTOR 7 ERASE
	FLASH->CR |= FLASH_CR_SER;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <flash_write_erase_sector7+0x94>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <flash_write_erase_sector7+0x94>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2;
 80024f6:	4b19      	ldr	r3, [pc, #100]	@ (800255c <flash_write_erase_sector7+0x94>)
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	4a18      	ldr	r2, [pc, #96]	@ (800255c <flash_write_erase_sector7+0x94>)
 80024fc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8002500:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_STRT;
 8002502:	4b16      	ldr	r3, [pc, #88]	@ (800255c <flash_write_erase_sector7+0x94>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4a15      	ldr	r2, [pc, #84]	@ (800255c <flash_write_erase_sector7+0x94>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250c:	6113      	str	r3, [r2, #16]

	while(FLASH->SR & FLASH_SR_BSY) ;
 800250e:	bf00      	nop
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <flash_write_erase_sector7+0x94>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f9      	bne.n	8002510 <flash_write_erase_sector7+0x48>
	//RETURN TO INIT STATE
	FLASH->CR &= ~FLASH_CR_STRT;
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <flash_write_erase_sector7+0x94>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <flash_write_erase_sector7+0x94>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~(FLASH_CR_SNB_0 | FLASH_CR_SNB_1 | FLASH_CR_SNB_2);
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <flash_write_erase_sector7+0x94>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	4a0b      	ldr	r2, [pc, #44]	@ (800255c <flash_write_erase_sector7+0x94>)
 800252e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8002532:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_SER;
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <flash_write_erase_sector7+0x94>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	4a08      	ldr	r2, [pc, #32]	@ (800255c <flash_write_erase_sector7+0x94>)
 800253a:	f023 0302 	bic.w	r3, r3, #2
 800253e:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_LOCK;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <flash_write_erase_sector7+0x94>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	4a05      	ldr	r2, [pc, #20]	@ (800255c <flash_write_erase_sector7+0x94>)
 8002546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800254a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 800254c:	b662      	cpsie	i
}
 800254e:	bf00      	nop

	__enable_irq();
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00
 8002560:	45670123 	.word	0x45670123
 8002564:	cdef89ab 	.word	0xcdef89ab

08002568 <flash_write_multiple_word>:



void flash_write_multiple_word(uint32_t addr, uint32_t* data, size_t num){
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
	//CHECK IF BUSY
	while(FLASH->SR & FLASH_SR_BSY) ;
 8002574:	bf00      	nop
 8002576:	4b2a      	ldr	r3, [pc, #168]	@ (8002620 <flash_write_multiple_word+0xb8>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <flash_write_multiple_word+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 8002582:	b672      	cpsid	i
}
 8002584:	bf00      	nop
	__disable_irq();

	//UNLOCK FLASH_CR
	FLASH->KEYR = 0x45670123;
 8002586:	4b26      	ldr	r3, [pc, #152]	@ (8002620 <flash_write_multiple_word+0xb8>)
 8002588:	4a26      	ldr	r2, [pc, #152]	@ (8002624 <flash_write_multiple_word+0xbc>)
 800258a:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 800258c:	4b24      	ldr	r3, [pc, #144]	@ (8002620 <flash_write_multiple_word+0xb8>)
 800258e:	4a26      	ldr	r2, [pc, #152]	@ (8002628 <flash_write_multiple_word+0xc0>)
 8002590:	605a      	str	r2, [r3, #4]

	//PICK DOUBLE WORD WRITING
	FLASH->CR |= FLASH_CR_PSIZE_1;
 8002592:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <flash_write_multiple_word+0xb8>)
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	4a22      	ldr	r2, [pc, #136]	@ (8002620 <flash_write_multiple_word+0xb8>)
 8002598:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800259c:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_0;
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025a8:	6113      	str	r3, [r2, #16]

	//ENABLE PROGRAMMING MODE
	FLASH->CR |= FLASH_CR_PG;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6113      	str	r3, [r2, #16]

	for(size_t i = 0; i < num; ++i){
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e00c      	b.n	80025d6 <flash_write_multiple_word+0x6e>
		*((uint32_t *)addr + i) = *(data + i);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4413      	add	r3, r2
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	0091      	lsls	r1, r2, #2
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	440a      	add	r2, r1
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6013      	str	r3, [r2, #0]
	for(size_t i = 0; i < num; ++i){
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d3ee      	bcc.n	80025bc <flash_write_multiple_word+0x54>

	}

	//WAIT TILL COMPLETES
	while(FLASH->SR & FLASH_SR_BSY) ;
 80025de:	bf00      	nop
 80025e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <flash_write_multiple_word+0x78>
	//TURN OFF PROGRAMMING MODE
	FLASH->CR &= ~FLASH_CR_PG;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~FLASH_CR_PSIZE_1;
 80025f8:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4a08      	ldr	r2, [pc, #32]	@ (8002620 <flash_write_multiple_word+0xb8>)
 80025fe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002602:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_LOCK;
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <flash_write_multiple_word+0xb8>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a05      	ldr	r2, [pc, #20]	@ (8002620 <flash_write_multiple_word+0xb8>)
 800260a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800260e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 8002610:	b662      	cpsie	i
}
 8002612:	bf00      	nop
	__enable_irq();
}
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	40023c00 	.word	0x40023c00
 8002624:	45670123 	.word	0x45670123
 8002628:	cdef89ab 	.word	0xcdef89ab

0800262c <flash_read_n_words>:




void flash_read_n_words(uint32_t addr, uint32_t* data, size_t n){
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
	for(size_t i = 0; i < n; ++i){
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e00d      	b.n	800265a <flash_read_n_words+0x2e>
		*(data + i) = *((uint32_t*)addr + i);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	009a      	lsls	r2, r3, #2
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4413      	add	r3, r2
 8002646:	4619      	mov	r1, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	4413      	add	r3, r2
 8002650:	680a      	ldr	r2, [r1, #0]
 8002652:	601a      	str	r2, [r3, #0]
	for(size_t i = 0; i < n; ++i){
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	d3ed      	bcc.n	800263e <flash_read_n_words+0x12>
	}
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <set_column>:
static char x;
static uint32_t i = 0;
static uint32_t lastDebounceTime[12];
static bool keyState[12] = {};

void set_column(uint8_t col, GPIO_PinState state){
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	460a      	mov	r2, r1
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	4613      	mov	r3, r2
 800267e:	71bb      	strb	r3, [r7, #6]
	switch(col){
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d014      	beq.n	80026b0 <set_column+0x40>
 8002686:	2b02      	cmp	r3, #2
 8002688:	dc19      	bgt.n	80026be <set_column+0x4e>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <set_column+0x24>
 800268e:	2b01      	cmp	r3, #1
 8002690:	d007      	beq.n	80026a2 <set_column+0x32>
		break;
	case 2:
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
		break;
	}
}
 8002692:	e014      	b.n	80026be <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col1_Pin, state);
 8002694:	79bb      	ldrb	r3, [r7, #6]
 8002696:	461a      	mov	r2, r3
 8002698:	2110      	movs	r1, #16
 800269a:	480b      	ldr	r0, [pc, #44]	@ (80026c8 <set_column+0x58>)
 800269c:	f7fe fd8e 	bl	80011bc <HAL_GPIO_WritePin>
		break;
 80026a0:	e00d      	b.n	80026be <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col2_Pin, state);
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	461a      	mov	r2, r3
 80026a6:	2140      	movs	r1, #64	@ 0x40
 80026a8:	4807      	ldr	r0, [pc, #28]	@ (80026c8 <set_column+0x58>)
 80026aa:	f7fe fd87 	bl	80011bc <HAL_GPIO_WritePin>
		break;
 80026ae:	e006      	b.n	80026be <set_column+0x4e>
		HAL_GPIO_WritePin(GPIOA, Keyboard_col3_Pin, state);
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	461a      	mov	r2, r3
 80026b4:	2104      	movs	r1, #4
 80026b6:	4804      	ldr	r0, [pc, #16]	@ (80026c8 <set_column+0x58>)
 80026b8:	f7fe fd80 	bl	80011bc <HAL_GPIO_WritePin>
		break;
 80026bc:	bf00      	nop
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40020000 	.word	0x40020000

080026cc <handle_key_press>:
void handle_key_press(uint8_t col, uint8_t row){
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	460a      	mov	r2, r1
 80026d6:	71fb      	strb	r3, [r7, #7]
 80026d8:	4613      	mov	r3, r2
 80026da:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 1;
 80026dc:	79ba      	ldrb	r2, [r7, #6]
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	441a      	add	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	4413      	add	r3, r2
 80026e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002714 <handle_key_press+0x48>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	54d1      	strb	r1, [r2, r3]
	x = (row) * 3 + col + 1;
 80026ee:	79bb      	ldrb	r3, [r7, #6]
 80026f0:	461a      	mov	r2, r3
 80026f2:	0052      	lsls	r2, r2, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	4413      	add	r3, r2
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <handle_key_press+0x4c>)
 8002704:	701a      	strb	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000174 	.word	0x20000174
 8002718:	2000013c 	.word	0x2000013c

0800271c <handle_key_reset>:
void handle_key_reset(uint8_t col, uint8_t row){
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	460a      	mov	r2, r1
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	4613      	mov	r3, r2
 800272a:	71bb      	strb	r3, [r7, #6]
	keyState[(row) * 3 + col] = 0;
 800272c:	79ba      	ldrb	r2, [r7, #6]
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	441a      	add	r2, r3
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	@ (800274c <handle_key_reset+0x30>)
 800273a:	2100      	movs	r1, #0
 800273c:	54d1      	strb	r1, [r2, r3]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000174 	.word	0x20000174

08002750 <read_row>:

GPIO_PinState read_row(uint8_t row){
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
	switch(row){
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d823      	bhi.n	80027a8 <read_row+0x58>
 8002760:	a201      	add	r2, pc, #4	@ (adr r2, 8002768 <read_row+0x18>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	08002785 	.word	0x08002785
 8002770:	08002791 	.word	0x08002791
 8002774:	0800279d 	.word	0x0800279d
		case 0:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row1_Pin);
 8002778:	2120      	movs	r1, #32
 800277a:	480e      	ldr	r0, [pc, #56]	@ (80027b4 <read_row+0x64>)
 800277c:	f7fe fd06 	bl	800118c <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	e012      	b.n	80027aa <read_row+0x5a>
			break;
		case 1:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row2_Pin);
 8002784:	2101      	movs	r1, #1
 8002786:	480b      	ldr	r0, [pc, #44]	@ (80027b4 <read_row+0x64>)
 8002788:	f7fe fd00 	bl	800118c <HAL_GPIO_ReadPin>
 800278c:	4603      	mov	r3, r0
 800278e:	e00c      	b.n	80027aa <read_row+0x5a>
			break;
		case 2:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row3_Pin);
 8002790:	2102      	movs	r1, #2
 8002792:	4808      	ldr	r0, [pc, #32]	@ (80027b4 <read_row+0x64>)
 8002794:	f7fe fcfa 	bl	800118c <HAL_GPIO_ReadPin>
 8002798:	4603      	mov	r3, r0
 800279a:	e006      	b.n	80027aa <read_row+0x5a>
			break;
		case 3:
			return HAL_GPIO_ReadPin(GPIOA, Keyboard_row4_Pin);
 800279c:	2108      	movs	r1, #8
 800279e:	4805      	ldr	r0, [pc, #20]	@ (80027b4 <read_row+0x64>)
 80027a0:	f7fe fcf4 	bl	800118c <HAL_GPIO_ReadPin>
 80027a4:	4603      	mov	r3, r0
 80027a6:	e000      	b.n	80027aa <read_row+0x5a>
			break;
	}
	return 1;
 80027a8:	2301      	movs	r3, #1
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40020000 	.word	0x40020000

080027b8 <check_keyboard>:
char check_keyboard(void){
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
	x = 0;
 80027be:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <check_keyboard+0xe0>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
	i = 0;
 80027c4:	4b35      	ldr	r3, [pc, #212]	@ (800289c <check_keyboard+0xe4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
	for (int col = 0; col < 3; col++) {
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	e059      	b.n	8002884 <check_keyboard+0xcc>
	    set_column(col, GPIO_PIN_RESET);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff4a 	bl	8002670 <set_column>
	    for (int row = 0; row < 4; row++) {
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	e044      	b.n	800286c <check_keyboard+0xb4>
	    	uint32_t t = HAL_GetTick();
 80027e2:	f7fe fa39 	bl	8000c58 <HAL_GetTick>
 80027e6:	6078      	str	r0, [r7, #4]
	    	if(t - lastDebounceTime[(row) * 3 + col] > DEBOUNCE_TIME){
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	441a      	add	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a2a      	ldr	r2, [pc, #168]	@ (80028a0 <check_keyboard+0xe8>)
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	d931      	bls.n	8002866 <check_keyboard+0xae>
				if (read_row(row) == GPIO_PIN_RESET) {
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ffa2 	bl	8002750 <read_row>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d121      	bne.n	8002856 <check_keyboard+0x9e>
					if(!keyState[(row) * 3 + col])
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	441a      	add	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	4a21      	ldr	r2, [pc, #132]	@ (80028a4 <check_keyboard+0xec>)
 8002820:	5cd3      	ldrb	r3, [r2, r3]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <check_keyboard+0x84>
						handle_key_press(col, row);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	68ba      	ldr	r2, [r7, #8]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff48 	bl	80026cc <handle_key_press>
					lastDebounceTime[(row) * 3 + col] = HAL_GetTick();
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	441a      	add	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	18d4      	adds	r4, r2, r3
 8002848:	f7fe fa06 	bl	8000c58 <HAL_GetTick>
 800284c:	4603      	mov	r3, r0
 800284e:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <check_keyboard+0xe8>)
 8002850:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002854:	e007      	b.n	8002866 <check_keyboard+0xae>
				}
				else{
					handle_key_reset(col, row);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff5b 	bl	800271c <handle_key_reset>
	    for (int row = 0; row < 4; row++) {
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3301      	adds	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b03      	cmp	r3, #3
 8002870:	ddb7      	ble.n	80027e2 <check_keyboard+0x2a>
				}
	    	}
	    }
	    set_column(col, GPIO_PIN_SET);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2101      	movs	r1, #1
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fef9 	bl	8002670 <set_column>
	for (int col = 0; col < 3; col++) {
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b02      	cmp	r3, #2
 8002888:	dda2      	ble.n	80027d0 <check_keyboard+0x18>
	}
	return x;
 800288a:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <check_keyboard+0xe0>)
 800288c:	781b      	ldrb	r3, [r3, #0]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	bf00      	nop
 8002898:	2000013c 	.word	0x2000013c
 800289c:	20000140 	.word	0x20000140
 80028a0:	20000144 	.word	0x20000144
 80028a4:	20000174 	.word	0x20000174

080028a8 <lcd_send_cmd>:
 */
#include "lcd_driver.h"
static I2C_HandleTypeDef hi2c1;

void lcd_send_cmd (char cmd)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	data_u = (cmd&0xf0);
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f023 030f 	bic.w	r3, r3, #15
 80028b8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	73bb      	strb	r3, [r7, #14]
	uint8_t data_t[4];
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	f043 030c 	orr.w	r3, r3, #12
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	f043 030c 	orr.w	r3, r3, #12
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80028de:	7bbb      	ldrb	r3, [r7, #14]
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80028e8:	f107 0208 	add.w	r2, r7, #8
 80028ec:	2364      	movs	r3, #100	@ 0x64
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2304      	movs	r3, #4
 80028f2:	214e      	movs	r1, #78	@ 0x4e
 80028f4:	4803      	ldr	r0, [pc, #12]	@ (8002904 <lcd_send_cmd+0x5c>)
 80028f6:	f7fe fdbf 	bl	8001478 <HAL_I2C_Master_Transmit>
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000180 	.word	0x20000180

08002908 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f023 030f 	bic.w	r3, r3, #15
 8002918:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	f043 030d 	orr.w	r3, r3, #13
 8002926:	b2db      	uxtb	r3, r3
 8002928:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	f043 0309 	orr.w	r3, r3, #9
 8002930:	b2db      	uxtb	r3, r3
 8002932:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	f043 030d 	orr.w	r3, r3, #13
 800293a:	b2db      	uxtb	r3, r3
 800293c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	f043 0309 	orr.w	r3, r3, #9
 8002944:	b2db      	uxtb	r3, r3
 8002946:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002948:	f107 0208 	add.w	r2, r7, #8
 800294c:	2364      	movs	r3, #100	@ 0x64
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2304      	movs	r3, #4
 8002952:	214e      	movs	r1, #78	@ 0x4e
 8002954:	4803      	ldr	r0, [pc, #12]	@ (8002964 <lcd_send_data+0x5c>)
 8002956:	f7fe fd8f 	bl	8001478 <HAL_I2C_Master_Transmit>
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000180 	.word	0x20000180

08002968 <lcd_init>:

void lcd_init (I2C_HandleTypeDef i2c)
{
 8002968:	b084      	sub	sp, #16
 800296a:	b580      	push	{r7, lr}
 800296c:	af00      	add	r7, sp, #0
 800296e:	f107 0c08 	add.w	ip, r7, #8
 8002972:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1 = i2c;
 8002976:	4b22      	ldr	r3, [pc, #136]	@ (8002a00 <lcd_init+0x98>)
 8002978:	4618      	mov	r0, r3
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	2254      	movs	r2, #84	@ 0x54
 8002980:	4619      	mov	r1, r3
 8002982:	f000 fd27 	bl	80033d4 <memcpy>
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002986:	2032      	movs	r0, #50	@ 0x32
 8002988:	f7fe f972 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x30);
 800298c:	2030      	movs	r0, #48	@ 0x30
 800298e:	f7ff ff8b 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002992:	2005      	movs	r0, #5
 8002994:	f7fe f96c 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002998:	2030      	movs	r0, #48	@ 0x30
 800299a:	f7ff ff85 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800299e:	2001      	movs	r0, #1
 80029a0:	f7fe f966 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x30);
 80029a4:	2030      	movs	r0, #48	@ 0x30
 80029a6:	f7ff ff7f 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(10);
 80029aa:	200a      	movs	r0, #10
 80029ac:	f7fe f960 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80029b0:	2020      	movs	r0, #32
 80029b2:	f7ff ff79 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(10);
 80029b6:	200a      	movs	r0, #10
 80029b8:	f7fe f95a 	bl	8000c70 <HAL_Delay>

	// display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80029bc:	2028      	movs	r0, #40	@ 0x28
 80029be:	f7ff ff73 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(1);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f7fe f954 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80029c8:	2008      	movs	r0, #8
 80029ca:	f7ff ff6d 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(1);
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7fe f94e 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff ff67 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(2);
 80029da:	2002      	movs	r0, #2
 80029dc:	f7fe f948 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80029e0:	2006      	movs	r0, #6
 80029e2:	f7ff ff61 	bl	80028a8 <lcd_send_cmd>
	HAL_Delay(1);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f7fe f942 	bl	8000c70 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80029ec:	200c      	movs	r0, #12
 80029ee:	f7ff ff5b 	bl	80028a8 <lcd_send_cmd>
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029fa:	b004      	add	sp, #16
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000180 	.word	0x20000180

08002a04 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002a0c:	e006      	b.n	8002a1c <lcd_send_string+0x18>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff76 	bl	8002908 <lcd_send_data>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f4      	bne.n	8002a0e <lcd_send_string+0xa>
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <lcd_clear>:

void lcd_clear(void){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	  lcd_put_cur(0, 0);
 8002a34:	2100      	movs	r1, #0
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 f80e 	bl	8002a58 <lcd_put_cur>
	  lcd_send_string ("                ");
 8002a3c:	4805      	ldr	r0, [pc, #20]	@ (8002a54 <lcd_clear+0x24>)
 8002a3e:	f7ff ffe1 	bl	8002a04 <lcd_send_string>
	  lcd_put_cur(1, 0);
 8002a42:	2100      	movs	r1, #0
 8002a44:	2001      	movs	r0, #1
 8002a46:	f000 f807 	bl	8002a58 <lcd_put_cur>
	  lcd_send_string ("                ");
 8002a4a:	4802      	ldr	r0, [pc, #8]	@ (8002a54 <lcd_clear+0x24>)
 8002a4c:	f7ff ffda 	bl	8002a04 <lcd_send_string>
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	08003cd0 	.word	0x08003cd0

08002a58 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
	switch (row)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <lcd_put_cur+0x18>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d005      	beq.n	8002a7a <lcd_put_cur+0x22>
 8002a6e:	e009      	b.n	8002a84 <lcd_put_cur+0x2c>
	{
		case 0:
			col |= 0x80;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a76:	603b      	str	r3, [r7, #0]
			break;
 8002a78:	e004      	b.n	8002a84 <lcd_put_cur+0x2c>
		case 1:
			col |= 0xC0;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a80:	603b      	str	r3, [r7, #0]
			break;
 8002a82:	bf00      	nop
	}
	lcd_send_cmd (col);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff0d 	bl	80028a8 <lcd_send_cmd>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <s_to_ms>:
static char* menage_number = "#*#*";
static char pin[16] = "";
static uint32_t countdown_delay;


uint32_t s_to_ms(uint32_t s){return s*1000UL;}
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <state_machine_init>:

void state_machine_init(uint8_t pin_len, char pin_inp[static pin_len]){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
	memcpy(pin, pin_inp, pin_len);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	4808      	ldr	r0, [pc, #32]	@ (8002ae8 <state_machine_init+0x34>)
 8002ac8:	f000 fc84 	bl	80033d4 <memcpy>
	pin[pin_len] = '#';
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	4a06      	ldr	r2, [pc, #24]	@ (8002ae8 <state_machine_init+0x34>)
 8002ad0:	2123      	movs	r1, #35	@ 0x23
 8002ad2:	54d1      	strb	r1, [r2, r3]
	countdown_delay = s_to_ms(COUNTDOWN_SECOND);
 8002ad4:	2078      	movs	r0, #120	@ 0x78
 8002ad6:	f7ff ffde 	bl	8002a96 <s_to_ms>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a03      	ldr	r2, [pc, #12]	@ (8002aec <state_machine_init+0x38>)
 8002ade:	6013      	str	r3, [r2, #0]

}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	200001f0 	.word	0x200001f0
 8002aec:	20000200 	.word	0x20000200

08002af0 <state_machine_run>:

void state_machine_run(char input, bool changed_inp){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	460a      	mov	r2, r1
 8002afa:	71fb      	strb	r3, [r7, #7]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71bb      	strb	r3, [r7, #6]
	if(changed_inp){
 8002b00:	79bb      	ldrb	r3, [r7, #6]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <state_machine_run+0x30>
		changed = true;
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <state_machine_run+0x8c>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
		str[len++] = input;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <state_machine_run+0x90>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	b2d1      	uxtb	r1, r2
 8002b14:	4a1a      	ldr	r2, [pc, #104]	@ (8002b80 <state_machine_run+0x90>)
 8002b16:	7011      	strb	r1, [r2, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b84 <state_machine_run+0x94>)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	5453      	strb	r3, [r2, r1]
	}
	switch(state){
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <state_machine_run+0x98>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d825      	bhi.n	8002b74 <state_machine_run+0x84>
 8002b28:	a201      	add	r2, pc, #4	@ (adr r2, 8002b30 <state_machine_run+0x40>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b5b 	.word	0x08002b5b
 8002b34:	08002b61 	.word	0x08002b61
 8002b38:	08002b67 	.word	0x08002b67
 8002b3c:	08002b55 	.word	0x08002b55
 8002b40:	08002b73 	.word	0x08002b73
 8002b44:	08002b73 	.word	0x08002b73
 8002b48:	08002b73 	.word	0x08002b73
 8002b4c:	08002b73 	.word	0x08002b73
 8002b50:	08002b6d 	.word	0x08002b6d
	case DISARMED:
		state_machine_disarmed();
 8002b54:	f000 f8e8 	bl	8002d28 <state_machine_disarmed>
	  break;
 8002b58:	e00c      	b.n	8002b74 <state_machine_run+0x84>
	case ARMED:
		state_machine_armed();
 8002b5a:	f000 f817 	bl	8002b8c <state_machine_armed>
	  break;
 8002b5e:	e009      	b.n	8002b74 <state_machine_run+0x84>
	case ARMED_COUNTDOWN:
		state_machine_countdown();
 8002b60:	f000 f9d8 	bl	8002f14 <state_machine_countdown>
	  break;
 8002b64:	e006      	b.n	8002b74 <state_machine_run+0x84>
	case ALERT_SMS:
		state_machine_alert();
 8002b66:	f000 fad9 	bl	800311c <state_machine_alert>
	  break;
 8002b6a:	e003      	b.n	8002b74 <state_machine_run+0x84>
	case REMOVE_NUMBER:
	  break;
	case ADD_NUMBER:
	  break;
	case SET_ALERT_TIME:
		state_machine_set_alert_time();
 8002b6c:	f000 faf0 	bl	8003150 <state_machine_set_alert_time>
	  break;
 8002b70:	e000      	b.n	8002b74 <state_machine_run+0x84>
	case SET_NEW_PIN:
	  break;
 8002b72:	bf00      	nop
	}
}
 8002b74:	bf00      	nop
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000000d 	.word	0x2000000d
 8002b80:	200001e2 	.word	0x200001e2
 8002b84:	200001d4 	.word	0x200001d4
 8002b88:	20000000 	.word	0x20000000

08002b8c <state_machine_armed>:

void state_machine_armed(void){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
	GPIO_PinState singal_state = HAL_GPIO_ReadPin(Alarm_Signal_GPIO_Port, Alarm_Signal_Pin);
 8002b92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b96:	4858      	ldr	r0, [pc, #352]	@ (8002cf8 <state_machine_armed+0x16c>)
 8002b98:	f7fe faf8 	bl	800118c <HAL_GPIO_ReadPin>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
	if(changed == true || !singal_state || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8002ba0:	4b56      	ldr	r3, [pc, #344]	@ (8002cfc <state_machine_armed+0x170>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10c      	bne.n	8002bc2 <state_machine_armed+0x36>
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <state_machine_armed+0x36>
 8002bae:	f7fe f853 	bl	8000c58 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b52      	ldr	r3, [pc, #328]	@ (8002d00 <state_machine_armed+0x174>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002bbe:	f240 8097 	bls.w	8002cf0 <state_machine_armed+0x164>
		if(len == 0 && changed){
 8002bc2:	4b50      	ldr	r3, [pc, #320]	@ (8002d04 <state_machine_armed+0x178>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d117      	bne.n	8002bfa <state_machine_armed+0x6e>
 8002bca:	4b4c      	ldr	r3, [pc, #304]	@ (8002cfc <state_machine_armed+0x170>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d013      	beq.n	8002bfa <state_machine_armed+0x6e>
			changed = false;
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002cfc <state_machine_armed+0x170>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002bd8:	f7ff ff2a 	bl	8002a30 <lcd_clear>
			lcd_put_cur(0, 0);
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7ff ff3a 	bl	8002a58 <lcd_put_cur>
			lcd_send_string ("ARMED");
 8002be4:	4848      	ldr	r0, [pc, #288]	@ (8002d08 <state_machine_armed+0x17c>)
 8002be6:	f7ff ff0d 	bl	8002a04 <lcd_send_string>
			lcd_put_cur(1, 0);
 8002bea:	2100      	movs	r1, #0
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7ff ff33 	bl	8002a58 <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8002bf2:	4846      	ldr	r0, [pc, #280]	@ (8002d0c <state_machine_armed+0x180>)
 8002bf4:	f7ff ff06 	bl	8002a04 <lcd_send_string>
 8002bf8:	e07a      	b.n	8002cf0 <state_machine_armed+0x164>
		}
		else if(!singal_state){
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d113      	bne.n	8002c28 <state_machine_armed+0x9c>
			state = ARMED_COUNTDOWN;
 8002c00:	4b43      	ldr	r3, [pc, #268]	@ (8002d10 <state_machine_armed+0x184>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
			memset(str,0,14);
 8002c06:	220e      	movs	r2, #14
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4842      	ldr	r0, [pc, #264]	@ (8002d14 <state_machine_armed+0x188>)
 8002c0c:	f000 fbae 	bl	800336c <memset>
			len = 0;
 8002c10:	4b3c      	ldr	r3, [pc, #240]	@ (8002d04 <state_machine_armed+0x178>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
			changed = true;
 8002c16:	4b39      	ldr	r3, [pc, #228]	@ (8002cfc <state_machine_armed+0x170>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
			countdown_start = HAL_GetTick();
 8002c1c:	f7fe f81c 	bl	8000c58 <HAL_GetTick>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a3d      	ldr	r2, [pc, #244]	@ (8002d18 <state_machine_armed+0x18c>)
 8002c24:	6013      	str	r3, [r2, #0]
			}

		}

	}
}
 8002c26:	e063      	b.n	8002cf0 <state_machine_armed+0x164>
		else if(len != 0){
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <state_machine_armed+0x178>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05f      	beq.n	8002cf0 <state_machine_armed+0x164>
			lcd_clear();
 8002c30:	f7ff fefe 	bl	8002a30 <lcd_clear>
			lcd_put_cur(0, 0);
 8002c34:	2100      	movs	r1, #0
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7ff ff0e 	bl	8002a58 <lcd_put_cur>
			lcd_send_string("DISARM");
 8002c3c:	4837      	ldr	r0, [pc, #220]	@ (8002d1c <state_machine_armed+0x190>)
 8002c3e:	f7ff fee1 	bl	8002a04 <lcd_send_string>
			lcd_put_cur(1, 0);
 8002c42:	2100      	movs	r1, #0
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7ff ff07 	bl	8002a58 <lcd_put_cur>
			str[len] = '\0';
 8002c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d04 <state_machine_armed+0x178>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b30      	ldr	r3, [pc, #192]	@ (8002d14 <state_machine_armed+0x188>)
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 8002c56:	482f      	ldr	r0, [pc, #188]	@ (8002d14 <state_machine_armed+0x188>)
 8002c58:	f7ff fed4 	bl	8002a04 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8002c5c:	4930      	ldr	r1, [pc, #192]	@ (8002d20 <state_machine_armed+0x194>)
 8002c5e:	482d      	ldr	r0, [pc, #180]	@ (8002d14 <state_machine_armed+0x188>)
 8002c60:	f7fd fabe 	bl	80001e0 <strcmp>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10e      	bne.n	8002c88 <state_machine_armed+0xfc>
				state = DISARMED;
 8002c6a:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <state_machine_armed+0x184>)
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	701a      	strb	r2, [r3, #0]
				memset(str,0,14);
 8002c70:	220e      	movs	r2, #14
 8002c72:	2100      	movs	r1, #0
 8002c74:	4827      	ldr	r0, [pc, #156]	@ (8002d14 <state_machine_armed+0x188>)
 8002c76:	f000 fb79 	bl	800336c <memset>
				len = 0;
 8002c7a:	4b22      	ldr	r3, [pc, #136]	@ (8002d04 <state_machine_armed+0x178>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
				changed = true;
 8002c80:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <state_machine_armed+0x170>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
}
 8002c86:	e033      	b.n	8002cf0 <state_machine_armed+0x164>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8002c88:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <state_machine_armed+0x178>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	4a21      	ldr	r2, [pc, #132]	@ (8002d14 <state_machine_armed+0x188>)
 8002c90:	5cd3      	ldrb	r3, [r2, r3]
 8002c92:	2b23      	cmp	r3, #35	@ 0x23
 8002c94:	d00a      	beq.n	8002cac <state_machine_armed+0x120>
 8002c96:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <state_machine_armed+0x178>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b0e      	cmp	r3, #14
 8002c9c:	d006      	beq.n	8002cac <state_machine_armed+0x120>
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <state_machine_armed+0x170>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f083 0301 	eor.w	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d018      	beq.n	8002cde <state_machine_armed+0x152>
				lcd_clear();
 8002cac:	f7ff fec0 	bl	8002a30 <lcd_clear>
				lcd_put_cur(0, 0);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7ff fed0 	bl	8002a58 <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 8002cb8:	481a      	ldr	r0, [pc, #104]	@ (8002d24 <state_machine_armed+0x198>)
 8002cba:	f7ff fea3 	bl	8002a04 <lcd_send_string>
				memset(str,0,14);
 8002cbe:	220e      	movs	r2, #14
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4814      	ldr	r0, [pc, #80]	@ (8002d14 <state_machine_armed+0x188>)
 8002cc4:	f000 fb52 	bl	800336c <memset>
				len = 0;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <state_machine_armed+0x178>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
				changed = true;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <state_machine_armed+0x170>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 8002cd4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cd8:	f7fd ffca 	bl	8000c70 <HAL_Delay>
 8002cdc:	e008      	b.n	8002cf0 <state_machine_armed+0x164>
				timestamp = HAL_GetTick();
 8002cde:	f7fd ffbb 	bl	8000c58 <HAL_GetTick>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a06      	ldr	r2, [pc, #24]	@ (8002d00 <state_machine_armed+0x174>)
 8002ce6:	6013      	str	r3, [r2, #0]
				changed = false;
 8002ce8:	4b04      	ldr	r3, [pc, #16]	@ (8002cfc <state_machine_armed+0x170>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
}
 8002cee:	e7ff      	b.n	8002cf0 <state_machine_armed+0x164>
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	2000000d 	.word	0x2000000d
 8002d00:	200001e4 	.word	0x200001e4
 8002d04:	200001e2 	.word	0x200001e2
 8002d08:	08003cfc 	.word	0x08003cfc
 8002d0c:	08003d04 	.word	0x08003d04
 8002d10:	20000000 	.word	0x20000000
 8002d14:	200001d4 	.word	0x200001d4
 8002d18:	200001ec 	.word	0x200001ec
 8002d1c:	08003d14 	.word	0x08003d14
 8002d20:	200001f0 	.word	0x200001f0
 8002d24:	08003d1c 	.word	0x08003d1c

08002d28 <state_machine_disarmed>:

void state_machine_disarmed(void){
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL){
 8002d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <state_machine_disarmed+0x20>
 8002d34:	f7fd ff90 	bl	8000c58 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <state_machine_disarmed+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002d44:	f240 80c9 	bls.w	8002eda <state_machine_disarmed+0x1b2>
	  if(len == 0 && changed){
 8002d48:	4b67      	ldr	r3, [pc, #412]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d117      	bne.n	8002d80 <state_machine_disarmed+0x58>
 8002d50:	4b63      	ldr	r3, [pc, #396]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <state_machine_disarmed+0x58>
		  changed = false;
 8002d58:	4b61      	ldr	r3, [pc, #388]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
		  lcd_clear();
 8002d5e:	f7ff fe67 	bl	8002a30 <lcd_clear>
		  lcd_put_cur(0, 0);
 8002d62:	2100      	movs	r1, #0
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7ff fe77 	bl	8002a58 <lcd_put_cur>
		  lcd_send_string ("DISARMED");
 8002d6a:	4860      	ldr	r0, [pc, #384]	@ (8002eec <state_machine_disarmed+0x1c4>)
 8002d6c:	f7ff fe4a 	bl	8002a04 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8002d70:	2100      	movs	r1, #0
 8002d72:	2001      	movs	r0, #1
 8002d74:	f7ff fe70 	bl	8002a58 <lcd_put_cur>
		  lcd_send_string("PIN TO ARM");
 8002d78:	485d      	ldr	r0, [pc, #372]	@ (8002ef0 <state_machine_disarmed+0x1c8>)
 8002d7a:	f7ff fe43 	bl	8002a04 <lcd_send_string>
 8002d7e:	e0ac      	b.n	8002eda <state_machine_disarmed+0x1b2>
	  }
	  else if(len != 0){
 8002d80:	4b59      	ldr	r3, [pc, #356]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a8 	beq.w	8002eda <state_machine_disarmed+0x1b2>
		  lcd_clear();
 8002d8a:	f7ff fe51 	bl	8002a30 <lcd_clear>
		  lcd_put_cur(0, 0);
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7ff fe61 	bl	8002a58 <lcd_put_cur>
		  lcd_send_string("DISARMED PIN");
 8002d96:	4857      	ldr	r0, [pc, #348]	@ (8002ef4 <state_machine_disarmed+0x1cc>)
 8002d98:	f7ff fe34 	bl	8002a04 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2001      	movs	r0, #1
 8002da0:	f7ff fe5a 	bl	8002a58 <lcd_put_cur>
		  str[len] = '\0';
 8002da4:	4b50      	ldr	r3, [pc, #320]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002dac:	2100      	movs	r1, #0
 8002dae:	5499      	strb	r1, [r3, r2]
		  lcd_send_string(str);
 8002db0:	4851      	ldr	r0, [pc, #324]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002db2:	f7ff fe27 	bl	8002a04 <lcd_send_string>
		  if(strcmp(str,pin) == 0){
 8002db6:	4951      	ldr	r1, [pc, #324]	@ (8002efc <state_machine_disarmed+0x1d4>)
 8002db8:	484f      	ldr	r0, [pc, #316]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002dba:	f7fd fa11 	bl	80001e0 <strcmp>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10e      	bne.n	8002de2 <state_machine_disarmed+0xba>
			  state = ARMED;
 8002dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8002f00 <state_machine_disarmed+0x1d8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 8002dca:	220e      	movs	r2, #14
 8002dcc:	2100      	movs	r1, #0
 8002dce:	484a      	ldr	r0, [pc, #296]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002dd0:	f000 facc 	bl	800336c <memset>
			  len = 0;
 8002dd4:	4b44      	ldr	r3, [pc, #272]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002dda:	4b41      	ldr	r3, [pc, #260]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
			  timestamp = HAL_GetTick();
			  changed = false;
		  }
	  }
	}
}
 8002de0:	e07b      	b.n	8002eda <state_machine_disarmed+0x1b2>
		  else if(strcmp(str,set_new_pin) == 0){
 8002de2:	4b48      	ldr	r3, [pc, #288]	@ (8002f04 <state_machine_disarmed+0x1dc>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	4843      	ldr	r0, [pc, #268]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002dea:	f7fd f9f9 	bl	80001e0 <strcmp>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10e      	bne.n	8002e12 <state_machine_disarmed+0xea>
			  state = SET_NEW_PIN;
 8002df4:	4b42      	ldr	r3, [pc, #264]	@ (8002f00 <state_machine_disarmed+0x1d8>)
 8002df6:	2204      	movs	r2, #4
 8002df8:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 8002dfa:	220e      	movs	r2, #14
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	483e      	ldr	r0, [pc, #248]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002e00:	f000 fab4 	bl	800336c <memset>
			  len = 0;
 8002e04:	4b38      	ldr	r3, [pc, #224]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002e0a:	4b35      	ldr	r3, [pc, #212]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
}
 8002e10:	e063      	b.n	8002eda <state_machine_disarmed+0x1b2>
		  else if(strcmp(str,set_alert_time) == 0){
 8002e12:	4b3d      	ldr	r3, [pc, #244]	@ (8002f08 <state_machine_disarmed+0x1e0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4619      	mov	r1, r3
 8002e18:	4837      	ldr	r0, [pc, #220]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002e1a:	f7fd f9e1 	bl	80001e0 <strcmp>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10e      	bne.n	8002e42 <state_machine_disarmed+0x11a>
			  state = SET_ALERT_TIME;
 8002e24:	4b36      	ldr	r3, [pc, #216]	@ (8002f00 <state_machine_disarmed+0x1d8>)
 8002e26:	2208      	movs	r2, #8
 8002e28:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 8002e2a:	220e      	movs	r2, #14
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4832      	ldr	r0, [pc, #200]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002e30:	f000 fa9c 	bl	800336c <memset>
			  len = 0;
 8002e34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002e3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
}
 8002e40:	e04b      	b.n	8002eda <state_machine_disarmed+0x1b2>
		  else if(strcmp(str,menage_number) == 0){
 8002e42:	4b32      	ldr	r3, [pc, #200]	@ (8002f0c <state_machine_disarmed+0x1e4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	482b      	ldr	r0, [pc, #172]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002e4a:	f7fd f9c9 	bl	80001e0 <strcmp>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10e      	bne.n	8002e72 <state_machine_disarmed+0x14a>
			  state = MENAGE_NUMBER;
 8002e54:	4b2a      	ldr	r3, [pc, #168]	@ (8002f00 <state_machine_disarmed+0x1d8>)
 8002e56:	2205      	movs	r2, #5
 8002e58:	701a      	strb	r2, [r3, #0]
			  memset(str,0,14);
 8002e5a:	220e      	movs	r2, #14
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4826      	ldr	r0, [pc, #152]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002e60:	f000 fa84 	bl	800336c <memset>
			  len = 0;
 8002e64:	4b20      	ldr	r3, [pc, #128]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
}
 8002e70:	e033      	b.n	8002eda <state_machine_disarmed+0x1b2>
		  else if(str[len - 1] == '#' || len == 14 || !changed){
 8002e72:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002e7a:	5cd3      	ldrb	r3, [r2, r3]
 8002e7c:	2b23      	cmp	r3, #35	@ 0x23
 8002e7e:	d00a      	beq.n	8002e96 <state_machine_disarmed+0x16e>
 8002e80:	4b19      	ldr	r3, [pc, #100]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b0e      	cmp	r3, #14
 8002e86:	d006      	beq.n	8002e96 <state_machine_disarmed+0x16e>
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	f083 0301 	eor.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <state_machine_disarmed+0x1a0>
			  lcd_clear();
 8002e96:	f7ff fdcb 	bl	8002a30 <lcd_clear>
			  lcd_put_cur(0, 0);
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7ff fddb 	bl	8002a58 <lcd_put_cur>
			  lcd_send_string ("WRONG PIN");
 8002ea2:	481b      	ldr	r0, [pc, #108]	@ (8002f10 <state_machine_disarmed+0x1e8>)
 8002ea4:	f7ff fdae 	bl	8002a04 <lcd_send_string>
			  memset(str,0,14);
 8002ea8:	220e      	movs	r2, #14
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4812      	ldr	r0, [pc, #72]	@ (8002ef8 <state_machine_disarmed+0x1d0>)
 8002eae:	f000 fa5d 	bl	800336c <memset>
			  len = 0;
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee8 <state_machine_disarmed+0x1c0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
			  changed = true;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(3000);
 8002ebe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ec2:	f7fd fed5 	bl	8000c70 <HAL_Delay>
 8002ec6:	e008      	b.n	8002eda <state_machine_disarmed+0x1b2>
			  timestamp = HAL_GetTick();
 8002ec8:	f7fd fec6 	bl	8000c58 <HAL_GetTick>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a05      	ldr	r2, [pc, #20]	@ (8002ee4 <state_machine_disarmed+0x1bc>)
 8002ed0:	6013      	str	r3, [r2, #0]
			  changed = false;
 8002ed2:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <state_machine_disarmed+0x1b8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
}
 8002ed8:	e7ff      	b.n	8002eda <state_machine_disarmed+0x1b2>
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	2000000d 	.word	0x2000000d
 8002ee4:	200001e4 	.word	0x200001e4
 8002ee8:	200001e2 	.word	0x200001e2
 8002eec:	08003d28 	.word	0x08003d28
 8002ef0:	08003d34 	.word	0x08003d34
 8002ef4:	08003d40 	.word	0x08003d40
 8002ef8:	200001d4 	.word	0x200001d4
 8002efc:	200001f0 	.word	0x200001f0
 8002f00:	20000000 	.word	0x20000000
 8002f04:	20000014 	.word	0x20000014
 8002f08:	20000010 	.word	0x20000010
 8002f0c:	20000018 	.word	0x20000018
 8002f10:	08003d1c 	.word	0x08003d1c

08002f14 <state_machine_countdown>:

void state_machine_countdown(void){
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - countdown_start > countdown_delay){
 8002f1a:	f7fd fe9d 	bl	8000c58 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	4b70      	ldr	r3, [pc, #448]	@ (80030e4 <state_machine_countdown+0x1d0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	1ad2      	subs	r2, r2, r3
 8002f26:	4b70      	ldr	r3, [pc, #448]	@ (80030e8 <state_machine_countdown+0x1d4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d90d      	bls.n	8002f4a <state_machine_countdown+0x36>
		state = ALERT_SMS;
 8002f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <state_machine_countdown+0x1d8>)
 8002f30:	2202      	movs	r2, #2
 8002f32:	701a      	strb	r2, [r3, #0]
		memset(str,0,14);
 8002f34:	220e      	movs	r2, #14
 8002f36:	2100      	movs	r1, #0
 8002f38:	486d      	ldr	r0, [pc, #436]	@ (80030f0 <state_machine_countdown+0x1dc>)
 8002f3a:	f000 fa17 	bl	800336c <memset>
		len = 0;
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80030f4 <state_machine_countdown+0x1e0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
		changed = true;
 8002f44:	4b6c      	ldr	r3, [pc, #432]	@ (80030f8 <state_machine_countdown+0x1e4>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
	}
	if(changed == true || HAL_GetTick() - timestamp > TIME_PER_SYMBOL || HAL_GetTick() - timestamp_display_s > 1000){
 8002f4a:	4b6b      	ldr	r3, [pc, #428]	@ (80030f8 <state_machine_countdown+0x1e4>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d112      	bne.n	8002f78 <state_machine_countdown+0x64>
 8002f52:	f7fd fe81 	bl	8000c58 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b68      	ldr	r3, [pc, #416]	@ (80030fc <state_machine_countdown+0x1e8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002f62:	d809      	bhi.n	8002f78 <state_machine_countdown+0x64>
 8002f64:	f7fd fe78 	bl	8000c58 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b65      	ldr	r3, [pc, #404]	@ (8003100 <state_machine_countdown+0x1ec>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f74:	f240 80b2 	bls.w	80030dc <state_machine_countdown+0x1c8>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 8002f78:	4b5e      	ldr	r3, [pc, #376]	@ (80030f4 <state_machine_countdown+0x1e0>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d13c      	bne.n	8002ffa <state_machine_countdown+0xe6>
 8002f80:	4b5d      	ldr	r3, [pc, #372]	@ (80030f8 <state_machine_countdown+0x1e4>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d108      	bne.n	8002f9a <state_machine_countdown+0x86>
 8002f88:	f7fd fe66 	bl	8000c58 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b5c      	ldr	r3, [pc, #368]	@ (8003100 <state_machine_countdown+0x1ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f98:	d92f      	bls.n	8002ffa <state_machine_countdown+0xe6>
			timestamp_display_s = HAL_GetTick();
 8002f9a:	f7fd fe5d 	bl	8000c58 <HAL_GetTick>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4a57      	ldr	r2, [pc, #348]	@ (8003100 <state_machine_countdown+0x1ec>)
 8002fa2:	6013      	str	r3, [r2, #0]
			changed = false;
 8002fa4:	4b54      	ldr	r3, [pc, #336]	@ (80030f8 <state_machine_countdown+0x1e4>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8002faa:	f7ff fd41 	bl	8002a30 <lcd_clear>
			lcd_put_cur(0, 0);
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7ff fd51 	bl	8002a58 <lcd_put_cur>
			char buf[14];
			snprintf(buf, 14 ,"COUNTDOWN %lu s",(uint32_t)(countdown_delay/1000 - (HAL_GetTick() - countdown_start)/1000));
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80030e8 <state_machine_countdown+0x1d4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <state_machine_countdown+0x1f0>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	099c      	lsrs	r4, r3, #6
 8002fc2:	f7fd fe49 	bl	8000c58 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	4b46      	ldr	r3, [pc, #280]	@ (80030e4 <state_machine_countdown+0x1d0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a4d      	ldr	r2, [pc, #308]	@ (8003104 <state_machine_countdown+0x1f0>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	1ae3      	subs	r3, r4, r3
 8002fd8:	4638      	mov	r0, r7
 8002fda:	4a4b      	ldr	r2, [pc, #300]	@ (8003108 <state_machine_countdown+0x1f4>)
 8002fdc:	210e      	movs	r1, #14
 8002fde:	f000 f991 	bl	8003304 <sniprintf>
			lcd_send_string (buf);
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fd0d 	bl	8002a04 <lcd_send_string>
			lcd_put_cur(1, 0);
 8002fea:	2100      	movs	r1, #0
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7ff fd33 	bl	8002a58 <lcd_put_cur>
			lcd_send_string("PIN TO DISARM");
 8002ff2:	4846      	ldr	r0, [pc, #280]	@ (800310c <state_machine_countdown+0x1f8>)
 8002ff4:	f7ff fd06 	bl	8002a04 <lcd_send_string>
		if(len == 0 && (changed || HAL_GetTick() - timestamp_display_s > 1000)){
 8002ff8:	e070      	b.n	80030dc <state_machine_countdown+0x1c8>
		}
		else if(len != 0 && (HAL_GetTick() - timestamp > TIME_PER_SYMBOL || changed)){
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <state_machine_countdown+0x1e0>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d06c      	beq.n	80030dc <state_machine_countdown+0x1c8>
 8003002:	f7fd fe29 	bl	8000c58 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	4b3c      	ldr	r3, [pc, #240]	@ (80030fc <state_machine_countdown+0x1e8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003012:	d803      	bhi.n	800301c <state_machine_countdown+0x108>
 8003014:	4b38      	ldr	r3, [pc, #224]	@ (80030f8 <state_machine_countdown+0x1e4>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05f      	beq.n	80030dc <state_machine_countdown+0x1c8>
			lcd_clear();
 800301c:	f7ff fd08 	bl	8002a30 <lcd_clear>
			lcd_put_cur(0, 0);
 8003020:	2100      	movs	r1, #0
 8003022:	2000      	movs	r0, #0
 8003024:	f7ff fd18 	bl	8002a58 <lcd_put_cur>
			lcd_send_string("DISARM");
 8003028:	4839      	ldr	r0, [pc, #228]	@ (8003110 <state_machine_countdown+0x1fc>)
 800302a:	f7ff fceb 	bl	8002a04 <lcd_send_string>
			lcd_put_cur(1, 0);
 800302e:	2100      	movs	r1, #0
 8003030:	2001      	movs	r0, #1
 8003032:	f7ff fd11 	bl	8002a58 <lcd_put_cur>
			str[len] = '\0';
 8003036:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <state_machine_countdown+0x1e0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <state_machine_countdown+0x1dc>)
 800303e:	2100      	movs	r1, #0
 8003040:	5499      	strb	r1, [r3, r2]
			lcd_send_string(str);
 8003042:	482b      	ldr	r0, [pc, #172]	@ (80030f0 <state_machine_countdown+0x1dc>)
 8003044:	f7ff fcde 	bl	8002a04 <lcd_send_string>
			if(strcmp(str,pin) == 0){
 8003048:	4932      	ldr	r1, [pc, #200]	@ (8003114 <state_machine_countdown+0x200>)
 800304a:	4829      	ldr	r0, [pc, #164]	@ (80030f0 <state_machine_countdown+0x1dc>)
 800304c:	f7fd f8c8 	bl	80001e0 <strcmp>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10e      	bne.n	8003074 <state_machine_countdown+0x160>
				state = DISARMED;
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <state_machine_countdown+0x1d8>)
 8003058:	2203      	movs	r2, #3
 800305a:	701a      	strb	r2, [r3, #0]
				memset(str,0,14);
 800305c:	220e      	movs	r2, #14
 800305e:	2100      	movs	r1, #0
 8003060:	4823      	ldr	r0, [pc, #140]	@ (80030f0 <state_machine_countdown+0x1dc>)
 8003062:	f000 f983 	bl	800336c <memset>
				len = 0;
 8003066:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <state_machine_countdown+0x1e0>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
				changed = true;
 800306c:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <state_machine_countdown+0x1e4>)
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
				changed = false;
			}
		}
	}

}
 8003072:	e033      	b.n	80030dc <state_machine_countdown+0x1c8>
			else if(str[len - 1] == '#' || len == 14 || !changed){
 8003074:	4b1f      	ldr	r3, [pc, #124]	@ (80030f4 <state_machine_countdown+0x1e0>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	3b01      	subs	r3, #1
 800307a:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <state_machine_countdown+0x1dc>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	2b23      	cmp	r3, #35	@ 0x23
 8003080:	d00a      	beq.n	8003098 <state_machine_countdown+0x184>
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <state_machine_countdown+0x1e0>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b0e      	cmp	r3, #14
 8003088:	d006      	beq.n	8003098 <state_machine_countdown+0x184>
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <state_machine_countdown+0x1e4>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	f083 0301 	eor.w	r3, r3, #1
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d018      	beq.n	80030ca <state_machine_countdown+0x1b6>
				lcd_clear();
 8003098:	f7ff fcca 	bl	8002a30 <lcd_clear>
				lcd_put_cur(0, 0);
 800309c:	2100      	movs	r1, #0
 800309e:	2000      	movs	r0, #0
 80030a0:	f7ff fcda 	bl	8002a58 <lcd_put_cur>
				lcd_send_string ("WRONG PIN");
 80030a4:	481c      	ldr	r0, [pc, #112]	@ (8003118 <state_machine_countdown+0x204>)
 80030a6:	f7ff fcad 	bl	8002a04 <lcd_send_string>
				memset(str,0,14);
 80030aa:	220e      	movs	r2, #14
 80030ac:	2100      	movs	r1, #0
 80030ae:	4810      	ldr	r0, [pc, #64]	@ (80030f0 <state_machine_countdown+0x1dc>)
 80030b0:	f000 f95c 	bl	800336c <memset>
				len = 0;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <state_machine_countdown+0x1e0>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
				changed = true;
 80030ba:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <state_machine_countdown+0x1e4>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
				HAL_Delay(3000);
 80030c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030c4:	f7fd fdd4 	bl	8000c70 <HAL_Delay>
 80030c8:	e008      	b.n	80030dc <state_machine_countdown+0x1c8>
				timestamp = HAL_GetTick();
 80030ca:	f7fd fdc5 	bl	8000c58 <HAL_GetTick>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4a0a      	ldr	r2, [pc, #40]	@ (80030fc <state_machine_countdown+0x1e8>)
 80030d2:	6013      	str	r3, [r2, #0]
				changed = false;
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <state_machine_countdown+0x1e4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
}
 80030da:	e7ff      	b.n	80030dc <state_machine_countdown+0x1c8>
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}
 80030e4:	200001ec 	.word	0x200001ec
 80030e8:	20000200 	.word	0x20000200
 80030ec:	20000000 	.word	0x20000000
 80030f0:	200001d4 	.word	0x200001d4
 80030f4:	200001e2 	.word	0x200001e2
 80030f8:	2000000d 	.word	0x2000000d
 80030fc:	200001e4 	.word	0x200001e4
 8003100:	200001e8 	.word	0x200001e8
 8003104:	10624dd3 	.word	0x10624dd3
 8003108:	08003d50 	.word	0x08003d50
 800310c:	08003d04 	.word	0x08003d04
 8003110:	08003d14 	.word	0x08003d14
 8003114:	200001f0 	.word	0x200001f0
 8003118:	08003d1c 	.word	0x08003d1c

0800311c <state_machine_alert>:


void state_machine_alert(void){
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0

	//TODO GSM SEND
	state = ARMED;
 8003120:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <state_machine_alert+0x24>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
	memset(str,0,14);
 8003126:	220e      	movs	r2, #14
 8003128:	2100      	movs	r1, #0
 800312a:	4806      	ldr	r0, [pc, #24]	@ (8003144 <state_machine_alert+0x28>)
 800312c:	f000 f91e 	bl	800336c <memset>
	len = 0;
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <state_machine_alert+0x2c>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
	changed = true;
 8003136:	4b05      	ldr	r3, [pc, #20]	@ (800314c <state_machine_alert+0x30>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000000 	.word	0x20000000
 8003144:	200001d4 	.word	0x200001d4
 8003148:	200001e2 	.word	0x200001e2
 800314c:	2000000d 	.word	0x2000000d

08003150 <state_machine_set_alert_time>:

void state_machine_set_alert_time(void){
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
	if(changed == true){
 8003154:	4b23      	ldr	r3, [pc, #140]	@ (80031e4 <state_machine_set_alert_time+0x94>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d040      	beq.n	80031de <state_machine_set_alert_time+0x8e>
		if(len == 0 && changed){
 800315c:	4b22      	ldr	r3, [pc, #136]	@ (80031e8 <state_machine_set_alert_time+0x98>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d110      	bne.n	8003186 <state_machine_set_alert_time+0x36>
 8003164:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <state_machine_set_alert_time+0x94>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00c      	beq.n	8003186 <state_machine_set_alert_time+0x36>
			changed = false;
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <state_machine_set_alert_time+0x94>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8003172:	f7ff fc5d 	bl	8002a30 <lcd_clear>
			lcd_put_cur(0, 0);
 8003176:	2100      	movs	r1, #0
 8003178:	2000      	movs	r0, #0
 800317a:	f7ff fc6d 	bl	8002a58 <lcd_put_cur>
			lcd_send_string ("SET TIME(S),#=SAVE");
 800317e:	481b      	ldr	r0, [pc, #108]	@ (80031ec <state_machine_set_alert_time+0x9c>)
 8003180:	f7ff fc40 	bl	8002a04 <lcd_send_string>
				len = 0;
				changed = true;
			}
		}
	}
}
 8003184:	e02b      	b.n	80031de <state_machine_set_alert_time+0x8e>
		else if(len != 0){
 8003186:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <state_machine_set_alert_time+0x98>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d027      	beq.n	80031de <state_machine_set_alert_time+0x8e>
			lcd_put_cur(1, 0);
 800318e:	2100      	movs	r1, #0
 8003190:	2001      	movs	r0, #1
 8003192:	f7ff fc61 	bl	8002a58 <lcd_put_cur>
			lcd_send_string(str);
 8003196:	4816      	ldr	r0, [pc, #88]	@ (80031f0 <state_machine_set_alert_time+0xa0>)
 8003198:	f7ff fc34 	bl	8002a04 <lcd_send_string>
			if(str[len - 1] == '#'){
 800319c:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <state_machine_set_alert_time+0x98>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	4a13      	ldr	r2, [pc, #76]	@ (80031f0 <state_machine_set_alert_time+0xa0>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	2b23      	cmp	r3, #35	@ 0x23
 80031a8:	d119      	bne.n	80031de <state_machine_set_alert_time+0x8e>
				countdown_delay = s_to_ms(strtol(str, NULL, 10));
 80031aa:	220a      	movs	r2, #10
 80031ac:	2100      	movs	r1, #0
 80031ae:	4810      	ldr	r0, [pc, #64]	@ (80031f0 <state_machine_set_alert_time+0xa0>)
 80031b0:	f000 f89e 	bl	80032f0 <strtol>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fc6d 	bl	8002a96 <s_to_ms>
 80031bc:	4603      	mov	r3, r0
 80031be:	4a0d      	ldr	r2, [pc, #52]	@ (80031f4 <state_machine_set_alert_time+0xa4>)
 80031c0:	6013      	str	r3, [r2, #0]
				state = DISARMED;
 80031c2:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <state_machine_set_alert_time+0xa8>)
 80031c4:	2203      	movs	r2, #3
 80031c6:	701a      	strb	r2, [r3, #0]
				memset(str,0,14);
 80031c8:	220e      	movs	r2, #14
 80031ca:	2100      	movs	r1, #0
 80031cc:	4808      	ldr	r0, [pc, #32]	@ (80031f0 <state_machine_set_alert_time+0xa0>)
 80031ce:	f000 f8cd 	bl	800336c <memset>
				len = 0;
 80031d2:	4b05      	ldr	r3, [pc, #20]	@ (80031e8 <state_machine_set_alert_time+0x98>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
				changed = true;
 80031d8:	4b02      	ldr	r3, [pc, #8]	@ (80031e4 <state_machine_set_alert_time+0x94>)
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000000d 	.word	0x2000000d
 80031e8:	200001e2 	.word	0x200001e2
 80031ec:	08003d60 	.word	0x08003d60
 80031f0:	200001d4 	.word	0x200001d4
 80031f4:	20000200 	.word	0x20000200
 80031f8:	20000000 	.word	0x20000000

080031fc <_strtol_l.constprop.0>:
 80031fc:	2b24      	cmp	r3, #36	@ 0x24
 80031fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003202:	4686      	mov	lr, r0
 8003204:	4690      	mov	r8, r2
 8003206:	d801      	bhi.n	800320c <_strtol_l.constprop.0+0x10>
 8003208:	2b01      	cmp	r3, #1
 800320a:	d106      	bne.n	800321a <_strtol_l.constprop.0+0x1e>
 800320c:	f000 f8b6 	bl	800337c <__errno>
 8003210:	2316      	movs	r3, #22
 8003212:	6003      	str	r3, [r0, #0]
 8003214:	2000      	movs	r0, #0
 8003216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800321a:	4834      	ldr	r0, [pc, #208]	@ (80032ec <_strtol_l.constprop.0+0xf0>)
 800321c:	460d      	mov	r5, r1
 800321e:	462a      	mov	r2, r5
 8003220:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003224:	5d06      	ldrb	r6, [r0, r4]
 8003226:	f016 0608 	ands.w	r6, r6, #8
 800322a:	d1f8      	bne.n	800321e <_strtol_l.constprop.0+0x22>
 800322c:	2c2d      	cmp	r4, #45	@ 0x2d
 800322e:	d12d      	bne.n	800328c <_strtol_l.constprop.0+0x90>
 8003230:	782c      	ldrb	r4, [r5, #0]
 8003232:	2601      	movs	r6, #1
 8003234:	1c95      	adds	r5, r2, #2
 8003236:	f033 0210 	bics.w	r2, r3, #16
 800323a:	d109      	bne.n	8003250 <_strtol_l.constprop.0+0x54>
 800323c:	2c30      	cmp	r4, #48	@ 0x30
 800323e:	d12a      	bne.n	8003296 <_strtol_l.constprop.0+0x9a>
 8003240:	782a      	ldrb	r2, [r5, #0]
 8003242:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003246:	2a58      	cmp	r2, #88	@ 0x58
 8003248:	d125      	bne.n	8003296 <_strtol_l.constprop.0+0x9a>
 800324a:	786c      	ldrb	r4, [r5, #1]
 800324c:	2310      	movs	r3, #16
 800324e:	3502      	adds	r5, #2
 8003250:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003254:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003258:	2200      	movs	r2, #0
 800325a:	fbbc f9f3 	udiv	r9, ip, r3
 800325e:	4610      	mov	r0, r2
 8003260:	fb03 ca19 	mls	sl, r3, r9, ip
 8003264:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003268:	2f09      	cmp	r7, #9
 800326a:	d81b      	bhi.n	80032a4 <_strtol_l.constprop.0+0xa8>
 800326c:	463c      	mov	r4, r7
 800326e:	42a3      	cmp	r3, r4
 8003270:	dd27      	ble.n	80032c2 <_strtol_l.constprop.0+0xc6>
 8003272:	1c57      	adds	r7, r2, #1
 8003274:	d007      	beq.n	8003286 <_strtol_l.constprop.0+0x8a>
 8003276:	4581      	cmp	r9, r0
 8003278:	d320      	bcc.n	80032bc <_strtol_l.constprop.0+0xc0>
 800327a:	d101      	bne.n	8003280 <_strtol_l.constprop.0+0x84>
 800327c:	45a2      	cmp	sl, r4
 800327e:	db1d      	blt.n	80032bc <_strtol_l.constprop.0+0xc0>
 8003280:	fb00 4003 	mla	r0, r0, r3, r4
 8003284:	2201      	movs	r2, #1
 8003286:	f815 4b01 	ldrb.w	r4, [r5], #1
 800328a:	e7eb      	b.n	8003264 <_strtol_l.constprop.0+0x68>
 800328c:	2c2b      	cmp	r4, #43	@ 0x2b
 800328e:	bf04      	itt	eq
 8003290:	782c      	ldrbeq	r4, [r5, #0]
 8003292:	1c95      	addeq	r5, r2, #2
 8003294:	e7cf      	b.n	8003236 <_strtol_l.constprop.0+0x3a>
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1da      	bne.n	8003250 <_strtol_l.constprop.0+0x54>
 800329a:	2c30      	cmp	r4, #48	@ 0x30
 800329c:	bf0c      	ite	eq
 800329e:	2308      	moveq	r3, #8
 80032a0:	230a      	movne	r3, #10
 80032a2:	e7d5      	b.n	8003250 <_strtol_l.constprop.0+0x54>
 80032a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80032a8:	2f19      	cmp	r7, #25
 80032aa:	d801      	bhi.n	80032b0 <_strtol_l.constprop.0+0xb4>
 80032ac:	3c37      	subs	r4, #55	@ 0x37
 80032ae:	e7de      	b.n	800326e <_strtol_l.constprop.0+0x72>
 80032b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80032b4:	2f19      	cmp	r7, #25
 80032b6:	d804      	bhi.n	80032c2 <_strtol_l.constprop.0+0xc6>
 80032b8:	3c57      	subs	r4, #87	@ 0x57
 80032ba:	e7d8      	b.n	800326e <_strtol_l.constprop.0+0x72>
 80032bc:	f04f 32ff 	mov.w	r2, #4294967295
 80032c0:	e7e1      	b.n	8003286 <_strtol_l.constprop.0+0x8a>
 80032c2:	1c53      	adds	r3, r2, #1
 80032c4:	d108      	bne.n	80032d8 <_strtol_l.constprop.0+0xdc>
 80032c6:	2322      	movs	r3, #34	@ 0x22
 80032c8:	f8ce 3000 	str.w	r3, [lr]
 80032cc:	4660      	mov	r0, ip
 80032ce:	f1b8 0f00 	cmp.w	r8, #0
 80032d2:	d0a0      	beq.n	8003216 <_strtol_l.constprop.0+0x1a>
 80032d4:	1e69      	subs	r1, r5, #1
 80032d6:	e006      	b.n	80032e6 <_strtol_l.constprop.0+0xea>
 80032d8:	b106      	cbz	r6, 80032dc <_strtol_l.constprop.0+0xe0>
 80032da:	4240      	negs	r0, r0
 80032dc:	f1b8 0f00 	cmp.w	r8, #0
 80032e0:	d099      	beq.n	8003216 <_strtol_l.constprop.0+0x1a>
 80032e2:	2a00      	cmp	r2, #0
 80032e4:	d1f6      	bne.n	80032d4 <_strtol_l.constprop.0+0xd8>
 80032e6:	f8c8 1000 	str.w	r1, [r8]
 80032ea:	e794      	b.n	8003216 <_strtol_l.constprop.0+0x1a>
 80032ec:	08003d8d 	.word	0x08003d8d

080032f0 <strtol>:
 80032f0:	4613      	mov	r3, r2
 80032f2:	460a      	mov	r2, r1
 80032f4:	4601      	mov	r1, r0
 80032f6:	4802      	ldr	r0, [pc, #8]	@ (8003300 <strtol+0x10>)
 80032f8:	6800      	ldr	r0, [r0, #0]
 80032fa:	f7ff bf7f 	b.w	80031fc <_strtol_l.constprop.0>
 80032fe:	bf00      	nop
 8003300:	2000001c 	.word	0x2000001c

08003304 <sniprintf>:
 8003304:	b40c      	push	{r2, r3}
 8003306:	b530      	push	{r4, r5, lr}
 8003308:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <sniprintf+0x64>)
 800330a:	1e0c      	subs	r4, r1, #0
 800330c:	681d      	ldr	r5, [r3, #0]
 800330e:	b09d      	sub	sp, #116	@ 0x74
 8003310:	da08      	bge.n	8003324 <sniprintf+0x20>
 8003312:	238b      	movs	r3, #139	@ 0x8b
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	f04f 30ff 	mov.w	r0, #4294967295
 800331a:	b01d      	add	sp, #116	@ 0x74
 800331c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003320:	b002      	add	sp, #8
 8003322:	4770      	bx	lr
 8003324:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003328:	f8ad 3014 	strh.w	r3, [sp, #20]
 800332c:	bf14      	ite	ne
 800332e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003332:	4623      	moveq	r3, r4
 8003334:	9304      	str	r3, [sp, #16]
 8003336:	9307      	str	r3, [sp, #28]
 8003338:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800333c:	9002      	str	r0, [sp, #8]
 800333e:	9006      	str	r0, [sp, #24]
 8003340:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003344:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003346:	ab21      	add	r3, sp, #132	@ 0x84
 8003348:	a902      	add	r1, sp, #8
 800334a:	4628      	mov	r0, r5
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	f000 f9a3 	bl	8003698 <_svfiprintf_r>
 8003352:	1c43      	adds	r3, r0, #1
 8003354:	bfbc      	itt	lt
 8003356:	238b      	movlt	r3, #139	@ 0x8b
 8003358:	602b      	strlt	r3, [r5, #0]
 800335a:	2c00      	cmp	r4, #0
 800335c:	d0dd      	beq.n	800331a <sniprintf+0x16>
 800335e:	9b02      	ldr	r3, [sp, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e7d9      	b.n	800331a <sniprintf+0x16>
 8003366:	bf00      	nop
 8003368:	2000001c 	.word	0x2000001c

0800336c <memset>:
 800336c:	4402      	add	r2, r0
 800336e:	4603      	mov	r3, r0
 8003370:	4293      	cmp	r3, r2
 8003372:	d100      	bne.n	8003376 <memset+0xa>
 8003374:	4770      	bx	lr
 8003376:	f803 1b01 	strb.w	r1, [r3], #1
 800337a:	e7f9      	b.n	8003370 <memset+0x4>

0800337c <__errno>:
 800337c:	4b01      	ldr	r3, [pc, #4]	@ (8003384 <__errno+0x8>)
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000001c 	.word	0x2000001c

08003388 <__libc_init_array>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	4d0d      	ldr	r5, [pc, #52]	@ (80033c0 <__libc_init_array+0x38>)
 800338c:	4c0d      	ldr	r4, [pc, #52]	@ (80033c4 <__libc_init_array+0x3c>)
 800338e:	1b64      	subs	r4, r4, r5
 8003390:	10a4      	asrs	r4, r4, #2
 8003392:	2600      	movs	r6, #0
 8003394:	42a6      	cmp	r6, r4
 8003396:	d109      	bne.n	80033ac <__libc_init_array+0x24>
 8003398:	4d0b      	ldr	r5, [pc, #44]	@ (80033c8 <__libc_init_array+0x40>)
 800339a:	4c0c      	ldr	r4, [pc, #48]	@ (80033cc <__libc_init_array+0x44>)
 800339c:	f000 fc66 	bl	8003c6c <_init>
 80033a0:	1b64      	subs	r4, r4, r5
 80033a2:	10a4      	asrs	r4, r4, #2
 80033a4:	2600      	movs	r6, #0
 80033a6:	42a6      	cmp	r6, r4
 80033a8:	d105      	bne.n	80033b6 <__libc_init_array+0x2e>
 80033aa:	bd70      	pop	{r4, r5, r6, pc}
 80033ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b0:	4798      	blx	r3
 80033b2:	3601      	adds	r6, #1
 80033b4:	e7ee      	b.n	8003394 <__libc_init_array+0xc>
 80033b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ba:	4798      	blx	r3
 80033bc:	3601      	adds	r6, #1
 80033be:	e7f2      	b.n	80033a6 <__libc_init_array+0x1e>
 80033c0:	08003ec8 	.word	0x08003ec8
 80033c4:	08003ec8 	.word	0x08003ec8
 80033c8:	08003ec8 	.word	0x08003ec8
 80033cc:	08003ecc 	.word	0x08003ecc

080033d0 <__retarget_lock_acquire_recursive>:
 80033d0:	4770      	bx	lr

080033d2 <__retarget_lock_release_recursive>:
 80033d2:	4770      	bx	lr

080033d4 <memcpy>:
 80033d4:	440a      	add	r2, r1
 80033d6:	4291      	cmp	r1, r2
 80033d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033dc:	d100      	bne.n	80033e0 <memcpy+0xc>
 80033de:	4770      	bx	lr
 80033e0:	b510      	push	{r4, lr}
 80033e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033ea:	4291      	cmp	r1, r2
 80033ec:	d1f9      	bne.n	80033e2 <memcpy+0xe>
 80033ee:	bd10      	pop	{r4, pc}

080033f0 <_free_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4605      	mov	r5, r0
 80033f4:	2900      	cmp	r1, #0
 80033f6:	d041      	beq.n	800347c <_free_r+0x8c>
 80033f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033fc:	1f0c      	subs	r4, r1, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	bfb8      	it	lt
 8003402:	18e4      	addlt	r4, r4, r3
 8003404:	f000 f8e0 	bl	80035c8 <__malloc_lock>
 8003408:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <_free_r+0x90>)
 800340a:	6813      	ldr	r3, [r2, #0]
 800340c:	b933      	cbnz	r3, 800341c <_free_r+0x2c>
 800340e:	6063      	str	r3, [r4, #4]
 8003410:	6014      	str	r4, [r2, #0]
 8003412:	4628      	mov	r0, r5
 8003414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003418:	f000 b8dc 	b.w	80035d4 <__malloc_unlock>
 800341c:	42a3      	cmp	r3, r4
 800341e:	d908      	bls.n	8003432 <_free_r+0x42>
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	1821      	adds	r1, r4, r0
 8003424:	428b      	cmp	r3, r1
 8003426:	bf01      	itttt	eq
 8003428:	6819      	ldreq	r1, [r3, #0]
 800342a:	685b      	ldreq	r3, [r3, #4]
 800342c:	1809      	addeq	r1, r1, r0
 800342e:	6021      	streq	r1, [r4, #0]
 8003430:	e7ed      	b.n	800340e <_free_r+0x1e>
 8003432:	461a      	mov	r2, r3
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	b10b      	cbz	r3, 800343c <_free_r+0x4c>
 8003438:	42a3      	cmp	r3, r4
 800343a:	d9fa      	bls.n	8003432 <_free_r+0x42>
 800343c:	6811      	ldr	r1, [r2, #0]
 800343e:	1850      	adds	r0, r2, r1
 8003440:	42a0      	cmp	r0, r4
 8003442:	d10b      	bne.n	800345c <_free_r+0x6c>
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	4401      	add	r1, r0
 8003448:	1850      	adds	r0, r2, r1
 800344a:	4283      	cmp	r3, r0
 800344c:	6011      	str	r1, [r2, #0]
 800344e:	d1e0      	bne.n	8003412 <_free_r+0x22>
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	6053      	str	r3, [r2, #4]
 8003456:	4408      	add	r0, r1
 8003458:	6010      	str	r0, [r2, #0]
 800345a:	e7da      	b.n	8003412 <_free_r+0x22>
 800345c:	d902      	bls.n	8003464 <_free_r+0x74>
 800345e:	230c      	movs	r3, #12
 8003460:	602b      	str	r3, [r5, #0]
 8003462:	e7d6      	b.n	8003412 <_free_r+0x22>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	1821      	adds	r1, r4, r0
 8003468:	428b      	cmp	r3, r1
 800346a:	bf04      	itt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	bf04      	itt	eq
 8003474:	1809      	addeq	r1, r1, r0
 8003476:	6021      	streq	r1, [r4, #0]
 8003478:	6054      	str	r4, [r2, #4]
 800347a:	e7ca      	b.n	8003412 <_free_r+0x22>
 800347c:	bd38      	pop	{r3, r4, r5, pc}
 800347e:	bf00      	nop
 8003480:	20000348 	.word	0x20000348

08003484 <sbrk_aligned>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	4e0f      	ldr	r6, [pc, #60]	@ (80034c4 <sbrk_aligned+0x40>)
 8003488:	460c      	mov	r4, r1
 800348a:	6831      	ldr	r1, [r6, #0]
 800348c:	4605      	mov	r5, r0
 800348e:	b911      	cbnz	r1, 8003496 <sbrk_aligned+0x12>
 8003490:	f000 fba6 	bl	8003be0 <_sbrk_r>
 8003494:	6030      	str	r0, [r6, #0]
 8003496:	4621      	mov	r1, r4
 8003498:	4628      	mov	r0, r5
 800349a:	f000 fba1 	bl	8003be0 <_sbrk_r>
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	d103      	bne.n	80034aa <sbrk_aligned+0x26>
 80034a2:	f04f 34ff 	mov.w	r4, #4294967295
 80034a6:	4620      	mov	r0, r4
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	1cc4      	adds	r4, r0, #3
 80034ac:	f024 0403 	bic.w	r4, r4, #3
 80034b0:	42a0      	cmp	r0, r4
 80034b2:	d0f8      	beq.n	80034a6 <sbrk_aligned+0x22>
 80034b4:	1a21      	subs	r1, r4, r0
 80034b6:	4628      	mov	r0, r5
 80034b8:	f000 fb92 	bl	8003be0 <_sbrk_r>
 80034bc:	3001      	adds	r0, #1
 80034be:	d1f2      	bne.n	80034a6 <sbrk_aligned+0x22>
 80034c0:	e7ef      	b.n	80034a2 <sbrk_aligned+0x1e>
 80034c2:	bf00      	nop
 80034c4:	20000344 	.word	0x20000344

080034c8 <_malloc_r>:
 80034c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034cc:	1ccd      	adds	r5, r1, #3
 80034ce:	f025 0503 	bic.w	r5, r5, #3
 80034d2:	3508      	adds	r5, #8
 80034d4:	2d0c      	cmp	r5, #12
 80034d6:	bf38      	it	cc
 80034d8:	250c      	movcc	r5, #12
 80034da:	2d00      	cmp	r5, #0
 80034dc:	4606      	mov	r6, r0
 80034de:	db01      	blt.n	80034e4 <_malloc_r+0x1c>
 80034e0:	42a9      	cmp	r1, r5
 80034e2:	d904      	bls.n	80034ee <_malloc_r+0x26>
 80034e4:	230c      	movs	r3, #12
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	2000      	movs	r0, #0
 80034ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035c4 <_malloc_r+0xfc>
 80034f2:	f000 f869 	bl	80035c8 <__malloc_lock>
 80034f6:	f8d8 3000 	ldr.w	r3, [r8]
 80034fa:	461c      	mov	r4, r3
 80034fc:	bb44      	cbnz	r4, 8003550 <_malloc_r+0x88>
 80034fe:	4629      	mov	r1, r5
 8003500:	4630      	mov	r0, r6
 8003502:	f7ff ffbf 	bl	8003484 <sbrk_aligned>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	4604      	mov	r4, r0
 800350a:	d158      	bne.n	80035be <_malloc_r+0xf6>
 800350c:	f8d8 4000 	ldr.w	r4, [r8]
 8003510:	4627      	mov	r7, r4
 8003512:	2f00      	cmp	r7, #0
 8003514:	d143      	bne.n	800359e <_malloc_r+0xd6>
 8003516:	2c00      	cmp	r4, #0
 8003518:	d04b      	beq.n	80035b2 <_malloc_r+0xea>
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	4639      	mov	r1, r7
 800351e:	4630      	mov	r0, r6
 8003520:	eb04 0903 	add.w	r9, r4, r3
 8003524:	f000 fb5c 	bl	8003be0 <_sbrk_r>
 8003528:	4581      	cmp	r9, r0
 800352a:	d142      	bne.n	80035b2 <_malloc_r+0xea>
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	1a6d      	subs	r5, r5, r1
 8003530:	4629      	mov	r1, r5
 8003532:	4630      	mov	r0, r6
 8003534:	f7ff ffa6 	bl	8003484 <sbrk_aligned>
 8003538:	3001      	adds	r0, #1
 800353a:	d03a      	beq.n	80035b2 <_malloc_r+0xea>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	442b      	add	r3, r5
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	f8d8 3000 	ldr.w	r3, [r8]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	bb62      	cbnz	r2, 80035a4 <_malloc_r+0xdc>
 800354a:	f8c8 7000 	str.w	r7, [r8]
 800354e:	e00f      	b.n	8003570 <_malloc_r+0xa8>
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	1b52      	subs	r2, r2, r5
 8003554:	d420      	bmi.n	8003598 <_malloc_r+0xd0>
 8003556:	2a0b      	cmp	r2, #11
 8003558:	d917      	bls.n	800358a <_malloc_r+0xc2>
 800355a:	1961      	adds	r1, r4, r5
 800355c:	42a3      	cmp	r3, r4
 800355e:	6025      	str	r5, [r4, #0]
 8003560:	bf18      	it	ne
 8003562:	6059      	strne	r1, [r3, #4]
 8003564:	6863      	ldr	r3, [r4, #4]
 8003566:	bf08      	it	eq
 8003568:	f8c8 1000 	streq.w	r1, [r8]
 800356c:	5162      	str	r2, [r4, r5]
 800356e:	604b      	str	r3, [r1, #4]
 8003570:	4630      	mov	r0, r6
 8003572:	f000 f82f 	bl	80035d4 <__malloc_unlock>
 8003576:	f104 000b 	add.w	r0, r4, #11
 800357a:	1d23      	adds	r3, r4, #4
 800357c:	f020 0007 	bic.w	r0, r0, #7
 8003580:	1ac2      	subs	r2, r0, r3
 8003582:	bf1c      	itt	ne
 8003584:	1a1b      	subne	r3, r3, r0
 8003586:	50a3      	strne	r3, [r4, r2]
 8003588:	e7af      	b.n	80034ea <_malloc_r+0x22>
 800358a:	6862      	ldr	r2, [r4, #4]
 800358c:	42a3      	cmp	r3, r4
 800358e:	bf0c      	ite	eq
 8003590:	f8c8 2000 	streq.w	r2, [r8]
 8003594:	605a      	strne	r2, [r3, #4]
 8003596:	e7eb      	b.n	8003570 <_malloc_r+0xa8>
 8003598:	4623      	mov	r3, r4
 800359a:	6864      	ldr	r4, [r4, #4]
 800359c:	e7ae      	b.n	80034fc <_malloc_r+0x34>
 800359e:	463c      	mov	r4, r7
 80035a0:	687f      	ldr	r7, [r7, #4]
 80035a2:	e7b6      	b.n	8003512 <_malloc_r+0x4a>
 80035a4:	461a      	mov	r2, r3
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d1fb      	bne.n	80035a4 <_malloc_r+0xdc>
 80035ac:	2300      	movs	r3, #0
 80035ae:	6053      	str	r3, [r2, #4]
 80035b0:	e7de      	b.n	8003570 <_malloc_r+0xa8>
 80035b2:	230c      	movs	r3, #12
 80035b4:	6033      	str	r3, [r6, #0]
 80035b6:	4630      	mov	r0, r6
 80035b8:	f000 f80c 	bl	80035d4 <__malloc_unlock>
 80035bc:	e794      	b.n	80034e8 <_malloc_r+0x20>
 80035be:	6005      	str	r5, [r0, #0]
 80035c0:	e7d6      	b.n	8003570 <_malloc_r+0xa8>
 80035c2:	bf00      	nop
 80035c4:	20000348 	.word	0x20000348

080035c8 <__malloc_lock>:
 80035c8:	4801      	ldr	r0, [pc, #4]	@ (80035d0 <__malloc_lock+0x8>)
 80035ca:	f7ff bf01 	b.w	80033d0 <__retarget_lock_acquire_recursive>
 80035ce:	bf00      	nop
 80035d0:	20000340 	.word	0x20000340

080035d4 <__malloc_unlock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	@ (80035dc <__malloc_unlock+0x8>)
 80035d6:	f7ff befc 	b.w	80033d2 <__retarget_lock_release_recursive>
 80035da:	bf00      	nop
 80035dc:	20000340 	.word	0x20000340

080035e0 <__ssputs_r>:
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e4:	688e      	ldr	r6, [r1, #8]
 80035e6:	461f      	mov	r7, r3
 80035e8:	42be      	cmp	r6, r7
 80035ea:	680b      	ldr	r3, [r1, #0]
 80035ec:	4682      	mov	sl, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	4690      	mov	r8, r2
 80035f2:	d82d      	bhi.n	8003650 <__ssputs_r+0x70>
 80035f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035fc:	d026      	beq.n	800364c <__ssputs_r+0x6c>
 80035fe:	6965      	ldr	r5, [r4, #20]
 8003600:	6909      	ldr	r1, [r1, #16]
 8003602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003606:	eba3 0901 	sub.w	r9, r3, r1
 800360a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800360e:	1c7b      	adds	r3, r7, #1
 8003610:	444b      	add	r3, r9
 8003612:	106d      	asrs	r5, r5, #1
 8003614:	429d      	cmp	r5, r3
 8003616:	bf38      	it	cc
 8003618:	461d      	movcc	r5, r3
 800361a:	0553      	lsls	r3, r2, #21
 800361c:	d527      	bpl.n	800366e <__ssputs_r+0x8e>
 800361e:	4629      	mov	r1, r5
 8003620:	f7ff ff52 	bl	80034c8 <_malloc_r>
 8003624:	4606      	mov	r6, r0
 8003626:	b360      	cbz	r0, 8003682 <__ssputs_r+0xa2>
 8003628:	6921      	ldr	r1, [r4, #16]
 800362a:	464a      	mov	r2, r9
 800362c:	f7ff fed2 	bl	80033d4 <memcpy>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363a:	81a3      	strh	r3, [r4, #12]
 800363c:	6126      	str	r6, [r4, #16]
 800363e:	6165      	str	r5, [r4, #20]
 8003640:	444e      	add	r6, r9
 8003642:	eba5 0509 	sub.w	r5, r5, r9
 8003646:	6026      	str	r6, [r4, #0]
 8003648:	60a5      	str	r5, [r4, #8]
 800364a:	463e      	mov	r6, r7
 800364c:	42be      	cmp	r6, r7
 800364e:	d900      	bls.n	8003652 <__ssputs_r+0x72>
 8003650:	463e      	mov	r6, r7
 8003652:	6820      	ldr	r0, [r4, #0]
 8003654:	4632      	mov	r2, r6
 8003656:	4641      	mov	r1, r8
 8003658:	f000 faa8 	bl	8003bac <memmove>
 800365c:	68a3      	ldr	r3, [r4, #8]
 800365e:	1b9b      	subs	r3, r3, r6
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	4433      	add	r3, r6
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	2000      	movs	r0, #0
 800366a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366e:	462a      	mov	r2, r5
 8003670:	f000 fac6 	bl	8003c00 <_realloc_r>
 8003674:	4606      	mov	r6, r0
 8003676:	2800      	cmp	r0, #0
 8003678:	d1e0      	bne.n	800363c <__ssputs_r+0x5c>
 800367a:	6921      	ldr	r1, [r4, #16]
 800367c:	4650      	mov	r0, sl
 800367e:	f7ff feb7 	bl	80033f0 <_free_r>
 8003682:	230c      	movs	r3, #12
 8003684:	f8ca 3000 	str.w	r3, [sl]
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800368e:	81a3      	strh	r3, [r4, #12]
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	e7e9      	b.n	800366a <__ssputs_r+0x8a>
	...

08003698 <_svfiprintf_r>:
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	4698      	mov	r8, r3
 800369e:	898b      	ldrh	r3, [r1, #12]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	b09d      	sub	sp, #116	@ 0x74
 80036a4:	4607      	mov	r7, r0
 80036a6:	460d      	mov	r5, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	d510      	bpl.n	80036ce <_svfiprintf_r+0x36>
 80036ac:	690b      	ldr	r3, [r1, #16]
 80036ae:	b973      	cbnz	r3, 80036ce <_svfiprintf_r+0x36>
 80036b0:	2140      	movs	r1, #64	@ 0x40
 80036b2:	f7ff ff09 	bl	80034c8 <_malloc_r>
 80036b6:	6028      	str	r0, [r5, #0]
 80036b8:	6128      	str	r0, [r5, #16]
 80036ba:	b930      	cbnz	r0, 80036ca <_svfiprintf_r+0x32>
 80036bc:	230c      	movs	r3, #12
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	b01d      	add	sp, #116	@ 0x74
 80036c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ca:	2340      	movs	r3, #64	@ 0x40
 80036cc:	616b      	str	r3, [r5, #20]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80036d2:	2320      	movs	r3, #32
 80036d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036dc:	2330      	movs	r3, #48	@ 0x30
 80036de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800387c <_svfiprintf_r+0x1e4>
 80036e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036e6:	f04f 0901 	mov.w	r9, #1
 80036ea:	4623      	mov	r3, r4
 80036ec:	469a      	mov	sl, r3
 80036ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036f2:	b10a      	cbz	r2, 80036f8 <_svfiprintf_r+0x60>
 80036f4:	2a25      	cmp	r2, #37	@ 0x25
 80036f6:	d1f9      	bne.n	80036ec <_svfiprintf_r+0x54>
 80036f8:	ebba 0b04 	subs.w	fp, sl, r4
 80036fc:	d00b      	beq.n	8003716 <_svfiprintf_r+0x7e>
 80036fe:	465b      	mov	r3, fp
 8003700:	4622      	mov	r2, r4
 8003702:	4629      	mov	r1, r5
 8003704:	4638      	mov	r0, r7
 8003706:	f7ff ff6b 	bl	80035e0 <__ssputs_r>
 800370a:	3001      	adds	r0, #1
 800370c:	f000 80a7 	beq.w	800385e <_svfiprintf_r+0x1c6>
 8003710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003712:	445a      	add	r2, fp
 8003714:	9209      	str	r2, [sp, #36]	@ 0x24
 8003716:	f89a 3000 	ldrb.w	r3, [sl]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 809f 	beq.w	800385e <_svfiprintf_r+0x1c6>
 8003720:	2300      	movs	r3, #0
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800372a:	f10a 0a01 	add.w	sl, sl, #1
 800372e:	9304      	str	r3, [sp, #16]
 8003730:	9307      	str	r3, [sp, #28]
 8003732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003736:	931a      	str	r3, [sp, #104]	@ 0x68
 8003738:	4654      	mov	r4, sl
 800373a:	2205      	movs	r2, #5
 800373c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003740:	484e      	ldr	r0, [pc, #312]	@ (800387c <_svfiprintf_r+0x1e4>)
 8003742:	f7fc fd5d 	bl	8000200 <memchr>
 8003746:	9a04      	ldr	r2, [sp, #16]
 8003748:	b9d8      	cbnz	r0, 8003782 <_svfiprintf_r+0xea>
 800374a:	06d0      	lsls	r0, r2, #27
 800374c:	bf44      	itt	mi
 800374e:	2320      	movmi	r3, #32
 8003750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003754:	0711      	lsls	r1, r2, #28
 8003756:	bf44      	itt	mi
 8003758:	232b      	movmi	r3, #43	@ 0x2b
 800375a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800375e:	f89a 3000 	ldrb.w	r3, [sl]
 8003762:	2b2a      	cmp	r3, #42	@ 0x2a
 8003764:	d015      	beq.n	8003792 <_svfiprintf_r+0xfa>
 8003766:	9a07      	ldr	r2, [sp, #28]
 8003768:	4654      	mov	r4, sl
 800376a:	2000      	movs	r0, #0
 800376c:	f04f 0c0a 	mov.w	ip, #10
 8003770:	4621      	mov	r1, r4
 8003772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003776:	3b30      	subs	r3, #48	@ 0x30
 8003778:	2b09      	cmp	r3, #9
 800377a:	d94b      	bls.n	8003814 <_svfiprintf_r+0x17c>
 800377c:	b1b0      	cbz	r0, 80037ac <_svfiprintf_r+0x114>
 800377e:	9207      	str	r2, [sp, #28]
 8003780:	e014      	b.n	80037ac <_svfiprintf_r+0x114>
 8003782:	eba0 0308 	sub.w	r3, r0, r8
 8003786:	fa09 f303 	lsl.w	r3, r9, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	46a2      	mov	sl, r4
 8003790:	e7d2      	b.n	8003738 <_svfiprintf_r+0xa0>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	1d19      	adds	r1, r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	9103      	str	r1, [sp, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	bfbb      	ittet	lt
 800379e:	425b      	neglt	r3, r3
 80037a0:	f042 0202 	orrlt.w	r2, r2, #2
 80037a4:	9307      	strge	r3, [sp, #28]
 80037a6:	9307      	strlt	r3, [sp, #28]
 80037a8:	bfb8      	it	lt
 80037aa:	9204      	strlt	r2, [sp, #16]
 80037ac:	7823      	ldrb	r3, [r4, #0]
 80037ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80037b0:	d10a      	bne.n	80037c8 <_svfiprintf_r+0x130>
 80037b2:	7863      	ldrb	r3, [r4, #1]
 80037b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b6:	d132      	bne.n	800381e <_svfiprintf_r+0x186>
 80037b8:	9b03      	ldr	r3, [sp, #12]
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	9203      	str	r2, [sp, #12]
 80037c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037c4:	3402      	adds	r4, #2
 80037c6:	9305      	str	r3, [sp, #20]
 80037c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800388c <_svfiprintf_r+0x1f4>
 80037cc:	7821      	ldrb	r1, [r4, #0]
 80037ce:	2203      	movs	r2, #3
 80037d0:	4650      	mov	r0, sl
 80037d2:	f7fc fd15 	bl	8000200 <memchr>
 80037d6:	b138      	cbz	r0, 80037e8 <_svfiprintf_r+0x150>
 80037d8:	9b04      	ldr	r3, [sp, #16]
 80037da:	eba0 000a 	sub.w	r0, r0, sl
 80037de:	2240      	movs	r2, #64	@ 0x40
 80037e0:	4082      	lsls	r2, r0
 80037e2:	4313      	orrs	r3, r2
 80037e4:	3401      	adds	r4, #1
 80037e6:	9304      	str	r3, [sp, #16]
 80037e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ec:	4824      	ldr	r0, [pc, #144]	@ (8003880 <_svfiprintf_r+0x1e8>)
 80037ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037f2:	2206      	movs	r2, #6
 80037f4:	f7fc fd04 	bl	8000200 <memchr>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d036      	beq.n	800386a <_svfiprintf_r+0x1d2>
 80037fc:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <_svfiprintf_r+0x1ec>)
 80037fe:	bb1b      	cbnz	r3, 8003848 <_svfiprintf_r+0x1b0>
 8003800:	9b03      	ldr	r3, [sp, #12]
 8003802:	3307      	adds	r3, #7
 8003804:	f023 0307 	bic.w	r3, r3, #7
 8003808:	3308      	adds	r3, #8
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800380e:	4433      	add	r3, r6
 8003810:	9309      	str	r3, [sp, #36]	@ 0x24
 8003812:	e76a      	b.n	80036ea <_svfiprintf_r+0x52>
 8003814:	fb0c 3202 	mla	r2, ip, r2, r3
 8003818:	460c      	mov	r4, r1
 800381a:	2001      	movs	r0, #1
 800381c:	e7a8      	b.n	8003770 <_svfiprintf_r+0xd8>
 800381e:	2300      	movs	r3, #0
 8003820:	3401      	adds	r4, #1
 8003822:	9305      	str	r3, [sp, #20]
 8003824:	4619      	mov	r1, r3
 8003826:	f04f 0c0a 	mov.w	ip, #10
 800382a:	4620      	mov	r0, r4
 800382c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003830:	3a30      	subs	r2, #48	@ 0x30
 8003832:	2a09      	cmp	r2, #9
 8003834:	d903      	bls.n	800383e <_svfiprintf_r+0x1a6>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0c6      	beq.n	80037c8 <_svfiprintf_r+0x130>
 800383a:	9105      	str	r1, [sp, #20]
 800383c:	e7c4      	b.n	80037c8 <_svfiprintf_r+0x130>
 800383e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003842:	4604      	mov	r4, r0
 8003844:	2301      	movs	r3, #1
 8003846:	e7f0      	b.n	800382a <_svfiprintf_r+0x192>
 8003848:	ab03      	add	r3, sp, #12
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	462a      	mov	r2, r5
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <_svfiprintf_r+0x1f0>)
 8003850:	a904      	add	r1, sp, #16
 8003852:	4638      	mov	r0, r7
 8003854:	f3af 8000 	nop.w
 8003858:	1c42      	adds	r2, r0, #1
 800385a:	4606      	mov	r6, r0
 800385c:	d1d6      	bne.n	800380c <_svfiprintf_r+0x174>
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	065b      	lsls	r3, r3, #25
 8003862:	f53f af2d 	bmi.w	80036c0 <_svfiprintf_r+0x28>
 8003866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003868:	e72c      	b.n	80036c4 <_svfiprintf_r+0x2c>
 800386a:	ab03      	add	r3, sp, #12
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	462a      	mov	r2, r5
 8003870:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <_svfiprintf_r+0x1f0>)
 8003872:	a904      	add	r1, sp, #16
 8003874:	4638      	mov	r0, r7
 8003876:	f000 f879 	bl	800396c <_printf_i>
 800387a:	e7ed      	b.n	8003858 <_svfiprintf_r+0x1c0>
 800387c:	08003e8d 	.word	0x08003e8d
 8003880:	08003e97 	.word	0x08003e97
 8003884:	00000000 	.word	0x00000000
 8003888:	080035e1 	.word	0x080035e1
 800388c:	08003e93 	.word	0x08003e93

08003890 <_printf_common>:
 8003890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003894:	4616      	mov	r6, r2
 8003896:	4698      	mov	r8, r3
 8003898:	688a      	ldr	r2, [r1, #8]
 800389a:	690b      	ldr	r3, [r1, #16]
 800389c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bfb8      	it	lt
 80038a4:	4613      	movlt	r3, r2
 80038a6:	6033      	str	r3, [r6, #0]
 80038a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038ac:	4607      	mov	r7, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	b10a      	cbz	r2, 80038b6 <_printf_common+0x26>
 80038b2:	3301      	adds	r3, #1
 80038b4:	6033      	str	r3, [r6, #0]
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	0699      	lsls	r1, r3, #26
 80038ba:	bf42      	ittt	mi
 80038bc:	6833      	ldrmi	r3, [r6, #0]
 80038be:	3302      	addmi	r3, #2
 80038c0:	6033      	strmi	r3, [r6, #0]
 80038c2:	6825      	ldr	r5, [r4, #0]
 80038c4:	f015 0506 	ands.w	r5, r5, #6
 80038c8:	d106      	bne.n	80038d8 <_printf_common+0x48>
 80038ca:	f104 0a19 	add.w	sl, r4, #25
 80038ce:	68e3      	ldr	r3, [r4, #12]
 80038d0:	6832      	ldr	r2, [r6, #0]
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	42ab      	cmp	r3, r5
 80038d6:	dc26      	bgt.n	8003926 <_printf_common+0x96>
 80038d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	3b00      	subs	r3, #0
 80038e0:	bf18      	it	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	0692      	lsls	r2, r2, #26
 80038e6:	d42b      	bmi.n	8003940 <_printf_common+0xb0>
 80038e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038ec:	4641      	mov	r1, r8
 80038ee:	4638      	mov	r0, r7
 80038f0:	47c8      	blx	r9
 80038f2:	3001      	adds	r0, #1
 80038f4:	d01e      	beq.n	8003934 <_printf_common+0xa4>
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	6922      	ldr	r2, [r4, #16]
 80038fa:	f003 0306 	and.w	r3, r3, #6
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf02      	ittt	eq
 8003902:	68e5      	ldreq	r5, [r4, #12]
 8003904:	6833      	ldreq	r3, [r6, #0]
 8003906:	1aed      	subeq	r5, r5, r3
 8003908:	68a3      	ldr	r3, [r4, #8]
 800390a:	bf0c      	ite	eq
 800390c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003910:	2500      	movne	r5, #0
 8003912:	4293      	cmp	r3, r2
 8003914:	bfc4      	itt	gt
 8003916:	1a9b      	subgt	r3, r3, r2
 8003918:	18ed      	addgt	r5, r5, r3
 800391a:	2600      	movs	r6, #0
 800391c:	341a      	adds	r4, #26
 800391e:	42b5      	cmp	r5, r6
 8003920:	d11a      	bne.n	8003958 <_printf_common+0xc8>
 8003922:	2000      	movs	r0, #0
 8003924:	e008      	b.n	8003938 <_printf_common+0xa8>
 8003926:	2301      	movs	r3, #1
 8003928:	4652      	mov	r2, sl
 800392a:	4641      	mov	r1, r8
 800392c:	4638      	mov	r0, r7
 800392e:	47c8      	blx	r9
 8003930:	3001      	adds	r0, #1
 8003932:	d103      	bne.n	800393c <_printf_common+0xac>
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393c:	3501      	adds	r5, #1
 800393e:	e7c6      	b.n	80038ce <_printf_common+0x3e>
 8003940:	18e1      	adds	r1, r4, r3
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	2030      	movs	r0, #48	@ 0x30
 8003946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800394a:	4422      	add	r2, r4
 800394c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003954:	3302      	adds	r3, #2
 8003956:	e7c7      	b.n	80038e8 <_printf_common+0x58>
 8003958:	2301      	movs	r3, #1
 800395a:	4622      	mov	r2, r4
 800395c:	4641      	mov	r1, r8
 800395e:	4638      	mov	r0, r7
 8003960:	47c8      	blx	r9
 8003962:	3001      	adds	r0, #1
 8003964:	d0e6      	beq.n	8003934 <_printf_common+0xa4>
 8003966:	3601      	adds	r6, #1
 8003968:	e7d9      	b.n	800391e <_printf_common+0x8e>
	...

0800396c <_printf_i>:
 800396c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003970:	7e0f      	ldrb	r7, [r1, #24]
 8003972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003974:	2f78      	cmp	r7, #120	@ 0x78
 8003976:	4691      	mov	r9, r2
 8003978:	4680      	mov	r8, r0
 800397a:	460c      	mov	r4, r1
 800397c:	469a      	mov	sl, r3
 800397e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003982:	d807      	bhi.n	8003994 <_printf_i+0x28>
 8003984:	2f62      	cmp	r7, #98	@ 0x62
 8003986:	d80a      	bhi.n	800399e <_printf_i+0x32>
 8003988:	2f00      	cmp	r7, #0
 800398a:	f000 80d2 	beq.w	8003b32 <_printf_i+0x1c6>
 800398e:	2f58      	cmp	r7, #88	@ 0x58
 8003990:	f000 80b9 	beq.w	8003b06 <_printf_i+0x19a>
 8003994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800399c:	e03a      	b.n	8003a14 <_printf_i+0xa8>
 800399e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039a2:	2b15      	cmp	r3, #21
 80039a4:	d8f6      	bhi.n	8003994 <_printf_i+0x28>
 80039a6:	a101      	add	r1, pc, #4	@ (adr r1, 80039ac <_printf_i+0x40>)
 80039a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039ac:	08003a05 	.word	0x08003a05
 80039b0:	08003a19 	.word	0x08003a19
 80039b4:	08003995 	.word	0x08003995
 80039b8:	08003995 	.word	0x08003995
 80039bc:	08003995 	.word	0x08003995
 80039c0:	08003995 	.word	0x08003995
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003995 	.word	0x08003995
 80039cc:	08003995 	.word	0x08003995
 80039d0:	08003995 	.word	0x08003995
 80039d4:	08003995 	.word	0x08003995
 80039d8:	08003b19 	.word	0x08003b19
 80039dc:	08003a43 	.word	0x08003a43
 80039e0:	08003ad3 	.word	0x08003ad3
 80039e4:	08003995 	.word	0x08003995
 80039e8:	08003995 	.word	0x08003995
 80039ec:	08003b3b 	.word	0x08003b3b
 80039f0:	08003995 	.word	0x08003995
 80039f4:	08003a43 	.word	0x08003a43
 80039f8:	08003995 	.word	0x08003995
 80039fc:	08003995 	.word	0x08003995
 8003a00:	08003adb 	.word	0x08003adb
 8003a04:	6833      	ldr	r3, [r6, #0]
 8003a06:	1d1a      	adds	r2, r3, #4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6032      	str	r2, [r6, #0]
 8003a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a14:	2301      	movs	r3, #1
 8003a16:	e09d      	b.n	8003b54 <_printf_i+0x1e8>
 8003a18:	6833      	ldr	r3, [r6, #0]
 8003a1a:	6820      	ldr	r0, [r4, #0]
 8003a1c:	1d19      	adds	r1, r3, #4
 8003a1e:	6031      	str	r1, [r6, #0]
 8003a20:	0606      	lsls	r6, r0, #24
 8003a22:	d501      	bpl.n	8003a28 <_printf_i+0xbc>
 8003a24:	681d      	ldr	r5, [r3, #0]
 8003a26:	e003      	b.n	8003a30 <_printf_i+0xc4>
 8003a28:	0645      	lsls	r5, r0, #25
 8003a2a:	d5fb      	bpl.n	8003a24 <_printf_i+0xb8>
 8003a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	da03      	bge.n	8003a3c <_printf_i+0xd0>
 8003a34:	232d      	movs	r3, #45	@ 0x2d
 8003a36:	426d      	negs	r5, r5
 8003a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a3c:	4859      	ldr	r0, [pc, #356]	@ (8003ba4 <_printf_i+0x238>)
 8003a3e:	230a      	movs	r3, #10
 8003a40:	e011      	b.n	8003a66 <_printf_i+0xfa>
 8003a42:	6821      	ldr	r1, [r4, #0]
 8003a44:	6833      	ldr	r3, [r6, #0]
 8003a46:	0608      	lsls	r0, r1, #24
 8003a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a4c:	d402      	bmi.n	8003a54 <_printf_i+0xe8>
 8003a4e:	0649      	lsls	r1, r1, #25
 8003a50:	bf48      	it	mi
 8003a52:	b2ad      	uxthmi	r5, r5
 8003a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a56:	4853      	ldr	r0, [pc, #332]	@ (8003ba4 <_printf_i+0x238>)
 8003a58:	6033      	str	r3, [r6, #0]
 8003a5a:	bf14      	ite	ne
 8003a5c:	230a      	movne	r3, #10
 8003a5e:	2308      	moveq	r3, #8
 8003a60:	2100      	movs	r1, #0
 8003a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a66:	6866      	ldr	r6, [r4, #4]
 8003a68:	60a6      	str	r6, [r4, #8]
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	bfa2      	ittt	ge
 8003a6e:	6821      	ldrge	r1, [r4, #0]
 8003a70:	f021 0104 	bicge.w	r1, r1, #4
 8003a74:	6021      	strge	r1, [r4, #0]
 8003a76:	b90d      	cbnz	r5, 8003a7c <_printf_i+0x110>
 8003a78:	2e00      	cmp	r6, #0
 8003a7a:	d04b      	beq.n	8003b14 <_printf_i+0x1a8>
 8003a7c:	4616      	mov	r6, r2
 8003a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a82:	fb03 5711 	mls	r7, r3, r1, r5
 8003a86:	5dc7      	ldrb	r7, [r0, r7]
 8003a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a8c:	462f      	mov	r7, r5
 8003a8e:	42bb      	cmp	r3, r7
 8003a90:	460d      	mov	r5, r1
 8003a92:	d9f4      	bls.n	8003a7e <_printf_i+0x112>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d10b      	bne.n	8003ab0 <_printf_i+0x144>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	07df      	lsls	r7, r3, #31
 8003a9c:	d508      	bpl.n	8003ab0 <_printf_i+0x144>
 8003a9e:	6923      	ldr	r3, [r4, #16]
 8003aa0:	6861      	ldr	r1, [r4, #4]
 8003aa2:	4299      	cmp	r1, r3
 8003aa4:	bfde      	ittt	le
 8003aa6:	2330      	movle	r3, #48	@ 0x30
 8003aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ab0:	1b92      	subs	r2, r2, r6
 8003ab2:	6122      	str	r2, [r4, #16]
 8003ab4:	f8cd a000 	str.w	sl, [sp]
 8003ab8:	464b      	mov	r3, r9
 8003aba:	aa03      	add	r2, sp, #12
 8003abc:	4621      	mov	r1, r4
 8003abe:	4640      	mov	r0, r8
 8003ac0:	f7ff fee6 	bl	8003890 <_printf_common>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d14a      	bne.n	8003b5e <_printf_i+0x1f2>
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	b004      	add	sp, #16
 8003ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	f043 0320 	orr.w	r3, r3, #32
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	4833      	ldr	r0, [pc, #204]	@ (8003ba8 <_printf_i+0x23c>)
 8003adc:	2778      	movs	r7, #120	@ 0x78
 8003ade:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	6831      	ldr	r1, [r6, #0]
 8003ae6:	061f      	lsls	r7, r3, #24
 8003ae8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aec:	d402      	bmi.n	8003af4 <_printf_i+0x188>
 8003aee:	065f      	lsls	r7, r3, #25
 8003af0:	bf48      	it	mi
 8003af2:	b2ad      	uxthmi	r5, r5
 8003af4:	6031      	str	r1, [r6, #0]
 8003af6:	07d9      	lsls	r1, r3, #31
 8003af8:	bf44      	itt	mi
 8003afa:	f043 0320 	orrmi.w	r3, r3, #32
 8003afe:	6023      	strmi	r3, [r4, #0]
 8003b00:	b11d      	cbz	r5, 8003b0a <_printf_i+0x19e>
 8003b02:	2310      	movs	r3, #16
 8003b04:	e7ac      	b.n	8003a60 <_printf_i+0xf4>
 8003b06:	4827      	ldr	r0, [pc, #156]	@ (8003ba4 <_printf_i+0x238>)
 8003b08:	e7e9      	b.n	8003ade <_printf_i+0x172>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	f023 0320 	bic.w	r3, r3, #32
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	e7f6      	b.n	8003b02 <_printf_i+0x196>
 8003b14:	4616      	mov	r6, r2
 8003b16:	e7bd      	b.n	8003a94 <_printf_i+0x128>
 8003b18:	6833      	ldr	r3, [r6, #0]
 8003b1a:	6825      	ldr	r5, [r4, #0]
 8003b1c:	6961      	ldr	r1, [r4, #20]
 8003b1e:	1d18      	adds	r0, r3, #4
 8003b20:	6030      	str	r0, [r6, #0]
 8003b22:	062e      	lsls	r6, r5, #24
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	d501      	bpl.n	8003b2c <_printf_i+0x1c0>
 8003b28:	6019      	str	r1, [r3, #0]
 8003b2a:	e002      	b.n	8003b32 <_printf_i+0x1c6>
 8003b2c:	0668      	lsls	r0, r5, #25
 8003b2e:	d5fb      	bpl.n	8003b28 <_printf_i+0x1bc>
 8003b30:	8019      	strh	r1, [r3, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	6123      	str	r3, [r4, #16]
 8003b36:	4616      	mov	r6, r2
 8003b38:	e7bc      	b.n	8003ab4 <_printf_i+0x148>
 8003b3a:	6833      	ldr	r3, [r6, #0]
 8003b3c:	1d1a      	adds	r2, r3, #4
 8003b3e:	6032      	str	r2, [r6, #0]
 8003b40:	681e      	ldr	r6, [r3, #0]
 8003b42:	6862      	ldr	r2, [r4, #4]
 8003b44:	2100      	movs	r1, #0
 8003b46:	4630      	mov	r0, r6
 8003b48:	f7fc fb5a 	bl	8000200 <memchr>
 8003b4c:	b108      	cbz	r0, 8003b52 <_printf_i+0x1e6>
 8003b4e:	1b80      	subs	r0, r0, r6
 8003b50:	6060      	str	r0, [r4, #4]
 8003b52:	6863      	ldr	r3, [r4, #4]
 8003b54:	6123      	str	r3, [r4, #16]
 8003b56:	2300      	movs	r3, #0
 8003b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b5c:	e7aa      	b.n	8003ab4 <_printf_i+0x148>
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	4632      	mov	r2, r6
 8003b62:	4649      	mov	r1, r9
 8003b64:	4640      	mov	r0, r8
 8003b66:	47d0      	blx	sl
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d0ad      	beq.n	8003ac8 <_printf_i+0x15c>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	079b      	lsls	r3, r3, #30
 8003b70:	d413      	bmi.n	8003b9a <_printf_i+0x22e>
 8003b72:	68e0      	ldr	r0, [r4, #12]
 8003b74:	9b03      	ldr	r3, [sp, #12]
 8003b76:	4298      	cmp	r0, r3
 8003b78:	bfb8      	it	lt
 8003b7a:	4618      	movlt	r0, r3
 8003b7c:	e7a6      	b.n	8003acc <_printf_i+0x160>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4632      	mov	r2, r6
 8003b82:	4649      	mov	r1, r9
 8003b84:	4640      	mov	r0, r8
 8003b86:	47d0      	blx	sl
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d09d      	beq.n	8003ac8 <_printf_i+0x15c>
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	9903      	ldr	r1, [sp, #12]
 8003b92:	1a5b      	subs	r3, r3, r1
 8003b94:	42ab      	cmp	r3, r5
 8003b96:	dcf2      	bgt.n	8003b7e <_printf_i+0x212>
 8003b98:	e7eb      	b.n	8003b72 <_printf_i+0x206>
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	f104 0619 	add.w	r6, r4, #25
 8003ba0:	e7f5      	b.n	8003b8e <_printf_i+0x222>
 8003ba2:	bf00      	nop
 8003ba4:	08003e9e 	.word	0x08003e9e
 8003ba8:	08003eaf 	.word	0x08003eaf

08003bac <memmove>:
 8003bac:	4288      	cmp	r0, r1
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	eb01 0402 	add.w	r4, r1, r2
 8003bb4:	d902      	bls.n	8003bbc <memmove+0x10>
 8003bb6:	4284      	cmp	r4, r0
 8003bb8:	4623      	mov	r3, r4
 8003bba:	d807      	bhi.n	8003bcc <memmove+0x20>
 8003bbc:	1e43      	subs	r3, r0, #1
 8003bbe:	42a1      	cmp	r1, r4
 8003bc0:	d008      	beq.n	8003bd4 <memmove+0x28>
 8003bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bca:	e7f8      	b.n	8003bbe <memmove+0x12>
 8003bcc:	4402      	add	r2, r0
 8003bce:	4601      	mov	r1, r0
 8003bd0:	428a      	cmp	r2, r1
 8003bd2:	d100      	bne.n	8003bd6 <memmove+0x2a>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bde:	e7f7      	b.n	8003bd0 <memmove+0x24>

08003be0 <_sbrk_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d06      	ldr	r5, [pc, #24]	@ (8003bfc <_sbrk_r+0x1c>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	f7fc ff5c 	bl	8000aa8 <_sbrk>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_sbrk_r+0x1a>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_sbrk_r+0x1a>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	2000033c 	.word	0x2000033c

08003c00 <_realloc_r>:
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	4680      	mov	r8, r0
 8003c06:	4615      	mov	r5, r2
 8003c08:	460c      	mov	r4, r1
 8003c0a:	b921      	cbnz	r1, 8003c16 <_realloc_r+0x16>
 8003c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	4611      	mov	r1, r2
 8003c12:	f7ff bc59 	b.w	80034c8 <_malloc_r>
 8003c16:	b92a      	cbnz	r2, 8003c24 <_realloc_r+0x24>
 8003c18:	f7ff fbea 	bl	80033f0 <_free_r>
 8003c1c:	2400      	movs	r4, #0
 8003c1e:	4620      	mov	r0, r4
 8003c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c24:	f000 f81a 	bl	8003c5c <_malloc_usable_size_r>
 8003c28:	4285      	cmp	r5, r0
 8003c2a:	4606      	mov	r6, r0
 8003c2c:	d802      	bhi.n	8003c34 <_realloc_r+0x34>
 8003c2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c32:	d8f4      	bhi.n	8003c1e <_realloc_r+0x1e>
 8003c34:	4629      	mov	r1, r5
 8003c36:	4640      	mov	r0, r8
 8003c38:	f7ff fc46 	bl	80034c8 <_malloc_r>
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d0ec      	beq.n	8003c1c <_realloc_r+0x1c>
 8003c42:	42b5      	cmp	r5, r6
 8003c44:	462a      	mov	r2, r5
 8003c46:	4621      	mov	r1, r4
 8003c48:	bf28      	it	cs
 8003c4a:	4632      	movcs	r2, r6
 8003c4c:	f7ff fbc2 	bl	80033d4 <memcpy>
 8003c50:	4621      	mov	r1, r4
 8003c52:	4640      	mov	r0, r8
 8003c54:	f7ff fbcc 	bl	80033f0 <_free_r>
 8003c58:	463c      	mov	r4, r7
 8003c5a:	e7e0      	b.n	8003c1e <_realloc_r+0x1e>

08003c5c <_malloc_usable_size_r>:
 8003c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c60:	1f18      	subs	r0, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bfbc      	itt	lt
 8003c66:	580b      	ldrlt	r3, [r1, r0]
 8003c68:	18c0      	addlt	r0, r0, r3
 8003c6a:	4770      	bx	lr

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
